<?php
/**
 * TimeOffPolicySettingsTransformerRatesInnerTest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace MySdk\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * TimeOffPolicySettingsTransformerRatesInnerTest Class Doc Comment
 *
 * @category    Class
 * @description TimeOffPolicySettingsTransformerRatesInner
 * @package     MySdk
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class TimeOffPolicySettingsTransformerRatesInnerTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "TimeOffPolicySettingsTransformerRatesInner"
     */
    public function testTimeOffPolicySettingsTransformerRatesInner()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "id"
     */
    public function testPropertyId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "time_off_policy_id"
     */
    public function testPropertyTimeOffPolicyId()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "accrual_begins_interval"
     */
    public function testPropertyAccrualBeginsInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "accrual_begins_type"
     */
    public function testPropertyAccrualBeginsType()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "maximum_hours"
     */
    public function testPropertyMaximumHours()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "maximum_carry_over"
     */
    public function testPropertyMaximumCarryOver()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "accrual_hours"
     */
    public function testPropertyAccrualHours()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "accrual_interval"
     */
    public function testPropertyAccrualInterval()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "limit_carry_over"
     */
    public function testPropertyLimitCarryOver()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "preaccrue"
     */
    public function testPropertyPreaccrue()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "modifier"
     */
    public function testPropertyModifier()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "per_hour_worked"
     */
    public function testPropertyPerHourWorked()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "minimum_carry_over"
     */
    public function testPropertyMinimumCarryOver()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
