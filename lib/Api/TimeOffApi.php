<?php
/**
 * TimeOffApi
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use MySdk\ApiException;
use MySdk\Configuration;
use MySdk\FormDataProcessor;
use MySdk\HeaderSelector;
use MySdk\ObjectSerializer;

/**
 * TimeOffApi Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TimeOffApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'estimateFutureTimeOffBalances' => [
            'application/json',
        ],
        'getAListOfWhosOut' => [
            'application/json',
        ],
        'getTimeOffPolicies' => [
            'application/json',
        ],
        'getTimeOffTypes' => [
            'application/json',
        ],
        'timeOffAddATimeOffHistoryItemForTimeOffRequest' => [
            'application/json',
        ],
        'timeOffAddATimeOffRequest' => [
            'application/json',
        ],
        'timeOffAdjustTimeOffBalance' => [
            'application/json',
        ],
        'timeOffAssignTimeOffPoliciesForAnEmployee' => [
            'application/json',
        ],
        'timeOffChangeARequestStatus' => [
            'application/json',
        ],
        'timeOffGetTimeOffRequests' => [
            'application/json',
        ],
        'timeOffListTimeOffPoliciesForEmployee' => [
            'application/json',
        ],
        'timeOffV11AssignTimeOffPoliciesForAnEmployee' => [
            'application/json',
        ],
        'timeOffV11ListTimeOffPoliciesForEmployee' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation estimateFutureTimeOffBalances
     *
     * Estimate Future Time Off Balances
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $end end (required)
     * @param  string $employee_id employee_id (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateFutureTimeOffBalances'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function estimateFutureTimeOffBalances($company_domain, $end, $employee_id, $accept_header_parameter = null, string $contentType = self::contentTypes['estimateFutureTimeOffBalances'][0])
    {
        $this->estimateFutureTimeOffBalancesWithHttpInfo($company_domain, $end, $employee_id, $accept_header_parameter, $contentType);
    }

    /**
     * Operation estimateFutureTimeOffBalancesWithHttpInfo
     *
     * Estimate Future Time Off Balances
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $end (required)
     * @param  string $employee_id (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateFutureTimeOffBalances'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateFutureTimeOffBalancesWithHttpInfo($company_domain, $end, $employee_id, $accept_header_parameter = null, string $contentType = self::contentTypes['estimateFutureTimeOffBalances'][0])
    {
        $request = $this->estimateFutureTimeOffBalancesRequest($company_domain, $end, $employee_id, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation estimateFutureTimeOffBalancesAsync
     *
     * Estimate Future Time Off Balances
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $end (required)
     * @param  string $employee_id (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateFutureTimeOffBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateFutureTimeOffBalancesAsync($company_domain, $end, $employee_id, $accept_header_parameter = null, string $contentType = self::contentTypes['estimateFutureTimeOffBalances'][0])
    {
        return $this->estimateFutureTimeOffBalancesAsyncWithHttpInfo($company_domain, $end, $employee_id, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation estimateFutureTimeOffBalancesAsyncWithHttpInfo
     *
     * Estimate Future Time Off Balances
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $end (required)
     * @param  string $employee_id (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateFutureTimeOffBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateFutureTimeOffBalancesAsyncWithHttpInfo($company_domain, $end, $employee_id, $accept_header_parameter = null, string $contentType = self::contentTypes['estimateFutureTimeOffBalances'][0])
    {
        $returnType = '';
        $request = $this->estimateFutureTimeOffBalancesRequest($company_domain, $end, $employee_id, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'estimateFutureTimeOffBalances'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $end (required)
     * @param  string $employee_id (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateFutureTimeOffBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function estimateFutureTimeOffBalancesRequest($company_domain, $end, $employee_id, $accept_header_parameter = null, string $contentType = self::contentTypes['estimateFutureTimeOffBalances'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling estimateFutureTimeOffBalances'
            );
        }

        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling estimateFutureTimeOffBalances'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling estimateFutureTimeOffBalances'
            );
        }



        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/calculator';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end,
            'end', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAListOfWhosOut
     *
     * Get a list of Who&#39;s Out
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $start A date in the form YYYY-MM-DD - defaults to the current date. (optional)
     * @param  string|null $end A date in the form YYYY-MM-DD - defaults to 14 days from the start date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfWhosOut'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAListOfWhosOut($company_domain, $accept_header_parameter = null, $start = null, $end = null, string $contentType = self::contentTypes['getAListOfWhosOut'][0])
    {
        $this->getAListOfWhosOutWithHttpInfo($company_domain, $accept_header_parameter, $start, $end, $contentType);
    }

    /**
     * Operation getAListOfWhosOutWithHttpInfo
     *
     * Get a list of Who&#39;s Out
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $start A date in the form YYYY-MM-DD - defaults to the current date. (optional)
     * @param  string|null $end A date in the form YYYY-MM-DD - defaults to 14 days from the start date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfWhosOut'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAListOfWhosOutWithHttpInfo($company_domain, $accept_header_parameter = null, $start = null, $end = null, string $contentType = self::contentTypes['getAListOfWhosOut'][0])
    {
        $request = $this->getAListOfWhosOutRequest($company_domain, $accept_header_parameter, $start, $end, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAListOfWhosOutAsync
     *
     * Get a list of Who&#39;s Out
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $start A date in the form YYYY-MM-DD - defaults to the current date. (optional)
     * @param  string|null $end A date in the form YYYY-MM-DD - defaults to 14 days from the start date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfWhosOut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfWhosOutAsync($company_domain, $accept_header_parameter = null, $start = null, $end = null, string $contentType = self::contentTypes['getAListOfWhosOut'][0])
    {
        return $this->getAListOfWhosOutAsyncWithHttpInfo($company_domain, $accept_header_parameter, $start, $end, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAListOfWhosOutAsyncWithHttpInfo
     *
     * Get a list of Who&#39;s Out
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $start A date in the form YYYY-MM-DD - defaults to the current date. (optional)
     * @param  string|null $end A date in the form YYYY-MM-DD - defaults to 14 days from the start date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfWhosOut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfWhosOutAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, $start = null, $end = null, string $contentType = self::contentTypes['getAListOfWhosOut'][0])
    {
        $returnType = '';
        $request = $this->getAListOfWhosOutRequest($company_domain, $accept_header_parameter, $start, $end, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAListOfWhosOut'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $start A date in the form YYYY-MM-DD - defaults to the current date. (optional)
     * @param  string|null $end A date in the form YYYY-MM-DD - defaults to 14 days from the start date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfWhosOut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAListOfWhosOutRequest($company_domain, $accept_header_parameter = null, $start = null, $end = null, string $contentType = self::contentTypes['getAListOfWhosOut'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getAListOfWhosOut'
            );
        }





        $resourcePath = '/{companyDomain}/v1/time_off/whos_out';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end,
            'end', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTimeOffPolicies
     *
     * Get Time Off Policies
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffPolicies'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getTimeOffPolicies($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getTimeOffPolicies'][0])
    {
        $this->getTimeOffPoliciesWithHttpInfo($company_domain, $accept_header_parameter, $contentType);
    }

    /**
     * Operation getTimeOffPoliciesWithHttpInfo
     *
     * Get Time Off Policies
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffPolicies'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimeOffPoliciesWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getTimeOffPolicies'][0])
    {
        $request = $this->getTimeOffPoliciesRequest($company_domain, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTimeOffPoliciesAsync
     *
     * Get Time Off Policies
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeOffPoliciesAsync($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getTimeOffPolicies'][0])
    {
        return $this->getTimeOffPoliciesAsyncWithHttpInfo($company_domain, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTimeOffPoliciesAsyncWithHttpInfo
     *
     * Get Time Off Policies
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeOffPoliciesAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getTimeOffPolicies'][0])
    {
        $returnType = '';
        $request = $this->getTimeOffPoliciesRequest($company_domain, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTimeOffPolicies'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTimeOffPoliciesRequest($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getTimeOffPolicies'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getTimeOffPolicies'
            );
        }



        $resourcePath = '/{companyDomain}/v1/meta/time_off/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTimeOffTypes
     *
     * Get Time Off Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $mode set to \\&#39;request\\&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\\&#39;t have permission to view balances and requests for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffTypes'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getTimeOffTypes($company_domain, $accept_header_parameter = null, $mode = null, string $contentType = self::contentTypes['getTimeOffTypes'][0])
    {
        $this->getTimeOffTypesWithHttpInfo($company_domain, $accept_header_parameter, $mode, $contentType);
    }

    /**
     * Operation getTimeOffTypesWithHttpInfo
     *
     * Get Time Off Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $mode set to \\&#39;request\\&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\\&#39;t have permission to view balances and requests for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffTypes'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimeOffTypesWithHttpInfo($company_domain, $accept_header_parameter = null, $mode = null, string $contentType = self::contentTypes['getTimeOffTypes'][0])
    {
        $request = $this->getTimeOffTypesRequest($company_domain, $accept_header_parameter, $mode, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTimeOffTypesAsync
     *
     * Get Time Off Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $mode set to \\&#39;request\\&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\\&#39;t have permission to view balances and requests for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeOffTypesAsync($company_domain, $accept_header_parameter = null, $mode = null, string $contentType = self::contentTypes['getTimeOffTypes'][0])
    {
        return $this->getTimeOffTypesAsyncWithHttpInfo($company_domain, $accept_header_parameter, $mode, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTimeOffTypesAsyncWithHttpInfo
     *
     * Get Time Off Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $mode set to \\&#39;request\\&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\\&#39;t have permission to view balances and requests for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeOffTypesAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, $mode = null, string $contentType = self::contentTypes['getTimeOffTypes'][0])
    {
        $returnType = '';
        $request = $this->getTimeOffTypesRequest($company_domain, $accept_header_parameter, $mode, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTimeOffTypes'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $mode set to \\&#39;request\\&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\\&#39;t have permission to view balances and requests for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTimeOffTypesRequest($company_domain, $accept_header_parameter = null, $mode = null, string $contentType = self::contentTypes['getTimeOffTypes'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getTimeOffTypes'
            );
        }




        $resourcePath = '/{companyDomain}/v1/meta/time_off/types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mode,
            'mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffAddATimeOffHistoryItemForTimeOffRequest
     *
     * Add a Time Off History Item For Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\TimeOffHistory $time_off_history time_off_history (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffAddATimeOffHistoryItemForTimeOffRequest($company_domain, $employee_id, $time_off_history, string $contentType = self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'][0])
    {
        $this->timeOffAddATimeOffHistoryItemForTimeOffRequestWithHttpInfo($company_domain, $employee_id, $time_off_history, $contentType);
    }

    /**
     * Operation timeOffAddATimeOffHistoryItemForTimeOffRequestWithHttpInfo
     *
     * Add a Time Off History Item For Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\TimeOffHistory $time_off_history (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffAddATimeOffHistoryItemForTimeOffRequestWithHttpInfo($company_domain, $employee_id, $time_off_history, string $contentType = self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'][0])
    {
        $request = $this->timeOffAddATimeOffHistoryItemForTimeOffRequestRequest($company_domain, $employee_id, $time_off_history, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffAddATimeOffHistoryItemForTimeOffRequestAsync
     *
     * Add a Time Off History Item For Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\TimeOffHistory $time_off_history (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAddATimeOffHistoryItemForTimeOffRequestAsync($company_domain, $employee_id, $time_off_history, string $contentType = self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'][0])
    {
        return $this->timeOffAddATimeOffHistoryItemForTimeOffRequestAsyncWithHttpInfo($company_domain, $employee_id, $time_off_history, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffAddATimeOffHistoryItemForTimeOffRequestAsyncWithHttpInfo
     *
     * Add a Time Off History Item For Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\TimeOffHistory $time_off_history (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAddATimeOffHistoryItemForTimeOffRequestAsyncWithHttpInfo($company_domain, $employee_id, $time_off_history, string $contentType = self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'][0])
    {
        $returnType = '';
        $request = $this->timeOffAddATimeOffHistoryItemForTimeOffRequestRequest($company_domain, $employee_id, $time_off_history, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffAddATimeOffHistoryItemForTimeOffRequest'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\TimeOffHistory $time_off_history (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffAddATimeOffHistoryItemForTimeOffRequestRequest($company_domain, $employee_id, $time_off_history, string $contentType = self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffAddATimeOffHistoryItemForTimeOffRequest'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffAddATimeOffHistoryItemForTimeOffRequest'
            );
        }

        // verify the required parameter 'time_off_history' is set
        if ($time_off_history === null || (is_array($time_off_history) && count($time_off_history) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_off_history when calling timeOffAddATimeOffHistoryItemForTimeOffRequest'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($time_off_history)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($time_off_history));
            } else {
                $httpBody = $time_off_history;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffAddATimeOffRequest
     *
     * Add a Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employee_id (required)
     * @param  \MySdk\Model\TimeOffRequest $time_off_request time_off_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffRequest'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffAddATimeOffRequest($company_domain, $employee_id, $time_off_request, string $contentType = self::contentTypes['timeOffAddATimeOffRequest'][0])
    {
        $this->timeOffAddATimeOffRequestWithHttpInfo($company_domain, $employee_id, $time_off_request, $contentType);
    }

    /**
     * Operation timeOffAddATimeOffRequestWithHttpInfo
     *
     * Add a Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  \MySdk\Model\TimeOffRequest $time_off_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffRequest'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffAddATimeOffRequestWithHttpInfo($company_domain, $employee_id, $time_off_request, string $contentType = self::contentTypes['timeOffAddATimeOffRequest'][0])
    {
        $request = $this->timeOffAddATimeOffRequestRequest($company_domain, $employee_id, $time_off_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffAddATimeOffRequestAsync
     *
     * Add a Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  \MySdk\Model\TimeOffRequest $time_off_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAddATimeOffRequestAsync($company_domain, $employee_id, $time_off_request, string $contentType = self::contentTypes['timeOffAddATimeOffRequest'][0])
    {
        return $this->timeOffAddATimeOffRequestAsyncWithHttpInfo($company_domain, $employee_id, $time_off_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffAddATimeOffRequestAsyncWithHttpInfo
     *
     * Add a Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  \MySdk\Model\TimeOffRequest $time_off_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAddATimeOffRequestAsyncWithHttpInfo($company_domain, $employee_id, $time_off_request, string $contentType = self::contentTypes['timeOffAddATimeOffRequest'][0])
    {
        $returnType = '';
        $request = $this->timeOffAddATimeOffRequestRequest($company_domain, $employee_id, $time_off_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffAddATimeOffRequest'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  \MySdk\Model\TimeOffRequest $time_off_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffAddATimeOffRequestRequest($company_domain, $employee_id, $time_off_request, string $contentType = self::contentTypes['timeOffAddATimeOffRequest'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffAddATimeOffRequest'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffAddATimeOffRequest'
            );
        }

        // verify the required parameter 'time_off_request' is set
        if ($time_off_request === null || (is_array($time_off_request) && count($time_off_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_off_request when calling timeOffAddATimeOffRequest'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($time_off_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($time_off_request));
            } else {
                $httpBody = $time_off_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffAdjustTimeOffBalance
     *
     * Adjust Time Off Balance
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\AdjustTimeOffBalance $adjust_time_off_balance adjust_time_off_balance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAdjustTimeOffBalance'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffAdjustTimeOffBalance($company_domain, $employee_id, $adjust_time_off_balance, string $contentType = self::contentTypes['timeOffAdjustTimeOffBalance'][0])
    {
        $this->timeOffAdjustTimeOffBalanceWithHttpInfo($company_domain, $employee_id, $adjust_time_off_balance, $contentType);
    }

    /**
     * Operation timeOffAdjustTimeOffBalanceWithHttpInfo
     *
     * Adjust Time Off Balance
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\AdjustTimeOffBalance $adjust_time_off_balance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAdjustTimeOffBalance'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffAdjustTimeOffBalanceWithHttpInfo($company_domain, $employee_id, $adjust_time_off_balance, string $contentType = self::contentTypes['timeOffAdjustTimeOffBalance'][0])
    {
        $request = $this->timeOffAdjustTimeOffBalanceRequest($company_domain, $employee_id, $adjust_time_off_balance, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffAdjustTimeOffBalanceAsync
     *
     * Adjust Time Off Balance
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\AdjustTimeOffBalance $adjust_time_off_balance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAdjustTimeOffBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAdjustTimeOffBalanceAsync($company_domain, $employee_id, $adjust_time_off_balance, string $contentType = self::contentTypes['timeOffAdjustTimeOffBalance'][0])
    {
        return $this->timeOffAdjustTimeOffBalanceAsyncWithHttpInfo($company_domain, $employee_id, $adjust_time_off_balance, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffAdjustTimeOffBalanceAsyncWithHttpInfo
     *
     * Adjust Time Off Balance
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\AdjustTimeOffBalance $adjust_time_off_balance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAdjustTimeOffBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAdjustTimeOffBalanceAsyncWithHttpInfo($company_domain, $employee_id, $adjust_time_off_balance, string $contentType = self::contentTypes['timeOffAdjustTimeOffBalance'][0])
    {
        $returnType = '';
        $request = $this->timeOffAdjustTimeOffBalanceRequest($company_domain, $employee_id, $adjust_time_off_balance, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffAdjustTimeOffBalance'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\AdjustTimeOffBalance $adjust_time_off_balance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAdjustTimeOffBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffAdjustTimeOffBalanceRequest($company_domain, $employee_id, $adjust_time_off_balance, string $contentType = self::contentTypes['timeOffAdjustTimeOffBalance'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffAdjustTimeOffBalance'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffAdjustTimeOffBalance'
            );
        }

        // verify the required parameter 'adjust_time_off_balance' is set
        if ($adjust_time_off_balance === null || (is_array($adjust_time_off_balance) && count($adjust_time_off_balance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adjust_time_off_balance when calling timeOffAdjustTimeOffBalance'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/balance_adjustment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($adjust_time_off_balance)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($adjust_time_off_balance));
            } else {
                $httpBody = $adjust_time_off_balance;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffAssignTimeOffPoliciesForAnEmployee
     *
     * Assign Time Off Policies for an Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employee_id (required)
     * @param  object[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffAssignTimeOffPoliciesForAnEmployee($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'][0])
    {
        $this->timeOffAssignTimeOffPoliciesForAnEmployeeWithHttpInfo($company_domain, $employee_id, $request_body, $contentType);
    }

    /**
     * Operation timeOffAssignTimeOffPoliciesForAnEmployeeWithHttpInfo
     *
     * Assign Time Off Policies for an Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffAssignTimeOffPoliciesForAnEmployeeWithHttpInfo($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'][0])
    {
        $request = $this->timeOffAssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffAssignTimeOffPoliciesForAnEmployeeAsync
     *
     * Assign Time Off Policies for an Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAssignTimeOffPoliciesForAnEmployeeAsync($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'][0])
    {
        return $this->timeOffAssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffAssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo
     *
     * Assign Time Off Policies for an Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'][0])
    {
        $returnType = '';
        $request = $this->timeOffAssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffAssignTimeOffPoliciesForAnEmployee'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffAssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffAssignTimeOffPoliciesForAnEmployee'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffAssignTimeOffPoliciesForAnEmployee'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling timeOffAssignTimeOffPoliciesForAnEmployee'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffChangeARequestStatus
     *
     * Change a Request Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $request_id request_id (required)
     * @param  \MySdk\Model\Request $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffChangeARequestStatus'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffChangeARequestStatus($company_domain, $request_id, $request, string $contentType = self::contentTypes['timeOffChangeARequestStatus'][0])
    {
        $this->timeOffChangeARequestStatusWithHttpInfo($company_domain, $request_id, $request, $contentType);
    }

    /**
     * Operation timeOffChangeARequestStatusWithHttpInfo
     *
     * Change a Request Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $request_id (required)
     * @param  \MySdk\Model\Request $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffChangeARequestStatus'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffChangeARequestStatusWithHttpInfo($company_domain, $request_id, $request, string $contentType = self::contentTypes['timeOffChangeARequestStatus'][0])
    {
        $request = $this->timeOffChangeARequestStatusRequest($company_domain, $request_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffChangeARequestStatusAsync
     *
     * Change a Request Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $request_id (required)
     * @param  \MySdk\Model\Request $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffChangeARequestStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffChangeARequestStatusAsync($company_domain, $request_id, $request, string $contentType = self::contentTypes['timeOffChangeARequestStatus'][0])
    {
        return $this->timeOffChangeARequestStatusAsyncWithHttpInfo($company_domain, $request_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffChangeARequestStatusAsyncWithHttpInfo
     *
     * Change a Request Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $request_id (required)
     * @param  \MySdk\Model\Request $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffChangeARequestStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffChangeARequestStatusAsyncWithHttpInfo($company_domain, $request_id, $request, string $contentType = self::contentTypes['timeOffChangeARequestStatus'][0])
    {
        $returnType = '';
        $request = $this->timeOffChangeARequestStatusRequest($company_domain, $request_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffChangeARequestStatus'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $request_id (required)
     * @param  \MySdk\Model\Request $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffChangeARequestStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffChangeARequestStatusRequest($company_domain, $request_id, $request, string $contentType = self::contentTypes['timeOffChangeARequestStatus'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffChangeARequestStatus'
            );
        }

        // verify the required parameter 'request_id' is set
        if ($request_id === null || (is_array($request_id) && count($request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_id when calling timeOffChangeARequestStatus'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling timeOffChangeARequestStatus'
            );
        }


        $resourcePath = '/{companyDomain}/v1/time_off/requests/{requestId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'requestId' . '}',
                ObjectSerializer::toPathValue($request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffGetTimeOffRequests
     *
     * Get Time Off Requests
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $start YYYY-MM-DD. Only show time off that occurs on/after the specified start date. (required)
     * @param  string $end YYYY-MM-DD. Only show time off that occurs on/before the specified end date. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  int|null $id A particular request ID to limit the response to. (optional)
     * @param  string|null $action Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view. (optional)
     * @param  string|null $employee_id A particular employee ID to limit the response to. (optional)
     * @param  string|null $type A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included. (optional)
     * @param  string|null $status A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffGetTimeOffRequests'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffGetTimeOffRequests($company_domain, $start, $end, $accept_header_parameter = null, $id = null, $action = null, $employee_id = null, $type = null, $status = null, string $contentType = self::contentTypes['timeOffGetTimeOffRequests'][0])
    {
        $this->timeOffGetTimeOffRequestsWithHttpInfo($company_domain, $start, $end, $accept_header_parameter, $id, $action, $employee_id, $type, $status, $contentType);
    }

    /**
     * Operation timeOffGetTimeOffRequestsWithHttpInfo
     *
     * Get Time Off Requests
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $start YYYY-MM-DD. Only show time off that occurs on/after the specified start date. (required)
     * @param  string $end YYYY-MM-DD. Only show time off that occurs on/before the specified end date. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  int|null $id A particular request ID to limit the response to. (optional)
     * @param  string|null $action Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view. (optional)
     * @param  string|null $employee_id A particular employee ID to limit the response to. (optional)
     * @param  string|null $type A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included. (optional)
     * @param  string|null $status A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffGetTimeOffRequests'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffGetTimeOffRequestsWithHttpInfo($company_domain, $start, $end, $accept_header_parameter = null, $id = null, $action = null, $employee_id = null, $type = null, $status = null, string $contentType = self::contentTypes['timeOffGetTimeOffRequests'][0])
    {
        $request = $this->timeOffGetTimeOffRequestsRequest($company_domain, $start, $end, $accept_header_parameter, $id, $action, $employee_id, $type, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffGetTimeOffRequestsAsync
     *
     * Get Time Off Requests
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $start YYYY-MM-DD. Only show time off that occurs on/after the specified start date. (required)
     * @param  string $end YYYY-MM-DD. Only show time off that occurs on/before the specified end date. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  int|null $id A particular request ID to limit the response to. (optional)
     * @param  string|null $action Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view. (optional)
     * @param  string|null $employee_id A particular employee ID to limit the response to. (optional)
     * @param  string|null $type A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included. (optional)
     * @param  string|null $status A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffGetTimeOffRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffGetTimeOffRequestsAsync($company_domain, $start, $end, $accept_header_parameter = null, $id = null, $action = null, $employee_id = null, $type = null, $status = null, string $contentType = self::contentTypes['timeOffGetTimeOffRequests'][0])
    {
        return $this->timeOffGetTimeOffRequestsAsyncWithHttpInfo($company_domain, $start, $end, $accept_header_parameter, $id, $action, $employee_id, $type, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffGetTimeOffRequestsAsyncWithHttpInfo
     *
     * Get Time Off Requests
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $start YYYY-MM-DD. Only show time off that occurs on/after the specified start date. (required)
     * @param  string $end YYYY-MM-DD. Only show time off that occurs on/before the specified end date. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  int|null $id A particular request ID to limit the response to. (optional)
     * @param  string|null $action Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view. (optional)
     * @param  string|null $employee_id A particular employee ID to limit the response to. (optional)
     * @param  string|null $type A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included. (optional)
     * @param  string|null $status A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffGetTimeOffRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffGetTimeOffRequestsAsyncWithHttpInfo($company_domain, $start, $end, $accept_header_parameter = null, $id = null, $action = null, $employee_id = null, $type = null, $status = null, string $contentType = self::contentTypes['timeOffGetTimeOffRequests'][0])
    {
        $returnType = '';
        $request = $this->timeOffGetTimeOffRequestsRequest($company_domain, $start, $end, $accept_header_parameter, $id, $action, $employee_id, $type, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffGetTimeOffRequests'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $start YYYY-MM-DD. Only show time off that occurs on/after the specified start date. (required)
     * @param  string $end YYYY-MM-DD. Only show time off that occurs on/before the specified end date. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  int|null $id A particular request ID to limit the response to. (optional)
     * @param  string|null $action Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view. (optional)
     * @param  string|null $employee_id A particular employee ID to limit the response to. (optional)
     * @param  string|null $type A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included. (optional)
     * @param  string|null $status A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffGetTimeOffRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffGetTimeOffRequestsRequest($company_domain, $start, $end, $accept_header_parameter = null, $id = null, $action = null, $employee_id = null, $type = null, $status = null, string $contentType = self::contentTypes['timeOffGetTimeOffRequests'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffGetTimeOffRequests'
            );
        }

        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling timeOffGetTimeOffRequests'
            );
        }

        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling timeOffGetTimeOffRequests'
            );
        }








        $resourcePath = '/{companyDomain}/v1/time_off/requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $action,
            'action', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employee_id,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end,
            'end', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffListTimeOffPoliciesForEmployee
     *
     * List Time Off Policies for Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffListTimeOffPoliciesForEmployee($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffListTimeOffPoliciesForEmployee'][0])
    {
        $this->timeOffListTimeOffPoliciesForEmployeeWithHttpInfo($company_domain, $employee_id, $contentType);
    }

    /**
     * Operation timeOffListTimeOffPoliciesForEmployeeWithHttpInfo
     *
     * List Time Off Policies for Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffListTimeOffPoliciesForEmployeeWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffListTimeOffPoliciesForEmployee'][0])
    {
        $request = $this->timeOffListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffListTimeOffPoliciesForEmployeeAsync
     *
     * List Time Off Policies for Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffListTimeOffPoliciesForEmployeeAsync($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffListTimeOffPoliciesForEmployee'][0])
    {
        return $this->timeOffListTimeOffPoliciesForEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffListTimeOffPoliciesForEmployeeAsyncWithHttpInfo
     *
     * List Time Off Policies for Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffListTimeOffPoliciesForEmployeeAsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffListTimeOffPoliciesForEmployee'][0])
    {
        $returnType = '';
        $request = $this->timeOffListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffListTimeOffPoliciesForEmployee'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffListTimeOffPoliciesForEmployee'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffListTimeOffPoliciesForEmployee'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffListTimeOffPoliciesForEmployee'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffV11AssignTimeOffPoliciesForAnEmployee
     *
     * Assign Time Off Policies for an Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employee_id (required)
     * @param  object[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffV11AssignTimeOffPoliciesForAnEmployee($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'][0])
    {
        $this->timeOffV11AssignTimeOffPoliciesForAnEmployeeWithHttpInfo($company_domain, $employee_id, $request_body, $contentType);
    }

    /**
     * Operation timeOffV11AssignTimeOffPoliciesForAnEmployeeWithHttpInfo
     *
     * Assign Time Off Policies for an Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffV11AssignTimeOffPoliciesForAnEmployeeWithHttpInfo($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'][0])
    {
        $request = $this->timeOffV11AssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffV11AssignTimeOffPoliciesForAnEmployeeAsync
     *
     * Assign Time Off Policies for an Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffV11AssignTimeOffPoliciesForAnEmployeeAsync($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'][0])
    {
        return $this->timeOffV11AssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffV11AssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo
     *
     * Assign Time Off Policies for an Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffV11AssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'][0])
    {
        $returnType = '';
        $request = $this->timeOffV11AssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffV11AssignTimeOffPoliciesForAnEmployee'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffV11AssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffV11AssignTimeOffPoliciesForAnEmployee'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffV11AssignTimeOffPoliciesForAnEmployee'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling timeOffV11AssignTimeOffPoliciesForAnEmployee'
            );
        }


        $resourcePath = '/{companyDomain}/v1_1/employees/{employeeId}/time_off/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffV11ListTimeOffPoliciesForEmployee
     *
     * List Time Off Policies for Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffV11ListTimeOffPoliciesForEmployee($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'][0])
    {
        $this->timeOffV11ListTimeOffPoliciesForEmployeeWithHttpInfo($company_domain, $employee_id, $contentType);
    }

    /**
     * Operation timeOffV11ListTimeOffPoliciesForEmployeeWithHttpInfo
     *
     * List Time Off Policies for Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffV11ListTimeOffPoliciesForEmployeeWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'][0])
    {
        $request = $this->timeOffV11ListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffV11ListTimeOffPoliciesForEmployeeAsync
     *
     * List Time Off Policies for Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffV11ListTimeOffPoliciesForEmployeeAsync($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'][0])
    {
        return $this->timeOffV11ListTimeOffPoliciesForEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffV11ListTimeOffPoliciesForEmployeeAsyncWithHttpInfo
     *
     * List Time Off Policies for Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffV11ListTimeOffPoliciesForEmployeeAsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'][0])
    {
        $returnType = '';
        $request = $this->timeOffV11ListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffV11ListTimeOffPoliciesForEmployee'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffV11ListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffV11ListTimeOffPoliciesForEmployee'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffV11ListTimeOffPoliciesForEmployee'
            );
        }


        $resourcePath = '/{companyDomain}/v1_1/employees/{employeeId}/time_off/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
