<?php
/**
 * TrainingApi
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use MySdk\ApiException;
use MySdk\Configuration;
use MySdk\FormDataProcessor;
use MySdk\HeaderSelector;
use MySdk\ObjectSerializer;

/**
 * TrainingApi Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrainingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addNewEmployeeTrainingRecord' => [
            'application/json',
        ],
        'addTrainingCategory' => [
            'application/json',
        ],
        'addTrainingType' => [
            'application/json',
        ],
        'deleteEmployeeTrainingRecord' => [
            'application/json',
        ],
        'deleteTrainingCategory' => [
            'application/json',
        ],
        'deleteTrainingType' => [
            'application/json',
        ],
        'listEmployeeTrainings' => [
            'application/json',
        ],
        'listTrainingCategories' => [
            'application/json',
        ],
        'listTrainingTypes' => [
            'application/json',
        ],
        'updateEmployeeTrainingRecord' => [
            'application/json',
        ],
        'updateTrainingCategory' => [
            'application/json',
        ],
        'updateTrainingType' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addNewEmployeeTrainingRecord
     *
     * Add New Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to add a training record to. (required)
     * @param  \MySdk\Model\AddNewEmployeeTrainingRecordRequest $add_new_employee_training_record_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingRecord
     */
    public function addNewEmployeeTrainingRecord($company_domain, $employee_id, $add_new_employee_training_record_request, string $contentType = self::contentTypes['addNewEmployeeTrainingRecord'][0])
    {
        list($response) = $this->addNewEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_id, $add_new_employee_training_record_request, $contentType);
        return $response;
    }

    /**
     * Operation addNewEmployeeTrainingRecordWithHttpInfo
     *
     * Add New Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to add a training record to. (required)
     * @param  \MySdk\Model\AddNewEmployeeTrainingRecordRequest $add_new_employee_training_record_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingRecord, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_id, $add_new_employee_training_record_request, string $contentType = self::contentTypes['addNewEmployeeTrainingRecord'][0])
    {
        $request = $this->addNewEmployeeTrainingRecordRequest($company_domain, $employee_id, $add_new_employee_training_record_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingRecord',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingRecord',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingRecord',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addNewEmployeeTrainingRecordAsync
     *
     * Add New Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to add a training record to. (required)
     * @param  \MySdk\Model\AddNewEmployeeTrainingRecordRequest $add_new_employee_training_record_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewEmployeeTrainingRecordAsync($company_domain, $employee_id, $add_new_employee_training_record_request, string $contentType = self::contentTypes['addNewEmployeeTrainingRecord'][0])
    {
        return $this->addNewEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_id, $add_new_employee_training_record_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewEmployeeTrainingRecordAsyncWithHttpInfo
     *
     * Add New Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to add a training record to. (required)
     * @param  \MySdk\Model\AddNewEmployeeTrainingRecordRequest $add_new_employee_training_record_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_id, $add_new_employee_training_record_request, string $contentType = self::contentTypes['addNewEmployeeTrainingRecord'][0])
    {
        $returnType = '\MySdk\Model\TrainingRecord';
        $request = $this->addNewEmployeeTrainingRecordRequest($company_domain, $employee_id, $add_new_employee_training_record_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNewEmployeeTrainingRecord'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to add a training record to. (required)
     * @param  \MySdk\Model\AddNewEmployeeTrainingRecordRequest $add_new_employee_training_record_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewEmployeeTrainingRecordRequest($company_domain, $employee_id, $add_new_employee_training_record_request, string $contentType = self::contentTypes['addNewEmployeeTrainingRecord'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addNewEmployeeTrainingRecord'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling addNewEmployeeTrainingRecord'
            );
        }

        // verify the required parameter 'add_new_employee_training_record_request' is set
        if ($add_new_employee_training_record_request === null || (is_array($add_new_employee_training_record_request) && count($add_new_employee_training_record_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_new_employee_training_record_request when calling addNewEmployeeTrainingRecord'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/record/employee/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_new_employee_training_record_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_new_employee_training_record_request));
            } else {
                $httpBody = $add_new_employee_training_record_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addTrainingCategory
     *
     * Add Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingCategoryRequest $add_training_category_request Training category to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingCategory
     */
    public function addTrainingCategory($company_domain, $add_training_category_request, string $contentType = self::contentTypes['addTrainingCategory'][0])
    {
        list($response) = $this->addTrainingCategoryWithHttpInfo($company_domain, $add_training_category_request, $contentType);
        return $response;
    }

    /**
     * Operation addTrainingCategoryWithHttpInfo
     *
     * Add Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingCategoryRequest $add_training_category_request Training category to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTrainingCategoryWithHttpInfo($company_domain, $add_training_category_request, string $contentType = self::contentTypes['addTrainingCategory'][0])
    {
        $request = $this->addTrainingCategoryRequest($company_domain, $add_training_category_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingCategory',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingCategory',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingCategory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addTrainingCategoryAsync
     *
     * Add Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingCategoryRequest $add_training_category_request Training category to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTrainingCategoryAsync($company_domain, $add_training_category_request, string $contentType = self::contentTypes['addTrainingCategory'][0])
    {
        return $this->addTrainingCategoryAsyncWithHttpInfo($company_domain, $add_training_category_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTrainingCategoryAsyncWithHttpInfo
     *
     * Add Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingCategoryRequest $add_training_category_request Training category to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTrainingCategoryAsyncWithHttpInfo($company_domain, $add_training_category_request, string $contentType = self::contentTypes['addTrainingCategory'][0])
    {
        $returnType = '\MySdk\Model\TrainingCategory';
        $request = $this->addTrainingCategoryRequest($company_domain, $add_training_category_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTrainingCategory'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingCategoryRequest $add_training_category_request Training category to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addTrainingCategoryRequest($company_domain, $add_training_category_request, string $contentType = self::contentTypes['addTrainingCategory'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addTrainingCategory'
            );
        }

        // verify the required parameter 'add_training_category_request' is set
        if ($add_training_category_request === null || (is_array($add_training_category_request) && count($add_training_category_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_training_category_request when calling addTrainingCategory'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_training_category_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_training_category_request));
            } else {
                $httpBody = $add_training_category_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addTrainingType
     *
     * Add Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingTypeRequest $add_training_type_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingType
     */
    public function addTrainingType($company_domain, $add_training_type_request, string $contentType = self::contentTypes['addTrainingType'][0])
    {
        list($response) = $this->addTrainingTypeWithHttpInfo($company_domain, $add_training_type_request, $contentType);
        return $response;
    }

    /**
     * Operation addTrainingTypeWithHttpInfo
     *
     * Add Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingTypeRequest $add_training_type_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingType, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTrainingTypeWithHttpInfo($company_domain, $add_training_type_request, string $contentType = self::contentTypes['addTrainingType'][0])
    {
        $request = $this->addTrainingTypeRequest($company_domain, $add_training_type_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingType',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingType',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addTrainingTypeAsync
     *
     * Add Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingTypeRequest $add_training_type_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTrainingTypeAsync($company_domain, $add_training_type_request, string $contentType = self::contentTypes['addTrainingType'][0])
    {
        return $this->addTrainingTypeAsyncWithHttpInfo($company_domain, $add_training_type_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTrainingTypeAsyncWithHttpInfo
     *
     * Add Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingTypeRequest $add_training_type_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTrainingTypeAsyncWithHttpInfo($company_domain, $add_training_type_request, string $contentType = self::contentTypes['addTrainingType'][0])
    {
        $returnType = '\MySdk\Model\TrainingType';
        $request = $this->addTrainingTypeRequest($company_domain, $add_training_type_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTrainingType'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingTypeRequest $add_training_type_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addTrainingTypeRequest($company_domain, $add_training_type_request, string $contentType = self::contentTypes['addTrainingType'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addTrainingType'
            );
        }

        // verify the required parameter 'add_training_type_request' is set
        if ($add_training_type_request === null || (is_array($add_training_type_request) && count($add_training_type_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_training_type_request when calling addTrainingType'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_training_type_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_training_type_request));
            } else {
                $httpBody = $add_training_type_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmployeeTrainingRecord
     *
     * Delete Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEmployeeTrainingRecord($company_domain, $employee_training_record_id, string $contentType = self::contentTypes['deleteEmployeeTrainingRecord'][0])
    {
        $this->deleteEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_training_record_id, $contentType);
    }

    /**
     * Operation deleteEmployeeTrainingRecordWithHttpInfo
     *
     * Delete Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_training_record_id, string $contentType = self::contentTypes['deleteEmployeeTrainingRecord'][0])
    {
        $request = $this->deleteEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteEmployeeTrainingRecordAsync
     *
     * Delete Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmployeeTrainingRecordAsync($company_domain, $employee_training_record_id, string $contentType = self::contentTypes['deleteEmployeeTrainingRecord'][0])
    {
        return $this->deleteEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_training_record_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmployeeTrainingRecordAsyncWithHttpInfo
     *
     * Delete Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_training_record_id, string $contentType = self::contentTypes['deleteEmployeeTrainingRecord'][0])
    {
        $returnType = '';
        $request = $this->deleteEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmployeeTrainingRecord'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, string $contentType = self::contentTypes['deleteEmployeeTrainingRecord'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteEmployeeTrainingRecord'
            );
        }

        // verify the required parameter 'employee_training_record_id' is set
        if ($employee_training_record_id === null || (is_array($employee_training_record_id) && count($employee_training_record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_training_record_id when calling deleteEmployeeTrainingRecord'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/record/{employeeTrainingRecordId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_training_record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeTrainingRecordId' . '}',
                ObjectSerializer::toPathValue($employee_training_record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTrainingCategory
     *
     * Delete Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTrainingCategory($company_domain, $training_category_id, string $contentType = self::contentTypes['deleteTrainingCategory'][0])
    {
        $this->deleteTrainingCategoryWithHttpInfo($company_domain, $training_category_id, $contentType);
    }

    /**
     * Operation deleteTrainingCategoryWithHttpInfo
     *
     * Delete Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTrainingCategoryWithHttpInfo($company_domain, $training_category_id, string $contentType = self::contentTypes['deleteTrainingCategory'][0])
    {
        $request = $this->deleteTrainingCategoryRequest($company_domain, $training_category_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteTrainingCategoryAsync
     *
     * Delete Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTrainingCategoryAsync($company_domain, $training_category_id, string $contentType = self::contentTypes['deleteTrainingCategory'][0])
    {
        return $this->deleteTrainingCategoryAsyncWithHttpInfo($company_domain, $training_category_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTrainingCategoryAsyncWithHttpInfo
     *
     * Delete Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTrainingCategoryAsyncWithHttpInfo($company_domain, $training_category_id, string $contentType = self::contentTypes['deleteTrainingCategory'][0])
    {
        $returnType = '';
        $request = $this->deleteTrainingCategoryRequest($company_domain, $training_category_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTrainingCategory'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTrainingCategoryRequest($company_domain, $training_category_id, string $contentType = self::contentTypes['deleteTrainingCategory'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteTrainingCategory'
            );
        }

        // verify the required parameter 'training_category_id' is set
        if ($training_category_id === null || (is_array($training_category_id) && count($training_category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $training_category_id when calling deleteTrainingCategory'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/category/{trainingCategoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($training_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trainingCategoryId' . '}',
                ObjectSerializer::toPathValue($training_category_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTrainingType
     *
     * Delete Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTrainingType($company_domain, $training_type_id, string $contentType = self::contentTypes['deleteTrainingType'][0])
    {
        $this->deleteTrainingTypeWithHttpInfo($company_domain, $training_type_id, $contentType);
    }

    /**
     * Operation deleteTrainingTypeWithHttpInfo
     *
     * Delete Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTrainingTypeWithHttpInfo($company_domain, $training_type_id, string $contentType = self::contentTypes['deleteTrainingType'][0])
    {
        $request = $this->deleteTrainingTypeRequest($company_domain, $training_type_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteTrainingTypeAsync
     *
     * Delete Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTrainingTypeAsync($company_domain, $training_type_id, string $contentType = self::contentTypes['deleteTrainingType'][0])
    {
        return $this->deleteTrainingTypeAsyncWithHttpInfo($company_domain, $training_type_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTrainingTypeAsyncWithHttpInfo
     *
     * Delete Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTrainingTypeAsyncWithHttpInfo($company_domain, $training_type_id, string $contentType = self::contentTypes['deleteTrainingType'][0])
    {
        $returnType = '';
        $request = $this->deleteTrainingTypeRequest($company_domain, $training_type_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTrainingType'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTrainingTypeRequest($company_domain, $training_type_id, string $contentType = self::contentTypes['deleteTrainingType'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteTrainingType'
            );
        }

        // verify the required parameter 'training_type_id' is set
        if ($training_type_id === null || (is_array($training_type_id) && count($training_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $training_type_id when calling deleteTrainingType'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/type/{trainingTypeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($training_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trainingTypeId' . '}',
                ObjectSerializer::toPathValue($training_type_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listEmployeeTrainings
     *
     * List Employee Trainings
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to get a list of trainings for. (required)
     * @param  int|null $training_type_id The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeTrainings'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\ListEmployeeTrainings200ResponseInner[]
     */
    public function listEmployeeTrainings($company_domain, $employee_id, $training_type_id = null, string $contentType = self::contentTypes['listEmployeeTrainings'][0])
    {
        list($response) = $this->listEmployeeTrainingsWithHttpInfo($company_domain, $employee_id, $training_type_id, $contentType);
        return $response;
    }

    /**
     * Operation listEmployeeTrainingsWithHttpInfo
     *
     * List Employee Trainings
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to get a list of trainings for. (required)
     * @param  int|null $training_type_id The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeTrainings'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\ListEmployeeTrainings200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listEmployeeTrainingsWithHttpInfo($company_domain, $employee_id, $training_type_id = null, string $contentType = self::contentTypes['listEmployeeTrainings'][0])
    {
        $request = $this->listEmployeeTrainingsRequest($company_domain, $employee_id, $training_type_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\ListEmployeeTrainings200ResponseInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\ListEmployeeTrainings200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\ListEmployeeTrainings200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listEmployeeTrainingsAsync
     *
     * List Employee Trainings
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to get a list of trainings for. (required)
     * @param  int|null $training_type_id The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeTrainings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEmployeeTrainingsAsync($company_domain, $employee_id, $training_type_id = null, string $contentType = self::contentTypes['listEmployeeTrainings'][0])
    {
        return $this->listEmployeeTrainingsAsyncWithHttpInfo($company_domain, $employee_id, $training_type_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listEmployeeTrainingsAsyncWithHttpInfo
     *
     * List Employee Trainings
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to get a list of trainings for. (required)
     * @param  int|null $training_type_id The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeTrainings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEmployeeTrainingsAsyncWithHttpInfo($company_domain, $employee_id, $training_type_id = null, string $contentType = self::contentTypes['listEmployeeTrainings'][0])
    {
        $returnType = '\MySdk\Model\ListEmployeeTrainings200ResponseInner[]';
        $request = $this->listEmployeeTrainingsRequest($company_domain, $employee_id, $training_type_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listEmployeeTrainings'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to get a list of trainings for. (required)
     * @param  int|null $training_type_id The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeTrainings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listEmployeeTrainingsRequest($company_domain, $employee_id, $training_type_id = null, string $contentType = self::contentTypes['listEmployeeTrainings'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling listEmployeeTrainings'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling listEmployeeTrainings'
            );
        }



        $resourcePath = '/{companyDomain}/v1/training/record/employee/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $training_type_id,
            'trainingTypeId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTrainingCategories
     *
     * List Training Categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingCategories'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\ListTrainingCategories200ResponseInner[]
     */
    public function listTrainingCategories($company_domain, string $contentType = self::contentTypes['listTrainingCategories'][0])
    {
        list($response) = $this->listTrainingCategoriesWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation listTrainingCategoriesWithHttpInfo
     *
     * List Training Categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingCategories'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\ListTrainingCategories200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listTrainingCategoriesWithHttpInfo($company_domain, string $contentType = self::contentTypes['listTrainingCategories'][0])
    {
        $request = $this->listTrainingCategoriesRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\ListTrainingCategories200ResponseInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\ListTrainingCategories200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\ListTrainingCategories200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listTrainingCategoriesAsync
     *
     * List Training Categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrainingCategoriesAsync($company_domain, string $contentType = self::contentTypes['listTrainingCategories'][0])
    {
        return $this->listTrainingCategoriesAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTrainingCategoriesAsyncWithHttpInfo
     *
     * List Training Categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrainingCategoriesAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['listTrainingCategories'][0])
    {
        $returnType = '\MySdk\Model\ListTrainingCategories200ResponseInner[]';
        $request = $this->listTrainingCategoriesRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTrainingCategories'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTrainingCategoriesRequest($company_domain, string $contentType = self::contentTypes['listTrainingCategories'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling listTrainingCategories'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTrainingTypes
     *
     * List Training Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingTypes'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\ListTrainingTypes200ResponseInner[]
     */
    public function listTrainingTypes($company_domain, string $contentType = self::contentTypes['listTrainingTypes'][0])
    {
        list($response) = $this->listTrainingTypesWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation listTrainingTypesWithHttpInfo
     *
     * List Training Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingTypes'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\ListTrainingTypes200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listTrainingTypesWithHttpInfo($company_domain, string $contentType = self::contentTypes['listTrainingTypes'][0])
    {
        $request = $this->listTrainingTypesRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\ListTrainingTypes200ResponseInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\ListTrainingTypes200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\ListTrainingTypes200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listTrainingTypesAsync
     *
     * List Training Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrainingTypesAsync($company_domain, string $contentType = self::contentTypes['listTrainingTypes'][0])
    {
        return $this->listTrainingTypesAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTrainingTypesAsyncWithHttpInfo
     *
     * List Training Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrainingTypesAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['listTrainingTypes'][0])
    {
        $returnType = '\MySdk\Model\ListTrainingTypes200ResponseInner[]';
        $request = $this->listTrainingTypesRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTrainingTypes'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTrainingTypesRequest($company_domain, string $contentType = self::contentTypes['listTrainingTypes'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling listTrainingTypes'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmployeeTrainingRecord
     *
     * Update Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to update. (required)
     * @param  \MySdk\Model\UpdateEmployeeTrainingRecordRequest $update_employee_training_record_request Training object to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingRecord
     */
    public function updateEmployeeTrainingRecord($company_domain, $employee_training_record_id, $update_employee_training_record_request, string $contentType = self::contentTypes['updateEmployeeTrainingRecord'][0])
    {
        list($response) = $this->updateEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_training_record_id, $update_employee_training_record_request, $contentType);
        return $response;
    }

    /**
     * Operation updateEmployeeTrainingRecordWithHttpInfo
     *
     * Update Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to update. (required)
     * @param  \MySdk\Model\UpdateEmployeeTrainingRecordRequest $update_employee_training_record_request Training object to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingRecord, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_training_record_id, $update_employee_training_record_request, string $contentType = self::contentTypes['updateEmployeeTrainingRecord'][0])
    {
        $request = $this->updateEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, $update_employee_training_record_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingRecord',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingRecord',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingRecord',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateEmployeeTrainingRecordAsync
     *
     * Update Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to update. (required)
     * @param  \MySdk\Model\UpdateEmployeeTrainingRecordRequest $update_employee_training_record_request Training object to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeTrainingRecordAsync($company_domain, $employee_training_record_id, $update_employee_training_record_request, string $contentType = self::contentTypes['updateEmployeeTrainingRecord'][0])
    {
        return $this->updateEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_training_record_id, $update_employee_training_record_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmployeeTrainingRecordAsyncWithHttpInfo
     *
     * Update Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to update. (required)
     * @param  \MySdk\Model\UpdateEmployeeTrainingRecordRequest $update_employee_training_record_request Training object to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_training_record_id, $update_employee_training_record_request, string $contentType = self::contentTypes['updateEmployeeTrainingRecord'][0])
    {
        $returnType = '\MySdk\Model\TrainingRecord';
        $request = $this->updateEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, $update_employee_training_record_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmployeeTrainingRecord'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to update. (required)
     * @param  \MySdk\Model\UpdateEmployeeTrainingRecordRequest $update_employee_training_record_request Training object to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, $update_employee_training_record_request, string $contentType = self::contentTypes['updateEmployeeTrainingRecord'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateEmployeeTrainingRecord'
            );
        }

        // verify the required parameter 'employee_training_record_id' is set
        if ($employee_training_record_id === null || (is_array($employee_training_record_id) && count($employee_training_record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_training_record_id when calling updateEmployeeTrainingRecord'
            );
        }

        // verify the required parameter 'update_employee_training_record_request' is set
        if ($update_employee_training_record_request === null || (is_array($update_employee_training_record_request) && count($update_employee_training_record_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_employee_training_record_request when calling updateEmployeeTrainingRecord'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/record/{employeeTrainingRecordId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_training_record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeTrainingRecordId' . '}',
                ObjectSerializer::toPathValue($employee_training_record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_employee_training_record_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_employee_training_record_request));
            } else {
                $httpBody = $update_employee_training_record_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTrainingCategory
     *
     * Update Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to update. (required)
     * @param  \MySdk\Model\UpdateTrainingCategoryRequest $update_training_category_request Training category to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingCategory
     */
    public function updateTrainingCategory($company_domain, $training_category_id, $update_training_category_request, string $contentType = self::contentTypes['updateTrainingCategory'][0])
    {
        list($response) = $this->updateTrainingCategoryWithHttpInfo($company_domain, $training_category_id, $update_training_category_request, $contentType);
        return $response;
    }

    /**
     * Operation updateTrainingCategoryWithHttpInfo
     *
     * Update Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to update. (required)
     * @param  \MySdk\Model\UpdateTrainingCategoryRequest $update_training_category_request Training category to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTrainingCategoryWithHttpInfo($company_domain, $training_category_id, $update_training_category_request, string $contentType = self::contentTypes['updateTrainingCategory'][0])
    {
        $request = $this->updateTrainingCategoryRequest($company_domain, $training_category_id, $update_training_category_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingCategory',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingCategory',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingCategory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTrainingCategoryAsync
     *
     * Update Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to update. (required)
     * @param  \MySdk\Model\UpdateTrainingCategoryRequest $update_training_category_request Training category to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTrainingCategoryAsync($company_domain, $training_category_id, $update_training_category_request, string $contentType = self::contentTypes['updateTrainingCategory'][0])
    {
        return $this->updateTrainingCategoryAsyncWithHttpInfo($company_domain, $training_category_id, $update_training_category_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTrainingCategoryAsyncWithHttpInfo
     *
     * Update Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to update. (required)
     * @param  \MySdk\Model\UpdateTrainingCategoryRequest $update_training_category_request Training category to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTrainingCategoryAsyncWithHttpInfo($company_domain, $training_category_id, $update_training_category_request, string $contentType = self::contentTypes['updateTrainingCategory'][0])
    {
        $returnType = '\MySdk\Model\TrainingCategory';
        $request = $this->updateTrainingCategoryRequest($company_domain, $training_category_id, $update_training_category_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTrainingCategory'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to update. (required)
     * @param  \MySdk\Model\UpdateTrainingCategoryRequest $update_training_category_request Training category to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTrainingCategoryRequest($company_domain, $training_category_id, $update_training_category_request, string $contentType = self::contentTypes['updateTrainingCategory'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateTrainingCategory'
            );
        }

        // verify the required parameter 'training_category_id' is set
        if ($training_category_id === null || (is_array($training_category_id) && count($training_category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $training_category_id when calling updateTrainingCategory'
            );
        }

        // verify the required parameter 'update_training_category_request' is set
        if ($update_training_category_request === null || (is_array($update_training_category_request) && count($update_training_category_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_training_category_request when calling updateTrainingCategory'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/category/{trainingCategoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($training_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trainingCategoryId' . '}',
                ObjectSerializer::toPathValue($training_category_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_training_category_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_training_category_request));
            } else {
                $httpBody = $update_training_category_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTrainingType
     *
     * Update Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to update. (required)
     * @param  \MySdk\Model\UpdateTrainingTypeRequest $update_training_type_request Training type object to update to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingType
     */
    public function updateTrainingType($company_domain, $training_type_id, $update_training_type_request, string $contentType = self::contentTypes['updateTrainingType'][0])
    {
        list($response) = $this->updateTrainingTypeWithHttpInfo($company_domain, $training_type_id, $update_training_type_request, $contentType);
        return $response;
    }

    /**
     * Operation updateTrainingTypeWithHttpInfo
     *
     * Update Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to update. (required)
     * @param  \MySdk\Model\UpdateTrainingTypeRequest $update_training_type_request Training type object to update to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingType, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTrainingTypeWithHttpInfo($company_domain, $training_type_id, $update_training_type_request, string $contentType = self::contentTypes['updateTrainingType'][0])
    {
        $request = $this->updateTrainingTypeRequest($company_domain, $training_type_id, $update_training_type_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingType',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingType',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTrainingTypeAsync
     *
     * Update Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to update. (required)
     * @param  \MySdk\Model\UpdateTrainingTypeRequest $update_training_type_request Training type object to update to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTrainingTypeAsync($company_domain, $training_type_id, $update_training_type_request, string $contentType = self::contentTypes['updateTrainingType'][0])
    {
        return $this->updateTrainingTypeAsyncWithHttpInfo($company_domain, $training_type_id, $update_training_type_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTrainingTypeAsyncWithHttpInfo
     *
     * Update Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to update. (required)
     * @param  \MySdk\Model\UpdateTrainingTypeRequest $update_training_type_request Training type object to update to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTrainingTypeAsyncWithHttpInfo($company_domain, $training_type_id, $update_training_type_request, string $contentType = self::contentTypes['updateTrainingType'][0])
    {
        $returnType = '\MySdk\Model\TrainingType';
        $request = $this->updateTrainingTypeRequest($company_domain, $training_type_id, $update_training_type_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTrainingType'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to update. (required)
     * @param  \MySdk\Model\UpdateTrainingTypeRequest $update_training_type_request Training type object to update to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTrainingTypeRequest($company_domain, $training_type_id, $update_training_type_request, string $contentType = self::contentTypes['updateTrainingType'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateTrainingType'
            );
        }

        // verify the required parameter 'training_type_id' is set
        if ($training_type_id === null || (is_array($training_type_id) && count($training_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $training_type_id when calling updateTrainingType'
            );
        }

        // verify the required parameter 'update_training_type_request' is set
        if ($update_training_type_request === null || (is_array($update_training_type_request) && count($update_training_type_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_training_type_request when calling updateTrainingType'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/type/{trainingTypeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($training_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trainingTypeId' . '}',
                ObjectSerializer::toPathValue($training_type_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_training_type_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_training_type_request));
            } else {
                $httpBody = $update_training_type_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
