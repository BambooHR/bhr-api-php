<?php
/**
 * PublicAPIApi
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use MySdk\ApiException;
use MySdk\Configuration;
use MySdk\FormDataProcessor;
use MySdk\HeaderSelector;
use MySdk\ObjectSerializer;

/**
 * PublicAPIApi Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PublicAPIApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addCompanyFileCategory' => [
            'application/json',
        ],
        'addEmployee' => [
            'application/json',
        ],
        'addEmployeeDependent' => [
            'application/json',
        ],
        'addEmployeeFileCategory' => [
            'application/json',
        ],
        'addEmployeeTableRow' => [
            'application/json',
        ],
        'addEmployeeTableRowV1' => [
            'application/json',
        ],
        'addNewCandidate' => [
            'multipart/form-data',
        ],
        'addNewEmployeeTrainingRecord' => [
            'application/json',
        ],
        'addNewJobOpening' => [
            'multipart/form-data',
        ],
        'addTrainingCategory' => [
            'application/json',
        ],
        'addTrainingType' => [
            'application/json',
        ],
        'b86bb5db603786dfc98c8f6a7bb1a218' => [
            'application/json',
        ],
        'call0f428442e53dc46d1e2c8ff5b7a483a8' => [
            'application/json',
        ],
        'call149e00955713fb486cd7a81dd6ee31aa' => [
            'application/json',
        ],
        'call14e73aef978eb81d51fdbd74e0e83823' => [
            'application/json',
        ],
        'call59d25b8c03d013c96fbbf866769b8206' => [
            'application/json',
        ],
        'call5e1c5b4ef12e61d1bc975e8b4e00c38d' => [
            'application/json',
        ],
        'call69c777478f5d52dee1b4f0937dca154f' => [
            'application/json',
        ],
        'call88ef63550f43537c6b3bfaa03d51d95d' => [
            'application/json',
        ],
        'call910252128bfbd9d42e50f9dc31bb6120' => [
            'application/json',
        ],
        'call9a6d5660f03eadcf705c808a1f44b8c4' => [
            'application/json',
        ],
        'db65bacaf29686d9c3b1296f6047a065' => [
            'application/json',
        ],
        'dcb62a5d1780635153b978462f9debd0' => [
            'application/json',
        ],
        'deleteCompanyFile' => [
            'application/json',
        ],
        'deleteEmployeeFile' => [
            'application/json',
        ],
        'deleteEmployeeTableRowV1' => [
            'application/json',
        ],
        'deleteEmployeeTrainingRecord' => [
            'application/json',
        ],
        'deleteGoal' => [
            'application/json',
        ],
        'deleteGoalComment' => [
            'application/json',
        ],
        'deleteTrainingCategory' => [
            'application/json',
        ],
        'deleteTrainingType' => [
            'application/json',
        ],
        'deleteWebhook' => [
            'application/json',
        ],
        'estimateFutureTimeOffBalances' => [
            'application/json',
        ],
        'f97efc203b25647724accb9da7dda7db' => [
            'application/json',
        ],
        'getAListOfUsers' => [
            'application/json',
        ],
        'getAListOfWhosOut' => [
            'application/json',
        ],
        'getApplicationDetails' => [
            'application/json',
        ],
        'getApplications' => [
            'application/json',
        ],
        'getBenefitCoverages' => [
            'application/json',
        ],
        'getBenefitDeductionTypes' => [
            'application/json',
        ],
        'getByReportId' => [
            'application/json',
        ],
        'getCanCreateGoal' => [
            'application/json',
        ],
        'getChangedEmployeeIds' => [
            'application/json',
        ],
        'getChangedEmployeeTableData' => [
            'application/json',
        ],
        'getCompanyEINs' => [
            'application/json',
        ],
        'getCompanyFile' => [
            'application/json',
        ],
        'getCompanyInformation' => [
            'application/json',
        ],
        'getCompanyLocations' => [
            'application/json',
        ],
        'getCompanyReport' => [
            'application/json',
        ],
        'getDataFromDataset' => [
            'application/json',
        ],
        'getDataSets' => [
            'application/json',
        ],
        'getEmployee' => [
            'application/json',
        ],
        'getEmployeeDependent' => [
            'application/json',
        ],
        'getEmployeeDependents' => [
            'application/json',
        ],
        'getEmployeeFile' => [
            'application/json',
        ],
        'getEmployeePhoto' => [
            'application/json',
        ],
        'getEmployeeTableRow' => [
            'application/json',
        ],
        'getEmployeesDirectory' => [
            'application/json',
        ],
        'getFieldsFromDataset' => [
            'application/json',
        ],
        'getGoalAggregate' => [
            'application/json',
        ],
        'getGoalComments' => [
            'application/json',
        ],
        'getGoals' => [
            'application/json',
        ],
        'getGoalsAggregateV1' => [
            'application/json',
        ],
        'getGoalsAggregateV11' => [
            'application/json',
        ],
        'getGoalsAggregateV12' => [
            'application/json',
        ],
        'getGoalsAlignmentOptions' => [
            'application/json',
        ],
        'getGoalsFiltersV1' => [
            'application/json',
        ],
        'getGoalsFiltersV11' => [
            'application/json',
        ],
        'getGoalsFiltersV12' => [
            'application/json',
        ],
        'getGoalsShareOptions' => [
            'application/json',
        ],
        'getHiringLeads' => [
            'application/json',
        ],
        'getJobSummaries' => [
            'application/json',
        ],
        'getMemberBenefit' => [
            'application/json',
        ],
        'getMonitorFields' => [
            'application/json',
        ],
        'getStatuses' => [
            'application/json',
        ],
        'getTimeOffPolicies' => [
            'application/json',
        ],
        'getTimeOffTypes' => [
            'application/json',
        ],
        'getWebhook' => [
            'application/json',
        ],
        'getWebhookList' => [
            'application/json',
        ],
        'getWebhookLogs' => [
            'application/json',
        ],
        'listCompanyFiles' => [
            'application/json',
        ],
        'listEmployeeFiles' => [
            'application/json',
        ],
        'listEmployeeTrainings' => [
            'application/json',
        ],
        'listReports' => [
            'application/json',
        ],
        'listTrainingCategories' => [
            'application/json',
        ],
        'listTrainingTypes' => [
            'application/json',
        ],
        'login' => [
            'application/x-www-form-urlencoded',
        ],
        'metadataAddOrUpdateValuesForListFields' => [
            'application/json',
        ],
        'metadataGetAListOfFields' => [
            'application/json',
        ],
        'metadataGetAListOfTabularFields' => [
            'application/json',
        ],
        'metadataGetDetailsForListFields' => [
            'application/json',
        ],
        'postApplicantStatus' => [
            'application/json',
        ],
        'postApplicationComment' => [
            'application/json',
        ],
        'postCloseGoal' => [
            'application/json',
        ],
        'postGoal' => [
            'application/json',
        ],
        'postGoalComment' => [
            'application/json',
        ],
        'postReopenGoal' => [
            'application/json',
        ],
        'postWebhook' => [
            'application/json',
        ],
        'putGoalComment' => [
            'application/json',
        ],
        'putGoalMilestoneProgress' => [
            'application/json',
        ],
        'putGoalProgress' => [
            'application/json',
        ],
        'putGoalSharedWith' => [
            'application/json',
        ],
        'putGoalV1' => [
            'application/json',
        ],
        'putGoalV11' => [
            'application/json',
        ],
        'putWebhook' => [
            'application/json',
        ],
        'requestCustomReport' => [
            'application/json',
        ],
        'timeOffAddATimeOffHistoryItemForTimeOffRequest' => [
            'application/json',
        ],
        'timeOffAddATimeOffRequest' => [
            'application/json',
        ],
        'timeOffAdjustTimeOffBalance' => [
            'application/json',
        ],
        'timeOffAssignTimeOffPoliciesForAnEmployee' => [
            'application/json',
        ],
        'timeOffChangeARequestStatus' => [
            'application/json',
        ],
        'timeOffGetTimeOffRequests' => [
            'application/json',
        ],
        'timeOffListTimeOffPoliciesForEmployee' => [
            'application/json',
        ],
        'timeOffV11AssignTimeOffPoliciesForAnEmployee' => [
            'application/json',
        ],
        'timeOffV11ListTimeOffPoliciesForEmployee' => [
            'application/json',
        ],
        'updateCompanyFile' => [
            'application/json',
        ],
        'updateEmployee' => [
            'application/json',
        ],
        'updateEmployeeDependent' => [
            'application/json',
        ],
        'updateEmployeeFile' => [
            'application/json',
        ],
        'updateEmployeeTableRow' => [
            'application/json',
        ],
        'updateEmployeeTableRowV' => [
            'application/json',
        ],
        'updateEmployeeTrainingRecord' => [
            'application/json',
        ],
        'updateTrainingCategory' => [
            'application/json',
        ],
        'updateTrainingType' => [
            'application/json',
        ],
        'uploadCompanyFile' => [
            'application/json',
        ],
        'uploadEmployeeFile' => [
            'application/json',
        ],
        'uploadEmployeePhoto' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addCompanyFileCategory
     *
     * Add Company File Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCompanyFileCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addCompanyFileCategory($company_domain, $request_body, string $contentType = self::contentTypes['addCompanyFileCategory'][0])
    {
        $this->addCompanyFileCategoryWithHttpInfo($company_domain, $request_body, $contentType);
    }

    /**
     * Operation addCompanyFileCategoryWithHttpInfo
     *
     * Add Company File Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCompanyFileCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCompanyFileCategoryWithHttpInfo($company_domain, $request_body, string $contentType = self::contentTypes['addCompanyFileCategory'][0])
    {
        $request = $this->addCompanyFileCategoryRequest($company_domain, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addCompanyFileCategoryAsync
     *
     * Add Company File Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCompanyFileCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCompanyFileCategoryAsync($company_domain, $request_body, string $contentType = self::contentTypes['addCompanyFileCategory'][0])
    {
        return $this->addCompanyFileCategoryAsyncWithHttpInfo($company_domain, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCompanyFileCategoryAsyncWithHttpInfo
     *
     * Add Company File Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCompanyFileCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCompanyFileCategoryAsyncWithHttpInfo($company_domain, $request_body, string $contentType = self::contentTypes['addCompanyFileCategory'][0])
    {
        $returnType = '';
        $request = $this->addCompanyFileCategoryRequest($company_domain, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCompanyFileCategory'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCompanyFileCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCompanyFileCategoryRequest($company_domain, $request_body, string $contentType = self::contentTypes['addCompanyFileCategory'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addCompanyFileCategory'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling addCompanyFileCategory'
            );
        }


        $resourcePath = '/{companyDomain}/v1/files/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addEmployee
     *
     * Add Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\PostNewEmployee $post_new_employee post_new_employee (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addEmployee($company_domain, $post_new_employee, string $contentType = self::contentTypes['addEmployee'][0])
    {
        $this->addEmployeeWithHttpInfo($company_domain, $post_new_employee, $contentType);
    }

    /**
     * Operation addEmployeeWithHttpInfo
     *
     * Add Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\PostNewEmployee $post_new_employee (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEmployeeWithHttpInfo($company_domain, $post_new_employee, string $contentType = self::contentTypes['addEmployee'][0])
    {
        $request = $this->addEmployeeRequest($company_domain, $post_new_employee, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addEmployeeAsync
     *
     * Add Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\PostNewEmployee $post_new_employee (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmployeeAsync($company_domain, $post_new_employee, string $contentType = self::contentTypes['addEmployee'][0])
    {
        return $this->addEmployeeAsyncWithHttpInfo($company_domain, $post_new_employee, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEmployeeAsyncWithHttpInfo
     *
     * Add Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\PostNewEmployee $post_new_employee (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmployeeAsyncWithHttpInfo($company_domain, $post_new_employee, string $contentType = self::contentTypes['addEmployee'][0])
    {
        $returnType = '';
        $request = $this->addEmployeeRequest($company_domain, $post_new_employee, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEmployee'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\PostNewEmployee $post_new_employee (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addEmployeeRequest($company_domain, $post_new_employee, string $contentType = self::contentTypes['addEmployee'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addEmployee'
            );
        }

        // verify the required parameter 'post_new_employee' is set
        if ($post_new_employee === null || (is_array($post_new_employee) && count($post_new_employee) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_new_employee when calling addEmployee'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_new_employee)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_new_employee));
            } else {
                $httpBody = $post_new_employee;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addEmployeeDependent
     *
     * Add an employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\EmployeeDependent $employee_dependent employee_dependent (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addEmployeeDependent($company_domain, $employee_dependent, string $contentType = self::contentTypes['addEmployeeDependent'][0])
    {
        $this->addEmployeeDependentWithHttpInfo($company_domain, $employee_dependent, $contentType);
    }

    /**
     * Operation addEmployeeDependentWithHttpInfo
     *
     * Add an employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\EmployeeDependent $employee_dependent (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEmployeeDependentWithHttpInfo($company_domain, $employee_dependent, string $contentType = self::contentTypes['addEmployeeDependent'][0])
    {
        $request = $this->addEmployeeDependentRequest($company_domain, $employee_dependent, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addEmployeeDependentAsync
     *
     * Add an employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\EmployeeDependent $employee_dependent (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmployeeDependentAsync($company_domain, $employee_dependent, string $contentType = self::contentTypes['addEmployeeDependent'][0])
    {
        return $this->addEmployeeDependentAsyncWithHttpInfo($company_domain, $employee_dependent, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEmployeeDependentAsyncWithHttpInfo
     *
     * Add an employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\EmployeeDependent $employee_dependent (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmployeeDependentAsyncWithHttpInfo($company_domain, $employee_dependent, string $contentType = self::contentTypes['addEmployeeDependent'][0])
    {
        $returnType = '';
        $request = $this->addEmployeeDependentRequest($company_domain, $employee_dependent, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEmployeeDependent'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\EmployeeDependent $employee_dependent (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addEmployeeDependentRequest($company_domain, $employee_dependent, string $contentType = self::contentTypes['addEmployeeDependent'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addEmployeeDependent'
            );
        }

        // verify the required parameter 'employee_dependent' is set
        if ($employee_dependent === null || (is_array($employee_dependent) && count($employee_dependent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_dependent when calling addEmployeeDependent'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employeedependents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($employee_dependent)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($employee_dependent));
            } else {
                $httpBody = $employee_dependent;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addEmployeeFileCategory
     *
     * Add Employee File Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeFileCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addEmployeeFileCategory($company_domain, $request_body, string $contentType = self::contentTypes['addEmployeeFileCategory'][0])
    {
        $this->addEmployeeFileCategoryWithHttpInfo($company_domain, $request_body, $contentType);
    }

    /**
     * Operation addEmployeeFileCategoryWithHttpInfo
     *
     * Add Employee File Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeFileCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEmployeeFileCategoryWithHttpInfo($company_domain, $request_body, string $contentType = self::contentTypes['addEmployeeFileCategory'][0])
    {
        $request = $this->addEmployeeFileCategoryRequest($company_domain, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addEmployeeFileCategoryAsync
     *
     * Add Employee File Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeFileCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmployeeFileCategoryAsync($company_domain, $request_body, string $contentType = self::contentTypes['addEmployeeFileCategory'][0])
    {
        return $this->addEmployeeFileCategoryAsyncWithHttpInfo($company_domain, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEmployeeFileCategoryAsyncWithHttpInfo
     *
     * Add Employee File Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeFileCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmployeeFileCategoryAsyncWithHttpInfo($company_domain, $request_body, string $contentType = self::contentTypes['addEmployeeFileCategory'][0])
    {
        $returnType = '';
        $request = $this->addEmployeeFileCategoryRequest($company_domain, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEmployeeFileCategory'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeFileCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addEmployeeFileCategoryRequest($company_domain, $request_body, string $contentType = self::contentTypes['addEmployeeFileCategory'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addEmployeeFileCategory'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling addEmployeeFileCategory'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/files/categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addEmployeeTableRow
     *
     * Adds a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addEmployeeTableRow($company_domain, $id, $table, $table_row_update, string $contentType = self::contentTypes['addEmployeeTableRow'][0])
    {
        $this->addEmployeeTableRowWithHttpInfo($company_domain, $id, $table, $table_row_update, $contentType);
    }

    /**
     * Operation addEmployeeTableRowWithHttpInfo
     *
     * Adds a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEmployeeTableRowWithHttpInfo($company_domain, $id, $table, $table_row_update, string $contentType = self::contentTypes['addEmployeeTableRow'][0])
    {
        $request = $this->addEmployeeTableRowRequest($company_domain, $id, $table, $table_row_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addEmployeeTableRowAsync
     *
     * Adds a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmployeeTableRowAsync($company_domain, $id, $table, $table_row_update, string $contentType = self::contentTypes['addEmployeeTableRow'][0])
    {
        return $this->addEmployeeTableRowAsyncWithHttpInfo($company_domain, $id, $table, $table_row_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEmployeeTableRowAsyncWithHttpInfo
     *
     * Adds a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmployeeTableRowAsyncWithHttpInfo($company_domain, $id, $table, $table_row_update, string $contentType = self::contentTypes['addEmployeeTableRow'][0])
    {
        $returnType = '';
        $request = $this->addEmployeeTableRowRequest($company_domain, $id, $table, $table_row_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEmployeeTableRow'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addEmployeeTableRowRequest($company_domain, $id, $table, $table_row_update, string $contentType = self::contentTypes['addEmployeeTableRow'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addEmployeeTableRow'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addEmployeeTableRow'
            );
        }

        // verify the required parameter 'table' is set
        if ($table === null || (is_array($table) && count($table) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table when calling addEmployeeTableRow'
            );
        }

        // verify the required parameter 'table_row_update' is set
        if ($table_row_update === null || (is_array($table_row_update) && count($table_row_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_row_update when calling addEmployeeTableRow'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{id}/tables/{table}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($table !== null) {
            $resourcePath = str_replace(
                '{' . 'table' . '}',
                ObjectSerializer::toPathValue($table),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($table_row_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($table_row_update));
            } else {
                $httpBody = $table_row_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addEmployeeTableRowV1
     *
     * Adds a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeTableRowV1'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addEmployeeTableRowV1($company_domain, $id, $table, $table_row_update, string $contentType = self::contentTypes['addEmployeeTableRowV1'][0])
    {
        $this->addEmployeeTableRowV1WithHttpInfo($company_domain, $id, $table, $table_row_update, $contentType);
    }

    /**
     * Operation addEmployeeTableRowV1WithHttpInfo
     *
     * Adds a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeTableRowV1'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEmployeeTableRowV1WithHttpInfo($company_domain, $id, $table, $table_row_update, string $contentType = self::contentTypes['addEmployeeTableRowV1'][0])
    {
        $request = $this->addEmployeeTableRowV1Request($company_domain, $id, $table, $table_row_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addEmployeeTableRowV1Async
     *
     * Adds a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeTableRowV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmployeeTableRowV1Async($company_domain, $id, $table, $table_row_update, string $contentType = self::contentTypes['addEmployeeTableRowV1'][0])
    {
        return $this->addEmployeeTableRowV1AsyncWithHttpInfo($company_domain, $id, $table, $table_row_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEmployeeTableRowV1AsyncWithHttpInfo
     *
     * Adds a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeTableRowV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEmployeeTableRowV1AsyncWithHttpInfo($company_domain, $id, $table, $table_row_update, string $contentType = self::contentTypes['addEmployeeTableRowV1'][0])
    {
        $returnType = '';
        $request = $this->addEmployeeTableRowV1Request($company_domain, $id, $table, $table_row_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEmployeeTableRowV1'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addEmployeeTableRowV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addEmployeeTableRowV1Request($company_domain, $id, $table, $table_row_update, string $contentType = self::contentTypes['addEmployeeTableRowV1'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addEmployeeTableRowV1'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addEmployeeTableRowV1'
            );
        }

        // verify the required parameter 'table' is set
        if ($table === null || (is_array($table) && count($table) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table when calling addEmployeeTableRowV1'
            );
        }

        // verify the required parameter 'table_row_update' is set
        if ($table_row_update === null || (is_array($table_row_update) && count($table_row_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_row_update when calling addEmployeeTableRowV1'
            );
        }


        $resourcePath = '/{companyDomain}/v1_1/employees/{id}/tables/{table}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($table !== null) {
            $resourcePath = str_replace(
                '{' . 'table' . '}',
                ObjectSerializer::toPathValue($table),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($table_row_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($table_row_update));
            } else {
                $httpBody = $table_row_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addNewCandidate
     *
     * Add New Candidate
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $first_name The first name of the candidate. (required)
     * @param  string $last_name The last name of the candidate. (required)
     * @param  int $job_id The id of the job opening for the candidate application. (required)
     * @param  string|null $email The email address of the candidate. (optional)
     * @param  string|null $phone_number The phone number of the candidate. (optional)
     * @param  string|null $source The source of the candidate application, e.g. LinkedIn, Indeed, etc. (optional)
     * @param  string|null $address The street address of the candidate. (optional)
     * @param  string|null $city The city of the candidate. (optional)
     * @param  string|null $state The state or province of the candidate. Accepts state name, abbreviation, or ISO code. (optional)
     * @param  string|null $zip The zip code or postal code of the candidate. (optional)
     * @param  string|null $country The country of the candidate. Accepts country name or ISO code. (optional)
     * @param  string|null $linkedin_url The LinkedIn profile url of the candidate. (optional)
     * @param  string|null $date_available The available start date of the candidate with the format YYYY-MM-DD. (optional)
     * @param  string|null $desired_salary The desired salary of the candidate. (optional)
     * @param  string|null $referred_by The person or entity that referred the candidate. (optional)
     * @param  string|null $website_url The personal website, blog, or online portfolio of the candidate. (optional)
     * @param  string|null $highest_education The highest completed education level of the candidate. (optional)
     * @param  string|null $college_name The college or university of the candidate. (optional)
     * @param  string|null $references A list of references supplied by the candidate. (optional)
     * @param  string|null $resume Resume of the candidate. (optional)
     * @param  string|null $cover_letter Cover letter of the candidate. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCandidate'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addNewCandidate($company_domain, $first_name, $last_name, $job_id, $email = null, $phone_number = null, $source = null, $address = null, $city = null, $state = null, $zip = null, $country = null, $linkedin_url = null, $date_available = null, $desired_salary = null, $referred_by = null, $website_url = null, $highest_education = null, $college_name = null, $references = null, $resume = null, $cover_letter = null, string $contentType = self::contentTypes['addNewCandidate'][0])
    {
        $this->addNewCandidateWithHttpInfo($company_domain, $first_name, $last_name, $job_id, $email, $phone_number, $source, $address, $city, $state, $zip, $country, $linkedin_url, $date_available, $desired_salary, $referred_by, $website_url, $highest_education, $college_name, $references, $resume, $cover_letter, $contentType);
    }

    /**
     * Operation addNewCandidateWithHttpInfo
     *
     * Add New Candidate
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $first_name The first name of the candidate. (required)
     * @param  string $last_name The last name of the candidate. (required)
     * @param  int $job_id The id of the job opening for the candidate application. (required)
     * @param  string|null $email The email address of the candidate. (optional)
     * @param  string|null $phone_number The phone number of the candidate. (optional)
     * @param  string|null $source The source of the candidate application, e.g. LinkedIn, Indeed, etc. (optional)
     * @param  string|null $address The street address of the candidate. (optional)
     * @param  string|null $city The city of the candidate. (optional)
     * @param  string|null $state The state or province of the candidate. Accepts state name, abbreviation, or ISO code. (optional)
     * @param  string|null $zip The zip code or postal code of the candidate. (optional)
     * @param  string|null $country The country of the candidate. Accepts country name or ISO code. (optional)
     * @param  string|null $linkedin_url The LinkedIn profile url of the candidate. (optional)
     * @param  string|null $date_available The available start date of the candidate with the format YYYY-MM-DD. (optional)
     * @param  string|null $desired_salary The desired salary of the candidate. (optional)
     * @param  string|null $referred_by The person or entity that referred the candidate. (optional)
     * @param  string|null $website_url The personal website, blog, or online portfolio of the candidate. (optional)
     * @param  string|null $highest_education The highest completed education level of the candidate. (optional)
     * @param  string|null $college_name The college or university of the candidate. (optional)
     * @param  string|null $references A list of references supplied by the candidate. (optional)
     * @param  string|null $resume Resume of the candidate. (optional)
     * @param  string|null $cover_letter Cover letter of the candidate. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCandidate'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewCandidateWithHttpInfo($company_domain, $first_name, $last_name, $job_id, $email = null, $phone_number = null, $source = null, $address = null, $city = null, $state = null, $zip = null, $country = null, $linkedin_url = null, $date_available = null, $desired_salary = null, $referred_by = null, $website_url = null, $highest_education = null, $college_name = null, $references = null, $resume = null, $cover_letter = null, string $contentType = self::contentTypes['addNewCandidate'][0])
    {
        $request = $this->addNewCandidateRequest($company_domain, $first_name, $last_name, $job_id, $email, $phone_number, $source, $address, $city, $state, $zip, $country, $linkedin_url, $date_available, $desired_salary, $referred_by, $website_url, $highest_education, $college_name, $references, $resume, $cover_letter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addNewCandidateAsync
     *
     * Add New Candidate
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $first_name The first name of the candidate. (required)
     * @param  string $last_name The last name of the candidate. (required)
     * @param  int $job_id The id of the job opening for the candidate application. (required)
     * @param  string|null $email The email address of the candidate. (optional)
     * @param  string|null $phone_number The phone number of the candidate. (optional)
     * @param  string|null $source The source of the candidate application, e.g. LinkedIn, Indeed, etc. (optional)
     * @param  string|null $address The street address of the candidate. (optional)
     * @param  string|null $city The city of the candidate. (optional)
     * @param  string|null $state The state or province of the candidate. Accepts state name, abbreviation, or ISO code. (optional)
     * @param  string|null $zip The zip code or postal code of the candidate. (optional)
     * @param  string|null $country The country of the candidate. Accepts country name or ISO code. (optional)
     * @param  string|null $linkedin_url The LinkedIn profile url of the candidate. (optional)
     * @param  string|null $date_available The available start date of the candidate with the format YYYY-MM-DD. (optional)
     * @param  string|null $desired_salary The desired salary of the candidate. (optional)
     * @param  string|null $referred_by The person or entity that referred the candidate. (optional)
     * @param  string|null $website_url The personal website, blog, or online portfolio of the candidate. (optional)
     * @param  string|null $highest_education The highest completed education level of the candidate. (optional)
     * @param  string|null $college_name The college or university of the candidate. (optional)
     * @param  string|null $references A list of references supplied by the candidate. (optional)
     * @param  string|null $resume Resume of the candidate. (optional)
     * @param  string|null $cover_letter Cover letter of the candidate. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCandidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCandidateAsync($company_domain, $first_name, $last_name, $job_id, $email = null, $phone_number = null, $source = null, $address = null, $city = null, $state = null, $zip = null, $country = null, $linkedin_url = null, $date_available = null, $desired_salary = null, $referred_by = null, $website_url = null, $highest_education = null, $college_name = null, $references = null, $resume = null, $cover_letter = null, string $contentType = self::contentTypes['addNewCandidate'][0])
    {
        return $this->addNewCandidateAsyncWithHttpInfo($company_domain, $first_name, $last_name, $job_id, $email, $phone_number, $source, $address, $city, $state, $zip, $country, $linkedin_url, $date_available, $desired_salary, $referred_by, $website_url, $highest_education, $college_name, $references, $resume, $cover_letter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewCandidateAsyncWithHttpInfo
     *
     * Add New Candidate
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $first_name The first name of the candidate. (required)
     * @param  string $last_name The last name of the candidate. (required)
     * @param  int $job_id The id of the job opening for the candidate application. (required)
     * @param  string|null $email The email address of the candidate. (optional)
     * @param  string|null $phone_number The phone number of the candidate. (optional)
     * @param  string|null $source The source of the candidate application, e.g. LinkedIn, Indeed, etc. (optional)
     * @param  string|null $address The street address of the candidate. (optional)
     * @param  string|null $city The city of the candidate. (optional)
     * @param  string|null $state The state or province of the candidate. Accepts state name, abbreviation, or ISO code. (optional)
     * @param  string|null $zip The zip code or postal code of the candidate. (optional)
     * @param  string|null $country The country of the candidate. Accepts country name or ISO code. (optional)
     * @param  string|null $linkedin_url The LinkedIn profile url of the candidate. (optional)
     * @param  string|null $date_available The available start date of the candidate with the format YYYY-MM-DD. (optional)
     * @param  string|null $desired_salary The desired salary of the candidate. (optional)
     * @param  string|null $referred_by The person or entity that referred the candidate. (optional)
     * @param  string|null $website_url The personal website, blog, or online portfolio of the candidate. (optional)
     * @param  string|null $highest_education The highest completed education level of the candidate. (optional)
     * @param  string|null $college_name The college or university of the candidate. (optional)
     * @param  string|null $references A list of references supplied by the candidate. (optional)
     * @param  string|null $resume Resume of the candidate. (optional)
     * @param  string|null $cover_letter Cover letter of the candidate. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCandidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCandidateAsyncWithHttpInfo($company_domain, $first_name, $last_name, $job_id, $email = null, $phone_number = null, $source = null, $address = null, $city = null, $state = null, $zip = null, $country = null, $linkedin_url = null, $date_available = null, $desired_salary = null, $referred_by = null, $website_url = null, $highest_education = null, $college_name = null, $references = null, $resume = null, $cover_letter = null, string $contentType = self::contentTypes['addNewCandidate'][0])
    {
        $returnType = '';
        $request = $this->addNewCandidateRequest($company_domain, $first_name, $last_name, $job_id, $email, $phone_number, $source, $address, $city, $state, $zip, $country, $linkedin_url, $date_available, $desired_salary, $referred_by, $website_url, $highest_education, $college_name, $references, $resume, $cover_letter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNewCandidate'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $first_name The first name of the candidate. (required)
     * @param  string $last_name The last name of the candidate. (required)
     * @param  int $job_id The id of the job opening for the candidate application. (required)
     * @param  string|null $email The email address of the candidate. (optional)
     * @param  string|null $phone_number The phone number of the candidate. (optional)
     * @param  string|null $source The source of the candidate application, e.g. LinkedIn, Indeed, etc. (optional)
     * @param  string|null $address The street address of the candidate. (optional)
     * @param  string|null $city The city of the candidate. (optional)
     * @param  string|null $state The state or province of the candidate. Accepts state name, abbreviation, or ISO code. (optional)
     * @param  string|null $zip The zip code or postal code of the candidate. (optional)
     * @param  string|null $country The country of the candidate. Accepts country name or ISO code. (optional)
     * @param  string|null $linkedin_url The LinkedIn profile url of the candidate. (optional)
     * @param  string|null $date_available The available start date of the candidate with the format YYYY-MM-DD. (optional)
     * @param  string|null $desired_salary The desired salary of the candidate. (optional)
     * @param  string|null $referred_by The person or entity that referred the candidate. (optional)
     * @param  string|null $website_url The personal website, blog, or online portfolio of the candidate. (optional)
     * @param  string|null $highest_education The highest completed education level of the candidate. (optional)
     * @param  string|null $college_name The college or university of the candidate. (optional)
     * @param  string|null $references A list of references supplied by the candidate. (optional)
     * @param  string|null $resume Resume of the candidate. (optional)
     * @param  string|null $cover_letter Cover letter of the candidate. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCandidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewCandidateRequest($company_domain, $first_name, $last_name, $job_id, $email = null, $phone_number = null, $source = null, $address = null, $city = null, $state = null, $zip = null, $country = null, $linkedin_url = null, $date_available = null, $desired_salary = null, $referred_by = null, $website_url = null, $highest_education = null, $college_name = null, $references = null, $resume = null, $cover_letter = null, string $contentType = self::contentTypes['addNewCandidate'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addNewCandidate'
            );
        }

        // verify the required parameter 'first_name' is set
        if ($first_name === null || (is_array($first_name) && count($first_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_name when calling addNewCandidate'
            );
        }

        // verify the required parameter 'last_name' is set
        if ($last_name === null || (is_array($last_name) && count($last_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_name when calling addNewCandidate'
            );
        }

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling addNewCandidate'
            );
        }




















        $resourcePath = '/{companyDomain}/v1/applicant_tracking/application';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }

        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'first_name' => $first_name,
            'last_name' => $last_name,
            'email' => $email,
            'phone_number' => $phone_number,
            'source' => $source,
            'job_id' => $job_id,
            'address' => $address,
            'city' => $city,
            'state' => $state,
            'zip' => $zip,
            'country' => $country,
            'linkedin_url' => $linkedin_url,
            'date_available' => $date_available,
            'desired_salary' => $desired_salary,
            'referred_by' => $referred_by,
            'website_url' => $website_url,
            'highest_education' => $highest_education,
            'college_name' => $college_name,
            'references' => $references,
            'resume' => $resume,
            'cover_letter' => $cover_letter,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addNewEmployeeTrainingRecord
     *
     * Add New Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to add a training record to. (required)
     * @param  \MySdk\Model\AddNewEmployeeTrainingRecordRequest $add_new_employee_training_record_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingRecord
     */
    public function addNewEmployeeTrainingRecord($company_domain, $employee_id, $add_new_employee_training_record_request, string $contentType = self::contentTypes['addNewEmployeeTrainingRecord'][0])
    {
        list($response) = $this->addNewEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_id, $add_new_employee_training_record_request, $contentType);
        return $response;
    }

    /**
     * Operation addNewEmployeeTrainingRecordWithHttpInfo
     *
     * Add New Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to add a training record to. (required)
     * @param  \MySdk\Model\AddNewEmployeeTrainingRecordRequest $add_new_employee_training_record_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingRecord, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_id, $add_new_employee_training_record_request, string $contentType = self::contentTypes['addNewEmployeeTrainingRecord'][0])
    {
        $request = $this->addNewEmployeeTrainingRecordRequest($company_domain, $employee_id, $add_new_employee_training_record_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingRecord',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingRecord',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingRecord',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addNewEmployeeTrainingRecordAsync
     *
     * Add New Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to add a training record to. (required)
     * @param  \MySdk\Model\AddNewEmployeeTrainingRecordRequest $add_new_employee_training_record_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewEmployeeTrainingRecordAsync($company_domain, $employee_id, $add_new_employee_training_record_request, string $contentType = self::contentTypes['addNewEmployeeTrainingRecord'][0])
    {
        return $this->addNewEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_id, $add_new_employee_training_record_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewEmployeeTrainingRecordAsyncWithHttpInfo
     *
     * Add New Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to add a training record to. (required)
     * @param  \MySdk\Model\AddNewEmployeeTrainingRecordRequest $add_new_employee_training_record_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_id, $add_new_employee_training_record_request, string $contentType = self::contentTypes['addNewEmployeeTrainingRecord'][0])
    {
        $returnType = '\MySdk\Model\TrainingRecord';
        $request = $this->addNewEmployeeTrainingRecordRequest($company_domain, $employee_id, $add_new_employee_training_record_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNewEmployeeTrainingRecord'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to add a training record to. (required)
     * @param  \MySdk\Model\AddNewEmployeeTrainingRecordRequest $add_new_employee_training_record_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewEmployeeTrainingRecordRequest($company_domain, $employee_id, $add_new_employee_training_record_request, string $contentType = self::contentTypes['addNewEmployeeTrainingRecord'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addNewEmployeeTrainingRecord'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling addNewEmployeeTrainingRecord'
            );
        }

        // verify the required parameter 'add_new_employee_training_record_request' is set
        if ($add_new_employee_training_record_request === null || (is_array($add_new_employee_training_record_request) && count($add_new_employee_training_record_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_new_employee_training_record_request when calling addNewEmployeeTrainingRecord'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/record/employee/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_new_employee_training_record_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_new_employee_training_record_request));
            } else {
                $httpBody = $add_new_employee_training_record_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addNewJobOpening
     *
     * Add New Job Opening
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $posting_title The posting title of the job opening. (required)
     * @param  string $job_status The status of the job opening. (required)
     * @param  int $hiring_lead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening. (required)
     * @param  string $employment_type The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc. (required)
     * @param  string $job_description The long-form text description of the job opening. (required)
     * @param  string|null $department The department of the job opening. (optional)
     * @param  string|null $minimum_experience The minimum experience level that qualifies a candidate for the job opening. (optional)
     * @param  string|null $compensation The pay rate or compensation for the job opening. (optional)
     * @param  int|null $job_location The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location. (optional)
     * @param  string|null $application_question_resume Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required). (optional)
     * @param  string|null $application_question_address Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required). (optional)
     * @param  string|null $application_question_linkedin_url Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required). (optional)
     * @param  string|null $application_question_date_available Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required). (optional)
     * @param  string|null $application_question_desired_salary Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required). (optional)
     * @param  string|null $application_question_cover_letter Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required). (optional)
     * @param  string|null $application_question_referred_by Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required). (optional)
     * @param  string|null $application_question_website_url Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required). (optional)
     * @param  string|null $application_question_highest_education Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required). (optional)
     * @param  string|null $application_question_college Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required). (optional)
     * @param  string|null $application_question_references Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required). (optional)
     * @param  string|null $internal_job_code The internal job code for the job opening. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewJobOpening'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addNewJobOpening($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department = null, $minimum_experience = null, $compensation = null, $job_location = null, $application_question_resume = null, $application_question_address = null, $application_question_linkedin_url = null, $application_question_date_available = null, $application_question_desired_salary = null, $application_question_cover_letter = null, $application_question_referred_by = null, $application_question_website_url = null, $application_question_highest_education = null, $application_question_college = null, $application_question_references = null, $internal_job_code = null, string $contentType = self::contentTypes['addNewJobOpening'][0])
    {
        $this->addNewJobOpeningWithHttpInfo($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department, $minimum_experience, $compensation, $job_location, $application_question_resume, $application_question_address, $application_question_linkedin_url, $application_question_date_available, $application_question_desired_salary, $application_question_cover_letter, $application_question_referred_by, $application_question_website_url, $application_question_highest_education, $application_question_college, $application_question_references, $internal_job_code, $contentType);
    }

    /**
     * Operation addNewJobOpeningWithHttpInfo
     *
     * Add New Job Opening
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $posting_title The posting title of the job opening. (required)
     * @param  string $job_status The status of the job opening. (required)
     * @param  int $hiring_lead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening. (required)
     * @param  string $employment_type The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc. (required)
     * @param  string $job_description The long-form text description of the job opening. (required)
     * @param  string|null $department The department of the job opening. (optional)
     * @param  string|null $minimum_experience The minimum experience level that qualifies a candidate for the job opening. (optional)
     * @param  string|null $compensation The pay rate or compensation for the job opening. (optional)
     * @param  int|null $job_location The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location. (optional)
     * @param  string|null $application_question_resume Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required). (optional)
     * @param  string|null $application_question_address Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required). (optional)
     * @param  string|null $application_question_linkedin_url Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required). (optional)
     * @param  string|null $application_question_date_available Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required). (optional)
     * @param  string|null $application_question_desired_salary Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required). (optional)
     * @param  string|null $application_question_cover_letter Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required). (optional)
     * @param  string|null $application_question_referred_by Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required). (optional)
     * @param  string|null $application_question_website_url Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required). (optional)
     * @param  string|null $application_question_highest_education Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required). (optional)
     * @param  string|null $application_question_college Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required). (optional)
     * @param  string|null $application_question_references Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required). (optional)
     * @param  string|null $internal_job_code The internal job code for the job opening. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewJobOpening'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewJobOpeningWithHttpInfo($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department = null, $minimum_experience = null, $compensation = null, $job_location = null, $application_question_resume = null, $application_question_address = null, $application_question_linkedin_url = null, $application_question_date_available = null, $application_question_desired_salary = null, $application_question_cover_letter = null, $application_question_referred_by = null, $application_question_website_url = null, $application_question_highest_education = null, $application_question_college = null, $application_question_references = null, $internal_job_code = null, string $contentType = self::contentTypes['addNewJobOpening'][0])
    {
        $request = $this->addNewJobOpeningRequest($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department, $minimum_experience, $compensation, $job_location, $application_question_resume, $application_question_address, $application_question_linkedin_url, $application_question_date_available, $application_question_desired_salary, $application_question_cover_letter, $application_question_referred_by, $application_question_website_url, $application_question_highest_education, $application_question_college, $application_question_references, $internal_job_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addNewJobOpeningAsync
     *
     * Add New Job Opening
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $posting_title The posting title of the job opening. (required)
     * @param  string $job_status The status of the job opening. (required)
     * @param  int $hiring_lead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening. (required)
     * @param  string $employment_type The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc. (required)
     * @param  string $job_description The long-form text description of the job opening. (required)
     * @param  string|null $department The department of the job opening. (optional)
     * @param  string|null $minimum_experience The minimum experience level that qualifies a candidate for the job opening. (optional)
     * @param  string|null $compensation The pay rate or compensation for the job opening. (optional)
     * @param  int|null $job_location The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location. (optional)
     * @param  string|null $application_question_resume Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required). (optional)
     * @param  string|null $application_question_address Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required). (optional)
     * @param  string|null $application_question_linkedin_url Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required). (optional)
     * @param  string|null $application_question_date_available Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required). (optional)
     * @param  string|null $application_question_desired_salary Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required). (optional)
     * @param  string|null $application_question_cover_letter Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required). (optional)
     * @param  string|null $application_question_referred_by Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required). (optional)
     * @param  string|null $application_question_website_url Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required). (optional)
     * @param  string|null $application_question_highest_education Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required). (optional)
     * @param  string|null $application_question_college Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required). (optional)
     * @param  string|null $application_question_references Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required). (optional)
     * @param  string|null $internal_job_code The internal job code for the job opening. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewJobOpening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewJobOpeningAsync($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department = null, $minimum_experience = null, $compensation = null, $job_location = null, $application_question_resume = null, $application_question_address = null, $application_question_linkedin_url = null, $application_question_date_available = null, $application_question_desired_salary = null, $application_question_cover_letter = null, $application_question_referred_by = null, $application_question_website_url = null, $application_question_highest_education = null, $application_question_college = null, $application_question_references = null, $internal_job_code = null, string $contentType = self::contentTypes['addNewJobOpening'][0])
    {
        return $this->addNewJobOpeningAsyncWithHttpInfo($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department, $minimum_experience, $compensation, $job_location, $application_question_resume, $application_question_address, $application_question_linkedin_url, $application_question_date_available, $application_question_desired_salary, $application_question_cover_letter, $application_question_referred_by, $application_question_website_url, $application_question_highest_education, $application_question_college, $application_question_references, $internal_job_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewJobOpeningAsyncWithHttpInfo
     *
     * Add New Job Opening
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $posting_title The posting title of the job opening. (required)
     * @param  string $job_status The status of the job opening. (required)
     * @param  int $hiring_lead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening. (required)
     * @param  string $employment_type The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc. (required)
     * @param  string $job_description The long-form text description of the job opening. (required)
     * @param  string|null $department The department of the job opening. (optional)
     * @param  string|null $minimum_experience The minimum experience level that qualifies a candidate for the job opening. (optional)
     * @param  string|null $compensation The pay rate or compensation for the job opening. (optional)
     * @param  int|null $job_location The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location. (optional)
     * @param  string|null $application_question_resume Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required). (optional)
     * @param  string|null $application_question_address Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required). (optional)
     * @param  string|null $application_question_linkedin_url Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required). (optional)
     * @param  string|null $application_question_date_available Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required). (optional)
     * @param  string|null $application_question_desired_salary Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required). (optional)
     * @param  string|null $application_question_cover_letter Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required). (optional)
     * @param  string|null $application_question_referred_by Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required). (optional)
     * @param  string|null $application_question_website_url Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required). (optional)
     * @param  string|null $application_question_highest_education Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required). (optional)
     * @param  string|null $application_question_college Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required). (optional)
     * @param  string|null $application_question_references Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required). (optional)
     * @param  string|null $internal_job_code The internal job code for the job opening. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewJobOpening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewJobOpeningAsyncWithHttpInfo($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department = null, $minimum_experience = null, $compensation = null, $job_location = null, $application_question_resume = null, $application_question_address = null, $application_question_linkedin_url = null, $application_question_date_available = null, $application_question_desired_salary = null, $application_question_cover_letter = null, $application_question_referred_by = null, $application_question_website_url = null, $application_question_highest_education = null, $application_question_college = null, $application_question_references = null, $internal_job_code = null, string $contentType = self::contentTypes['addNewJobOpening'][0])
    {
        $returnType = '';
        $request = $this->addNewJobOpeningRequest($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department, $minimum_experience, $compensation, $job_location, $application_question_resume, $application_question_address, $application_question_linkedin_url, $application_question_date_available, $application_question_desired_salary, $application_question_cover_letter, $application_question_referred_by, $application_question_website_url, $application_question_highest_education, $application_question_college, $application_question_references, $internal_job_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNewJobOpening'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $posting_title The posting title of the job opening. (required)
     * @param  string $job_status The status of the job opening. (required)
     * @param  int $hiring_lead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening. (required)
     * @param  string $employment_type The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc. (required)
     * @param  string $job_description The long-form text description of the job opening. (required)
     * @param  string|null $department The department of the job opening. (optional)
     * @param  string|null $minimum_experience The minimum experience level that qualifies a candidate for the job opening. (optional)
     * @param  string|null $compensation The pay rate or compensation for the job opening. (optional)
     * @param  int|null $job_location The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location. (optional)
     * @param  string|null $application_question_resume Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required). (optional)
     * @param  string|null $application_question_address Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required). (optional)
     * @param  string|null $application_question_linkedin_url Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required). (optional)
     * @param  string|null $application_question_date_available Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required). (optional)
     * @param  string|null $application_question_desired_salary Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required). (optional)
     * @param  string|null $application_question_cover_letter Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required). (optional)
     * @param  string|null $application_question_referred_by Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required). (optional)
     * @param  string|null $application_question_website_url Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required). (optional)
     * @param  string|null $application_question_highest_education Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required). (optional)
     * @param  string|null $application_question_college Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required). (optional)
     * @param  string|null $application_question_references Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required). (optional)
     * @param  string|null $internal_job_code The internal job code for the job opening. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewJobOpening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewJobOpeningRequest($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department = null, $minimum_experience = null, $compensation = null, $job_location = null, $application_question_resume = null, $application_question_address = null, $application_question_linkedin_url = null, $application_question_date_available = null, $application_question_desired_salary = null, $application_question_cover_letter = null, $application_question_referred_by = null, $application_question_website_url = null, $application_question_highest_education = null, $application_question_college = null, $application_question_references = null, $internal_job_code = null, string $contentType = self::contentTypes['addNewJobOpening'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addNewJobOpening'
            );
        }

        // verify the required parameter 'posting_title' is set
        if ($posting_title === null || (is_array($posting_title) && count($posting_title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $posting_title when calling addNewJobOpening'
            );
        }

        // verify the required parameter 'job_status' is set
        if ($job_status === null || (is_array($job_status) && count($job_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_status when calling addNewJobOpening'
            );
        }

        // verify the required parameter 'hiring_lead' is set
        if ($hiring_lead === null || (is_array($hiring_lead) && count($hiring_lead) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hiring_lead when calling addNewJobOpening'
            );
        }

        // verify the required parameter 'employment_type' is set
        if ($employment_type === null || (is_array($employment_type) && count($employment_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employment_type when calling addNewJobOpening'
            );
        }

        // verify the required parameter 'job_description' is set
        if ($job_description === null || (is_array($job_description) && count($job_description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_description when calling addNewJobOpening'
            );
        }


















        $resourcePath = '/{companyDomain}/v1/applicant_tracking/job_opening';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }

        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'posting_title' => $posting_title,
            'job_status' => $job_status,
            'hiring_lead' => $hiring_lead,
            'department' => $department,
            'employment_type' => $employment_type,
            'minimum_experience' => $minimum_experience,
            'compensation' => $compensation,
            'job_location' => $job_location,
            'job_description' => $job_description,
            'application_question_resume' => $application_question_resume,
            'application_question_address' => $application_question_address,
            'application_question_linkedin_url' => $application_question_linkedin_url,
            'application_question_date_available' => $application_question_date_available,
            'application_question_desired_salary' => $application_question_desired_salary,
            'application_question_cover_letter' => $application_question_cover_letter,
            'application_question_referred_by' => $application_question_referred_by,
            'application_question_website_url' => $application_question_website_url,
            'application_question_highest_education' => $application_question_highest_education,
            'application_question_college' => $application_question_college,
            'application_question_references' => $application_question_references,
            'internal_job_code' => $internal_job_code,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addTrainingCategory
     *
     * Add Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingCategoryRequest $add_training_category_request Training category to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingCategory
     */
    public function addTrainingCategory($company_domain, $add_training_category_request, string $contentType = self::contentTypes['addTrainingCategory'][0])
    {
        list($response) = $this->addTrainingCategoryWithHttpInfo($company_domain, $add_training_category_request, $contentType);
        return $response;
    }

    /**
     * Operation addTrainingCategoryWithHttpInfo
     *
     * Add Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingCategoryRequest $add_training_category_request Training category to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTrainingCategoryWithHttpInfo($company_domain, $add_training_category_request, string $contentType = self::contentTypes['addTrainingCategory'][0])
    {
        $request = $this->addTrainingCategoryRequest($company_domain, $add_training_category_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingCategory',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingCategory',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingCategory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addTrainingCategoryAsync
     *
     * Add Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingCategoryRequest $add_training_category_request Training category to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTrainingCategoryAsync($company_domain, $add_training_category_request, string $contentType = self::contentTypes['addTrainingCategory'][0])
    {
        return $this->addTrainingCategoryAsyncWithHttpInfo($company_domain, $add_training_category_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTrainingCategoryAsyncWithHttpInfo
     *
     * Add Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingCategoryRequest $add_training_category_request Training category to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTrainingCategoryAsyncWithHttpInfo($company_domain, $add_training_category_request, string $contentType = self::contentTypes['addTrainingCategory'][0])
    {
        $returnType = '\MySdk\Model\TrainingCategory';
        $request = $this->addTrainingCategoryRequest($company_domain, $add_training_category_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTrainingCategory'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingCategoryRequest $add_training_category_request Training category to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addTrainingCategoryRequest($company_domain, $add_training_category_request, string $contentType = self::contentTypes['addTrainingCategory'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addTrainingCategory'
            );
        }

        // verify the required parameter 'add_training_category_request' is set
        if ($add_training_category_request === null || (is_array($add_training_category_request) && count($add_training_category_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_training_category_request when calling addTrainingCategory'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_training_category_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_training_category_request));
            } else {
                $httpBody = $add_training_category_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addTrainingType
     *
     * Add Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingTypeRequest $add_training_type_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingType
     */
    public function addTrainingType($company_domain, $add_training_type_request, string $contentType = self::contentTypes['addTrainingType'][0])
    {
        list($response) = $this->addTrainingTypeWithHttpInfo($company_domain, $add_training_type_request, $contentType);
        return $response;
    }

    /**
     * Operation addTrainingTypeWithHttpInfo
     *
     * Add Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingTypeRequest $add_training_type_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingType, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTrainingTypeWithHttpInfo($company_domain, $add_training_type_request, string $contentType = self::contentTypes['addTrainingType'][0])
    {
        $request = $this->addTrainingTypeRequest($company_domain, $add_training_type_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingType',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingType',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation addTrainingTypeAsync
     *
     * Add Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingTypeRequest $add_training_type_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTrainingTypeAsync($company_domain, $add_training_type_request, string $contentType = self::contentTypes['addTrainingType'][0])
    {
        return $this->addTrainingTypeAsyncWithHttpInfo($company_domain, $add_training_type_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTrainingTypeAsyncWithHttpInfo
     *
     * Add Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingTypeRequest $add_training_type_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTrainingTypeAsyncWithHttpInfo($company_domain, $add_training_type_request, string $contentType = self::contentTypes['addTrainingType'][0])
    {
        $returnType = '\MySdk\Model\TrainingType';
        $request = $this->addTrainingTypeRequest($company_domain, $add_training_type_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTrainingType'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\AddTrainingTypeRequest $add_training_type_request Training object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addTrainingTypeRequest($company_domain, $add_training_type_request, string $contentType = self::contentTypes['addTrainingType'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addTrainingType'
            );
        }

        // verify the required parameter 'add_training_type_request' is set
        if ($add_training_type_request === null || (is_array($add_training_type_request) && count($add_training_type_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_training_type_request when calling addTrainingType'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_training_type_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_training_type_request));
            } else {
                $httpBody = $add_training_type_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation b86bb5db603786dfc98c8f6a7bb1a218
     *
     * Add Timesheet Clock-In Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock in. (required)
     * @param  \MySdk\Model\B86bb5db603786dfc98c8f6a7bb1a218Request|null $b86bb5db603786dfc98c8f6a7bb1a218_request b86bb5db603786dfc98c8f6a7bb1a218_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TimesheetEntryInfoApiTransformer|mixed|mixed|mixed|mixed|mixed
     */
    public function b86bb5db603786dfc98c8f6a7bb1a218($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request = null, string $contentType = self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'][0])
    {
        list($response) = $this->b86bb5db603786dfc98c8f6a7bb1a218WithHttpInfo($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request, $contentType);
        return $response;
    }

    /**
     * Operation b86bb5db603786dfc98c8f6a7bb1a218WithHttpInfo
     *
     * Add Timesheet Clock-In Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock in. (required)
     * @param  \MySdk\Model\B86bb5db603786dfc98c8f6a7bb1a218Request|null $b86bb5db603786dfc98c8f6a7bb1a218_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TimesheetEntryInfoApiTransformer|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function b86bb5db603786dfc98c8f6a7bb1a218WithHttpInfo($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request = null, string $contentType = self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'][0])
    {
        $request = $this->b86bb5db603786dfc98c8f6a7bb1a218Request($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation b86bb5db603786dfc98c8f6a7bb1a218Async
     *
     * Add Timesheet Clock-In Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock in. (required)
     * @param  \MySdk\Model\B86bb5db603786dfc98c8f6a7bb1a218Request|null $b86bb5db603786dfc98c8f6a7bb1a218_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function b86bb5db603786dfc98c8f6a7bb1a218Async($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request = null, string $contentType = self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'][0])
    {
        return $this->b86bb5db603786dfc98c8f6a7bb1a218AsyncWithHttpInfo($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation b86bb5db603786dfc98c8f6a7bb1a218AsyncWithHttpInfo
     *
     * Add Timesheet Clock-In Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock in. (required)
     * @param  \MySdk\Model\B86bb5db603786dfc98c8f6a7bb1a218Request|null $b86bb5db603786dfc98c8f6a7bb1a218_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function b86bb5db603786dfc98c8f6a7bb1a218AsyncWithHttpInfo($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request = null, string $contentType = self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'][0])
    {
        $returnType = '\MySdk\Model\TimesheetEntryInfoApiTransformer';
        $request = $this->b86bb5db603786dfc98c8f6a7bb1a218Request($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'b86bb5db603786dfc98c8f6a7bb1a218'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock in. (required)
     * @param  \MySdk\Model\B86bb5db603786dfc98c8f6a7bb1a218Request|null $b86bb5db603786dfc98c8f6a7bb1a218_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function b86bb5db603786dfc98c8f6a7bb1a218Request($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request = null, string $contentType = self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling b86bb5db603786dfc98c8f6a7bb1a218'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling b86bb5db603786dfc98c8f6a7bb1a218'
            );
        }



        $resourcePath = '/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_in';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($b86bb5db603786dfc98c8f6a7bb1a218_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($b86bb5db603786dfc98c8f6a7bb1a218_request));
            } else {
                $httpBody = $b86bb5db603786dfc98c8f6a7bb1a218_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call0f428442e53dc46d1e2c8ff5b7a483a8
     *
     * addTimeTrackingBulk
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\TimeTrackingRecord[] $time_tracking_record time_tracking_record (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call0f428442e53dc46d1e2c8ff5b7a483a8'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201Response
     */
    public function call0f428442e53dc46d1e2c8ff5b7a483a8($company_domain, $time_tracking_record, string $contentType = self::contentTypes['call0f428442e53dc46d1e2c8ff5b7a483a8'][0])
    {
        list($response) = $this->call0f428442e53dc46d1e2c8ff5b7a483a8WithHttpInfo($company_domain, $time_tracking_record, $contentType);
        return $response;
    }

    /**
     * Operation call0f428442e53dc46d1e2c8ff5b7a483a8WithHttpInfo
     *
     * addTimeTrackingBulk
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\TimeTrackingRecord[] $time_tracking_record (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call0f428442e53dc46d1e2c8ff5b7a483a8'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function call0f428442e53dc46d1e2c8ff5b7a483a8WithHttpInfo($company_domain, $time_tracking_record, string $contentType = self::contentTypes['call0f428442e53dc46d1e2c8ff5b7a483a8'][0])
    {
        $request = $this->call0f428442e53dc46d1e2c8ff5b7a483a8Request($company_domain, $time_tracking_record, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call0f428442e53dc46d1e2c8ff5b7a483a8Async
     *
     * addTimeTrackingBulk
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\TimeTrackingRecord[] $time_tracking_record (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call0f428442e53dc46d1e2c8ff5b7a483a8'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call0f428442e53dc46d1e2c8ff5b7a483a8Async($company_domain, $time_tracking_record, string $contentType = self::contentTypes['call0f428442e53dc46d1e2c8ff5b7a483a8'][0])
    {
        return $this->call0f428442e53dc46d1e2c8ff5b7a483a8AsyncWithHttpInfo($company_domain, $time_tracking_record, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call0f428442e53dc46d1e2c8ff5b7a483a8AsyncWithHttpInfo
     *
     * addTimeTrackingBulk
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\TimeTrackingRecord[] $time_tracking_record (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call0f428442e53dc46d1e2c8ff5b7a483a8'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call0f428442e53dc46d1e2c8ff5b7a483a8AsyncWithHttpInfo($company_domain, $time_tracking_record, string $contentType = self::contentTypes['call0f428442e53dc46d1e2c8ff5b7a483a8'][0])
    {
        $returnType = '\MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201Response';
        $request = $this->call0f428442e53dc46d1e2c8ff5b7a483a8Request($company_domain, $time_tracking_record, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call0f428442e53dc46d1e2c8ff5b7a483a8'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\TimeTrackingRecord[] $time_tracking_record (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call0f428442e53dc46d1e2c8ff5b7a483a8'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call0f428442e53dc46d1e2c8ff5b7a483a8Request($company_domain, $time_tracking_record, string $contentType = self::contentTypes['call0f428442e53dc46d1e2c8ff5b7a483a8'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call0f428442e53dc46d1e2c8ff5b7a483a8'
            );
        }

        // verify the required parameter 'time_tracking_record' is set
        if ($time_tracking_record === null || (is_array($time_tracking_record) && count($time_tracking_record) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_tracking_record when calling call0f428442e53dc46d1e2c8ff5b7a483a8'
            );
        }


        $resourcePath = '/{companyDomain}/v1/timetracking/record';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($time_tracking_record)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($time_tracking_record));
            } else {
                $httpBody = $time_tracking_record;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call149e00955713fb486cd7a81dd6ee31aa
     *
     * Add/Edit Timesheet Clock Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\149e00955713fb486cd7a81dd6ee31aaRequest|null $_149e00955713fb486cd7a81dd6ee31aa_request _149e00955713fb486cd7a81dd6ee31aa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TimesheetEntryInfoApiTransformer[]|mixed|mixed|mixed|mixed|mixed|mixed
     */
    public function call149e00955713fb486cd7a81dd6ee31aa($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request = null, string $contentType = self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'][0])
    {
        list($response) = $this->call149e00955713fb486cd7a81dd6ee31aaWithHttpInfo($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request, $contentType);
        return $response;
    }

    /**
     * Operation call149e00955713fb486cd7a81dd6ee31aaWithHttpInfo
     *
     * Add/Edit Timesheet Clock Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\149e00955713fb486cd7a81dd6ee31aaRequest|null $_149e00955713fb486cd7a81dd6ee31aa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TimesheetEntryInfoApiTransformer[]|mixed|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function call149e00955713fb486cd7a81dd6ee31aaWithHttpInfo($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request = null, string $contentType = self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'][0])
    {
        $request = $this->call149e00955713fb486cd7a81dd6ee31aaRequest($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call149e00955713fb486cd7a81dd6ee31aaAsync
     *
     * Add/Edit Timesheet Clock Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\149e00955713fb486cd7a81dd6ee31aaRequest|null $_149e00955713fb486cd7a81dd6ee31aa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call149e00955713fb486cd7a81dd6ee31aaAsync($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request = null, string $contentType = self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'][0])
    {
        return $this->call149e00955713fb486cd7a81dd6ee31aaAsyncWithHttpInfo($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call149e00955713fb486cd7a81dd6ee31aaAsyncWithHttpInfo
     *
     * Add/Edit Timesheet Clock Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\149e00955713fb486cd7a81dd6ee31aaRequest|null $_149e00955713fb486cd7a81dd6ee31aa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call149e00955713fb486cd7a81dd6ee31aaAsyncWithHttpInfo($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request = null, string $contentType = self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'][0])
    {
        $returnType = '\MySdk\Model\TimesheetEntryInfoApiTransformer[]';
        $request = $this->call149e00955713fb486cd7a81dd6ee31aaRequest($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call149e00955713fb486cd7a81dd6ee31aa'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\149e00955713fb486cd7a81dd6ee31aaRequest|null $_149e00955713fb486cd7a81dd6ee31aa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call149e00955713fb486cd7a81dd6ee31aaRequest($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request = null, string $contentType = self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call149e00955713fb486cd7a81dd6ee31aa'
            );
        }



        $resourcePath = '/{companyDomain}/v1/time_tracking/clock_entries/store';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_149e00955713fb486cd7a81dd6ee31aa_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_149e00955713fb486cd7a81dd6ee31aa_request));
            } else {
                $httpBody = $_149e00955713fb486cd7a81dd6ee31aa_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call14e73aef978eb81d51fdbd74e0e83823
     *
     * adjustTimeTracking
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\14e73aef978eb81d51fdbd74e0e83823Request $_14e73aef978eb81d51fdbd74e0e83823_request _14e73aef978eb81d51fdbd74e0e83823_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call14e73aef978eb81d51fdbd74e0e83823'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|mixed
     */
    public function call14e73aef978eb81d51fdbd74e0e83823($company_domain, $_14e73aef978eb81d51fdbd74e0e83823_request, string $contentType = self::contentTypes['call14e73aef978eb81d51fdbd74e0e83823'][0])
    {
        list($response) = $this->call14e73aef978eb81d51fdbd74e0e83823WithHttpInfo($company_domain, $_14e73aef978eb81d51fdbd74e0e83823_request, $contentType);
        return $response;
    }

    /**
     * Operation call14e73aef978eb81d51fdbd74e0e83823WithHttpInfo
     *
     * adjustTimeTracking
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\14e73aef978eb81d51fdbd74e0e83823Request $_14e73aef978eb81d51fdbd74e0e83823_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call14e73aef978eb81d51fdbd74e0e83823'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function call14e73aef978eb81d51fdbd74e0e83823WithHttpInfo($company_domain, $_14e73aef978eb81d51fdbd74e0e83823_request, string $contentType = self::contentTypes['call14e73aef978eb81d51fdbd74e0e83823'][0])
    {
        $request = $this->call14e73aef978eb81d51fdbd74e0e83823Request($company_domain, $_14e73aef978eb81d51fdbd74e0e83823_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call14e73aef978eb81d51fdbd74e0e83823Async
     *
     * adjustTimeTracking
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\14e73aef978eb81d51fdbd74e0e83823Request $_14e73aef978eb81d51fdbd74e0e83823_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call14e73aef978eb81d51fdbd74e0e83823'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call14e73aef978eb81d51fdbd74e0e83823Async($company_domain, $_14e73aef978eb81d51fdbd74e0e83823_request, string $contentType = self::contentTypes['call14e73aef978eb81d51fdbd74e0e83823'][0])
    {
        return $this->call14e73aef978eb81d51fdbd74e0e83823AsyncWithHttpInfo($company_domain, $_14e73aef978eb81d51fdbd74e0e83823_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call14e73aef978eb81d51fdbd74e0e83823AsyncWithHttpInfo
     *
     * adjustTimeTracking
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\14e73aef978eb81d51fdbd74e0e83823Request $_14e73aef978eb81d51fdbd74e0e83823_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call14e73aef978eb81d51fdbd74e0e83823'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call14e73aef978eb81d51fdbd74e0e83823AsyncWithHttpInfo($company_domain, $_14e73aef978eb81d51fdbd74e0e83823_request, string $contentType = self::contentTypes['call14e73aef978eb81d51fdbd74e0e83823'][0])
    {
        $returnType = 'mixed';
        $request = $this->call14e73aef978eb81d51fdbd74e0e83823Request($company_domain, $_14e73aef978eb81d51fdbd74e0e83823_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call14e73aef978eb81d51fdbd74e0e83823'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\14e73aef978eb81d51fdbd74e0e83823Request $_14e73aef978eb81d51fdbd74e0e83823_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call14e73aef978eb81d51fdbd74e0e83823'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call14e73aef978eb81d51fdbd74e0e83823Request($company_domain, $_14e73aef978eb81d51fdbd74e0e83823_request, string $contentType = self::contentTypes['call14e73aef978eb81d51fdbd74e0e83823'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call14e73aef978eb81d51fdbd74e0e83823'
            );
        }

        // verify the required parameter '_14e73aef978eb81d51fdbd74e0e83823_request' is set
        if ($_14e73aef978eb81d51fdbd74e0e83823_request === null || (is_array($_14e73aef978eb81d51fdbd74e0e83823_request) && count($_14e73aef978eb81d51fdbd74e0e83823_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $_14e73aef978eb81d51fdbd74e0e83823_request when calling call14e73aef978eb81d51fdbd74e0e83823'
            );
        }


        $resourcePath = '/{companyDomain}/v1/timetracking/adjust';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_14e73aef978eb81d51fdbd74e0e83823_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_14e73aef978eb81d51fdbd74e0e83823_request));
            } else {
                $httpBody = $_14e73aef978eb81d51fdbd74e0e83823_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call59d25b8c03d013c96fbbf866769b8206
     *
     * Get Field Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\59d25b8c03d013c96fbbf866769b8206Request $_59d25b8c03d013c96fbbf866769b8206_request _59d25b8c03d013c96fbbf866769b8206_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call59d25b8c03d013c96fbbf866769b8206'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\FieldOptionsTransformer[]|\MySdk\Model\PostWebhook403ResponseErrorsInner|\MySdk\Model\PostWebhook403ResponseErrorsInner
     */
    public function call59d25b8c03d013c96fbbf866769b8206($company_domain, $_59d25b8c03d013c96fbbf866769b8206_request, string $contentType = self::contentTypes['call59d25b8c03d013c96fbbf866769b8206'][0])
    {
        list($response) = $this->call59d25b8c03d013c96fbbf866769b8206WithHttpInfo($company_domain, $_59d25b8c03d013c96fbbf866769b8206_request, $contentType);
        return $response;
    }

    /**
     * Operation call59d25b8c03d013c96fbbf866769b8206WithHttpInfo
     *
     * Get Field Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\59d25b8c03d013c96fbbf866769b8206Request $_59d25b8c03d013c96fbbf866769b8206_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call59d25b8c03d013c96fbbf866769b8206'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\FieldOptionsTransformer[]|\MySdk\Model\PostWebhook403ResponseErrorsInner|\MySdk\Model\PostWebhook403ResponseErrorsInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function call59d25b8c03d013c96fbbf866769b8206WithHttpInfo($company_domain, $_59d25b8c03d013c96fbbf866769b8206_request, string $contentType = self::contentTypes['call59d25b8c03d013c96fbbf866769b8206'][0])
    {
        $request = $this->call59d25b8c03d013c96fbbf866769b8206Request($company_domain, $_59d25b8c03d013c96fbbf866769b8206_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\FieldOptionsTransformer[]',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\PostWebhook403ResponseErrorsInner',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\PostWebhook403ResponseErrorsInner',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\FieldOptionsTransformer[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\FieldOptionsTransformer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\PostWebhook403ResponseErrorsInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\PostWebhook403ResponseErrorsInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call59d25b8c03d013c96fbbf866769b8206Async
     *
     * Get Field Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\59d25b8c03d013c96fbbf866769b8206Request $_59d25b8c03d013c96fbbf866769b8206_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call59d25b8c03d013c96fbbf866769b8206'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call59d25b8c03d013c96fbbf866769b8206Async($company_domain, $_59d25b8c03d013c96fbbf866769b8206_request, string $contentType = self::contentTypes['call59d25b8c03d013c96fbbf866769b8206'][0])
    {
        return $this->call59d25b8c03d013c96fbbf866769b8206AsyncWithHttpInfo($company_domain, $_59d25b8c03d013c96fbbf866769b8206_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call59d25b8c03d013c96fbbf866769b8206AsyncWithHttpInfo
     *
     * Get Field Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\59d25b8c03d013c96fbbf866769b8206Request $_59d25b8c03d013c96fbbf866769b8206_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call59d25b8c03d013c96fbbf866769b8206'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call59d25b8c03d013c96fbbf866769b8206AsyncWithHttpInfo($company_domain, $_59d25b8c03d013c96fbbf866769b8206_request, string $contentType = self::contentTypes['call59d25b8c03d013c96fbbf866769b8206'][0])
    {
        $returnType = '\MySdk\Model\FieldOptionsTransformer[]';
        $request = $this->call59d25b8c03d013c96fbbf866769b8206Request($company_domain, $_59d25b8c03d013c96fbbf866769b8206_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call59d25b8c03d013c96fbbf866769b8206'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\59d25b8c03d013c96fbbf866769b8206Request $_59d25b8c03d013c96fbbf866769b8206_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call59d25b8c03d013c96fbbf866769b8206'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call59d25b8c03d013c96fbbf866769b8206Request($company_domain, $_59d25b8c03d013c96fbbf866769b8206_request, string $contentType = self::contentTypes['call59d25b8c03d013c96fbbf866769b8206'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call59d25b8c03d013c96fbbf866769b8206'
            );
        }

        // verify the required parameter '_59d25b8c03d013c96fbbf866769b8206_request' is set
        if ($_59d25b8c03d013c96fbbf866769b8206_request === null || (is_array($_59d25b8c03d013c96fbbf866769b8206_request) && count($_59d25b8c03d013c96fbbf866769b8206_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $_59d25b8c03d013c96fbbf866769b8206_request when calling call59d25b8c03d013c96fbbf866769b8206'
            );
        }


        $resourcePath = '/{companyDomain}/v1/field-options';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_59d25b8c03d013c96fbbf866769b8206_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_59d25b8c03d013c96fbbf866769b8206_request));
            } else {
                $httpBody = $_59d25b8c03d013c96fbbf866769b8206_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call5e1c5b4ef12e61d1bc975e8b4e00c38d
     *
     * getTimeTrackingByTimeTrackingId
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the time tracking ID used to originally create the record. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call5e1c5b4ef12e61d1bc975e8b4e00c38d'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\Model5e1c5b4ef12e61d1bc975e8b4e00c38d200Response|mixed
     */
    public function call5e1c5b4ef12e61d1bc975e8b4e00c38d($company_domain, $id, string $contentType = self::contentTypes['call5e1c5b4ef12e61d1bc975e8b4e00c38d'][0])
    {
        list($response) = $this->call5e1c5b4ef12e61d1bc975e8b4e00c38dWithHttpInfo($company_domain, $id, $contentType);
        return $response;
    }

    /**
     * Operation call5e1c5b4ef12e61d1bc975e8b4e00c38dWithHttpInfo
     *
     * getTimeTrackingByTimeTrackingId
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the time tracking ID used to originally create the record. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call5e1c5b4ef12e61d1bc975e8b4e00c38d'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\Model5e1c5b4ef12e61d1bc975e8b4e00c38d200Response|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function call5e1c5b4ef12e61d1bc975e8b4e00c38dWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['call5e1c5b4ef12e61d1bc975e8b4e00c38d'][0])
    {
        $request = $this->call5e1c5b4ef12e61d1bc975e8b4e00c38dRequest($company_domain, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\Model5e1c5b4ef12e61d1bc975e8b4e00c38d200Response',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\Model5e1c5b4ef12e61d1bc975e8b4e00c38d200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\Model5e1c5b4ef12e61d1bc975e8b4e00c38d200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call5e1c5b4ef12e61d1bc975e8b4e00c38dAsync
     *
     * getTimeTrackingByTimeTrackingId
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the time tracking ID used to originally create the record. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call5e1c5b4ef12e61d1bc975e8b4e00c38d'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call5e1c5b4ef12e61d1bc975e8b4e00c38dAsync($company_domain, $id, string $contentType = self::contentTypes['call5e1c5b4ef12e61d1bc975e8b4e00c38d'][0])
    {
        return $this->call5e1c5b4ef12e61d1bc975e8b4e00c38dAsyncWithHttpInfo($company_domain, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call5e1c5b4ef12e61d1bc975e8b4e00c38dAsyncWithHttpInfo
     *
     * getTimeTrackingByTimeTrackingId
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the time tracking ID used to originally create the record. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call5e1c5b4ef12e61d1bc975e8b4e00c38d'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call5e1c5b4ef12e61d1bc975e8b4e00c38dAsyncWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['call5e1c5b4ef12e61d1bc975e8b4e00c38d'][0])
    {
        $returnType = '\MySdk\Model\Model5e1c5b4ef12e61d1bc975e8b4e00c38d200Response';
        $request = $this->call5e1c5b4ef12e61d1bc975e8b4e00c38dRequest($company_domain, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call5e1c5b4ef12e61d1bc975e8b4e00c38d'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the time tracking ID used to originally create the record. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call5e1c5b4ef12e61d1bc975e8b4e00c38d'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call5e1c5b4ef12e61d1bc975e8b4e00c38dRequest($company_domain, $id, string $contentType = self::contentTypes['call5e1c5b4ef12e61d1bc975e8b4e00c38d'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call5e1c5b4ef12e61d1bc975e8b4e00c38d'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling call5e1c5b4ef12e61d1bc975e8b4e00c38d'
            );
        }


        $resourcePath = '/{companyDomain}/v1/timetracking/record/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call69c777478f5d52dee1b4f0937dca154f
     *
     * addTimeTracking
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\TimeTrackingRecord $time_tracking_record time_tracking_record (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call69c777478f5d52dee1b4f0937dca154f'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\Model69c777478f5d52dee1b4f0937dca154f201Response|mixed
     */
    public function call69c777478f5d52dee1b4f0937dca154f($company_domain, $time_tracking_record, string $contentType = self::contentTypes['call69c777478f5d52dee1b4f0937dca154f'][0])
    {
        list($response) = $this->call69c777478f5d52dee1b4f0937dca154fWithHttpInfo($company_domain, $time_tracking_record, $contentType);
        return $response;
    }

    /**
     * Operation call69c777478f5d52dee1b4f0937dca154fWithHttpInfo
     *
     * addTimeTracking
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\TimeTrackingRecord $time_tracking_record (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call69c777478f5d52dee1b4f0937dca154f'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\Model69c777478f5d52dee1b4f0937dca154f201Response|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function call69c777478f5d52dee1b4f0937dca154fWithHttpInfo($company_domain, $time_tracking_record, string $contentType = self::contentTypes['call69c777478f5d52dee1b4f0937dca154f'][0])
    {
        $request = $this->call69c777478f5d52dee1b4f0937dca154fRequest($company_domain, $time_tracking_record, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\Model69c777478f5d52dee1b4f0937dca154f201Response',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\Model69c777478f5d52dee1b4f0937dca154f201Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\Model69c777478f5d52dee1b4f0937dca154f201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call69c777478f5d52dee1b4f0937dca154fAsync
     *
     * addTimeTracking
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\TimeTrackingRecord $time_tracking_record (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call69c777478f5d52dee1b4f0937dca154f'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call69c777478f5d52dee1b4f0937dca154fAsync($company_domain, $time_tracking_record, string $contentType = self::contentTypes['call69c777478f5d52dee1b4f0937dca154f'][0])
    {
        return $this->call69c777478f5d52dee1b4f0937dca154fAsyncWithHttpInfo($company_domain, $time_tracking_record, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call69c777478f5d52dee1b4f0937dca154fAsyncWithHttpInfo
     *
     * addTimeTracking
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\TimeTrackingRecord $time_tracking_record (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call69c777478f5d52dee1b4f0937dca154f'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call69c777478f5d52dee1b4f0937dca154fAsyncWithHttpInfo($company_domain, $time_tracking_record, string $contentType = self::contentTypes['call69c777478f5d52dee1b4f0937dca154f'][0])
    {
        $returnType = '\MySdk\Model\Model69c777478f5d52dee1b4f0937dca154f201Response';
        $request = $this->call69c777478f5d52dee1b4f0937dca154fRequest($company_domain, $time_tracking_record, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call69c777478f5d52dee1b4f0937dca154f'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\TimeTrackingRecord $time_tracking_record (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call69c777478f5d52dee1b4f0937dca154f'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call69c777478f5d52dee1b4f0937dca154fRequest($company_domain, $time_tracking_record, string $contentType = self::contentTypes['call69c777478f5d52dee1b4f0937dca154f'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call69c777478f5d52dee1b4f0937dca154f'
            );
        }

        // verify the required parameter 'time_tracking_record' is set
        if ($time_tracking_record === null || (is_array($time_tracking_record) && count($time_tracking_record) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_tracking_record when calling call69c777478f5d52dee1b4f0937dca154f'
            );
        }


        $resourcePath = '/{companyDomain}/v1/timetracking/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($time_tracking_record)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($time_tracking_record));
            } else {
                $httpBody = $time_tracking_record;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call88ef63550f43537c6b3bfaa03d51d95d
     *
     * Add Timesheet Clock-Out Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock out. (required)
     * @param  \MySdk\Model\88ef63550f43537c6b3bfaa03d51d95dRequest|null $_88ef63550f43537c6b3bfaa03d51d95d_request _88ef63550f43537c6b3bfaa03d51d95d_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TimesheetEntryInfoApiTransformer|mixed|mixed|mixed|mixed|mixed|mixed
     */
    public function call88ef63550f43537c6b3bfaa03d51d95d($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request = null, string $contentType = self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'][0])
    {
        list($response) = $this->call88ef63550f43537c6b3bfaa03d51d95dWithHttpInfo($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request, $contentType);
        return $response;
    }

    /**
     * Operation call88ef63550f43537c6b3bfaa03d51d95dWithHttpInfo
     *
     * Add Timesheet Clock-Out Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock out. (required)
     * @param  \MySdk\Model\88ef63550f43537c6b3bfaa03d51d95dRequest|null $_88ef63550f43537c6b3bfaa03d51d95d_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TimesheetEntryInfoApiTransformer|mixed|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function call88ef63550f43537c6b3bfaa03d51d95dWithHttpInfo($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request = null, string $contentType = self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'][0])
    {
        $request = $this->call88ef63550f43537c6b3bfaa03d51d95dRequest($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call88ef63550f43537c6b3bfaa03d51d95dAsync
     *
     * Add Timesheet Clock-Out Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock out. (required)
     * @param  \MySdk\Model\88ef63550f43537c6b3bfaa03d51d95dRequest|null $_88ef63550f43537c6b3bfaa03d51d95d_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call88ef63550f43537c6b3bfaa03d51d95dAsync($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request = null, string $contentType = self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'][0])
    {
        return $this->call88ef63550f43537c6b3bfaa03d51d95dAsyncWithHttpInfo($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call88ef63550f43537c6b3bfaa03d51d95dAsyncWithHttpInfo
     *
     * Add Timesheet Clock-Out Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock out. (required)
     * @param  \MySdk\Model\88ef63550f43537c6b3bfaa03d51d95dRequest|null $_88ef63550f43537c6b3bfaa03d51d95d_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call88ef63550f43537c6b3bfaa03d51d95dAsyncWithHttpInfo($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request = null, string $contentType = self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'][0])
    {
        $returnType = '\MySdk\Model\TimesheetEntryInfoApiTransformer';
        $request = $this->call88ef63550f43537c6b3bfaa03d51d95dRequest($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call88ef63550f43537c6b3bfaa03d51d95d'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock out. (required)
     * @param  \MySdk\Model\88ef63550f43537c6b3bfaa03d51d95dRequest|null $_88ef63550f43537c6b3bfaa03d51d95d_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call88ef63550f43537c6b3bfaa03d51d95dRequest($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request = null, string $contentType = self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call88ef63550f43537c6b3bfaa03d51d95d'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling call88ef63550f43537c6b3bfaa03d51d95d'
            );
        }



        $resourcePath = '/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_out';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_88ef63550f43537c6b3bfaa03d51d95d_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_88ef63550f43537c6b3bfaa03d51d95d_request));
            } else {
                $httpBody = $_88ef63550f43537c6b3bfaa03d51d95d_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call910252128bfbd9d42e50f9dc31bb6120
     *
     * Add/Edit Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\910252128bfbd9d42e50f9dc31bb6120Request|null $_910252128bfbd9d42e50f9dc31bb6120_request _910252128bfbd9d42e50f9dc31bb6120_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TimesheetEntryInfoApiTransformer[]|mixed|mixed|mixed|mixed|mixed|mixed
     */
    public function call910252128bfbd9d42e50f9dc31bb6120($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request = null, string $contentType = self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'][0])
    {
        list($response) = $this->call910252128bfbd9d42e50f9dc31bb6120WithHttpInfo($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request, $contentType);
        return $response;
    }

    /**
     * Operation call910252128bfbd9d42e50f9dc31bb6120WithHttpInfo
     *
     * Add/Edit Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\910252128bfbd9d42e50f9dc31bb6120Request|null $_910252128bfbd9d42e50f9dc31bb6120_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TimesheetEntryInfoApiTransformer[]|mixed|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function call910252128bfbd9d42e50f9dc31bb6120WithHttpInfo($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request = null, string $contentType = self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'][0])
    {
        $request = $this->call910252128bfbd9d42e50f9dc31bb6120Request($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call910252128bfbd9d42e50f9dc31bb6120Async
     *
     * Add/Edit Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\910252128bfbd9d42e50f9dc31bb6120Request|null $_910252128bfbd9d42e50f9dc31bb6120_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call910252128bfbd9d42e50f9dc31bb6120Async($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request = null, string $contentType = self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'][0])
    {
        return $this->call910252128bfbd9d42e50f9dc31bb6120AsyncWithHttpInfo($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call910252128bfbd9d42e50f9dc31bb6120AsyncWithHttpInfo
     *
     * Add/Edit Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\910252128bfbd9d42e50f9dc31bb6120Request|null $_910252128bfbd9d42e50f9dc31bb6120_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call910252128bfbd9d42e50f9dc31bb6120AsyncWithHttpInfo($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request = null, string $contentType = self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'][0])
    {
        $returnType = '\MySdk\Model\TimesheetEntryInfoApiTransformer[]';
        $request = $this->call910252128bfbd9d42e50f9dc31bb6120Request($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call910252128bfbd9d42e50f9dc31bb6120'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\910252128bfbd9d42e50f9dc31bb6120Request|null $_910252128bfbd9d42e50f9dc31bb6120_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call910252128bfbd9d42e50f9dc31bb6120Request($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request = null, string $contentType = self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call910252128bfbd9d42e50f9dc31bb6120'
            );
        }



        $resourcePath = '/{companyDomain}/v1/time_tracking/hour_entries/store';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_910252128bfbd9d42e50f9dc31bb6120_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_910252128bfbd9d42e50f9dc31bb6120_request));
            } else {
                $httpBody = $_910252128bfbd9d42e50f9dc31bb6120_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call9a6d5660f03eadcf705c808a1f44b8c4
     *
     * Get Timesheet Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days. (required)
     * @param  \DateTime $end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days. (required)
     * @param  string|null $employee_ids A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\EmployeeTimesheetEntryTransformer[]|mixed|mixed|mixed|mixed
     */
    public function call9a6d5660f03eadcf705c808a1f44b8c4($company_domain, $start, $end, $employee_ids = null, string $contentType = self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'][0])
    {
        list($response) = $this->call9a6d5660f03eadcf705c808a1f44b8c4WithHttpInfo($company_domain, $start, $end, $employee_ids, $contentType);
        return $response;
    }

    /**
     * Operation call9a6d5660f03eadcf705c808a1f44b8c4WithHttpInfo
     *
     * Get Timesheet Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days. (required)
     * @param  \DateTime $end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days. (required)
     * @param  string|null $employee_ids A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\EmployeeTimesheetEntryTransformer[]|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function call9a6d5660f03eadcf705c808a1f44b8c4WithHttpInfo($company_domain, $start, $end, $employee_ids = null, string $contentType = self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'][0])
    {
        $request = $this->call9a6d5660f03eadcf705c808a1f44b8c4Request($company_domain, $start, $end, $employee_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\EmployeeTimesheetEntryTransformer[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\EmployeeTimesheetEntryTransformer[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\EmployeeTimesheetEntryTransformer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call9a6d5660f03eadcf705c808a1f44b8c4Async
     *
     * Get Timesheet Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days. (required)
     * @param  \DateTime $end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days. (required)
     * @param  string|null $employee_ids A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call9a6d5660f03eadcf705c808a1f44b8c4Async($company_domain, $start, $end, $employee_ids = null, string $contentType = self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'][0])
    {
        return $this->call9a6d5660f03eadcf705c808a1f44b8c4AsyncWithHttpInfo($company_domain, $start, $end, $employee_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call9a6d5660f03eadcf705c808a1f44b8c4AsyncWithHttpInfo
     *
     * Get Timesheet Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days. (required)
     * @param  \DateTime $end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days. (required)
     * @param  string|null $employee_ids A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call9a6d5660f03eadcf705c808a1f44b8c4AsyncWithHttpInfo($company_domain, $start, $end, $employee_ids = null, string $contentType = self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'][0])
    {
        $returnType = '\MySdk\Model\EmployeeTimesheetEntryTransformer[]';
        $request = $this->call9a6d5660f03eadcf705c808a1f44b8c4Request($company_domain, $start, $end, $employee_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call9a6d5660f03eadcf705c808a1f44b8c4'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days. (required)
     * @param  \DateTime $end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days. (required)
     * @param  string|null $employee_ids A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call9a6d5660f03eadcf705c808a1f44b8c4Request($company_domain, $start, $end, $employee_ids = null, string $contentType = self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call9a6d5660f03eadcf705c808a1f44b8c4'
            );
        }

        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling call9a6d5660f03eadcf705c808a1f44b8c4'
            );
        }

        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling call9a6d5660f03eadcf705c808a1f44b8c4'
            );
        }

        if ($employee_ids !== null && !preg_match("/^\\d+(,\\d+)*$/", $employee_ids)) {
            throw new \InvalidArgumentException("invalid value for \"employee_ids\" when calling PublicAPIApi.call9a6d5660f03eadcf705c808a1f44b8c4, must conform to the pattern /^\\d+(,\\d+)*$/.");
        }
        

        $resourcePath = '/{companyDomain}/v1/time_tracking/timesheet_entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end,
            'end', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employee_ids,
            'employeeIds', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation db65bacaf29686d9c3b1296f6047a065
     *
     * Delete Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Db65bacaf29686d9c3b1296f6047a065Request|null $db65bacaf29686d9c3b1296f6047a065_request db65bacaf29686d9c3b1296f6047a065_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['db65bacaf29686d9c3b1296f6047a065'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|mixed|mixed|mixed|mixed|mixed|mixed|mixed
     */
    public function db65bacaf29686d9c3b1296f6047a065($company_domain, $db65bacaf29686d9c3b1296f6047a065_request = null, string $contentType = self::contentTypes['db65bacaf29686d9c3b1296f6047a065'][0])
    {
        list($response) = $this->db65bacaf29686d9c3b1296f6047a065WithHttpInfo($company_domain, $db65bacaf29686d9c3b1296f6047a065_request, $contentType);
        return $response;
    }

    /**
     * Operation db65bacaf29686d9c3b1296f6047a065WithHttpInfo
     *
     * Delete Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Db65bacaf29686d9c3b1296f6047a065Request|null $db65bacaf29686d9c3b1296f6047a065_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['db65bacaf29686d9c3b1296f6047a065'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|mixed|mixed|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function db65bacaf29686d9c3b1296f6047a065WithHttpInfo($company_domain, $db65bacaf29686d9c3b1296f6047a065_request = null, string $contentType = self::contentTypes['db65bacaf29686d9c3b1296f6047a065'][0])
    {
        $request = $this->db65bacaf29686d9c3b1296f6047a065Request($company_domain, $db65bacaf29686d9c3b1296f6047a065_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 204:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation db65bacaf29686d9c3b1296f6047a065Async
     *
     * Delete Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Db65bacaf29686d9c3b1296f6047a065Request|null $db65bacaf29686d9c3b1296f6047a065_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['db65bacaf29686d9c3b1296f6047a065'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function db65bacaf29686d9c3b1296f6047a065Async($company_domain, $db65bacaf29686d9c3b1296f6047a065_request = null, string $contentType = self::contentTypes['db65bacaf29686d9c3b1296f6047a065'][0])
    {
        return $this->db65bacaf29686d9c3b1296f6047a065AsyncWithHttpInfo($company_domain, $db65bacaf29686d9c3b1296f6047a065_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation db65bacaf29686d9c3b1296f6047a065AsyncWithHttpInfo
     *
     * Delete Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Db65bacaf29686d9c3b1296f6047a065Request|null $db65bacaf29686d9c3b1296f6047a065_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['db65bacaf29686d9c3b1296f6047a065'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function db65bacaf29686d9c3b1296f6047a065AsyncWithHttpInfo($company_domain, $db65bacaf29686d9c3b1296f6047a065_request = null, string $contentType = self::contentTypes['db65bacaf29686d9c3b1296f6047a065'][0])
    {
        $returnType = 'mixed';
        $request = $this->db65bacaf29686d9c3b1296f6047a065Request($company_domain, $db65bacaf29686d9c3b1296f6047a065_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'db65bacaf29686d9c3b1296f6047a065'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Db65bacaf29686d9c3b1296f6047a065Request|null $db65bacaf29686d9c3b1296f6047a065_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['db65bacaf29686d9c3b1296f6047a065'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function db65bacaf29686d9c3b1296f6047a065Request($company_domain, $db65bacaf29686d9c3b1296f6047a065_request = null, string $contentType = self::contentTypes['db65bacaf29686d9c3b1296f6047a065'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling db65bacaf29686d9c3b1296f6047a065'
            );
        }



        $resourcePath = '/{companyDomain}/v1/time_tracking/hour_entries/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($db65bacaf29686d9c3b1296f6047a065_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($db65bacaf29686d9c3b1296f6047a065_request));
            } else {
                $httpBody = $db65bacaf29686d9c3b1296f6047a065_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dcb62a5d1780635153b978462f9debd0
     *
     * Delete timesheet clock entries.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Dcb62a5d1780635153b978462f9debd0Request $dcb62a5d1780635153b978462f9debd0_request dcb62a5d1780635153b978462f9debd0_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dcb62a5d1780635153b978462f9debd0'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|mixed|mixed|mixed|mixed|mixed|mixed
     */
    public function dcb62a5d1780635153b978462f9debd0($company_domain, $dcb62a5d1780635153b978462f9debd0_request, string $contentType = self::contentTypes['dcb62a5d1780635153b978462f9debd0'][0])
    {
        list($response) = $this->dcb62a5d1780635153b978462f9debd0WithHttpInfo($company_domain, $dcb62a5d1780635153b978462f9debd0_request, $contentType);
        return $response;
    }

    /**
     * Operation dcb62a5d1780635153b978462f9debd0WithHttpInfo
     *
     * Delete timesheet clock entries.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Dcb62a5d1780635153b978462f9debd0Request $dcb62a5d1780635153b978462f9debd0_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dcb62a5d1780635153b978462f9debd0'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|mixed|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function dcb62a5d1780635153b978462f9debd0WithHttpInfo($company_domain, $dcb62a5d1780635153b978462f9debd0_request, string $contentType = self::contentTypes['dcb62a5d1780635153b978462f9debd0'][0])
    {
        $request = $this->dcb62a5d1780635153b978462f9debd0Request($company_domain, $dcb62a5d1780635153b978462f9debd0_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 204:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation dcb62a5d1780635153b978462f9debd0Async
     *
     * Delete timesheet clock entries.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Dcb62a5d1780635153b978462f9debd0Request $dcb62a5d1780635153b978462f9debd0_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dcb62a5d1780635153b978462f9debd0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dcb62a5d1780635153b978462f9debd0Async($company_domain, $dcb62a5d1780635153b978462f9debd0_request, string $contentType = self::contentTypes['dcb62a5d1780635153b978462f9debd0'][0])
    {
        return $this->dcb62a5d1780635153b978462f9debd0AsyncWithHttpInfo($company_domain, $dcb62a5d1780635153b978462f9debd0_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dcb62a5d1780635153b978462f9debd0AsyncWithHttpInfo
     *
     * Delete timesheet clock entries.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Dcb62a5d1780635153b978462f9debd0Request $dcb62a5d1780635153b978462f9debd0_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dcb62a5d1780635153b978462f9debd0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dcb62a5d1780635153b978462f9debd0AsyncWithHttpInfo($company_domain, $dcb62a5d1780635153b978462f9debd0_request, string $contentType = self::contentTypes['dcb62a5d1780635153b978462f9debd0'][0])
    {
        $returnType = 'mixed';
        $request = $this->dcb62a5d1780635153b978462f9debd0Request($company_domain, $dcb62a5d1780635153b978462f9debd0_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dcb62a5d1780635153b978462f9debd0'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Dcb62a5d1780635153b978462f9debd0Request $dcb62a5d1780635153b978462f9debd0_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dcb62a5d1780635153b978462f9debd0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dcb62a5d1780635153b978462f9debd0Request($company_domain, $dcb62a5d1780635153b978462f9debd0_request, string $contentType = self::contentTypes['dcb62a5d1780635153b978462f9debd0'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling dcb62a5d1780635153b978462f9debd0'
            );
        }

        // verify the required parameter 'dcb62a5d1780635153b978462f9debd0_request' is set
        if ($dcb62a5d1780635153b978462f9debd0_request === null || (is_array($dcb62a5d1780635153b978462f9debd0_request) && count($dcb62a5d1780635153b978462f9debd0_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dcb62a5d1780635153b978462f9debd0_request when calling dcb62a5d1780635153b978462f9debd0'
            );
        }


        $resourcePath = '/{companyDomain}/v1/time_tracking/clock_entries/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dcb62a5d1780635153b978462f9debd0_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dcb62a5d1780635153b978462f9debd0_request));
            } else {
                $httpBody = $dcb62a5d1780635153b978462f9debd0_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCompanyFile
     *
     * Delete Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the company file being deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCompanyFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCompanyFile($company_domain, $file_id, string $contentType = self::contentTypes['deleteCompanyFile'][0])
    {
        $this->deleteCompanyFileWithHttpInfo($company_domain, $file_id, $contentType);
    }

    /**
     * Operation deleteCompanyFileWithHttpInfo
     *
     * Delete Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the company file being deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCompanyFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCompanyFileWithHttpInfo($company_domain, $file_id, string $contentType = self::contentTypes['deleteCompanyFile'][0])
    {
        $request = $this->deleteCompanyFileRequest($company_domain, $file_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteCompanyFileAsync
     *
     * Delete Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the company file being deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompanyFileAsync($company_domain, $file_id, string $contentType = self::contentTypes['deleteCompanyFile'][0])
    {
        return $this->deleteCompanyFileAsyncWithHttpInfo($company_domain, $file_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCompanyFileAsyncWithHttpInfo
     *
     * Delete Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the company file being deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCompanyFileAsyncWithHttpInfo($company_domain, $file_id, string $contentType = self::contentTypes['deleteCompanyFile'][0])
    {
        $returnType = '';
        $request = $this->deleteCompanyFileRequest($company_domain, $file_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCompanyFile'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the company file being deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCompanyFileRequest($company_domain, $file_id, string $contentType = self::contentTypes['deleteCompanyFile'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteCompanyFile'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteCompanyFile'
            );
        }


        $resourcePath = '/{companyDomain}/v1/files/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmployeeFile
     *
     * Delete Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEmployeeFile($company_domain, $id, $file_id, string $contentType = self::contentTypes['deleteEmployeeFile'][0])
    {
        $this->deleteEmployeeFileWithHttpInfo($company_domain, $id, $file_id, $contentType);
    }

    /**
     * Operation deleteEmployeeFileWithHttpInfo
     *
     * Delete Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmployeeFileWithHttpInfo($company_domain, $id, $file_id, string $contentType = self::contentTypes['deleteEmployeeFile'][0])
    {
        $request = $this->deleteEmployeeFileRequest($company_domain, $id, $file_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteEmployeeFileAsync
     *
     * Delete Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmployeeFileAsync($company_domain, $id, $file_id, string $contentType = self::contentTypes['deleteEmployeeFile'][0])
    {
        return $this->deleteEmployeeFileAsyncWithHttpInfo($company_domain, $id, $file_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmployeeFileAsyncWithHttpInfo
     *
     * Delete Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmployeeFileAsyncWithHttpInfo($company_domain, $id, $file_id, string $contentType = self::contentTypes['deleteEmployeeFile'][0])
    {
        $returnType = '';
        $request = $this->deleteEmployeeFileRequest($company_domain, $id, $file_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmployeeFile'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being deleted. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmployeeFileRequest($company_domain, $id, $file_id, string $contentType = self::contentTypes['deleteEmployeeFile'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteEmployeeFile'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteEmployeeFile'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling deleteEmployeeFile'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{id}/files/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmployeeTableRowV1
     *
     * Deletes a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTableRowV1'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\DeleteEmployeeTableRowV1200Response
     */
    public function deleteEmployeeTableRowV1($company_domain, $id, $table, $row_id, string $contentType = self::contentTypes['deleteEmployeeTableRowV1'][0])
    {
        list($response) = $this->deleteEmployeeTableRowV1WithHttpInfo($company_domain, $id, $table, $row_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteEmployeeTableRowV1WithHttpInfo
     *
     * Deletes a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTableRowV1'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\DeleteEmployeeTableRowV1200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmployeeTableRowV1WithHttpInfo($company_domain, $id, $table, $row_id, string $contentType = self::contentTypes['deleteEmployeeTableRowV1'][0])
    {
        $request = $this->deleteEmployeeTableRowV1Request($company_domain, $id, $table, $row_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\DeleteEmployeeTableRowV1200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\DeleteEmployeeTableRowV1200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\DeleteEmployeeTableRowV1200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteEmployeeTableRowV1Async
     *
     * Deletes a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTableRowV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmployeeTableRowV1Async($company_domain, $id, $table, $row_id, string $contentType = self::contentTypes['deleteEmployeeTableRowV1'][0])
    {
        return $this->deleteEmployeeTableRowV1AsyncWithHttpInfo($company_domain, $id, $table, $row_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmployeeTableRowV1AsyncWithHttpInfo
     *
     * Deletes a table row
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTableRowV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmployeeTableRowV1AsyncWithHttpInfo($company_domain, $id, $table, $row_id, string $contentType = self::contentTypes['deleteEmployeeTableRowV1'][0])
    {
        $returnType = '\MySdk\Model\DeleteEmployeeTableRowV1200Response';
        $request = $this->deleteEmployeeTableRowV1Request($company_domain, $id, $table, $row_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmployeeTableRowV1'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTableRowV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmployeeTableRowV1Request($company_domain, $id, $table, $row_id, string $contentType = self::contentTypes['deleteEmployeeTableRowV1'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteEmployeeTableRowV1'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteEmployeeTableRowV1'
            );
        }

        // verify the required parameter 'table' is set
        if ($table === null || (is_array($table) && count($table) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table when calling deleteEmployeeTableRowV1'
            );
        }

        // verify the required parameter 'row_id' is set
        if ($row_id === null || (is_array($row_id) && count($row_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_id when calling deleteEmployeeTableRowV1'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{id}/tables/{table}/{rowId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($table !== null) {
            $resourcePath = str_replace(
                '{' . 'table' . '}',
                ObjectSerializer::toPathValue($table),
                $resourcePath
            );
        }
        // path params
        if ($row_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rowId' . '}',
                ObjectSerializer::toPathValue($row_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEmployeeTrainingRecord
     *
     * Delete Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEmployeeTrainingRecord($company_domain, $employee_training_record_id, string $contentType = self::contentTypes['deleteEmployeeTrainingRecord'][0])
    {
        $this->deleteEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_training_record_id, $contentType);
    }

    /**
     * Operation deleteEmployeeTrainingRecordWithHttpInfo
     *
     * Delete Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_training_record_id, string $contentType = self::contentTypes['deleteEmployeeTrainingRecord'][0])
    {
        $request = $this->deleteEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteEmployeeTrainingRecordAsync
     *
     * Delete Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmployeeTrainingRecordAsync($company_domain, $employee_training_record_id, string $contentType = self::contentTypes['deleteEmployeeTrainingRecord'][0])
    {
        return $this->deleteEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_training_record_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEmployeeTrainingRecordAsyncWithHttpInfo
     *
     * Delete Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_training_record_id, string $contentType = self::contentTypes['deleteEmployeeTrainingRecord'][0])
    {
        $returnType = '';
        $request = $this->deleteEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEmployeeTrainingRecord'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, string $contentType = self::contentTypes['deleteEmployeeTrainingRecord'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteEmployeeTrainingRecord'
            );
        }

        // verify the required parameter 'employee_training_record_id' is set
        if ($employee_training_record_id === null || (is_array($employee_training_record_id) && count($employee_training_record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_training_record_id when calling deleteEmployeeTrainingRecord'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/record/{employeeTrainingRecordId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_training_record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeTrainingRecordId' . '}',
                ObjectSerializer::toPathValue($employee_training_record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteGoal
     *
     * Delete Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGoal'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteGoal($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['deleteGoal'][0])
    {
        $this->deleteGoalWithHttpInfo($company_domain, $employee_id, $goal_id, $contentType);
    }

    /**
     * Operation deleteGoalWithHttpInfo
     *
     * Delete Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGoal'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGoalWithHttpInfo($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['deleteGoal'][0])
    {
        $request = $this->deleteGoalRequest($company_domain, $employee_id, $goal_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteGoalAsync
     *
     * Delete Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGoalAsync($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['deleteGoal'][0])
    {
        return $this->deleteGoalAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteGoalAsyncWithHttpInfo
     *
     * Delete Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGoalAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['deleteGoal'][0])
    {
        $returnType = '';
        $request = $this->deleteGoalRequest($company_domain, $employee_id, $goal_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteGoal'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteGoalRequest($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['deleteGoal'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteGoal'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling deleteGoal'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling deleteGoal'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteGoalComment
     *
     * Delete Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $comment_id commentId is the ID of a specific comment for the specified goal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGoalComment'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteGoalComment($company_domain, $employee_id, $goal_id, $comment_id, string $contentType = self::contentTypes['deleteGoalComment'][0])
    {
        $this->deleteGoalCommentWithHttpInfo($company_domain, $employee_id, $goal_id, $comment_id, $contentType);
    }

    /**
     * Operation deleteGoalCommentWithHttpInfo
     *
     * Delete Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $comment_id commentId is the ID of a specific comment for the specified goal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGoalComment'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteGoalCommentWithHttpInfo($company_domain, $employee_id, $goal_id, $comment_id, string $contentType = self::contentTypes['deleteGoalComment'][0])
    {
        $request = $this->deleteGoalCommentRequest($company_domain, $employee_id, $goal_id, $comment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteGoalCommentAsync
     *
     * Delete Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $comment_id commentId is the ID of a specific comment for the specified goal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGoalComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGoalCommentAsync($company_domain, $employee_id, $goal_id, $comment_id, string $contentType = self::contentTypes['deleteGoalComment'][0])
    {
        return $this->deleteGoalCommentAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $comment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteGoalCommentAsyncWithHttpInfo
     *
     * Delete Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $comment_id commentId is the ID of a specific comment for the specified goal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGoalComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteGoalCommentAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $comment_id, string $contentType = self::contentTypes['deleteGoalComment'][0])
    {
        $returnType = '';
        $request = $this->deleteGoalCommentRequest($company_domain, $employee_id, $goal_id, $comment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteGoalComment'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $comment_id commentId is the ID of a specific comment for the specified goal. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteGoalComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteGoalCommentRequest($company_domain, $employee_id, $goal_id, $comment_id, string $contentType = self::contentTypes['deleteGoalComment'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteGoalComment'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling deleteGoalComment'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling deleteGoalComment'
            );
        }

        // verify the required parameter 'comment_id' is set
        if ($comment_id === null || (is_array($comment_id) && count($comment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_id when calling deleteGoalComment'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments/{commentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }
        // path params
        if ($comment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commentId' . '}',
                ObjectSerializer::toPathValue($comment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTrainingCategory
     *
     * Delete Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTrainingCategory($company_domain, $training_category_id, string $contentType = self::contentTypes['deleteTrainingCategory'][0])
    {
        $this->deleteTrainingCategoryWithHttpInfo($company_domain, $training_category_id, $contentType);
    }

    /**
     * Operation deleteTrainingCategoryWithHttpInfo
     *
     * Delete Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTrainingCategoryWithHttpInfo($company_domain, $training_category_id, string $contentType = self::contentTypes['deleteTrainingCategory'][0])
    {
        $request = $this->deleteTrainingCategoryRequest($company_domain, $training_category_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteTrainingCategoryAsync
     *
     * Delete Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTrainingCategoryAsync($company_domain, $training_category_id, string $contentType = self::contentTypes['deleteTrainingCategory'][0])
    {
        return $this->deleteTrainingCategoryAsyncWithHttpInfo($company_domain, $training_category_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTrainingCategoryAsyncWithHttpInfo
     *
     * Delete Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTrainingCategoryAsyncWithHttpInfo($company_domain, $training_category_id, string $contentType = self::contentTypes['deleteTrainingCategory'][0])
    {
        $returnType = '';
        $request = $this->deleteTrainingCategoryRequest($company_domain, $training_category_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTrainingCategory'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTrainingCategoryRequest($company_domain, $training_category_id, string $contentType = self::contentTypes['deleteTrainingCategory'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteTrainingCategory'
            );
        }

        // verify the required parameter 'training_category_id' is set
        if ($training_category_id === null || (is_array($training_category_id) && count($training_category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $training_category_id when calling deleteTrainingCategory'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/category/{trainingCategoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($training_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trainingCategoryId' . '}',
                ObjectSerializer::toPathValue($training_category_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTrainingType
     *
     * Delete Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteTrainingType($company_domain, $training_type_id, string $contentType = self::contentTypes['deleteTrainingType'][0])
    {
        $this->deleteTrainingTypeWithHttpInfo($company_domain, $training_type_id, $contentType);
    }

    /**
     * Operation deleteTrainingTypeWithHttpInfo
     *
     * Delete Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTrainingTypeWithHttpInfo($company_domain, $training_type_id, string $contentType = self::contentTypes['deleteTrainingType'][0])
    {
        $request = $this->deleteTrainingTypeRequest($company_domain, $training_type_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteTrainingTypeAsync
     *
     * Delete Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTrainingTypeAsync($company_domain, $training_type_id, string $contentType = self::contentTypes['deleteTrainingType'][0])
    {
        return $this->deleteTrainingTypeAsyncWithHttpInfo($company_domain, $training_type_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTrainingTypeAsyncWithHttpInfo
     *
     * Delete Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTrainingTypeAsyncWithHttpInfo($company_domain, $training_type_id, string $contentType = self::contentTypes['deleteTrainingType'][0])
    {
        $returnType = '';
        $request = $this->deleteTrainingTypeRequest($company_domain, $training_type_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTrainingType'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteTrainingTypeRequest($company_domain, $training_type_id, string $contentType = self::contentTypes['deleteTrainingType'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteTrainingType'
            );
        }

        // verify the required parameter 'training_type_id' is set
        if ($training_type_id === null || (is_array($training_type_id) && count($training_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $training_type_id when calling deleteTrainingType'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/type/{trainingTypeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($training_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trainingTypeId' . '}',
                ObjectSerializer::toPathValue($training_type_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWebhook
     *
     * Delete Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an webhook ID that is associated with the User API key. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWebhook'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWebhook($company_domain, $id, string $contentType = self::contentTypes['deleteWebhook'][0])
    {
        $this->deleteWebhookWithHttpInfo($company_domain, $id, $contentType);
    }

    /**
     * Operation deleteWebhookWithHttpInfo
     *
     * Delete Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an webhook ID that is associated with the User API key. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWebhook'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWebhookWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['deleteWebhook'][0])
    {
        $request = $this->deleteWebhookRequest($company_domain, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteWebhookAsync
     *
     * Delete Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an webhook ID that is associated with the User API key. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWebhookAsync($company_domain, $id, string $contentType = self::contentTypes['deleteWebhook'][0])
    {
        return $this->deleteWebhookAsyncWithHttpInfo($company_domain, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWebhookAsyncWithHttpInfo
     *
     * Delete Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an webhook ID that is associated with the User API key. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWebhookAsyncWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['deleteWebhook'][0])
    {
        $returnType = '';
        $request = $this->deleteWebhookRequest($company_domain, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWebhook'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an webhook ID that is associated with the User API key. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteWebhookRequest($company_domain, $id, string $contentType = self::contentTypes['deleteWebhook'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling deleteWebhook'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteWebhook'
            );
        }


        $resourcePath = '/{companyDomain}/v1/webhooks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation estimateFutureTimeOffBalances
     *
     * Estimate Future Time Off Balances
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $end end (required)
     * @param  string $employee_id employee_id (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateFutureTimeOffBalances'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function estimateFutureTimeOffBalances($company_domain, $end, $employee_id, $accept_header_parameter = null, string $contentType = self::contentTypes['estimateFutureTimeOffBalances'][0])
    {
        $this->estimateFutureTimeOffBalancesWithHttpInfo($company_domain, $end, $employee_id, $accept_header_parameter, $contentType);
    }

    /**
     * Operation estimateFutureTimeOffBalancesWithHttpInfo
     *
     * Estimate Future Time Off Balances
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $end (required)
     * @param  string $employee_id (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateFutureTimeOffBalances'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimateFutureTimeOffBalancesWithHttpInfo($company_domain, $end, $employee_id, $accept_header_parameter = null, string $contentType = self::contentTypes['estimateFutureTimeOffBalances'][0])
    {
        $request = $this->estimateFutureTimeOffBalancesRequest($company_domain, $end, $employee_id, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation estimateFutureTimeOffBalancesAsync
     *
     * Estimate Future Time Off Balances
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $end (required)
     * @param  string $employee_id (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateFutureTimeOffBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateFutureTimeOffBalancesAsync($company_domain, $end, $employee_id, $accept_header_parameter = null, string $contentType = self::contentTypes['estimateFutureTimeOffBalances'][0])
    {
        return $this->estimateFutureTimeOffBalancesAsyncWithHttpInfo($company_domain, $end, $employee_id, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation estimateFutureTimeOffBalancesAsyncWithHttpInfo
     *
     * Estimate Future Time Off Balances
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $end (required)
     * @param  string $employee_id (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateFutureTimeOffBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimateFutureTimeOffBalancesAsyncWithHttpInfo($company_domain, $end, $employee_id, $accept_header_parameter = null, string $contentType = self::contentTypes['estimateFutureTimeOffBalances'][0])
    {
        $returnType = '';
        $request = $this->estimateFutureTimeOffBalancesRequest($company_domain, $end, $employee_id, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'estimateFutureTimeOffBalances'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $end (required)
     * @param  string $employee_id (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['estimateFutureTimeOffBalances'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function estimateFutureTimeOffBalancesRequest($company_domain, $end, $employee_id, $accept_header_parameter = null, string $contentType = self::contentTypes['estimateFutureTimeOffBalances'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling estimateFutureTimeOffBalances'
            );
        }

        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling estimateFutureTimeOffBalances'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling estimateFutureTimeOffBalances'
            );
        }



        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/calculator';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end,
            'end', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation f97efc203b25647724accb9da7dda7db
     *
     * deleteTimeTrackingByTimeTrackingId
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id The time tracking id is the id that was used to track the record up to 36 characters in length. (i.e. UUID). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['f97efc203b25647724accb9da7dda7db'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201ResponseResponse|mixed
     */
    public function f97efc203b25647724accb9da7dda7db($company_domain, $id, string $contentType = self::contentTypes['f97efc203b25647724accb9da7dda7db'][0])
    {
        list($response) = $this->f97efc203b25647724accb9da7dda7dbWithHttpInfo($company_domain, $id, $contentType);
        return $response;
    }

    /**
     * Operation f97efc203b25647724accb9da7dda7dbWithHttpInfo
     *
     * deleteTimeTrackingByTimeTrackingId
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id The time tracking id is the id that was used to track the record up to 36 characters in length. (i.e. UUID). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['f97efc203b25647724accb9da7dda7db'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201ResponseResponse|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function f97efc203b25647724accb9da7dda7dbWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['f97efc203b25647724accb9da7dda7db'][0])
    {
        $request = $this->f97efc203b25647724accb9da7dda7dbRequest($company_domain, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201ResponseResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201ResponseResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201ResponseResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation f97efc203b25647724accb9da7dda7dbAsync
     *
     * deleteTimeTrackingByTimeTrackingId
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id The time tracking id is the id that was used to track the record up to 36 characters in length. (i.e. UUID). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['f97efc203b25647724accb9da7dda7db'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function f97efc203b25647724accb9da7dda7dbAsync($company_domain, $id, string $contentType = self::contentTypes['f97efc203b25647724accb9da7dda7db'][0])
    {
        return $this->f97efc203b25647724accb9da7dda7dbAsyncWithHttpInfo($company_domain, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation f97efc203b25647724accb9da7dda7dbAsyncWithHttpInfo
     *
     * deleteTimeTrackingByTimeTrackingId
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id The time tracking id is the id that was used to track the record up to 36 characters in length. (i.e. UUID). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['f97efc203b25647724accb9da7dda7db'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function f97efc203b25647724accb9da7dda7dbAsyncWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['f97efc203b25647724accb9da7dda7db'][0])
    {
        $returnType = '\MySdk\Model\Model0f428442e53dc46d1e2c8ff5b7a483a8201ResponseResponse';
        $request = $this->f97efc203b25647724accb9da7dda7dbRequest($company_domain, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'f97efc203b25647724accb9da7dda7db'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id The time tracking id is the id that was used to track the record up to 36 characters in length. (i.e. UUID). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['f97efc203b25647724accb9da7dda7db'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function f97efc203b25647724accb9da7dda7dbRequest($company_domain, $id, string $contentType = self::contentTypes['f97efc203b25647724accb9da7dda7db'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling f97efc203b25647724accb9da7dda7db'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling f97efc203b25647724accb9da7dda7db'
            );
        }


        $resourcePath = '/{companyDomain}/v1/timetracking/delete/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAListOfUsers
     *
     * Get a List of Users
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfUsers'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAListOfUsers($company_domain, string $contentType = self::contentTypes['getAListOfUsers'][0])
    {
        $this->getAListOfUsersWithHttpInfo($company_domain, $contentType);
    }

    /**
     * Operation getAListOfUsersWithHttpInfo
     *
     * Get a List of Users
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfUsers'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAListOfUsersWithHttpInfo($company_domain, string $contentType = self::contentTypes['getAListOfUsers'][0])
    {
        $request = $this->getAListOfUsersRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAListOfUsersAsync
     *
     * Get a List of Users
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfUsersAsync($company_domain, string $contentType = self::contentTypes['getAListOfUsers'][0])
    {
        return $this->getAListOfUsersAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAListOfUsersAsyncWithHttpInfo
     *
     * Get a List of Users
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfUsersAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getAListOfUsers'][0])
    {
        $returnType = '';
        $request = $this->getAListOfUsersRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAListOfUsers'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAListOfUsersRequest($company_domain, string $contentType = self::contentTypes['getAListOfUsers'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getAListOfUsers'
            );
        }


        $resourcePath = '/{companyDomain}/v1/meta/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAListOfWhosOut
     *
     * Get a list of Who&#39;s Out
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $start A date in the form YYYY-MM-DD - defaults to the current date. (optional)
     * @param  string|null $end A date in the form YYYY-MM-DD - defaults to 14 days from the start date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfWhosOut'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getAListOfWhosOut($company_domain, $accept_header_parameter = null, $start = null, $end = null, string $contentType = self::contentTypes['getAListOfWhosOut'][0])
    {
        $this->getAListOfWhosOutWithHttpInfo($company_domain, $accept_header_parameter, $start, $end, $contentType);
    }

    /**
     * Operation getAListOfWhosOutWithHttpInfo
     *
     * Get a list of Who&#39;s Out
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $start A date in the form YYYY-MM-DD - defaults to the current date. (optional)
     * @param  string|null $end A date in the form YYYY-MM-DD - defaults to 14 days from the start date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfWhosOut'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAListOfWhosOutWithHttpInfo($company_domain, $accept_header_parameter = null, $start = null, $end = null, string $contentType = self::contentTypes['getAListOfWhosOut'][0])
    {
        $request = $this->getAListOfWhosOutRequest($company_domain, $accept_header_parameter, $start, $end, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAListOfWhosOutAsync
     *
     * Get a list of Who&#39;s Out
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $start A date in the form YYYY-MM-DD - defaults to the current date. (optional)
     * @param  string|null $end A date in the form YYYY-MM-DD - defaults to 14 days from the start date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfWhosOut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfWhosOutAsync($company_domain, $accept_header_parameter = null, $start = null, $end = null, string $contentType = self::contentTypes['getAListOfWhosOut'][0])
    {
        return $this->getAListOfWhosOutAsyncWithHttpInfo($company_domain, $accept_header_parameter, $start, $end, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAListOfWhosOutAsyncWithHttpInfo
     *
     * Get a list of Who&#39;s Out
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $start A date in the form YYYY-MM-DD - defaults to the current date. (optional)
     * @param  string|null $end A date in the form YYYY-MM-DD - defaults to 14 days from the start date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfWhosOut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfWhosOutAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, $start = null, $end = null, string $contentType = self::contentTypes['getAListOfWhosOut'][0])
    {
        $returnType = '';
        $request = $this->getAListOfWhosOutRequest($company_domain, $accept_header_parameter, $start, $end, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAListOfWhosOut'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $start A date in the form YYYY-MM-DD - defaults to the current date. (optional)
     * @param  string|null $end A date in the form YYYY-MM-DD - defaults to 14 days from the start date. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAListOfWhosOut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAListOfWhosOutRequest($company_domain, $accept_header_parameter = null, $start = null, $end = null, string $contentType = self::contentTypes['getAListOfWhosOut'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getAListOfWhosOut'
            );
        }





        $resourcePath = '/{companyDomain}/v1/time_off/whos_out';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end,
            'end', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplicationDetails
     *
     * Get Application Details
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to look up details. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationDetails'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetApplicationDetails200Response
     */
    public function getApplicationDetails($company_domain, $application_id, string $contentType = self::contentTypes['getApplicationDetails'][0])
    {
        list($response) = $this->getApplicationDetailsWithHttpInfo($company_domain, $application_id, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationDetailsWithHttpInfo
     *
     * Get Application Details
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to look up details. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationDetails'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetApplicationDetails200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationDetailsWithHttpInfo($company_domain, $application_id, string $contentType = self::contentTypes['getApplicationDetails'][0])
    {
        $request = $this->getApplicationDetailsRequest($company_domain, $application_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetApplicationDetails200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetApplicationDetails200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetApplicationDetails200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getApplicationDetailsAsync
     *
     * Get Application Details
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to look up details. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationDetailsAsync($company_domain, $application_id, string $contentType = self::contentTypes['getApplicationDetails'][0])
    {
        return $this->getApplicationDetailsAsyncWithHttpInfo($company_domain, $application_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationDetailsAsyncWithHttpInfo
     *
     * Get Application Details
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to look up details. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationDetailsAsyncWithHttpInfo($company_domain, $application_id, string $contentType = self::contentTypes['getApplicationDetails'][0])
    {
        $returnType = '\MySdk\Model\GetApplicationDetails200Response';
        $request = $this->getApplicationDetailsRequest($company_domain, $application_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplicationDetails'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to look up details. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplicationDetails'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationDetailsRequest($company_domain, $application_id, string $contentType = self::contentTypes['getApplicationDetails'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getApplicationDetails'
            );
        }

        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling getApplicationDetails'
            );
        }


        $resourcePath = '/{companyDomain}/v1/applicant_tracking/applications/{applicationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplications
     *
     * Get Applications
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number (optional)
     * @param  int|null $job_id A Job Id to limit results to (optional)
     * @param  int|null $application_status_id Application status id to filter by. (optional)
     * @param  string|null $application_status A list of application status groups to filter by. (optional)
     * @param  string|null $job_status_groups A list of position status groups to filter by. (optional)
     * @param  string|null $search_string A general search criteria by which to find applications. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  \DateTime|null $new_since Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetApplications200Response
     */
    public function getApplications($company_domain, $page = null, $job_id = null, $application_status_id = null, $application_status = null, $job_status_groups = null, $search_string = null, $sort_by = null, $sort_order = null, $new_since = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        list($response) = $this->getApplicationsWithHttpInfo($company_domain, $page, $job_id, $application_status_id, $application_status, $job_status_groups, $search_string, $sort_by, $sort_order, $new_since, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationsWithHttpInfo
     *
     * Get Applications
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number (optional)
     * @param  int|null $job_id A Job Id to limit results to (optional)
     * @param  int|null $application_status_id Application status id to filter by. (optional)
     * @param  string|null $application_status A list of application status groups to filter by. (optional)
     * @param  string|null $job_status_groups A list of position status groups to filter by. (optional)
     * @param  string|null $search_string A general search criteria by which to find applications. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  \DateTime|null $new_since Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetApplications200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationsWithHttpInfo($company_domain, $page = null, $job_id = null, $application_status_id = null, $application_status = null, $job_status_groups = null, $search_string = null, $sort_by = null, $sort_order = null, $new_since = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        $request = $this->getApplicationsRequest($company_domain, $page, $job_id, $application_status_id, $application_status, $job_status_groups, $search_string, $sort_by, $sort_order, $new_since, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetApplications200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetApplications200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetApplications200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getApplicationsAsync
     *
     * Get Applications
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number (optional)
     * @param  int|null $job_id A Job Id to limit results to (optional)
     * @param  int|null $application_status_id Application status id to filter by. (optional)
     * @param  string|null $application_status A list of application status groups to filter by. (optional)
     * @param  string|null $job_status_groups A list of position status groups to filter by. (optional)
     * @param  string|null $search_string A general search criteria by which to find applications. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  \DateTime|null $new_since Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsAsync($company_domain, $page = null, $job_id = null, $application_status_id = null, $application_status = null, $job_status_groups = null, $search_string = null, $sort_by = null, $sort_order = null, $new_since = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        return $this->getApplicationsAsyncWithHttpInfo($company_domain, $page, $job_id, $application_status_id, $application_status, $job_status_groups, $search_string, $sort_by, $sort_order, $new_since, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationsAsyncWithHttpInfo
     *
     * Get Applications
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number (optional)
     * @param  int|null $job_id A Job Id to limit results to (optional)
     * @param  int|null $application_status_id Application status id to filter by. (optional)
     * @param  string|null $application_status A list of application status groups to filter by. (optional)
     * @param  string|null $job_status_groups A list of position status groups to filter by. (optional)
     * @param  string|null $search_string A general search criteria by which to find applications. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  \DateTime|null $new_since Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsAsyncWithHttpInfo($company_domain, $page = null, $job_id = null, $application_status_id = null, $application_status = null, $job_status_groups = null, $search_string = null, $sort_by = null, $sort_order = null, $new_since = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        $returnType = '\MySdk\Model\GetApplications200Response';
        $request = $this->getApplicationsRequest($company_domain, $page, $job_id, $application_status_id, $application_status, $job_status_groups, $search_string, $sort_by, $sort_order, $new_since, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplications'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number (optional)
     * @param  int|null $job_id A Job Id to limit results to (optional)
     * @param  int|null $application_status_id Application status id to filter by. (optional)
     * @param  string|null $application_status A list of application status groups to filter by. (optional)
     * @param  string|null $job_status_groups A list of position status groups to filter by. (optional)
     * @param  string|null $search_string A general search criteria by which to find applications. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  \DateTime|null $new_since Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationsRequest($company_domain, $page = null, $job_id = null, $application_status_id = null, $application_status = null, $job_status_groups = null, $search_string = null, $sort_by = null, $sort_order = null, $new_since = null, string $contentType = self::contentTypes['getApplications'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getApplications'
            );
        }











        $resourcePath = '/{companyDomain}/v1/applicant_tracking/applications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $job_id,
            'jobId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $application_status_id,
            'applicationStatusId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $application_status,
            'applicationStatus', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $job_status_groups,
            'jobStatusGroups', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_string,
            'searchString', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $new_since,
            'newSince', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBenefitCoverages
     *
     * Get benefit coverages
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBenefitCoverages'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getBenefitCoverages($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getBenefitCoverages'][0])
    {
        $this->getBenefitCoveragesWithHttpInfo($company_domain, $accept_header_parameter, $contentType);
    }

    /**
     * Operation getBenefitCoveragesWithHttpInfo
     *
     * Get benefit coverages
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBenefitCoverages'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBenefitCoveragesWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getBenefitCoverages'][0])
    {
        $request = $this->getBenefitCoveragesRequest($company_domain, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getBenefitCoveragesAsync
     *
     * Get benefit coverages
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBenefitCoverages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBenefitCoveragesAsync($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getBenefitCoverages'][0])
    {
        return $this->getBenefitCoveragesAsyncWithHttpInfo($company_domain, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBenefitCoveragesAsyncWithHttpInfo
     *
     * Get benefit coverages
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBenefitCoverages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBenefitCoveragesAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getBenefitCoverages'][0])
    {
        $returnType = '';
        $request = $this->getBenefitCoveragesRequest($company_domain, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBenefitCoverages'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBenefitCoverages'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBenefitCoveragesRequest($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getBenefitCoverages'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getBenefitCoverages'
            );
        }



        $resourcePath = '/{companyDomain}/v1/benefitcoverages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBenefitDeductionTypes
     *
     * Get benefit deduction types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBenefitDeductionTypes'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getBenefitDeductionTypes($company_domain, string $contentType = self::contentTypes['getBenefitDeductionTypes'][0])
    {
        $this->getBenefitDeductionTypesWithHttpInfo($company_domain, $contentType);
    }

    /**
     * Operation getBenefitDeductionTypesWithHttpInfo
     *
     * Get benefit deduction types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBenefitDeductionTypes'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBenefitDeductionTypesWithHttpInfo($company_domain, string $contentType = self::contentTypes['getBenefitDeductionTypes'][0])
    {
        $request = $this->getBenefitDeductionTypesRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getBenefitDeductionTypesAsync
     *
     * Get benefit deduction types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBenefitDeductionTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBenefitDeductionTypesAsync($company_domain, string $contentType = self::contentTypes['getBenefitDeductionTypes'][0])
    {
        return $this->getBenefitDeductionTypesAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBenefitDeductionTypesAsyncWithHttpInfo
     *
     * Get benefit deduction types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBenefitDeductionTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBenefitDeductionTypesAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getBenefitDeductionTypes'][0])
    {
        $returnType = '';
        $request = $this->getBenefitDeductionTypesRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBenefitDeductionTypes'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBenefitDeductionTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBenefitDeductionTypesRequest($company_domain, string $contentType = self::contentTypes['getBenefitDeductionTypes'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getBenefitDeductionTypes'
            );
        }


        $resourcePath = '/{companyDomain}/v1/benefits/settings/deduction_types/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getByReportId
     *
     * Get Report by ID
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $report_id report_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getByReportId'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\EmployeeResponse
     */
    public function getByReportId($company_domain, $report_id, string $contentType = self::contentTypes['getByReportId'][0])
    {
        list($response) = $this->getByReportIdWithHttpInfo($company_domain, $report_id, $contentType);
        return $response;
    }

    /**
     * Operation getByReportIdWithHttpInfo
     *
     * Get Report by ID
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $report_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getByReportId'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\EmployeeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getByReportIdWithHttpInfo($company_domain, $report_id, string $contentType = self::contentTypes['getByReportId'][0])
    {
        $request = $this->getByReportIdRequest($company_domain, $report_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\EmployeeResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\EmployeeResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\EmployeeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getByReportIdAsync
     *
     * Get Report by ID
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $report_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getByReportId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getByReportIdAsync($company_domain, $report_id, string $contentType = self::contentTypes['getByReportId'][0])
    {
        return $this->getByReportIdAsyncWithHttpInfo($company_domain, $report_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getByReportIdAsyncWithHttpInfo
     *
     * Get Report by ID
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $report_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getByReportId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getByReportIdAsyncWithHttpInfo($company_domain, $report_id, string $contentType = self::contentTypes['getByReportId'][0])
    {
        $returnType = '\MySdk\Model\EmployeeResponse';
        $request = $this->getByReportIdRequest($company_domain, $report_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getByReportId'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $report_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getByReportId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getByReportIdRequest($company_domain, $report_id, string $contentType = self::contentTypes['getByReportId'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getByReportId'
            );
        }

        // verify the required parameter 'report_id' is set
        if ($report_id === null || (is_array($report_id) && count($report_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_id when calling getByReportId'
            );
        }


        $resourcePath = '/{companyDomain}/v1/custom-reports/{reportId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($report_id !== null) {
            $resourcePath = str_replace(
                '{' . 'reportId' . '}',
                ObjectSerializer::toPathValue($report_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCanCreateGoal
     *
     * Can Create a Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCanCreateGoal'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCanCreateGoal($company_domain, $employee_id, string $contentType = self::contentTypes['getCanCreateGoal'][0])
    {
        $this->getCanCreateGoalWithHttpInfo($company_domain, $employee_id, $contentType);
    }

    /**
     * Operation getCanCreateGoalWithHttpInfo
     *
     * Can Create a Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCanCreateGoal'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCanCreateGoalWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getCanCreateGoal'][0])
    {
        $request = $this->getCanCreateGoalRequest($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCanCreateGoalAsync
     *
     * Can Create a Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCanCreateGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCanCreateGoalAsync($company_domain, $employee_id, string $contentType = self::contentTypes['getCanCreateGoal'][0])
    {
        return $this->getCanCreateGoalAsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCanCreateGoalAsyncWithHttpInfo
     *
     * Can Create a Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCanCreateGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCanCreateGoalAsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getCanCreateGoal'][0])
    {
        $returnType = '';
        $request = $this->getCanCreateGoalRequest($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCanCreateGoal'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCanCreateGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCanCreateGoalRequest($company_domain, $employee_id, string $contentType = self::contentTypes['getCanCreateGoal'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getCanCreateGoal'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getCanCreateGoal'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/canCreateGoals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChangedEmployeeIds
     *
     * Gets all updated employee IDs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $since URL encoded iso8601 timestamp (required)
     * @param  string|null $type Use one of these in the {type} variable in the URL: \&quot;inserted\&quot;, \&quot;updated\&quot;, \&quot;deleted\&quot; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChangedEmployeeIds'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getChangedEmployeeIds($company_domain, $since, $type = null, string $contentType = self::contentTypes['getChangedEmployeeIds'][0])
    {
        $this->getChangedEmployeeIdsWithHttpInfo($company_domain, $since, $type, $contentType);
    }

    /**
     * Operation getChangedEmployeeIdsWithHttpInfo
     *
     * Gets all updated employee IDs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $since URL encoded iso8601 timestamp (required)
     * @param  string|null $type Use one of these in the {type} variable in the URL: \&quot;inserted\&quot;, \&quot;updated\&quot;, \&quot;deleted\&quot; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChangedEmployeeIds'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChangedEmployeeIdsWithHttpInfo($company_domain, $since, $type = null, string $contentType = self::contentTypes['getChangedEmployeeIds'][0])
    {
        $request = $this->getChangedEmployeeIdsRequest($company_domain, $since, $type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getChangedEmployeeIdsAsync
     *
     * Gets all updated employee IDs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $since URL encoded iso8601 timestamp (required)
     * @param  string|null $type Use one of these in the {type} variable in the URL: \&quot;inserted\&quot;, \&quot;updated\&quot;, \&quot;deleted\&quot; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChangedEmployeeIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChangedEmployeeIdsAsync($company_domain, $since, $type = null, string $contentType = self::contentTypes['getChangedEmployeeIds'][0])
    {
        return $this->getChangedEmployeeIdsAsyncWithHttpInfo($company_domain, $since, $type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChangedEmployeeIdsAsyncWithHttpInfo
     *
     * Gets all updated employee IDs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $since URL encoded iso8601 timestamp (required)
     * @param  string|null $type Use one of these in the {type} variable in the URL: \&quot;inserted\&quot;, \&quot;updated\&quot;, \&quot;deleted\&quot; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChangedEmployeeIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChangedEmployeeIdsAsyncWithHttpInfo($company_domain, $since, $type = null, string $contentType = self::contentTypes['getChangedEmployeeIds'][0])
    {
        $returnType = '';
        $request = $this->getChangedEmployeeIdsRequest($company_domain, $since, $type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChangedEmployeeIds'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $since URL encoded iso8601 timestamp (required)
     * @param  string|null $type Use one of these in the {type} variable in the URL: \&quot;inserted\&quot;, \&quot;updated\&quot;, \&quot;deleted\&quot; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChangedEmployeeIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChangedEmployeeIdsRequest($company_domain, $since, $type = null, string $contentType = self::contentTypes['getChangedEmployeeIds'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getChangedEmployeeIds'
            );
        }

        // verify the required parameter 'since' is set
        if ($since === null || (is_array($since) && count($since) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $since when calling getChangedEmployeeIds'
            );
        }



        $resourcePath = '/{companyDomain}/v1/employees/changed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $since,
            'since', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChangedEmployeeTableData
     *
     * Gets all updated employee table data
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $table Table name (required)
     * @param  string $since URL encoded iso8601 timestamp (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChangedEmployeeTableData'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getChangedEmployeeTableData($company_domain, $table, $since, string $contentType = self::contentTypes['getChangedEmployeeTableData'][0])
    {
        $this->getChangedEmployeeTableDataWithHttpInfo($company_domain, $table, $since, $contentType);
    }

    /**
     * Operation getChangedEmployeeTableDataWithHttpInfo
     *
     * Gets all updated employee table data
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $table Table name (required)
     * @param  string $since URL encoded iso8601 timestamp (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChangedEmployeeTableData'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChangedEmployeeTableDataWithHttpInfo($company_domain, $table, $since, string $contentType = self::contentTypes['getChangedEmployeeTableData'][0])
    {
        $request = $this->getChangedEmployeeTableDataRequest($company_domain, $table, $since, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getChangedEmployeeTableDataAsync
     *
     * Gets all updated employee table data
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $table Table name (required)
     * @param  string $since URL encoded iso8601 timestamp (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChangedEmployeeTableData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChangedEmployeeTableDataAsync($company_domain, $table, $since, string $contentType = self::contentTypes['getChangedEmployeeTableData'][0])
    {
        return $this->getChangedEmployeeTableDataAsyncWithHttpInfo($company_domain, $table, $since, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChangedEmployeeTableDataAsyncWithHttpInfo
     *
     * Gets all updated employee table data
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $table Table name (required)
     * @param  string $since URL encoded iso8601 timestamp (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChangedEmployeeTableData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChangedEmployeeTableDataAsyncWithHttpInfo($company_domain, $table, $since, string $contentType = self::contentTypes['getChangedEmployeeTableData'][0])
    {
        $returnType = '';
        $request = $this->getChangedEmployeeTableDataRequest($company_domain, $table, $since, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChangedEmployeeTableData'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $table Table name (required)
     * @param  string $since URL encoded iso8601 timestamp (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChangedEmployeeTableData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChangedEmployeeTableDataRequest($company_domain, $table, $since, string $contentType = self::contentTypes['getChangedEmployeeTableData'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getChangedEmployeeTableData'
            );
        }

        // verify the required parameter 'table' is set
        if ($table === null || (is_array($table) && count($table) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table when calling getChangedEmployeeTableData'
            );
        }

        // verify the required parameter 'since' is set
        if ($since === null || (is_array($since) && count($since) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $since when calling getChangedEmployeeTableData'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/changed/tables/{table}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $since,
            'since', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($table !== null) {
            $resourcePath = str_replace(
                '{' . 'table' . '}',
                ObjectSerializer::toPathValue($table),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyEINs
     *
     * Get Company EINs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyEINs'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetCompanyEINs200Response
     */
    public function getCompanyEINs($company_domain, string $contentType = self::contentTypes['getCompanyEINs'][0])
    {
        list($response) = $this->getCompanyEINsWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyEINsWithHttpInfo
     *
     * Get Company EINs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyEINs'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetCompanyEINs200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyEINsWithHttpInfo($company_domain, string $contentType = self::contentTypes['getCompanyEINs'][0])
    {
        $request = $this->getCompanyEINsRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetCompanyEINs200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetCompanyEINs200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetCompanyEINs200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCompanyEINsAsync
     *
     * Get Company EINs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyEINs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyEINsAsync($company_domain, string $contentType = self::contentTypes['getCompanyEINs'][0])
    {
        return $this->getCompanyEINsAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyEINsAsyncWithHttpInfo
     *
     * Get Company EINs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyEINs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyEINsAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getCompanyEINs'][0])
    {
        $returnType = '\MySdk\Model\GetCompanyEINs200Response';
        $request = $this->getCompanyEINsRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyEINs'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyEINs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyEINsRequest($company_domain, string $contentType = self::contentTypes['getCompanyEINs'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getCompanyEINs'
            );
        }


        $resourcePath = '/{companyDomain}/v1/company_eins';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyFile
     *
     * Get an Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the company file being retrieved. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCompanyFile($company_domain, $file_id, string $contentType = self::contentTypes['getCompanyFile'][0])
    {
        $this->getCompanyFileWithHttpInfo($company_domain, $file_id, $contentType);
    }

    /**
     * Operation getCompanyFileWithHttpInfo
     *
     * Get an Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the company file being retrieved. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyFileWithHttpInfo($company_domain, $file_id, string $contentType = self::contentTypes['getCompanyFile'][0])
    {
        $request = $this->getCompanyFileRequest($company_domain, $file_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCompanyFileAsync
     *
     * Get an Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the company file being retrieved. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFileAsync($company_domain, $file_id, string $contentType = self::contentTypes['getCompanyFile'][0])
    {
        return $this->getCompanyFileAsyncWithHttpInfo($company_domain, $file_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyFileAsyncWithHttpInfo
     *
     * Get an Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the company file being retrieved. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyFileAsyncWithHttpInfo($company_domain, $file_id, string $contentType = self::contentTypes['getCompanyFile'][0])
    {
        $returnType = '';
        $request = $this->getCompanyFileRequest($company_domain, $file_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyFile'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the company file being retrieved. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyFileRequest($company_domain, $file_id, string $contentType = self::contentTypes['getCompanyFile'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getCompanyFile'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling getCompanyFile'
            );
        }


        $resourcePath = '/{companyDomain}/v1/files/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyInformation
     *
     * Get Company Information
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyInformation'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetCompanyInformation200Response
     */
    public function getCompanyInformation($company_domain, string $contentType = self::contentTypes['getCompanyInformation'][0])
    {
        list($response) = $this->getCompanyInformationWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyInformationWithHttpInfo
     *
     * Get Company Information
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyInformation'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetCompanyInformation200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyInformationWithHttpInfo($company_domain, string $contentType = self::contentTypes['getCompanyInformation'][0])
    {
        $request = $this->getCompanyInformationRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetCompanyInformation200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetCompanyInformation200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetCompanyInformation200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCompanyInformationAsync
     *
     * Get Company Information
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyInformationAsync($company_domain, string $contentType = self::contentTypes['getCompanyInformation'][0])
    {
        return $this->getCompanyInformationAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyInformationAsyncWithHttpInfo
     *
     * Get Company Information
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyInformationAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getCompanyInformation'][0])
    {
        $returnType = '\MySdk\Model\GetCompanyInformation200Response';
        $request = $this->getCompanyInformationRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyInformation'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyInformation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyInformationRequest($company_domain, string $contentType = self::contentTypes['getCompanyInformation'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getCompanyInformation'
            );
        }


        $resourcePath = '/{companyDomain}/v1/company_information';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyLocations
     *
     * Get Company Locations
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyLocations'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetCompanyLocations200ResponseInner[]
     */
    public function getCompanyLocations($company_domain, string $contentType = self::contentTypes['getCompanyLocations'][0])
    {
        list($response) = $this->getCompanyLocationsWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyLocationsWithHttpInfo
     *
     * Get Company Locations
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyLocations'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetCompanyLocations200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyLocationsWithHttpInfo($company_domain, string $contentType = self::contentTypes['getCompanyLocations'][0])
    {
        $request = $this->getCompanyLocationsRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetCompanyLocations200ResponseInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetCompanyLocations200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetCompanyLocations200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCompanyLocationsAsync
     *
     * Get Company Locations
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyLocationsAsync($company_domain, string $contentType = self::contentTypes['getCompanyLocations'][0])
    {
        return $this->getCompanyLocationsAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyLocationsAsyncWithHttpInfo
     *
     * Get Company Locations
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyLocationsAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getCompanyLocations'][0])
    {
        $returnType = '\MySdk\Model\GetCompanyLocations200ResponseInner[]';
        $request = $this->getCompanyLocationsRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyLocations'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyLocationsRequest($company_domain, string $contentType = self::contentTypes['getCompanyLocations'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getCompanyLocations'
            );
        }


        $resourcePath = '/{companyDomain}/v1/applicant_tracking/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyReport
     *
     * Get company report
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is a report ID. (required)
     * @param  string $format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $fd yes&#x3D;apply standard duplicate field filtering, no&#x3D;return the raw results with no duplicate filtering. Default value is \&quot;yes\&quot; (optional)
     * @param  bool|null $only_current Setting to false will return future dated values from history table fields. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyReport'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCompanyReport($company_domain, $id, $format, $accept_header_parameter = null, $fd = null, $only_current = false, string $contentType = self::contentTypes['getCompanyReport'][0])
    {
        $this->getCompanyReportWithHttpInfo($company_domain, $id, $format, $accept_header_parameter, $fd, $only_current, $contentType);
    }

    /**
     * Operation getCompanyReportWithHttpInfo
     *
     * Get company report
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is a report ID. (required)
     * @param  string $format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $fd yes&#x3D;apply standard duplicate field filtering, no&#x3D;return the raw results with no duplicate filtering. Default value is \&quot;yes\&quot; (optional)
     * @param  bool|null $only_current Setting to false will return future dated values from history table fields. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyReport'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyReportWithHttpInfo($company_domain, $id, $format, $accept_header_parameter = null, $fd = null, $only_current = false, string $contentType = self::contentTypes['getCompanyReport'][0])
    {
        $request = $this->getCompanyReportRequest($company_domain, $id, $format, $accept_header_parameter, $fd, $only_current, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCompanyReportAsync
     *
     * Get company report
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is a report ID. (required)
     * @param  string $format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $fd yes&#x3D;apply standard duplicate field filtering, no&#x3D;return the raw results with no duplicate filtering. Default value is \&quot;yes\&quot; (optional)
     * @param  bool|null $only_current Setting to false will return future dated values from history table fields. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyReportAsync($company_domain, $id, $format, $accept_header_parameter = null, $fd = null, $only_current = false, string $contentType = self::contentTypes['getCompanyReport'][0])
    {
        return $this->getCompanyReportAsyncWithHttpInfo($company_domain, $id, $format, $accept_header_parameter, $fd, $only_current, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyReportAsyncWithHttpInfo
     *
     * Get company report
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is a report ID. (required)
     * @param  string $format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $fd yes&#x3D;apply standard duplicate field filtering, no&#x3D;return the raw results with no duplicate filtering. Default value is \&quot;yes\&quot; (optional)
     * @param  bool|null $only_current Setting to false will return future dated values from history table fields. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyReportAsyncWithHttpInfo($company_domain, $id, $format, $accept_header_parameter = null, $fd = null, $only_current = false, string $contentType = self::contentTypes['getCompanyReport'][0])
    {
        $returnType = '';
        $request = $this->getCompanyReportRequest($company_domain, $id, $format, $accept_header_parameter, $fd, $only_current, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyReport'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is a report ID. (required)
     * @param  string $format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $fd yes&#x3D;apply standard duplicate field filtering, no&#x3D;return the raw results with no duplicate filtering. Default value is \&quot;yes\&quot; (optional)
     * @param  bool|null $only_current Setting to false will return future dated values from history table fields. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyReportRequest($company_domain, $id, $format, $accept_header_parameter = null, $fd = null, $only_current = false, string $contentType = self::contentTypes['getCompanyReport'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getCompanyReport'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCompanyReport'
            );
        }

        // verify the required parameter 'format' is set
        if ($format === null || (is_array($format) && count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling getCompanyReport'
            );
        }





        $resourcePath = '/{companyDomain}/v1/reports/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fd,
            'fd', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_current,
            'onlyCurrent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDataFromDataset
     *
     * Get Data from Dataset
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $dataset_name The name of the dataset you want data from (required)
     * @param  \MySdk\Model\DataRequest $data_request data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataFromDataset'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\EmployeeResponse
     */
    public function getDataFromDataset($company_domain, $dataset_name, $data_request, string $contentType = self::contentTypes['getDataFromDataset'][0])
    {
        list($response) = $this->getDataFromDatasetWithHttpInfo($company_domain, $dataset_name, $data_request, $contentType);
        return $response;
    }

    /**
     * Operation getDataFromDatasetWithHttpInfo
     *
     * Get Data from Dataset
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $dataset_name The name of the dataset you want data from (required)
     * @param  \MySdk\Model\DataRequest $data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataFromDataset'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\EmployeeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataFromDatasetWithHttpInfo($company_domain, $dataset_name, $data_request, string $contentType = self::contentTypes['getDataFromDataset'][0])
    {
        $request = $this->getDataFromDatasetRequest($company_domain, $dataset_name, $data_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\EmployeeResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\EmployeeResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\EmployeeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getDataFromDatasetAsync
     *
     * Get Data from Dataset
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $dataset_name The name of the dataset you want data from (required)
     * @param  \MySdk\Model\DataRequest $data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataFromDataset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataFromDatasetAsync($company_domain, $dataset_name, $data_request, string $contentType = self::contentTypes['getDataFromDataset'][0])
    {
        return $this->getDataFromDatasetAsyncWithHttpInfo($company_domain, $dataset_name, $data_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataFromDatasetAsyncWithHttpInfo
     *
     * Get Data from Dataset
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $dataset_name The name of the dataset you want data from (required)
     * @param  \MySdk\Model\DataRequest $data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataFromDataset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataFromDatasetAsyncWithHttpInfo($company_domain, $dataset_name, $data_request, string $contentType = self::contentTypes['getDataFromDataset'][0])
    {
        $returnType = '\MySdk\Model\EmployeeResponse';
        $request = $this->getDataFromDatasetRequest($company_domain, $dataset_name, $data_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDataFromDataset'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $dataset_name The name of the dataset you want data from (required)
     * @param  \MySdk\Model\DataRequest $data_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataFromDataset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDataFromDatasetRequest($company_domain, $dataset_name, $data_request, string $contentType = self::contentTypes['getDataFromDataset'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getDataFromDataset'
            );
        }

        // verify the required parameter 'dataset_name' is set
        if ($dataset_name === null || (is_array($dataset_name) && count($dataset_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dataset_name when calling getDataFromDataset'
            );
        }

        // verify the required parameter 'data_request' is set
        if ($data_request === null || (is_array($data_request) && count($data_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_request when calling getDataFromDataset'
            );
        }


        $resourcePath = '/{companyDomain}/v1/datasets/{datasetName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($dataset_name !== null) {
            $resourcePath = str_replace(
                '{' . 'datasetName' . '}',
                ObjectSerializer::toPathValue($dataset_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($data_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($data_request));
            } else {
                $httpBody = $data_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDataSets
     *
     * Get Data Sets
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSets'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\DatasetResponse
     */
    public function getDataSets($company_domain, string $contentType = self::contentTypes['getDataSets'][0])
    {
        list($response) = $this->getDataSetsWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation getDataSetsWithHttpInfo
     *
     * Get Data Sets
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSets'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\DatasetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataSetsWithHttpInfo($company_domain, string $contentType = self::contentTypes['getDataSets'][0])
    {
        $request = $this->getDataSetsRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\DatasetResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\DatasetResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\DatasetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getDataSetsAsync
     *
     * Get Data Sets
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataSetsAsync($company_domain, string $contentType = self::contentTypes['getDataSets'][0])
    {
        return $this->getDataSetsAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataSetsAsyncWithHttpInfo
     *
     * Get Data Sets
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataSetsAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getDataSets'][0])
    {
        $returnType = '\MySdk\Model\DatasetResponse';
        $request = $this->getDataSetsRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDataSets'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataSets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDataSetsRequest($company_domain, string $contentType = self::contentTypes['getDataSets'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getDataSets'
            );
        }


        $resourcePath = '/{companyDomain}/v1/datasets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployee
     *
     * Get Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $fields {fields} is a comma separated list of values taken from the official list of field names. (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  bool|null $only_current Setting to false will return future dated values from history table fields. (optional, default to false)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetEmployee200Response
     */
    public function getEmployee($company_domain, $fields, $id, $only_current = false, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployee'][0])
    {
        list($response) = $this->getEmployeeWithHttpInfo($company_domain, $fields, $id, $only_current, $accept_header_parameter, $contentType);
        return $response;
    }

    /**
     * Operation getEmployeeWithHttpInfo
     *
     * Get Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $fields {fields} is a comma separated list of values taken from the official list of field names. (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  bool|null $only_current Setting to false will return future dated values from history table fields. (optional, default to false)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetEmployee200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeeWithHttpInfo($company_domain, $fields, $id, $only_current = false, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployee'][0])
    {
        $request = $this->getEmployeeRequest($company_domain, $fields, $id, $only_current, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetEmployee200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetEmployee200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetEmployee200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getEmployeeAsync
     *
     * Get Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $fields {fields} is a comma separated list of values taken from the official list of field names. (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  bool|null $only_current Setting to false will return future dated values from history table fields. (optional, default to false)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeeAsync($company_domain, $fields, $id, $only_current = false, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployee'][0])
    {
        return $this->getEmployeeAsyncWithHttpInfo($company_domain, $fields, $id, $only_current, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployeeAsyncWithHttpInfo
     *
     * Get Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $fields {fields} is a comma separated list of values taken from the official list of field names. (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  bool|null $only_current Setting to false will return future dated values from history table fields. (optional, default to false)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeeAsyncWithHttpInfo($company_domain, $fields, $id, $only_current = false, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployee'][0])
    {
        $returnType = '\MySdk\Model\GetEmployee200Response';
        $request = $this->getEmployeeRequest($company_domain, $fields, $id, $only_current, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployee'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $fields {fields} is a comma separated list of values taken from the official list of field names. (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  bool|null $only_current Setting to false will return future dated values from history table fields. (optional, default to false)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployeeRequest($company_domain, $fields, $id, $only_current = false, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployee'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getEmployee'
            );
        }

        // verify the required parameter 'fields' is set
        if ($fields === null || (is_array($fields) && count($fields) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fields when calling getEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEmployee'
            );
        }




        $resourcePath = '/{companyDomain}/v1/employees/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_current,
            'onlyCurrent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployeeDependent
     *
     * Get employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee dependent ID. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEmployeeDependent($company_domain, $id, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeeDependent'][0])
    {
        $this->getEmployeeDependentWithHttpInfo($company_domain, $id, $accept_header_parameter, $contentType);
    }

    /**
     * Operation getEmployeeDependentWithHttpInfo
     *
     * Get employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee dependent ID. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeeDependentWithHttpInfo($company_domain, $id, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeeDependent'][0])
    {
        $request = $this->getEmployeeDependentRequest($company_domain, $id, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getEmployeeDependentAsync
     *
     * Get employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee dependent ID. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeeDependentAsync($company_domain, $id, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeeDependent'][0])
    {
        return $this->getEmployeeDependentAsyncWithHttpInfo($company_domain, $id, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployeeDependentAsyncWithHttpInfo
     *
     * Get employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee dependent ID. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeeDependentAsyncWithHttpInfo($company_domain, $id, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeeDependent'][0])
    {
        $returnType = '';
        $request = $this->getEmployeeDependentRequest($company_domain, $id, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployeeDependent'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee dependent ID. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployeeDependentRequest($company_domain, $id, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeeDependent'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getEmployeeDependent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEmployeeDependent'
            );
        }



        $resourcePath = '/{companyDomain}/v1/employeedependents/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployeeDependents
     *
     * Get all employee dependents
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employeeid {employeeid} is the employee ID. Supplying this ID limits the response to the specific employee. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeDependents'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEmployeeDependents($company_domain, $employeeid, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeeDependents'][0])
    {
        $this->getEmployeeDependentsWithHttpInfo($company_domain, $employeeid, $accept_header_parameter, $contentType);
    }

    /**
     * Operation getEmployeeDependentsWithHttpInfo
     *
     * Get all employee dependents
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employeeid {employeeid} is the employee ID. Supplying this ID limits the response to the specific employee. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeDependents'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeeDependentsWithHttpInfo($company_domain, $employeeid, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeeDependents'][0])
    {
        $request = $this->getEmployeeDependentsRequest($company_domain, $employeeid, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getEmployeeDependentsAsync
     *
     * Get all employee dependents
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employeeid {employeeid} is the employee ID. Supplying this ID limits the response to the specific employee. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeDependents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeeDependentsAsync($company_domain, $employeeid, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeeDependents'][0])
    {
        return $this->getEmployeeDependentsAsyncWithHttpInfo($company_domain, $employeeid, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployeeDependentsAsyncWithHttpInfo
     *
     * Get all employee dependents
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employeeid {employeeid} is the employee ID. Supplying this ID limits the response to the specific employee. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeDependents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeeDependentsAsyncWithHttpInfo($company_domain, $employeeid, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeeDependents'][0])
    {
        $returnType = '';
        $request = $this->getEmployeeDependentsRequest($company_domain, $employeeid, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployeeDependents'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employeeid {employeeid} is the employee ID. Supplying this ID limits the response to the specific employee. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeDependents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployeeDependentsRequest($company_domain, $employeeid, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeeDependents'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getEmployeeDependents'
            );
        }

        // verify the required parameter 'employeeid' is set
        if ($employeeid === null || (is_array($employeeid) && count($employeeid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employeeid when calling getEmployeeDependents'
            );
        }



        $resourcePath = '/{companyDomain}/v1/employeedependents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employeeid,
            'employeeid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployeeFile
     *
     * Get an Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being retrieved. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEmployeeFile($company_domain, $id, $file_id, string $contentType = self::contentTypes['getEmployeeFile'][0])
    {
        $this->getEmployeeFileWithHttpInfo($company_domain, $id, $file_id, $contentType);
    }

    /**
     * Operation getEmployeeFileWithHttpInfo
     *
     * Get an Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being retrieved. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeeFileWithHttpInfo($company_domain, $id, $file_id, string $contentType = self::contentTypes['getEmployeeFile'][0])
    {
        $request = $this->getEmployeeFileRequest($company_domain, $id, $file_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getEmployeeFileAsync
     *
     * Get an Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being retrieved. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeeFileAsync($company_domain, $id, $file_id, string $contentType = self::contentTypes['getEmployeeFile'][0])
    {
        return $this->getEmployeeFileAsyncWithHttpInfo($company_domain, $id, $file_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployeeFileAsyncWithHttpInfo
     *
     * Get an Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being retrieved. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeeFileAsyncWithHttpInfo($company_domain, $id, $file_id, string $contentType = self::contentTypes['getEmployeeFile'][0])
    {
        $returnType = '';
        $request = $this->getEmployeeFileRequest($company_domain, $id, $file_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployeeFile'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being retrieved. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployeeFileRequest($company_domain, $id, $file_id, string $contentType = self::contentTypes['getEmployeeFile'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getEmployeeFile'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEmployeeFile'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling getEmployeeFile'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{id}/files/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployeePhoto
     *
     * Get an employee photo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id The ID for the employee you are getting the photo for. (required)
     * @param  string $size Photo size (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeePhoto'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEmployeePhoto($company_domain, $employee_id, $size, string $contentType = self::contentTypes['getEmployeePhoto'][0])
    {
        $this->getEmployeePhotoWithHttpInfo($company_domain, $employee_id, $size, $contentType);
    }

    /**
     * Operation getEmployeePhotoWithHttpInfo
     *
     * Get an employee photo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id The ID for the employee you are getting the photo for. (required)
     * @param  string $size Photo size (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeePhoto'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeePhotoWithHttpInfo($company_domain, $employee_id, $size, string $contentType = self::contentTypes['getEmployeePhoto'][0])
    {
        $request = $this->getEmployeePhotoRequest($company_domain, $employee_id, $size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getEmployeePhotoAsync
     *
     * Get an employee photo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id The ID for the employee you are getting the photo for. (required)
     * @param  string $size Photo size (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeePhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeePhotoAsync($company_domain, $employee_id, $size, string $contentType = self::contentTypes['getEmployeePhoto'][0])
    {
        return $this->getEmployeePhotoAsyncWithHttpInfo($company_domain, $employee_id, $size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployeePhotoAsyncWithHttpInfo
     *
     * Get an employee photo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id The ID for the employee you are getting the photo for. (required)
     * @param  string $size Photo size (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeePhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeePhotoAsyncWithHttpInfo($company_domain, $employee_id, $size, string $contentType = self::contentTypes['getEmployeePhoto'][0])
    {
        $returnType = '';
        $request = $this->getEmployeePhotoRequest($company_domain, $employee_id, $size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployeePhoto'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id The ID for the employee you are getting the photo for. (required)
     * @param  string $size Photo size (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeePhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployeePhotoRequest($company_domain, $employee_id, $size, string $contentType = self::contentTypes['getEmployeePhoto'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getEmployeePhoto'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getEmployeePhoto'
            );
        }

        // verify the required parameter 'size' is set
        if ($size === null || (is_array($size) && count($size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $size when calling getEmployeePhoto'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/photo/{size}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($size !== null) {
            $resourcePath = str_replace(
                '{' . 'size' . '}',
                ObjectSerializer::toPathValue($size),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployeeTableRow
     *
     * Gets table rows for a given employee and table combination
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getEmployeeTableRow($company_domain, $id, $table, string $contentType = self::contentTypes['getEmployeeTableRow'][0])
    {
        $this->getEmployeeTableRowWithHttpInfo($company_domain, $id, $table, $contentType);
    }

    /**
     * Operation getEmployeeTableRowWithHttpInfo
     *
     * Gets table rows for a given employee and table combination
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeeTableRowWithHttpInfo($company_domain, $id, $table, string $contentType = self::contentTypes['getEmployeeTableRow'][0])
    {
        $request = $this->getEmployeeTableRowRequest($company_domain, $id, $table, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getEmployeeTableRowAsync
     *
     * Gets table rows for a given employee and table combination
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeeTableRowAsync($company_domain, $id, $table, string $contentType = self::contentTypes['getEmployeeTableRow'][0])
    {
        return $this->getEmployeeTableRowAsyncWithHttpInfo($company_domain, $id, $table, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployeeTableRowAsyncWithHttpInfo
     *
     * Gets table rows for a given employee and table combination
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeeTableRowAsyncWithHttpInfo($company_domain, $id, $table, string $contentType = self::contentTypes['getEmployeeTableRow'][0])
    {
        $returnType = '';
        $request = $this->getEmployeeTableRowRequest($company_domain, $id, $table, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployeeTableRow'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployeeTableRowRequest($company_domain, $id, $table, string $contentType = self::contentTypes['getEmployeeTableRow'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getEmployeeTableRow'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEmployeeTableRow'
            );
        }

        // verify the required parameter 'table' is set
        if ($table === null || (is_array($table) && count($table) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table when calling getEmployeeTableRow'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{id}/tables/{table}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($table !== null) {
            $resourcePath = str_replace(
                '{' . 'table' . '}',
                ObjectSerializer::toPathValue($table),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEmployeesDirectory
     *
     * Get Employee Directory
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeesDirectory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetEmployee200Response
     */
    public function getEmployeesDirectory($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeesDirectory'][0])
    {
        list($response) = $this->getEmployeesDirectoryWithHttpInfo($company_domain, $accept_header_parameter, $contentType);
        return $response;
    }

    /**
     * Operation getEmployeesDirectoryWithHttpInfo
     *
     * Get Employee Directory
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeesDirectory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetEmployee200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEmployeesDirectoryWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeesDirectory'][0])
    {
        $request = $this->getEmployeesDirectoryRequest($company_domain, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetEmployee200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetEmployee200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetEmployee200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getEmployeesDirectoryAsync
     *
     * Get Employee Directory
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeesDirectory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeesDirectoryAsync($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeesDirectory'][0])
    {
        return $this->getEmployeesDirectoryAsyncWithHttpInfo($company_domain, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEmployeesDirectoryAsyncWithHttpInfo
     *
     * Get Employee Directory
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeesDirectory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEmployeesDirectoryAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeesDirectory'][0])
    {
        $returnType = '\MySdk\Model\GetEmployee200Response';
        $request = $this->getEmployeesDirectoryRequest($company_domain, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEmployeesDirectory'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEmployeesDirectory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEmployeesDirectoryRequest($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getEmployeesDirectory'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getEmployeesDirectory'
            );
        }



        $resourcePath = '/{companyDomain}/v1/employees/directory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getFieldsFromDataset
     *
     * Get Fields from Dataset
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $dataset_name The name of the dataset you want to see fields for (required)
     * @param  int|null $page The page number to retrieve (optional)
     * @param  int|null $page_size The number of records to retrieve per page. Default is 500 and the Max is 1000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFieldsFromDataset'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\DatasetFieldsResponse
     */
    public function getFieldsFromDataset($company_domain, $dataset_name, $page = null, $page_size = null, string $contentType = self::contentTypes['getFieldsFromDataset'][0])
    {
        list($response) = $this->getFieldsFromDatasetWithHttpInfo($company_domain, $dataset_name, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation getFieldsFromDatasetWithHttpInfo
     *
     * Get Fields from Dataset
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $dataset_name The name of the dataset you want to see fields for (required)
     * @param  int|null $page The page number to retrieve (optional)
     * @param  int|null $page_size The number of records to retrieve per page. Default is 500 and the Max is 1000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFieldsFromDataset'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\DatasetFieldsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFieldsFromDatasetWithHttpInfo($company_domain, $dataset_name, $page = null, $page_size = null, string $contentType = self::contentTypes['getFieldsFromDataset'][0])
    {
        $request = $this->getFieldsFromDatasetRequest($company_domain, $dataset_name, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\DatasetFieldsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\DatasetFieldsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\DatasetFieldsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getFieldsFromDatasetAsync
     *
     * Get Fields from Dataset
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $dataset_name The name of the dataset you want to see fields for (required)
     * @param  int|null $page The page number to retrieve (optional)
     * @param  int|null $page_size The number of records to retrieve per page. Default is 500 and the Max is 1000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFieldsFromDataset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFieldsFromDatasetAsync($company_domain, $dataset_name, $page = null, $page_size = null, string $contentType = self::contentTypes['getFieldsFromDataset'][0])
    {
        return $this->getFieldsFromDatasetAsyncWithHttpInfo($company_domain, $dataset_name, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFieldsFromDatasetAsyncWithHttpInfo
     *
     * Get Fields from Dataset
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $dataset_name The name of the dataset you want to see fields for (required)
     * @param  int|null $page The page number to retrieve (optional)
     * @param  int|null $page_size The number of records to retrieve per page. Default is 500 and the Max is 1000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFieldsFromDataset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFieldsFromDatasetAsyncWithHttpInfo($company_domain, $dataset_name, $page = null, $page_size = null, string $contentType = self::contentTypes['getFieldsFromDataset'][0])
    {
        $returnType = '\MySdk\Model\DatasetFieldsResponse';
        $request = $this->getFieldsFromDatasetRequest($company_domain, $dataset_name, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFieldsFromDataset'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $dataset_name The name of the dataset you want to see fields for (required)
     * @param  int|null $page The page number to retrieve (optional)
     * @param  int|null $page_size The number of records to retrieve per page. Default is 500 and the Max is 1000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFieldsFromDataset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFieldsFromDatasetRequest($company_domain, $dataset_name, $page = null, $page_size = null, string $contentType = self::contentTypes['getFieldsFromDataset'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getFieldsFromDataset'
            );
        }

        // verify the required parameter 'dataset_name' is set
        if ($dataset_name === null || (is_array($dataset_name) && count($dataset_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dataset_name when calling getFieldsFromDataset'
            );
        }




        $resourcePath = '/{companyDomain}/v1/datasets/{datasetName}/fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($dataset_name !== null) {
            $resourcePath = str_replace(
                '{' . 'datasetName' . '}',
                ObjectSerializer::toPathValue($dataset_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalAggregate
     *
     * Get Aggregate Goal Info
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the Goal ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalAggregate'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetGoalAggregate200Response
     */
    public function getGoalAggregate($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['getGoalAggregate'][0])
    {
        list($response) = $this->getGoalAggregateWithHttpInfo($company_domain, $employee_id, $goal_id, $contentType);
        return $response;
    }

    /**
     * Operation getGoalAggregateWithHttpInfo
     *
     * Get Aggregate Goal Info
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the Goal ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalAggregate'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetGoalAggregate200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalAggregateWithHttpInfo($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['getGoalAggregate'][0])
    {
        $request = $this->getGoalAggregateRequest($company_domain, $employee_id, $goal_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetGoalAggregate200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetGoalAggregate200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetGoalAggregate200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getGoalAggregateAsync
     *
     * Get Aggregate Goal Info
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the Goal ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalAggregate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalAggregateAsync($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['getGoalAggregate'][0])
    {
        return $this->getGoalAggregateAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalAggregateAsyncWithHttpInfo
     *
     * Get Aggregate Goal Info
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the Goal ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalAggregate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalAggregateAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['getGoalAggregate'][0])
    {
        $returnType = '\MySdk\Model\GetGoalAggregate200Response';
        $request = $this->getGoalAggregateRequest($company_domain, $employee_id, $goal_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalAggregate'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the Goal ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalAggregate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGoalAggregateRequest($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['getGoalAggregate'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getGoalAggregate'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getGoalAggregate'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling getGoalAggregate'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/aggregate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalComments
     *
     * Get Goal Comments
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalComments'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getGoalComments($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['getGoalComments'][0])
    {
        $this->getGoalCommentsWithHttpInfo($company_domain, $employee_id, $goal_id, $contentType);
    }

    /**
     * Operation getGoalCommentsWithHttpInfo
     *
     * Get Goal Comments
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalComments'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalCommentsWithHttpInfo($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['getGoalComments'][0])
    {
        $request = $this->getGoalCommentsRequest($company_domain, $employee_id, $goal_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getGoalCommentsAsync
     *
     * Get Goal Comments
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalCommentsAsync($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['getGoalComments'][0])
    {
        return $this->getGoalCommentsAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalCommentsAsyncWithHttpInfo
     *
     * Get Goal Comments
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalCommentsAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['getGoalComments'][0])
    {
        $returnType = '';
        $request = $this->getGoalCommentsRequest($company_domain, $employee_id, $goal_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalComments'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGoalCommentsRequest($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['getGoalComments'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getGoalComments'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getGoalComments'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling getGoalComments'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoals
     *
     * Get Goals
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string|null $filter A filter that can be applied to only show the goals that are in a certain state. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoals'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetGoals200Response
     */
    public function getGoals($company_domain, $employee_id, $filter = null, string $contentType = self::contentTypes['getGoals'][0])
    {
        list($response) = $this->getGoalsWithHttpInfo($company_domain, $employee_id, $filter, $contentType);
        return $response;
    }

    /**
     * Operation getGoalsWithHttpInfo
     *
     * Get Goals
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string|null $filter A filter that can be applied to only show the goals that are in a certain state. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoals'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetGoals200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalsWithHttpInfo($company_domain, $employee_id, $filter = null, string $contentType = self::contentTypes['getGoals'][0])
    {
        $request = $this->getGoalsRequest($company_domain, $employee_id, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetGoals200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetGoals200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetGoals200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getGoalsAsync
     *
     * Get Goals
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string|null $filter A filter that can be applied to only show the goals that are in a certain state. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalsAsync($company_domain, $employee_id, $filter = null, string $contentType = self::contentTypes['getGoals'][0])
    {
        return $this->getGoalsAsyncWithHttpInfo($company_domain, $employee_id, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalsAsyncWithHttpInfo
     *
     * Get Goals
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string|null $filter A filter that can be applied to only show the goals that are in a certain state. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalsAsyncWithHttpInfo($company_domain, $employee_id, $filter = null, string $contentType = self::contentTypes['getGoals'][0])
    {
        $returnType = '\MySdk\Model\GetGoals200Response';
        $request = $this->getGoalsRequest($company_domain, $employee_id, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoals'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string|null $filter A filter that can be applied to only show the goals that are in a certain state. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGoalsRequest($company_domain, $employee_id, $filter = null, string $contentType = self::contentTypes['getGoals'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getGoals'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getGoals'
            );
        }



        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalsAggregateV1
     *
     * Get All Aggregate Goal Info
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV1'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetGoalsAggregateV1200Response
     * @deprecated
     */
    public function getGoalsAggregateV1($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV1'][0])
    {
        list($response) = $this->getGoalsAggregateV1WithHttpInfo($company_domain, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation getGoalsAggregateV1WithHttpInfo
     *
     * Get All Aggregate Goal Info
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV1'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetGoalsAggregateV1200Response, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getGoalsAggregateV1WithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV1'][0])
    {
        $request = $this->getGoalsAggregateV1Request($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetGoalsAggregateV1200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetGoalsAggregateV1200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetGoalsAggregateV1200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getGoalsAggregateV1Async
     *
     * Get All Aggregate Goal Info
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getGoalsAggregateV1Async($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV1'][0])
    {
        return $this->getGoalsAggregateV1AsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalsAggregateV1AsyncWithHttpInfo
     *
     * Get All Aggregate Goal Info
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getGoalsAggregateV1AsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV1'][0])
    {
        $returnType = '\MySdk\Model\GetGoalsAggregateV1200Response';
        $request = $this->getGoalsAggregateV1Request($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalsAggregateV1'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getGoalsAggregateV1Request($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV1'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getGoalsAggregateV1'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getGoalsAggregateV1'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/aggregate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalsAggregateV11
     *
     * Get All Aggregate Goal Info, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV11'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetGoalsAggregateV11200Response
     * @deprecated
     */
    public function getGoalsAggregateV11($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV11'][0])
    {
        list($response) = $this->getGoalsAggregateV11WithHttpInfo($company_domain, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation getGoalsAggregateV11WithHttpInfo
     *
     * Get All Aggregate Goal Info, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV11'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetGoalsAggregateV11200Response, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getGoalsAggregateV11WithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV11'][0])
    {
        $request = $this->getGoalsAggregateV11Request($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetGoalsAggregateV11200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetGoalsAggregateV11200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetGoalsAggregateV11200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getGoalsAggregateV11Async
     *
     * Get All Aggregate Goal Info, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getGoalsAggregateV11Async($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV11'][0])
    {
        return $this->getGoalsAggregateV11AsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalsAggregateV11AsyncWithHttpInfo
     *
     * Get All Aggregate Goal Info, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getGoalsAggregateV11AsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV11'][0])
    {
        $returnType = '\MySdk\Model\GetGoalsAggregateV11200Response';
        $request = $this->getGoalsAggregateV11Request($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalsAggregateV11'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getGoalsAggregateV11Request($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV11'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getGoalsAggregateV11'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getGoalsAggregateV11'
            );
        }


        $resourcePath = '/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/aggregate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalsAggregateV12
     *
     * Get All Aggregate Goal Info, Version 1.2
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV12'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetGoalsAggregateV12200Response
     */
    public function getGoalsAggregateV12($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV12'][0])
    {
        list($response) = $this->getGoalsAggregateV12WithHttpInfo($company_domain, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation getGoalsAggregateV12WithHttpInfo
     *
     * Get All Aggregate Goal Info, Version 1.2
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV12'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetGoalsAggregateV12200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalsAggregateV12WithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV12'][0])
    {
        $request = $this->getGoalsAggregateV12Request($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetGoalsAggregateV12200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetGoalsAggregateV12200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetGoalsAggregateV12200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getGoalsAggregateV12Async
     *
     * Get All Aggregate Goal Info, Version 1.2
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalsAggregateV12Async($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV12'][0])
    {
        return $this->getGoalsAggregateV12AsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalsAggregateV12AsyncWithHttpInfo
     *
     * Get All Aggregate Goal Info, Version 1.2
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalsAggregateV12AsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV12'][0])
    {
        $returnType = '\MySdk\Model\GetGoalsAggregateV12200Response';
        $request = $this->getGoalsAggregateV12Request($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalsAggregateV12'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID used to generate the aggregate information. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAggregateV12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGoalsAggregateV12Request($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsAggregateV12'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getGoalsAggregateV12'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getGoalsAggregateV12'
            );
        }


        $resourcePath = '/{companyDomain}/v1_2/performance/employees/{employeeId}/goals/aggregate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalsAlignmentOptions
     *
     * Alignable Goal Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to get alignable goal options for. (required)
     * @param  string|null $body Get alignment options including the option currently aligned with this goal (if applicable). If omitted, response will be alignment options belonging to the API user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAlignmentOptions'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getGoalsAlignmentOptions($company_domain, $employee_id, $body = null, string $contentType = self::contentTypes['getGoalsAlignmentOptions'][0])
    {
        $this->getGoalsAlignmentOptionsWithHttpInfo($company_domain, $employee_id, $body, $contentType);
    }

    /**
     * Operation getGoalsAlignmentOptionsWithHttpInfo
     *
     * Alignable Goal Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to get alignable goal options for. (required)
     * @param  string|null $body Get alignment options including the option currently aligned with this goal (if applicable). If omitted, response will be alignment options belonging to the API user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAlignmentOptions'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalsAlignmentOptionsWithHttpInfo($company_domain, $employee_id, $body = null, string $contentType = self::contentTypes['getGoalsAlignmentOptions'][0])
    {
        $request = $this->getGoalsAlignmentOptionsRequest($company_domain, $employee_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getGoalsAlignmentOptionsAsync
     *
     * Alignable Goal Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to get alignable goal options for. (required)
     * @param  string|null $body Get alignment options including the option currently aligned with this goal (if applicable). If omitted, response will be alignment options belonging to the API user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAlignmentOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalsAlignmentOptionsAsync($company_domain, $employee_id, $body = null, string $contentType = self::contentTypes['getGoalsAlignmentOptions'][0])
    {
        return $this->getGoalsAlignmentOptionsAsyncWithHttpInfo($company_domain, $employee_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalsAlignmentOptionsAsyncWithHttpInfo
     *
     * Alignable Goal Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to get alignable goal options for. (required)
     * @param  string|null $body Get alignment options including the option currently aligned with this goal (if applicable). If omitted, response will be alignment options belonging to the API user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAlignmentOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalsAlignmentOptionsAsyncWithHttpInfo($company_domain, $employee_id, $body = null, string $contentType = self::contentTypes['getGoalsAlignmentOptions'][0])
    {
        $returnType = '';
        $request = $this->getGoalsAlignmentOptionsRequest($company_domain, $employee_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalsAlignmentOptions'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to get alignable goal options for. (required)
     * @param  string|null $body Get alignment options including the option currently aligned with this goal (if applicable). If omitted, response will be alignment options belonging to the API user. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsAlignmentOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGoalsAlignmentOptionsRequest($company_domain, $employee_id, $body = null, string $contentType = self::contentTypes['getGoalsAlignmentOptions'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getGoalsAlignmentOptions'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getGoalsAlignmentOptions'
            );
        }



        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/alignmentOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalsFiltersV1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV1'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GoalFiltersV1
     * @deprecated
     */
    public function getGoalsFiltersV1($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV1'][0])
    {
        list($response) = $this->getGoalsFiltersV1WithHttpInfo($company_domain, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation getGoalsFiltersV1WithHttpInfo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV1'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GoalFiltersV1, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getGoalsFiltersV1WithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV1'][0])
    {
        $request = $this->getGoalsFiltersV1Request($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GoalFiltersV1',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GoalFiltersV1',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GoalFiltersV1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getGoalsFiltersV1Async
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getGoalsFiltersV1Async($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV1'][0])
    {
        return $this->getGoalsFiltersV1AsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalsFiltersV1AsyncWithHttpInfo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getGoalsFiltersV1AsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV1'][0])
    {
        $returnType = '\MySdk\Model\GoalFiltersV1';
        $request = $this->getGoalsFiltersV1Request($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalsFiltersV1'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getGoalsFiltersV1Request($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV1'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getGoalsFiltersV1'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getGoalsFiltersV1'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/filters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalsFiltersV11
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV11'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GoalFiltersV11
     * @deprecated
     */
    public function getGoalsFiltersV11($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV11'][0])
    {
        list($response) = $this->getGoalsFiltersV11WithHttpInfo($company_domain, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation getGoalsFiltersV11WithHttpInfo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV11'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GoalFiltersV11, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function getGoalsFiltersV11WithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV11'][0])
    {
        $request = $this->getGoalsFiltersV11Request($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GoalFiltersV11',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GoalFiltersV11',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GoalFiltersV11',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getGoalsFiltersV11Async
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getGoalsFiltersV11Async($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV11'][0])
    {
        return $this->getGoalsFiltersV11AsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalsFiltersV11AsyncWithHttpInfo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function getGoalsFiltersV11AsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV11'][0])
    {
        $returnType = '\MySdk\Model\GoalFiltersV11';
        $request = $this->getGoalsFiltersV11Request($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalsFiltersV11'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function getGoalsFiltersV11Request($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV11'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getGoalsFiltersV11'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getGoalsFiltersV11'
            );
        }


        $resourcePath = '/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/filters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalsFiltersV12
     *
     * Get Goal Status Counts, Version 1.2
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV12'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GoalFiltersV11
     */
    public function getGoalsFiltersV12($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV12'][0])
    {
        list($response) = $this->getGoalsFiltersV12WithHttpInfo($company_domain, $employee_id, $contentType);
        return $response;
    }

    /**
     * Operation getGoalsFiltersV12WithHttpInfo
     *
     * Get Goal Status Counts, Version 1.2
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV12'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GoalFiltersV11, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalsFiltersV12WithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV12'][0])
    {
        $request = $this->getGoalsFiltersV12Request($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GoalFiltersV11',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GoalFiltersV11',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GoalFiltersV11',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getGoalsFiltersV12Async
     *
     * Get Goal Status Counts, Version 1.2
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalsFiltersV12Async($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV12'][0])
    {
        return $this->getGoalsFiltersV12AsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalsFiltersV12AsyncWithHttpInfo
     *
     * Get Goal Status Counts, Version 1.2
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalsFiltersV12AsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV12'][0])
    {
        $returnType = '\MySdk\Model\GoalFiltersV11';
        $request = $this->getGoalsFiltersV12Request($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalsFiltersV12'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsFiltersV12'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGoalsFiltersV12Request($company_domain, $employee_id, string $contentType = self::contentTypes['getGoalsFiltersV12'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getGoalsFiltersV12'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getGoalsFiltersV12'
            );
        }


        $resourcePath = '/{companyDomain}/v1_2/performance/employees/{employeeId}/goals/filters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGoalsShareOptions
     *
     * Available Goal Sharing Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to get sharing options for. (required)
     * @param  string|null $search The search term used to filter employees returned. Will search name, employee ID and email. (optional)
     * @param  string|null $limit Limit will restrict results to specified number. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsShareOptions'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getGoalsShareOptions($company_domain, $employee_id, $search = null, $limit = null, string $contentType = self::contentTypes['getGoalsShareOptions'][0])
    {
        $this->getGoalsShareOptionsWithHttpInfo($company_domain, $employee_id, $search, $limit, $contentType);
    }

    /**
     * Operation getGoalsShareOptionsWithHttpInfo
     *
     * Available Goal Sharing Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to get sharing options for. (required)
     * @param  string|null $search The search term used to filter employees returned. Will search name, employee ID and email. (optional)
     * @param  string|null $limit Limit will restrict results to specified number. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsShareOptions'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGoalsShareOptionsWithHttpInfo($company_domain, $employee_id, $search = null, $limit = null, string $contentType = self::contentTypes['getGoalsShareOptions'][0])
    {
        $request = $this->getGoalsShareOptionsRequest($company_domain, $employee_id, $search, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getGoalsShareOptionsAsync
     *
     * Available Goal Sharing Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to get sharing options for. (required)
     * @param  string|null $search The search term used to filter employees returned. Will search name, employee ID and email. (optional)
     * @param  string|null $limit Limit will restrict results to specified number. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsShareOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalsShareOptionsAsync($company_domain, $employee_id, $search = null, $limit = null, string $contentType = self::contentTypes['getGoalsShareOptions'][0])
    {
        return $this->getGoalsShareOptionsAsyncWithHttpInfo($company_domain, $employee_id, $search, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGoalsShareOptionsAsyncWithHttpInfo
     *
     * Available Goal Sharing Options
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to get sharing options for. (required)
     * @param  string|null $search The search term used to filter employees returned. Will search name, employee ID and email. (optional)
     * @param  string|null $limit Limit will restrict results to specified number. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsShareOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGoalsShareOptionsAsyncWithHttpInfo($company_domain, $employee_id, $search = null, $limit = null, string $contentType = self::contentTypes['getGoalsShareOptions'][0])
    {
        $returnType = '';
        $request = $this->getGoalsShareOptionsRequest($company_domain, $employee_id, $search, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGoalsShareOptions'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to get sharing options for. (required)
     * @param  string|null $search The search term used to filter employees returned. Will search name, employee ID and email. (optional)
     * @param  string|null $limit Limit will restrict results to specified number. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGoalsShareOptions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGoalsShareOptionsRequest($company_domain, $employee_id, $search = null, $limit = null, string $contentType = self::contentTypes['getGoalsShareOptions'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getGoalsShareOptions'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling getGoalsShareOptions'
            );
        }




        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/shareOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHiringLeads
     *
     * Get Hiring Leads
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHiringLeads'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetHiringLeads200ResponseInner[]
     */
    public function getHiringLeads($company_domain, string $contentType = self::contentTypes['getHiringLeads'][0])
    {
        list($response) = $this->getHiringLeadsWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation getHiringLeadsWithHttpInfo
     *
     * Get Hiring Leads
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHiringLeads'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetHiringLeads200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHiringLeadsWithHttpInfo($company_domain, string $contentType = self::contentTypes['getHiringLeads'][0])
    {
        $request = $this->getHiringLeadsRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetHiringLeads200ResponseInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetHiringLeads200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetHiringLeads200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHiringLeadsAsync
     *
     * Get Hiring Leads
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHiringLeads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHiringLeadsAsync($company_domain, string $contentType = self::contentTypes['getHiringLeads'][0])
    {
        return $this->getHiringLeadsAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHiringLeadsAsyncWithHttpInfo
     *
     * Get Hiring Leads
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHiringLeads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHiringLeadsAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getHiringLeads'][0])
    {
        $returnType = '\MySdk\Model\GetHiringLeads200ResponseInner[]';
        $request = $this->getHiringLeadsRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHiringLeads'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHiringLeads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHiringLeadsRequest($company_domain, string $contentType = self::contentTypes['getHiringLeads'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getHiringLeads'
            );
        }


        $resourcePath = '/{companyDomain}/v1/applicant_tracking/hiring_leads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJobSummaries
     *
     * Get Job Summaries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $status_groups A list of status groups to filter positions by. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobSummaries'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getJobSummaries($company_domain, $status_groups = null, $sort_by = null, $sort_order = null, string $contentType = self::contentTypes['getJobSummaries'][0])
    {
        $this->getJobSummariesWithHttpInfo($company_domain, $status_groups, $sort_by, $sort_order, $contentType);
    }

    /**
     * Operation getJobSummariesWithHttpInfo
     *
     * Get Job Summaries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $status_groups A list of status groups to filter positions by. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobSummaries'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobSummariesWithHttpInfo($company_domain, $status_groups = null, $sort_by = null, $sort_order = null, string $contentType = self::contentTypes['getJobSummaries'][0])
    {
        $request = $this->getJobSummariesRequest($company_domain, $status_groups, $sort_by, $sort_order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getJobSummariesAsync
     *
     * Get Job Summaries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $status_groups A list of status groups to filter positions by. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobSummariesAsync($company_domain, $status_groups = null, $sort_by = null, $sort_order = null, string $contentType = self::contentTypes['getJobSummaries'][0])
    {
        return $this->getJobSummariesAsyncWithHttpInfo($company_domain, $status_groups, $sort_by, $sort_order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJobSummariesAsyncWithHttpInfo
     *
     * Get Job Summaries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $status_groups A list of status groups to filter positions by. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobSummariesAsyncWithHttpInfo($company_domain, $status_groups = null, $sort_by = null, $sort_order = null, string $contentType = self::contentTypes['getJobSummaries'][0])
    {
        $returnType = '';
        $request = $this->getJobSummariesRequest($company_domain, $status_groups, $sort_by, $sort_order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJobSummaries'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $status_groups A list of status groups to filter positions by. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getJobSummariesRequest($company_domain, $status_groups = null, $sort_by = null, $sort_order = null, string $contentType = self::contentTypes['getJobSummaries'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getJobSummaries'
            );
        }





        $resourcePath = '/{companyDomain}/v1/applicant_tracking/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_groups,
            'statusGroups', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMemberBenefit
     *
     * Get a list of member benefit events
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberBenefit'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\MemberBenefitEvent[]
     */
    public function getMemberBenefit($company_domain, string $contentType = self::contentTypes['getMemberBenefit'][0])
    {
        list($response) = $this->getMemberBenefitWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation getMemberBenefitWithHttpInfo
     *
     * Get a list of member benefit events
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberBenefit'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\MemberBenefitEvent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getMemberBenefitWithHttpInfo($company_domain, string $contentType = self::contentTypes['getMemberBenefit'][0])
    {
        $request = $this->getMemberBenefitRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\MemberBenefitEvent[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\MemberBenefitEvent[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\MemberBenefitEvent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getMemberBenefitAsync
     *
     * Get a list of member benefit events
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberBenefit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberBenefitAsync($company_domain, string $contentType = self::contentTypes['getMemberBenefit'][0])
    {
        return $this->getMemberBenefitAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMemberBenefitAsyncWithHttpInfo
     *
     * Get a list of member benefit events
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberBenefit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMemberBenefitAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getMemberBenefit'][0])
    {
        $returnType = '\MySdk\Model\MemberBenefitEvent[]';
        $request = $this->getMemberBenefitRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMemberBenefit'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMemberBenefit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMemberBenefitRequest($company_domain, string $contentType = self::contentTypes['getMemberBenefit'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getMemberBenefit'
            );
        }


        $resourcePath = '/{companyDomain}/v1/benefit/member_benefit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMonitorFields
     *
     * Get monitor fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMonitorFields'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetMonitorFields200Response|\MySdk\Model\WebhookError
     */
    public function getMonitorFields($company_domain, string $contentType = self::contentTypes['getMonitorFields'][0])
    {
        list($response) = $this->getMonitorFieldsWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation getMonitorFieldsWithHttpInfo
     *
     * Get monitor fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMonitorFields'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetMonitorFields200Response|\MySdk\Model\WebhookError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMonitorFieldsWithHttpInfo($company_domain, string $contentType = self::contentTypes['getMonitorFields'][0])
    {
        $request = $this->getMonitorFieldsRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetMonitorFields200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebhookError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetMonitorFields200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetMonitorFields200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getMonitorFieldsAsync
     *
     * Get monitor fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMonitorFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMonitorFieldsAsync($company_domain, string $contentType = self::contentTypes['getMonitorFields'][0])
    {
        return $this->getMonitorFieldsAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMonitorFieldsAsyncWithHttpInfo
     *
     * Get monitor fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMonitorFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMonitorFieldsAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getMonitorFields'][0])
    {
        $returnType = '\MySdk\Model\GetMonitorFields200Response';
        $request = $this->getMonitorFieldsRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMonitorFields'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMonitorFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMonitorFieldsRequest($company_domain, string $contentType = self::contentTypes['getMonitorFields'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getMonitorFields'
            );
        }


        $resourcePath = '/{companyDomain}/v1/webhooks/monitor_fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatuses
     *
     * Get Statuses
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatuses'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getStatuses($company_domain, string $contentType = self::contentTypes['getStatuses'][0])
    {
        $this->getStatusesWithHttpInfo($company_domain, $contentType);
    }

    /**
     * Operation getStatusesWithHttpInfo
     *
     * Get Statuses
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatuses'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusesWithHttpInfo($company_domain, string $contentType = self::contentTypes['getStatuses'][0])
    {
        $request = $this->getStatusesRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getStatusesAsync
     *
     * Get Statuses
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusesAsync($company_domain, string $contentType = self::contentTypes['getStatuses'][0])
    {
        return $this->getStatusesAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusesAsyncWithHttpInfo
     *
     * Get Statuses
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusesAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getStatuses'][0])
    {
        $returnType = '';
        $request = $this->getStatusesRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatuses'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStatusesRequest($company_domain, string $contentType = self::contentTypes['getStatuses'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getStatuses'
            );
        }


        $resourcePath = '/{companyDomain}/v1/applicant_tracking/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTimeOffPolicies
     *
     * Get Time Off Policies
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffPolicies'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getTimeOffPolicies($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getTimeOffPolicies'][0])
    {
        $this->getTimeOffPoliciesWithHttpInfo($company_domain, $accept_header_parameter, $contentType);
    }

    /**
     * Operation getTimeOffPoliciesWithHttpInfo
     *
     * Get Time Off Policies
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffPolicies'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimeOffPoliciesWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getTimeOffPolicies'][0])
    {
        $request = $this->getTimeOffPoliciesRequest($company_domain, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTimeOffPoliciesAsync
     *
     * Get Time Off Policies
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeOffPoliciesAsync($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getTimeOffPolicies'][0])
    {
        return $this->getTimeOffPoliciesAsyncWithHttpInfo($company_domain, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTimeOffPoliciesAsyncWithHttpInfo
     *
     * Get Time Off Policies
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeOffPoliciesAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getTimeOffPolicies'][0])
    {
        $returnType = '';
        $request = $this->getTimeOffPoliciesRequest($company_domain, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTimeOffPolicies'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffPolicies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTimeOffPoliciesRequest($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['getTimeOffPolicies'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getTimeOffPolicies'
            );
        }



        $resourcePath = '/{companyDomain}/v1/meta/time_off/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTimeOffTypes
     *
     * Get Time Off Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $mode set to \\&#39;request\\&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\\&#39;t have permission to view balances and requests for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffTypes'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getTimeOffTypes($company_domain, $accept_header_parameter = null, $mode = null, string $contentType = self::contentTypes['getTimeOffTypes'][0])
    {
        $this->getTimeOffTypesWithHttpInfo($company_domain, $accept_header_parameter, $mode, $contentType);
    }

    /**
     * Operation getTimeOffTypesWithHttpInfo
     *
     * Get Time Off Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $mode set to \\&#39;request\\&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\\&#39;t have permission to view balances and requests for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffTypes'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTimeOffTypesWithHttpInfo($company_domain, $accept_header_parameter = null, $mode = null, string $contentType = self::contentTypes['getTimeOffTypes'][0])
    {
        $request = $this->getTimeOffTypesRequest($company_domain, $accept_header_parameter, $mode, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getTimeOffTypesAsync
     *
     * Get Time Off Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $mode set to \\&#39;request\\&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\\&#39;t have permission to view balances and requests for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeOffTypesAsync($company_domain, $accept_header_parameter = null, $mode = null, string $contentType = self::contentTypes['getTimeOffTypes'][0])
    {
        return $this->getTimeOffTypesAsyncWithHttpInfo($company_domain, $accept_header_parameter, $mode, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTimeOffTypesAsyncWithHttpInfo
     *
     * Get Time Off Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $mode set to \\&#39;request\\&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\\&#39;t have permission to view balances and requests for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTimeOffTypesAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, $mode = null, string $contentType = self::contentTypes['getTimeOffTypes'][0])
    {
        $returnType = '';
        $request = $this->getTimeOffTypesRequest($company_domain, $accept_header_parameter, $mode, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTimeOffTypes'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $mode set to \\&#39;request\\&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\\&#39;t have permission to view balances and requests for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTimeOffTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTimeOffTypesRequest($company_domain, $accept_header_parameter = null, $mode = null, string $contentType = self::contentTypes['getTimeOffTypes'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getTimeOffTypes'
            );
        }




        $resourcePath = '/{companyDomain}/v1/meta/time_off/types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mode,
            'mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebhook
     *
     * Get Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $id The webhook ID to display details about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhook'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\WebHookResponse|\MySdk\Model\WebhookError|\MySdk\Model\WebhookError|\MySdk\Model\WebhookError
     */
    public function getWebhook($company_domain, $id, string $contentType = self::contentTypes['getWebhook'][0])
    {
        list($response) = $this->getWebhookWithHttpInfo($company_domain, $id, $contentType);
        return $response;
    }

    /**
     * Operation getWebhookWithHttpInfo
     *
     * Get Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $id The webhook ID to display details about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhook'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\WebHookResponse|\MySdk\Model\WebhookError|\MySdk\Model\WebhookError|\MySdk\Model\WebhookError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebhookWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['getWebhook'][0])
    {
        $request = $this->getWebhookRequest($company_domain, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebHookResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebhookError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebhookError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebhookError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\WebHookResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebHookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getWebhookAsync
     *
     * Get Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $id The webhook ID to display details about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookAsync($company_domain, $id, string $contentType = self::contentTypes['getWebhook'][0])
    {
        return $this->getWebhookAsyncWithHttpInfo($company_domain, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebhookAsyncWithHttpInfo
     *
     * Get Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $id The webhook ID to display details about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookAsyncWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['getWebhook'][0])
    {
        $returnType = '\MySdk\Model\WebHookResponse';
        $request = $this->getWebhookRequest($company_domain, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebhook'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $id The webhook ID to display details about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWebhookRequest($company_domain, $id, string $contentType = self::contentTypes['getWebhook'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getWebhook'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getWebhook'
            );
        }


        $resourcePath = '/{companyDomain}/v1/webhooks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebhookList
     *
     * Gets as list of webhooks for the user API key.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookList'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetWebhookList200Response|\MySdk\Model\WebhookError
     */
    public function getWebhookList($company_domain, string $contentType = self::contentTypes['getWebhookList'][0])
    {
        list($response) = $this->getWebhookListWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation getWebhookListWithHttpInfo
     *
     * Gets as list of webhooks for the user API key.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookList'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetWebhookList200Response|\MySdk\Model\WebhookError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebhookListWithHttpInfo($company_domain, string $contentType = self::contentTypes['getWebhookList'][0])
    {
        $request = $this->getWebhookListRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetWebhookList200Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebhookError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetWebhookList200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetWebhookList200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getWebhookListAsync
     *
     * Gets as list of webhooks for the user API key.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookListAsync($company_domain, string $contentType = self::contentTypes['getWebhookList'][0])
    {
        return $this->getWebhookListAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebhookListAsyncWithHttpInfo
     *
     * Gets as list of webhooks for the user API key.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookListAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getWebhookList'][0])
    {
        $returnType = '\MySdk\Model\GetWebhookList200Response';
        $request = $this->getWebhookListRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebhookList'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWebhookListRequest($company_domain, string $contentType = self::contentTypes['getWebhookList'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getWebhookList'
            );
        }


        $resourcePath = '/{companyDomain}/v1/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWebhookLogs
     *
     * Get Webhook Logs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id The webhook ID to get logs about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookLogs'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\WebHookLogResponse|\MySdk\Model\WebhookError|\MySdk\Model\WebhookError|\MySdk\Model\WebhookError
     */
    public function getWebhookLogs($company_domain, $id, string $contentType = self::contentTypes['getWebhookLogs'][0])
    {
        list($response) = $this->getWebhookLogsWithHttpInfo($company_domain, $id, $contentType);
        return $response;
    }

    /**
     * Operation getWebhookLogsWithHttpInfo
     *
     * Get Webhook Logs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id The webhook ID to get logs about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookLogs'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\WebHookLogResponse|\MySdk\Model\WebhookError|\MySdk\Model\WebhookError|\MySdk\Model\WebhookError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWebhookLogsWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['getWebhookLogs'][0])
    {
        $request = $this->getWebhookLogsRequest($company_domain, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebHookLogResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebhookError',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebhookError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebhookError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\WebHookLogResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebHookLogResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getWebhookLogsAsync
     *
     * Get Webhook Logs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id The webhook ID to get logs about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookLogsAsync($company_domain, $id, string $contentType = self::contentTypes['getWebhookLogs'][0])
    {
        return $this->getWebhookLogsAsyncWithHttpInfo($company_domain, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWebhookLogsAsyncWithHttpInfo
     *
     * Get Webhook Logs
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id The webhook ID to get logs about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWebhookLogsAsyncWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['getWebhookLogs'][0])
    {
        $returnType = '\MySdk\Model\WebHookLogResponse';
        $request = $this->getWebhookLogsRequest($company_domain, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWebhookLogs'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id The webhook ID to get logs about. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWebhookLogs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWebhookLogsRequest($company_domain, $id, string $contentType = self::contentTypes['getWebhookLogs'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getWebhookLogs'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getWebhookLogs'
            );
        }


        $resourcePath = '/{companyDomain}/v1/webhooks/{id}/log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCompanyFiles
     *
     * List company files and categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCompanyFiles'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function listCompanyFiles($company_domain, string $contentType = self::contentTypes['listCompanyFiles'][0])
    {
        $this->listCompanyFilesWithHttpInfo($company_domain, $contentType);
    }

    /**
     * Operation listCompanyFilesWithHttpInfo
     *
     * List company files and categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCompanyFiles'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCompanyFilesWithHttpInfo($company_domain, string $contentType = self::contentTypes['listCompanyFiles'][0])
    {
        $request = $this->listCompanyFilesRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation listCompanyFilesAsync
     *
     * List company files and categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCompanyFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompanyFilesAsync($company_domain, string $contentType = self::contentTypes['listCompanyFiles'][0])
    {
        return $this->listCompanyFilesAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCompanyFilesAsyncWithHttpInfo
     *
     * List company files and categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCompanyFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCompanyFilesAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['listCompanyFiles'][0])
    {
        $returnType = '';
        $request = $this->listCompanyFilesRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCompanyFiles'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listCompanyFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listCompanyFilesRequest($company_domain, string $contentType = self::contentTypes['listCompanyFiles'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling listCompanyFiles'
            );
        }


        $resourcePath = '/{companyDomain}/v1/files/view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listEmployeeFiles
     *
     * List employee files and categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeFiles'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function listEmployeeFiles($company_domain, $id, string $contentType = self::contentTypes['listEmployeeFiles'][0])
    {
        $this->listEmployeeFilesWithHttpInfo($company_domain, $id, $contentType);
    }

    /**
     * Operation listEmployeeFilesWithHttpInfo
     *
     * List employee files and categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeFiles'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function listEmployeeFilesWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['listEmployeeFiles'][0])
    {
        $request = $this->listEmployeeFilesRequest($company_domain, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation listEmployeeFilesAsync
     *
     * List employee files and categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEmployeeFilesAsync($company_domain, $id, string $contentType = self::contentTypes['listEmployeeFiles'][0])
    {
        return $this->listEmployeeFilesAsyncWithHttpInfo($company_domain, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listEmployeeFilesAsyncWithHttpInfo
     *
     * List employee files and categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEmployeeFilesAsyncWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['listEmployeeFiles'][0])
    {
        $returnType = '';
        $request = $this->listEmployeeFilesRequest($company_domain, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listEmployeeFiles'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listEmployeeFilesRequest($company_domain, $id, string $contentType = self::contentTypes['listEmployeeFiles'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling listEmployeeFiles'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling listEmployeeFiles'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{id}/files/view';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listEmployeeTrainings
     *
     * List Employee Trainings
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to get a list of trainings for. (required)
     * @param  int|null $training_type_id The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeTrainings'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\ListEmployeeTrainings200ResponseInner[]
     */
    public function listEmployeeTrainings($company_domain, $employee_id, $training_type_id = null, string $contentType = self::contentTypes['listEmployeeTrainings'][0])
    {
        list($response) = $this->listEmployeeTrainingsWithHttpInfo($company_domain, $employee_id, $training_type_id, $contentType);
        return $response;
    }

    /**
     * Operation listEmployeeTrainingsWithHttpInfo
     *
     * List Employee Trainings
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to get a list of trainings for. (required)
     * @param  int|null $training_type_id The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeTrainings'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\ListEmployeeTrainings200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listEmployeeTrainingsWithHttpInfo($company_domain, $employee_id, $training_type_id = null, string $contentType = self::contentTypes['listEmployeeTrainings'][0])
    {
        $request = $this->listEmployeeTrainingsRequest($company_domain, $employee_id, $training_type_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\ListEmployeeTrainings200ResponseInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\ListEmployeeTrainings200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\ListEmployeeTrainings200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listEmployeeTrainingsAsync
     *
     * List Employee Trainings
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to get a list of trainings for. (required)
     * @param  int|null $training_type_id The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeTrainings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEmployeeTrainingsAsync($company_domain, $employee_id, $training_type_id = null, string $contentType = self::contentTypes['listEmployeeTrainings'][0])
    {
        return $this->listEmployeeTrainingsAsyncWithHttpInfo($company_domain, $employee_id, $training_type_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listEmployeeTrainingsAsyncWithHttpInfo
     *
     * List Employee Trainings
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to get a list of trainings for. (required)
     * @param  int|null $training_type_id The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeTrainings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEmployeeTrainingsAsyncWithHttpInfo($company_domain, $employee_id, $training_type_id = null, string $contentType = self::contentTypes['listEmployeeTrainings'][0])
    {
        $returnType = '\MySdk\Model\ListEmployeeTrainings200ResponseInner[]';
        $request = $this->listEmployeeTrainingsRequest($company_domain, $employee_id, $training_type_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listEmployeeTrainings'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee to get a list of trainings for. (required)
     * @param  int|null $training_type_id The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEmployeeTrainings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listEmployeeTrainingsRequest($company_domain, $employee_id, $training_type_id = null, string $contentType = self::contentTypes['listEmployeeTrainings'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling listEmployeeTrainings'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling listEmployeeTrainings'
            );
        }



        $resourcePath = '/{companyDomain}/v1/training/record/employee/{employeeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $training_type_id,
            'trainingTypeId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listReports
     *
     * List Reports
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number to retrieve (optional)
     * @param  int|null $page_size The number of records to retrieve per page. Default is 500 and the Max is 1000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listReports'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\ReportsResponse
     */
    public function listReports($company_domain, $page = null, $page_size = null, string $contentType = self::contentTypes['listReports'][0])
    {
        list($response) = $this->listReportsWithHttpInfo($company_domain, $page, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation listReportsWithHttpInfo
     *
     * List Reports
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number to retrieve (optional)
     * @param  int|null $page_size The number of records to retrieve per page. Default is 500 and the Max is 1000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listReports'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\ReportsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listReportsWithHttpInfo($company_domain, $page = null, $page_size = null, string $contentType = self::contentTypes['listReports'][0])
    {
        $request = $this->listReportsRequest($company_domain, $page, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\ReportsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\ReportsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\ReportsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listReportsAsync
     *
     * List Reports
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number to retrieve (optional)
     * @param  int|null $page_size The number of records to retrieve per page. Default is 500 and the Max is 1000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listReports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReportsAsync($company_domain, $page = null, $page_size = null, string $contentType = self::contentTypes['listReports'][0])
    {
        return $this->listReportsAsyncWithHttpInfo($company_domain, $page, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listReportsAsyncWithHttpInfo
     *
     * List Reports
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number to retrieve (optional)
     * @param  int|null $page_size The number of records to retrieve per page. Default is 500 and the Max is 1000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listReports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listReportsAsyncWithHttpInfo($company_domain, $page = null, $page_size = null, string $contentType = self::contentTypes['listReports'][0])
    {
        $returnType = '\MySdk\Model\ReportsResponse';
        $request = $this->listReportsRequest($company_domain, $page, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listReports'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number to retrieve (optional)
     * @param  int|null $page_size The number of records to retrieve per page. Default is 500 and the Max is 1000 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listReports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listReportsRequest($company_domain, $page = null, $page_size = null, string $contentType = self::contentTypes['listReports'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling listReports'
            );
        }




        $resourcePath = '/{companyDomain}/v1/custom-reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTrainingCategories
     *
     * List Training Categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingCategories'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\ListTrainingCategories200ResponseInner[]
     */
    public function listTrainingCategories($company_domain, string $contentType = self::contentTypes['listTrainingCategories'][0])
    {
        list($response) = $this->listTrainingCategoriesWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation listTrainingCategoriesWithHttpInfo
     *
     * List Training Categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingCategories'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\ListTrainingCategories200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listTrainingCategoriesWithHttpInfo($company_domain, string $contentType = self::contentTypes['listTrainingCategories'][0])
    {
        $request = $this->listTrainingCategoriesRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\ListTrainingCategories200ResponseInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\ListTrainingCategories200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\ListTrainingCategories200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listTrainingCategoriesAsync
     *
     * List Training Categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrainingCategoriesAsync($company_domain, string $contentType = self::contentTypes['listTrainingCategories'][0])
    {
        return $this->listTrainingCategoriesAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTrainingCategoriesAsyncWithHttpInfo
     *
     * List Training Categories
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrainingCategoriesAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['listTrainingCategories'][0])
    {
        $returnType = '\MySdk\Model\ListTrainingCategories200ResponseInner[]';
        $request = $this->listTrainingCategoriesRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTrainingCategories'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTrainingCategoriesRequest($company_domain, string $contentType = self::contentTypes['listTrainingCategories'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling listTrainingCategories'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTrainingTypes
     *
     * List Training Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingTypes'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\ListTrainingTypes200ResponseInner[]
     */
    public function listTrainingTypes($company_domain, string $contentType = self::contentTypes['listTrainingTypes'][0])
    {
        list($response) = $this->listTrainingTypesWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation listTrainingTypesWithHttpInfo
     *
     * List Training Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingTypes'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\ListTrainingTypes200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listTrainingTypesWithHttpInfo($company_domain, string $contentType = self::contentTypes['listTrainingTypes'][0])
    {
        $request = $this->listTrainingTypesRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\ListTrainingTypes200ResponseInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\ListTrainingTypes200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\ListTrainingTypes200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listTrainingTypesAsync
     *
     * List Training Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrainingTypesAsync($company_domain, string $contentType = self::contentTypes['listTrainingTypes'][0])
    {
        return $this->listTrainingTypesAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTrainingTypesAsyncWithHttpInfo
     *
     * List Training Types
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrainingTypesAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['listTrainingTypes'][0])
    {
        $returnType = '\MySdk\Model\ListTrainingTypes200ResponseInner[]';
        $request = $this->listTrainingTypesRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTrainingTypes'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listTrainingTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listTrainingTypesRequest($company_domain, string $contentType = self::contentTypes['listTrainingTypes'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling listTrainingTypes'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation login
     *
     * User Login
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $application_key application_key (optional)
     * @param  string|null $user user (optional)
     * @param  string|null $password password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['login'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function login($company_domain, $accept_header_parameter = null, $application_key = null, $user = null, $password = null, string $contentType = self::contentTypes['login'][0])
    {
        $this->loginWithHttpInfo($company_domain, $accept_header_parameter, $application_key, $user, $password, $contentType);
    }

    /**
     * Operation loginWithHttpInfo
     *
     * User Login
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $application_key (optional)
     * @param  string|null $user (optional)
     * @param  string|null $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['login'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function loginWithHttpInfo($company_domain, $accept_header_parameter = null, $application_key = null, $user = null, $password = null, string $contentType = self::contentTypes['login'][0])
    {
        $request = $this->loginRequest($company_domain, $accept_header_parameter, $application_key, $user, $password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation loginAsync
     *
     * User Login
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $application_key (optional)
     * @param  string|null $user (optional)
     * @param  string|null $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['login'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginAsync($company_domain, $accept_header_parameter = null, $application_key = null, $user = null, $password = null, string $contentType = self::contentTypes['login'][0])
    {
        return $this->loginAsyncWithHttpInfo($company_domain, $accept_header_parameter, $application_key, $user, $password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation loginAsyncWithHttpInfo
     *
     * User Login
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $application_key (optional)
     * @param  string|null $user (optional)
     * @param  string|null $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['login'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loginAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, $application_key = null, $user = null, $password = null, string $contentType = self::contentTypes['login'][0])
    {
        $returnType = '';
        $request = $this->loginRequest($company_domain, $accept_header_parameter, $application_key, $user, $password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'login'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string|null $application_key (optional)
     * @param  string|null $user (optional)
     * @param  string|null $password (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['login'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loginRequest($company_domain, $accept_header_parameter = null, $application_key = null, $user = null, $password = null, string $contentType = self::contentTypes['login'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling login'
            );
        }






        $resourcePath = '/{companyDomain}/v1/login';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }

        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'application_key' => $application_key,
            'user' => $user,
            'password' => $password,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation metadataAddOrUpdateValuesForListFields
     *
     * Add or Update Values for List Fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $list_field_id list_field_id (required)
     * @param  \MySdk\Model\ListFieldValues $list_field_values list_field_values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataAddOrUpdateValuesForListFields'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function metadataAddOrUpdateValuesForListFields($company_domain, $list_field_id, $list_field_values, string $contentType = self::contentTypes['metadataAddOrUpdateValuesForListFields'][0])
    {
        $this->metadataAddOrUpdateValuesForListFieldsWithHttpInfo($company_domain, $list_field_id, $list_field_values, $contentType);
    }

    /**
     * Operation metadataAddOrUpdateValuesForListFieldsWithHttpInfo
     *
     * Add or Update Values for List Fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $list_field_id (required)
     * @param  \MySdk\Model\ListFieldValues $list_field_values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataAddOrUpdateValuesForListFields'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function metadataAddOrUpdateValuesForListFieldsWithHttpInfo($company_domain, $list_field_id, $list_field_values, string $contentType = self::contentTypes['metadataAddOrUpdateValuesForListFields'][0])
    {
        $request = $this->metadataAddOrUpdateValuesForListFieldsRequest($company_domain, $list_field_id, $list_field_values, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation metadataAddOrUpdateValuesForListFieldsAsync
     *
     * Add or Update Values for List Fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $list_field_id (required)
     * @param  \MySdk\Model\ListFieldValues $list_field_values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataAddOrUpdateValuesForListFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataAddOrUpdateValuesForListFieldsAsync($company_domain, $list_field_id, $list_field_values, string $contentType = self::contentTypes['metadataAddOrUpdateValuesForListFields'][0])
    {
        return $this->metadataAddOrUpdateValuesForListFieldsAsyncWithHttpInfo($company_domain, $list_field_id, $list_field_values, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation metadataAddOrUpdateValuesForListFieldsAsyncWithHttpInfo
     *
     * Add or Update Values for List Fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $list_field_id (required)
     * @param  \MySdk\Model\ListFieldValues $list_field_values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataAddOrUpdateValuesForListFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataAddOrUpdateValuesForListFieldsAsyncWithHttpInfo($company_domain, $list_field_id, $list_field_values, string $contentType = self::contentTypes['metadataAddOrUpdateValuesForListFields'][0])
    {
        $returnType = '';
        $request = $this->metadataAddOrUpdateValuesForListFieldsRequest($company_domain, $list_field_id, $list_field_values, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'metadataAddOrUpdateValuesForListFields'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $list_field_id (required)
     * @param  \MySdk\Model\ListFieldValues $list_field_values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataAddOrUpdateValuesForListFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function metadataAddOrUpdateValuesForListFieldsRequest($company_domain, $list_field_id, $list_field_values, string $contentType = self::contentTypes['metadataAddOrUpdateValuesForListFields'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling metadataAddOrUpdateValuesForListFields'
            );
        }

        // verify the required parameter 'list_field_id' is set
        if ($list_field_id === null || (is_array($list_field_id) && count($list_field_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_field_id when calling metadataAddOrUpdateValuesForListFields'
            );
        }

        // verify the required parameter 'list_field_values' is set
        if ($list_field_values === null || (is_array($list_field_values) && count($list_field_values) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $list_field_values when calling metadataAddOrUpdateValuesForListFields'
            );
        }


        $resourcePath = '/{companyDomain}/v1/meta/lists/{listFieldId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($list_field_id !== null) {
            $resourcePath = str_replace(
                '{' . 'listFieldId' . '}',
                ObjectSerializer::toPathValue($list_field_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($list_field_values)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($list_field_values));
            } else {
                $httpBody = $list_field_values;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation metadataGetAListOfFields
     *
     * Get a list of fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetAListOfFields'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function metadataGetAListOfFields($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetAListOfFields'][0])
    {
        $this->metadataGetAListOfFieldsWithHttpInfo($company_domain, $accept_header_parameter, $contentType);
    }

    /**
     * Operation metadataGetAListOfFieldsWithHttpInfo
     *
     * Get a list of fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetAListOfFields'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function metadataGetAListOfFieldsWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetAListOfFields'][0])
    {
        $request = $this->metadataGetAListOfFieldsRequest($company_domain, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation metadataGetAListOfFieldsAsync
     *
     * Get a list of fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetAListOfFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataGetAListOfFieldsAsync($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetAListOfFields'][0])
    {
        return $this->metadataGetAListOfFieldsAsyncWithHttpInfo($company_domain, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation metadataGetAListOfFieldsAsyncWithHttpInfo
     *
     * Get a list of fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetAListOfFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataGetAListOfFieldsAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetAListOfFields'][0])
    {
        $returnType = '';
        $request = $this->metadataGetAListOfFieldsRequest($company_domain, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'metadataGetAListOfFields'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetAListOfFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function metadataGetAListOfFieldsRequest($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetAListOfFields'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling metadataGetAListOfFields'
            );
        }



        $resourcePath = '/{companyDomain}/v1/meta/fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation metadataGetAListOfTabularFields
     *
     * Get a list of tabular fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetAListOfTabularFields'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function metadataGetAListOfTabularFields($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetAListOfTabularFields'][0])
    {
        $this->metadataGetAListOfTabularFieldsWithHttpInfo($company_domain, $accept_header_parameter, $contentType);
    }

    /**
     * Operation metadataGetAListOfTabularFieldsWithHttpInfo
     *
     * Get a list of tabular fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetAListOfTabularFields'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function metadataGetAListOfTabularFieldsWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetAListOfTabularFields'][0])
    {
        $request = $this->metadataGetAListOfTabularFieldsRequest($company_domain, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation metadataGetAListOfTabularFieldsAsync
     *
     * Get a list of tabular fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetAListOfTabularFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataGetAListOfTabularFieldsAsync($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetAListOfTabularFields'][0])
    {
        return $this->metadataGetAListOfTabularFieldsAsyncWithHttpInfo($company_domain, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation metadataGetAListOfTabularFieldsAsyncWithHttpInfo
     *
     * Get a list of tabular fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetAListOfTabularFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataGetAListOfTabularFieldsAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetAListOfTabularFields'][0])
    {
        $returnType = '';
        $request = $this->metadataGetAListOfTabularFieldsRequest($company_domain, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'metadataGetAListOfTabularFields'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetAListOfTabularFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function metadataGetAListOfTabularFieldsRequest($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetAListOfTabularFields'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling metadataGetAListOfTabularFields'
            );
        }



        $resourcePath = '/{companyDomain}/v1/meta/tables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation metadataGetDetailsForListFields
     *
     * Get details for list fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetDetailsForListFields'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function metadataGetDetailsForListFields($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetDetailsForListFields'][0])
    {
        $this->metadataGetDetailsForListFieldsWithHttpInfo($company_domain, $accept_header_parameter, $contentType);
    }

    /**
     * Operation metadataGetDetailsForListFieldsWithHttpInfo
     *
     * Get details for list fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetDetailsForListFields'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function metadataGetDetailsForListFieldsWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetDetailsForListFields'][0])
    {
        $request = $this->metadataGetDetailsForListFieldsRequest($company_domain, $accept_header_parameter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation metadataGetDetailsForListFieldsAsync
     *
     * Get details for list fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetDetailsForListFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataGetDetailsForListFieldsAsync($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetDetailsForListFields'][0])
    {
        return $this->metadataGetDetailsForListFieldsAsyncWithHttpInfo($company_domain, $accept_header_parameter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation metadataGetDetailsForListFieldsAsyncWithHttpInfo
     *
     * Get details for list fields
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetDetailsForListFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function metadataGetDetailsForListFieldsAsyncWithHttpInfo($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetDetailsForListFields'][0])
    {
        $returnType = '';
        $request = $this->metadataGetDetailsForListFieldsRequest($company_domain, $accept_header_parameter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'metadataGetDetailsForListFields'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['metadataGetDetailsForListFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function metadataGetDetailsForListFieldsRequest($company_domain, $accept_header_parameter = null, string $contentType = self::contentTypes['metadataGetDetailsForListFields'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling metadataGetDetailsForListFields'
            );
        }



        $resourcePath = '/{companyDomain}/v1/meta/lists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicantStatus
     *
     * Change Applicant&#39;s Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicantStatusRequest $post_applicant_status_request Sample Post Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicantStatus'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postApplicantStatus($company_domain, $application_id, $post_applicant_status_request, string $contentType = self::contentTypes['postApplicantStatus'][0])
    {
        $this->postApplicantStatusWithHttpInfo($company_domain, $application_id, $post_applicant_status_request, $contentType);
    }

    /**
     * Operation postApplicantStatusWithHttpInfo
     *
     * Change Applicant&#39;s Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicantStatusRequest $post_applicant_status_request Sample Post Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicantStatus'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicantStatusWithHttpInfo($company_domain, $application_id, $post_applicant_status_request, string $contentType = self::contentTypes['postApplicantStatus'][0])
    {
        $request = $this->postApplicantStatusRequest($company_domain, $application_id, $post_applicant_status_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation postApplicantStatusAsync
     *
     * Change Applicant&#39;s Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicantStatusRequest $post_applicant_status_request Sample Post Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicantStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicantStatusAsync($company_domain, $application_id, $post_applicant_status_request, string $contentType = self::contentTypes['postApplicantStatus'][0])
    {
        return $this->postApplicantStatusAsyncWithHttpInfo($company_domain, $application_id, $post_applicant_status_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicantStatusAsyncWithHttpInfo
     *
     * Change Applicant&#39;s Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicantStatusRequest $post_applicant_status_request Sample Post Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicantStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicantStatusAsyncWithHttpInfo($company_domain, $application_id, $post_applicant_status_request, string $contentType = self::contentTypes['postApplicantStatus'][0])
    {
        $returnType = '';
        $request = $this->postApplicantStatusRequest($company_domain, $application_id, $post_applicant_status_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicantStatus'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicantStatusRequest $post_applicant_status_request Sample Post Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicantStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicantStatusRequest($company_domain, $application_id, $post_applicant_status_request, string $contentType = self::contentTypes['postApplicantStatus'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling postApplicantStatus'
            );
        }

        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling postApplicantStatus'
            );
        }

        // verify the required parameter 'post_applicant_status_request' is set
        if ($post_applicant_status_request === null || (is_array($post_applicant_status_request) && count($post_applicant_status_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_applicant_status_request when calling postApplicantStatus'
            );
        }


        $resourcePath = '/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_applicant_status_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_applicant_status_request));
            } else {
                $httpBody = $post_applicant_status_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicationComment
     *
     * Add Application Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicationCommentRequest $post_application_comment_request Comment object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationComment'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postApplicationComment($company_domain, $application_id, $post_application_comment_request, string $contentType = self::contentTypes['postApplicationComment'][0])
    {
        $this->postApplicationCommentWithHttpInfo($company_domain, $application_id, $post_application_comment_request, $contentType);
    }

    /**
     * Operation postApplicationCommentWithHttpInfo
     *
     * Add Application Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicationCommentRequest $post_application_comment_request Comment object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationComment'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicationCommentWithHttpInfo($company_domain, $application_id, $post_application_comment_request, string $contentType = self::contentTypes['postApplicationComment'][0])
    {
        $request = $this->postApplicationCommentRequest($company_domain, $application_id, $post_application_comment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation postApplicationCommentAsync
     *
     * Add Application Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicationCommentRequest $post_application_comment_request Comment object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationCommentAsync($company_domain, $application_id, $post_application_comment_request, string $contentType = self::contentTypes['postApplicationComment'][0])
    {
        return $this->postApplicationCommentAsyncWithHttpInfo($company_domain, $application_id, $post_application_comment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicationCommentAsyncWithHttpInfo
     *
     * Add Application Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicationCommentRequest $post_application_comment_request Comment object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationCommentAsyncWithHttpInfo($company_domain, $application_id, $post_application_comment_request, string $contentType = self::contentTypes['postApplicationComment'][0])
    {
        $returnType = '';
        $request = $this->postApplicationCommentRequest($company_domain, $application_id, $post_application_comment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicationComment'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicationCommentRequest $post_application_comment_request Comment object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicationCommentRequest($company_domain, $application_id, $post_application_comment_request, string $contentType = self::contentTypes['postApplicationComment'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling postApplicationComment'
            );
        }

        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling postApplicationComment'
            );
        }

        // verify the required parameter 'post_application_comment_request' is set
        if ($post_application_comment_request === null || (is_array($post_application_comment_request) && count($post_application_comment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_application_comment_request when calling postApplicationComment'
            );
        }


        $resourcePath = '/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_application_comment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_application_comment_request));
            } else {
                $httpBody = $post_application_comment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCloseGoal
     *
     * Close Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string|null $body Comment field is optional. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCloseGoal'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TransformedApiGoal
     */
    public function postCloseGoal($company_domain, $employee_id, $goal_id, $body = null, string $contentType = self::contentTypes['postCloseGoal'][0])
    {
        list($response) = $this->postCloseGoalWithHttpInfo($company_domain, $employee_id, $goal_id, $body, $contentType);
        return $response;
    }

    /**
     * Operation postCloseGoalWithHttpInfo
     *
     * Close Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string|null $body Comment field is optional. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCloseGoal'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TransformedApiGoal, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCloseGoalWithHttpInfo($company_domain, $employee_id, $goal_id, $body = null, string $contentType = self::contentTypes['postCloseGoal'][0])
    {
        $request = $this->postCloseGoalRequest($company_domain, $employee_id, $goal_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TransformedApiGoal',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TransformedApiGoal',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TransformedApiGoal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postCloseGoalAsync
     *
     * Close Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string|null $body Comment field is optional. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCloseGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCloseGoalAsync($company_domain, $employee_id, $goal_id, $body = null, string $contentType = self::contentTypes['postCloseGoal'][0])
    {
        return $this->postCloseGoalAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCloseGoalAsyncWithHttpInfo
     *
     * Close Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string|null $body Comment field is optional. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCloseGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCloseGoalAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $body = null, string $contentType = self::contentTypes['postCloseGoal'][0])
    {
        $returnType = '\MySdk\Model\TransformedApiGoal';
        $request = $this->postCloseGoalRequest($company_domain, $employee_id, $goal_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCloseGoal'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string|null $body Comment field is optional. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCloseGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCloseGoalRequest($company_domain, $employee_id, $goal_id, $body = null, string $contentType = self::contentTypes['postCloseGoal'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling postCloseGoal'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling postCloseGoal'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling postCloseGoal'
            );
        }



        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/close';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postGoal
     *
     * Create Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  \MySdk\Model\PostGoalRequest $post_goal_request post_goal_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoal'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TransformedApiGoal
     */
    public function postGoal($company_domain, $employee_id, $post_goal_request, string $contentType = self::contentTypes['postGoal'][0])
    {
        list($response) = $this->postGoalWithHttpInfo($company_domain, $employee_id, $post_goal_request, $contentType);
        return $response;
    }

    /**
     * Operation postGoalWithHttpInfo
     *
     * Create Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  \MySdk\Model\PostGoalRequest $post_goal_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoal'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TransformedApiGoal, HTTP status code, HTTP response headers (array of strings)
     */
    public function postGoalWithHttpInfo($company_domain, $employee_id, $post_goal_request, string $contentType = self::contentTypes['postGoal'][0])
    {
        $request = $this->postGoalRequest($company_domain, $employee_id, $post_goal_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TransformedApiGoal',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TransformedApiGoal',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TransformedApiGoal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postGoalAsync
     *
     * Create Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  \MySdk\Model\PostGoalRequest $post_goal_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGoalAsync($company_domain, $employee_id, $post_goal_request, string $contentType = self::contentTypes['postGoal'][0])
    {
        return $this->postGoalAsyncWithHttpInfo($company_domain, $employee_id, $post_goal_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postGoalAsyncWithHttpInfo
     *
     * Create Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  \MySdk\Model\PostGoalRequest $post_goal_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGoalAsyncWithHttpInfo($company_domain, $employee_id, $post_goal_request, string $contentType = self::contentTypes['postGoal'][0])
    {
        $returnType = '\MySdk\Model\TransformedApiGoal';
        $request = $this->postGoalRequest($company_domain, $employee_id, $post_goal_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postGoal'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  \MySdk\Model\PostGoalRequest $post_goal_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postGoalRequest($company_domain, $employee_id, $post_goal_request, string $contentType = self::contentTypes['postGoal'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling postGoal'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling postGoal'
            );
        }

        // verify the required parameter 'post_goal_request' is set
        if ($post_goal_request === null || (is_array($post_goal_request) && count($post_goal_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_goal_request when calling postGoal'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_goal_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_goal_request));
            } else {
                $httpBody = $post_goal_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postGoalComment
     *
     * Create Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoalComment'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postGoalComment($company_domain, $employee_id, $goal_id, $body, string $contentType = self::contentTypes['postGoalComment'][0])
    {
        $this->postGoalCommentWithHttpInfo($company_domain, $employee_id, $goal_id, $body, $contentType);
    }

    /**
     * Operation postGoalCommentWithHttpInfo
     *
     * Create Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoalComment'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postGoalCommentWithHttpInfo($company_domain, $employee_id, $goal_id, $body, string $contentType = self::contentTypes['postGoalComment'][0])
    {
        $request = $this->postGoalCommentRequest($company_domain, $employee_id, $goal_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation postGoalCommentAsync
     *
     * Create Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoalComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGoalCommentAsync($company_domain, $employee_id, $goal_id, $body, string $contentType = self::contentTypes['postGoalComment'][0])
    {
        return $this->postGoalCommentAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postGoalCommentAsyncWithHttpInfo
     *
     * Create Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoalComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postGoalCommentAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $body, string $contentType = self::contentTypes['postGoalComment'][0])
    {
        $returnType = '';
        $request = $this->postGoalCommentRequest($company_domain, $employee_id, $goal_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postGoalComment'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postGoalComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postGoalCommentRequest($company_domain, $employee_id, $goal_id, $body, string $contentType = self::contentTypes['postGoalComment'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling postGoalComment'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling postGoalComment'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling postGoalComment'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postGoalComment'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postReopenGoal
     *
     * Reopen a Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postReopenGoal'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TransformedApiGoal
     */
    public function postReopenGoal($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['postReopenGoal'][0])
    {
        list($response) = $this->postReopenGoalWithHttpInfo($company_domain, $employee_id, $goal_id, $contentType);
        return $response;
    }

    /**
     * Operation postReopenGoalWithHttpInfo
     *
     * Reopen a Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postReopenGoal'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TransformedApiGoal, HTTP status code, HTTP response headers (array of strings)
     */
    public function postReopenGoalWithHttpInfo($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['postReopenGoal'][0])
    {
        $request = $this->postReopenGoalRequest($company_domain, $employee_id, $goal_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TransformedApiGoal',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TransformedApiGoal',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TransformedApiGoal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postReopenGoalAsync
     *
     * Reopen a Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postReopenGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postReopenGoalAsync($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['postReopenGoal'][0])
    {
        return $this->postReopenGoalAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postReopenGoalAsyncWithHttpInfo
     *
     * Reopen a Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postReopenGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postReopenGoalAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['postReopenGoal'][0])
    {
        $returnType = '\MySdk\Model\TransformedApiGoal';
        $request = $this->postReopenGoalRequest($company_domain, $employee_id, $goal_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postReopenGoal'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postReopenGoal'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postReopenGoalRequest($company_domain, $employee_id, $goal_id, string $contentType = self::contentTypes['postReopenGoal'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling postReopenGoal'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling postReopenGoal'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling postReopenGoal'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/reopen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postWebhook
     *
     * Add Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\NewWebHook $new_web_hook new_web_hook (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postWebhook'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\PostWebhook201Response|\MySdk\Model\Webhook400Error|\MySdk\Model\PostWebhook403Response|\MySdk\Model\WebhookError
     */
    public function postWebhook($company_domain, $new_web_hook, string $contentType = self::contentTypes['postWebhook'][0])
    {
        list($response) = $this->postWebhookWithHttpInfo($company_domain, $new_web_hook, $contentType);
        return $response;
    }

    /**
     * Operation postWebhookWithHttpInfo
     *
     * Add Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\NewWebHook $new_web_hook (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postWebhook'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\PostWebhook201Response|\MySdk\Model\Webhook400Error|\MySdk\Model\PostWebhook403Response|\MySdk\Model\WebhookError, HTTP status code, HTTP response headers (array of strings)
     */
    public function postWebhookWithHttpInfo($company_domain, $new_web_hook, string $contentType = self::contentTypes['postWebhook'][0])
    {
        $request = $this->postWebhookRequest($company_domain, $new_web_hook, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\PostWebhook201Response',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\Webhook400Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\PostWebhook403Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebhookError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\PostWebhook201Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\PostWebhook201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\Webhook400Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\PostWebhook403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation postWebhookAsync
     *
     * Add Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\NewWebHook $new_web_hook (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWebhookAsync($company_domain, $new_web_hook, string $contentType = self::contentTypes['postWebhook'][0])
    {
        return $this->postWebhookAsyncWithHttpInfo($company_domain, $new_web_hook, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postWebhookAsyncWithHttpInfo
     *
     * Add Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\NewWebHook $new_web_hook (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postWebhookAsyncWithHttpInfo($company_domain, $new_web_hook, string $contentType = self::contentTypes['postWebhook'][0])
    {
        $returnType = '\MySdk\Model\PostWebhook201Response';
        $request = $this->postWebhookRequest($company_domain, $new_web_hook, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postWebhook'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\NewWebHook $new_web_hook (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postWebhookRequest($company_domain, $new_web_hook, string $contentType = self::contentTypes['postWebhook'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling postWebhook'
            );
        }

        // verify the required parameter 'new_web_hook' is set
        if ($new_web_hook === null || (is_array($new_web_hook) && count($new_web_hook) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_web_hook when calling postWebhook'
            );
        }


        $resourcePath = '/{companyDomain}/v1/webhooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($new_web_hook)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($new_web_hook));
            } else {
                $httpBody = $new_web_hook;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putGoalComment
     *
     * Update Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $comment_id commentId is the comment ID for the specified goal. (required)
     * @param  string $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalComment'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putGoalComment($company_domain, $employee_id, $goal_id, $comment_id, $body, string $contentType = self::contentTypes['putGoalComment'][0])
    {
        $this->putGoalCommentWithHttpInfo($company_domain, $employee_id, $goal_id, $comment_id, $body, $contentType);
    }

    /**
     * Operation putGoalCommentWithHttpInfo
     *
     * Update Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $comment_id commentId is the comment ID for the specified goal. (required)
     * @param  string $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalComment'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putGoalCommentWithHttpInfo($company_domain, $employee_id, $goal_id, $comment_id, $body, string $contentType = self::contentTypes['putGoalComment'][0])
    {
        $request = $this->putGoalCommentRequest($company_domain, $employee_id, $goal_id, $comment_id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation putGoalCommentAsync
     *
     * Update Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $comment_id commentId is the comment ID for the specified goal. (required)
     * @param  string $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putGoalCommentAsync($company_domain, $employee_id, $goal_id, $comment_id, $body, string $contentType = self::contentTypes['putGoalComment'][0])
    {
        return $this->putGoalCommentAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $comment_id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putGoalCommentAsyncWithHttpInfo
     *
     * Update Goal Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $comment_id commentId is the comment ID for the specified goal. (required)
     * @param  string $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putGoalCommentAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $comment_id, $body, string $contentType = self::contentTypes['putGoalComment'][0])
    {
        $returnType = '';
        $request = $this->putGoalCommentRequest($company_domain, $employee_id, $goal_id, $comment_id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putGoalComment'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $comment_id commentId is the comment ID for the specified goal. (required)
     * @param  string $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putGoalCommentRequest($company_domain, $employee_id, $goal_id, $comment_id, $body, string $contentType = self::contentTypes['putGoalComment'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling putGoalComment'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling putGoalComment'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling putGoalComment'
            );
        }

        // verify the required parameter 'comment_id' is set
        if ($comment_id === null || (is_array($comment_id) && count($comment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $comment_id when calling putGoalComment'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putGoalComment'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments/{commentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }
        // path params
        if ($comment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commentId' . '}',
                ObjectSerializer::toPathValue($comment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putGoalMilestoneProgress
     *
     * Update Milestone Progress
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $milestone_id milestoneId is the milestone ID for the specified goal. (required)
     * @param  \MySdk\Model\PutGoalMilestoneProgressRequest $put_goal_milestone_progress_request put_goal_milestone_progress_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalMilestoneProgress'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function putGoalMilestoneProgress($company_domain, $employee_id, $goal_id, $milestone_id, $put_goal_milestone_progress_request, string $contentType = self::contentTypes['putGoalMilestoneProgress'][0])
    {
        list($response) = $this->putGoalMilestoneProgressWithHttpInfo($company_domain, $employee_id, $goal_id, $milestone_id, $put_goal_milestone_progress_request, $contentType);
        return $response;
    }

    /**
     * Operation putGoalMilestoneProgressWithHttpInfo
     *
     * Update Milestone Progress
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $milestone_id milestoneId is the milestone ID for the specified goal. (required)
     * @param  \MySdk\Model\PutGoalMilestoneProgressRequest $put_goal_milestone_progress_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalMilestoneProgress'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function putGoalMilestoneProgressWithHttpInfo($company_domain, $employee_id, $goal_id, $milestone_id, $put_goal_milestone_progress_request, string $contentType = self::contentTypes['putGoalMilestoneProgress'][0])
    {
        $request = $this->putGoalMilestoneProgressRequest($company_domain, $employee_id, $goal_id, $milestone_id, $put_goal_milestone_progress_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putGoalMilestoneProgressAsync
     *
     * Update Milestone Progress
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $milestone_id milestoneId is the milestone ID for the specified goal. (required)
     * @param  \MySdk\Model\PutGoalMilestoneProgressRequest $put_goal_milestone_progress_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalMilestoneProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putGoalMilestoneProgressAsync($company_domain, $employee_id, $goal_id, $milestone_id, $put_goal_milestone_progress_request, string $contentType = self::contentTypes['putGoalMilestoneProgress'][0])
    {
        return $this->putGoalMilestoneProgressAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $milestone_id, $put_goal_milestone_progress_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putGoalMilestoneProgressAsyncWithHttpInfo
     *
     * Update Milestone Progress
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $milestone_id milestoneId is the milestone ID for the specified goal. (required)
     * @param  \MySdk\Model\PutGoalMilestoneProgressRequest $put_goal_milestone_progress_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalMilestoneProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putGoalMilestoneProgressAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $milestone_id, $put_goal_milestone_progress_request, string $contentType = self::contentTypes['putGoalMilestoneProgress'][0])
    {
        $returnType = 'object';
        $request = $this->putGoalMilestoneProgressRequest($company_domain, $employee_id, $goal_id, $milestone_id, $put_goal_milestone_progress_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putGoalMilestoneProgress'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID to whom the goals are assigned. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  string $milestone_id milestoneId is the milestone ID for the specified goal. (required)
     * @param  \MySdk\Model\PutGoalMilestoneProgressRequest $put_goal_milestone_progress_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalMilestoneProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putGoalMilestoneProgressRequest($company_domain, $employee_id, $goal_id, $milestone_id, $put_goal_milestone_progress_request, string $contentType = self::contentTypes['putGoalMilestoneProgress'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling putGoalMilestoneProgress'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling putGoalMilestoneProgress'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling putGoalMilestoneProgress'
            );
        }

        // verify the required parameter 'milestone_id' is set
        if ($milestone_id === null || (is_array($milestone_id) && count($milestone_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $milestone_id when calling putGoalMilestoneProgress'
            );
        }

        // verify the required parameter 'put_goal_milestone_progress_request' is set
        if ($put_goal_milestone_progress_request === null || (is_array($put_goal_milestone_progress_request) && count($put_goal_milestone_progress_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_goal_milestone_progress_request when calling putGoalMilestoneProgress'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/milestones/{milestoneId}/progress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }
        // path params
        if ($milestone_id !== null) {
            $resourcePath = str_replace(
                '{' . 'milestoneId' . '}',
                ObjectSerializer::toPathValue($milestone_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_goal_milestone_progress_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_goal_milestone_progress_request));
            } else {
                $httpBody = $put_goal_milestone_progress_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putGoalProgress
     *
     * Update Goal Progress
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  int $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalProgressRequest $put_goal_progress_request Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalProgress'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TransformedApiGoal
     */
    public function putGoalProgress($company_domain, $employee_id, $goal_id, $put_goal_progress_request, string $contentType = self::contentTypes['putGoalProgress'][0])
    {
        list($response) = $this->putGoalProgressWithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_progress_request, $contentType);
        return $response;
    }

    /**
     * Operation putGoalProgressWithHttpInfo
     *
     * Update Goal Progress
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  int $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalProgressRequest $put_goal_progress_request Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalProgress'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TransformedApiGoal, HTTP status code, HTTP response headers (array of strings)
     */
    public function putGoalProgressWithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_progress_request, string $contentType = self::contentTypes['putGoalProgress'][0])
    {
        $request = $this->putGoalProgressRequest($company_domain, $employee_id, $goal_id, $put_goal_progress_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TransformedApiGoal',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TransformedApiGoal',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TransformedApiGoal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putGoalProgressAsync
     *
     * Update Goal Progress
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  int $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalProgressRequest $put_goal_progress_request Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putGoalProgressAsync($company_domain, $employee_id, $goal_id, $put_goal_progress_request, string $contentType = self::contentTypes['putGoalProgress'][0])
    {
        return $this->putGoalProgressAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_progress_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putGoalProgressAsyncWithHttpInfo
     *
     * Update Goal Progress
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  int $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalProgressRequest $put_goal_progress_request Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putGoalProgressAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_progress_request, string $contentType = self::contentTypes['putGoalProgress'][0])
    {
        $returnType = '\MySdk\Model\TransformedApiGoal';
        $request = $this->putGoalProgressRequest($company_domain, $employee_id, $goal_id, $put_goal_progress_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putGoalProgress'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  int $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalProgressRequest $put_goal_progress_request Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalProgress'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putGoalProgressRequest($company_domain, $employee_id, $goal_id, $put_goal_progress_request, string $contentType = self::contentTypes['putGoalProgress'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling putGoalProgress'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling putGoalProgress'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling putGoalProgress'
            );
        }

        // verify the required parameter 'put_goal_progress_request' is set
        if ($put_goal_progress_request === null || (is_array($put_goal_progress_request) && count($put_goal_progress_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_goal_progress_request when calling putGoalProgress'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/progress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_goal_progress_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_goal_progress_request));
            } else {
                $httpBody = $put_goal_progress_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putGoalSharedWith
     *
     * Update Goal Sharing
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalSharedWithRequest $put_goal_shared_with_request Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalSharedWith'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TransformedApiGoal
     */
    public function putGoalSharedWith($company_domain, $employee_id, $goal_id, $put_goal_shared_with_request, string $contentType = self::contentTypes['putGoalSharedWith'][0])
    {
        list($response) = $this->putGoalSharedWithWithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_shared_with_request, $contentType);
        return $response;
    }

    /**
     * Operation putGoalSharedWithWithHttpInfo
     *
     * Update Goal Sharing
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalSharedWithRequest $put_goal_shared_with_request Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalSharedWith'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TransformedApiGoal, HTTP status code, HTTP response headers (array of strings)
     */
    public function putGoalSharedWithWithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_shared_with_request, string $contentType = self::contentTypes['putGoalSharedWith'][0])
    {
        $request = $this->putGoalSharedWithRequest($company_domain, $employee_id, $goal_id, $put_goal_shared_with_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TransformedApiGoal',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TransformedApiGoal',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TransformedApiGoal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putGoalSharedWithAsync
     *
     * Update Goal Sharing
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalSharedWithRequest $put_goal_shared_with_request Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalSharedWith'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putGoalSharedWithAsync($company_domain, $employee_id, $goal_id, $put_goal_shared_with_request, string $contentType = self::contentTypes['putGoalSharedWith'][0])
    {
        return $this->putGoalSharedWithAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_shared_with_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putGoalSharedWithAsyncWithHttpInfo
     *
     * Update Goal Sharing
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalSharedWithRequest $put_goal_shared_with_request Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalSharedWith'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putGoalSharedWithAsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_shared_with_request, string $contentType = self::contentTypes['putGoalSharedWith'][0])
    {
        $returnType = '\MySdk\Model\TransformedApiGoal';
        $request = $this->putGoalSharedWithRequest($company_domain, $employee_id, $goal_id, $put_goal_shared_with_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putGoalSharedWith'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalSharedWithRequest $put_goal_shared_with_request Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalSharedWith'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putGoalSharedWithRequest($company_domain, $employee_id, $goal_id, $put_goal_shared_with_request, string $contentType = self::contentTypes['putGoalSharedWith'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling putGoalSharedWith'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling putGoalSharedWith'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling putGoalSharedWith'
            );
        }

        // verify the required parameter 'put_goal_shared_with_request' is set
        if ($put_goal_shared_with_request === null || (is_array($put_goal_shared_with_request) && count($put_goal_shared_with_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_goal_shared_with_request when calling putGoalSharedWith'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/sharedWith';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_goal_shared_with_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_goal_shared_with_request));
            } else {
                $httpBody = $put_goal_shared_with_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putGoalV1
     *
     * Update Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\Goal $goal Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalV1'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TransformedApiGoal
     * @deprecated
     */
    public function putGoalV1($company_domain, $employee_id, $goal_id, $goal, string $contentType = self::contentTypes['putGoalV1'][0])
    {
        list($response) = $this->putGoalV1WithHttpInfo($company_domain, $employee_id, $goal_id, $goal, $contentType);
        return $response;
    }

    /**
     * Operation putGoalV1WithHttpInfo
     *
     * Update Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\Goal $goal Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalV1'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TransformedApiGoal, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function putGoalV1WithHttpInfo($company_domain, $employee_id, $goal_id, $goal, string $contentType = self::contentTypes['putGoalV1'][0])
    {
        $request = $this->putGoalV1Request($company_domain, $employee_id, $goal_id, $goal, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TransformedApiGoal',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TransformedApiGoal',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TransformedApiGoal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putGoalV1Async
     *
     * Update Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\Goal $goal Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function putGoalV1Async($company_domain, $employee_id, $goal_id, $goal, string $contentType = self::contentTypes['putGoalV1'][0])
    {
        return $this->putGoalV1AsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $goal, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putGoalV1AsyncWithHttpInfo
     *
     * Update Goal
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\Goal $goal Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function putGoalV1AsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $goal, string $contentType = self::contentTypes['putGoalV1'][0])
    {
        $returnType = '\MySdk\Model\TransformedApiGoal';
        $request = $this->putGoalV1Request($company_domain, $employee_id, $goal_id, $goal, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putGoalV1'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  string $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\Goal $goal Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalV1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function putGoalV1Request($company_domain, $employee_id, $goal_id, $goal, string $contentType = self::contentTypes['putGoalV1'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling putGoalV1'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling putGoalV1'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling putGoalV1'
            );
        }

        // verify the required parameter 'goal' is set
        if ($goal === null || (is_array($goal) && count($goal) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal when calling putGoalV1'
            );
        }


        $resourcePath = '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($goal)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($goal));
            } else {
                $httpBody = $goal;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putGoalV11
     *
     * Update Goal, V1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  int $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalV11Request $put_goal_v11_request Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalV11'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TransformedApiGoal
     */
    public function putGoalV11($company_domain, $employee_id, $goal_id, $put_goal_v11_request, string $contentType = self::contentTypes['putGoalV11'][0])
    {
        list($response) = $this->putGoalV11WithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_v11_request, $contentType);
        return $response;
    }

    /**
     * Operation putGoalV11WithHttpInfo
     *
     * Update Goal, V1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  int $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalV11Request $put_goal_v11_request Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalV11'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TransformedApiGoal, HTTP status code, HTTP response headers (array of strings)
     */
    public function putGoalV11WithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_v11_request, string $contentType = self::contentTypes['putGoalV11'][0])
    {
        $request = $this->putGoalV11Request($company_domain, $employee_id, $goal_id, $put_goal_v11_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TransformedApiGoal',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TransformedApiGoal',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TransformedApiGoal',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putGoalV11Async
     *
     * Update Goal, V1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  int $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalV11Request $put_goal_v11_request Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalV11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putGoalV11Async($company_domain, $employee_id, $goal_id, $put_goal_v11_request, string $contentType = self::contentTypes['putGoalV11'][0])
    {
        return $this->putGoalV11AsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_v11_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putGoalV11AsyncWithHttpInfo
     *
     * Update Goal, V1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  int $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalV11Request $put_goal_v11_request Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalV11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putGoalV11AsyncWithHttpInfo($company_domain, $employee_id, $goal_id, $put_goal_v11_request, string $contentType = self::contentTypes['putGoalV11'][0])
    {
        $returnType = '\MySdk\Model\TransformedApiGoal';
        $request = $this->putGoalV11Request($company_domain, $employee_id, $goal_id, $put_goal_v11_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putGoalV11'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id employeeId is the employee ID with whom the goal is associated. (required)
     * @param  int $goal_id goalId is the goal ID for the specified employee. (required)
     * @param  \MySdk\Model\PutGoalV11Request $put_goal_v11_request Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putGoalV11'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putGoalV11Request($company_domain, $employee_id, $goal_id, $put_goal_v11_request, string $contentType = self::contentTypes['putGoalV11'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling putGoalV11'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling putGoalV11'
            );
        }

        // verify the required parameter 'goal_id' is set
        if ($goal_id === null || (is_array($goal_id) && count($goal_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $goal_id when calling putGoalV11'
            );
        }

        // verify the required parameter 'put_goal_v11_request' is set
        if ($put_goal_v11_request === null || (is_array($put_goal_v11_request) && count($put_goal_v11_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_goal_v11_request when calling putGoalV11'
            );
        }


        $resourcePath = '/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/{goalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }
        // path params
        if ($goal_id !== null) {
            $resourcePath = str_replace(
                '{' . 'goalId' . '}',
                ObjectSerializer::toPathValue($goal_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($put_goal_v11_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($put_goal_v11_request));
            } else {
                $httpBody = $put_goal_v11_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putWebhook
     *
     * Update Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is a webhook ID. (required)
     * @param  \MySdk\Model\NewWebHook $new_web_hook new_web_hook (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putWebhook'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\WebHookResponse|\MySdk\Model\Webhook400Error|\MySdk\Model\PutWebhook403Response|\MySdk\Model\WebhookError|\MySdk\Model\WebhookError
     */
    public function putWebhook($company_domain, $id, $new_web_hook, string $contentType = self::contentTypes['putWebhook'][0])
    {
        list($response) = $this->putWebhookWithHttpInfo($company_domain, $id, $new_web_hook, $contentType);
        return $response;
    }

    /**
     * Operation putWebhookWithHttpInfo
     *
     * Update Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is a webhook ID. (required)
     * @param  \MySdk\Model\NewWebHook $new_web_hook (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putWebhook'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\WebHookResponse|\MySdk\Model\Webhook400Error|\MySdk\Model\PutWebhook403Response|\MySdk\Model\WebhookError|\MySdk\Model\WebhookError, HTTP status code, HTTP response headers (array of strings)
     */
    public function putWebhookWithHttpInfo($company_domain, $id, $new_web_hook, string $contentType = self::contentTypes['putWebhook'][0])
    {
        $request = $this->putWebhookRequest($company_domain, $id, $new_web_hook, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebHookResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\Webhook400Error',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\PutWebhook403Response',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebhookError',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\WebhookError',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\WebHookResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebHookResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\Webhook400Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\PutWebhook403Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\WebhookError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation putWebhookAsync
     *
     * Update Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is a webhook ID. (required)
     * @param  \MySdk\Model\NewWebHook $new_web_hook (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putWebhookAsync($company_domain, $id, $new_web_hook, string $contentType = self::contentTypes['putWebhook'][0])
    {
        return $this->putWebhookAsyncWithHttpInfo($company_domain, $id, $new_web_hook, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putWebhookAsyncWithHttpInfo
     *
     * Update Webhook
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is a webhook ID. (required)
     * @param  \MySdk\Model\NewWebHook $new_web_hook (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putWebhookAsyncWithHttpInfo($company_domain, $id, $new_web_hook, string $contentType = self::contentTypes['putWebhook'][0])
    {
        $returnType = '\MySdk\Model\WebHookResponse';
        $request = $this->putWebhookRequest($company_domain, $id, $new_web_hook, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putWebhook'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is a webhook ID. (required)
     * @param  \MySdk\Model\NewWebHook $new_web_hook (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putWebhook'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putWebhookRequest($company_domain, $id, $new_web_hook, string $contentType = self::contentTypes['putWebhook'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling putWebhook'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putWebhook'
            );
        }

        // verify the required parameter 'new_web_hook' is set
        if ($new_web_hook === null || (is_array($new_web_hook) && count($new_web_hook) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_web_hook when calling putWebhook'
            );
        }


        $resourcePath = '/{companyDomain}/v1/webhooks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($new_web_hook)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($new_web_hook));
            } else {
                $httpBody = $new_web_hook;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation requestCustomReport
     *
     * Request a custom report
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @param  \MySdk\Model\RequestCustomReport $request_custom_report request_custom_report (required)
     * @param  bool|null $only_current Limits the report to only current employees. Setting to false will include future-dated employees in the report. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestCustomReport'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function requestCustomReport($company_domain, $format, $request_custom_report, $only_current = false, string $contentType = self::contentTypes['requestCustomReport'][0])
    {
        $this->requestCustomReportWithHttpInfo($company_domain, $format, $request_custom_report, $only_current, $contentType);
    }

    /**
     * Operation requestCustomReportWithHttpInfo
     *
     * Request a custom report
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @param  \MySdk\Model\RequestCustomReport $request_custom_report (required)
     * @param  bool|null $only_current Limits the report to only current employees. Setting to false will include future-dated employees in the report. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestCustomReport'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function requestCustomReportWithHttpInfo($company_domain, $format, $request_custom_report, $only_current = false, string $contentType = self::contentTypes['requestCustomReport'][0])
    {
        $request = $this->requestCustomReportRequest($company_domain, $format, $request_custom_report, $only_current, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation requestCustomReportAsync
     *
     * Request a custom report
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @param  \MySdk\Model\RequestCustomReport $request_custom_report (required)
     * @param  bool|null $only_current Limits the report to only current employees. Setting to false will include future-dated employees in the report. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestCustomReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestCustomReportAsync($company_domain, $format, $request_custom_report, $only_current = false, string $contentType = self::contentTypes['requestCustomReport'][0])
    {
        return $this->requestCustomReportAsyncWithHttpInfo($company_domain, $format, $request_custom_report, $only_current, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation requestCustomReportAsyncWithHttpInfo
     *
     * Request a custom report
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @param  \MySdk\Model\RequestCustomReport $request_custom_report (required)
     * @param  bool|null $only_current Limits the report to only current employees. Setting to false will include future-dated employees in the report. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestCustomReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function requestCustomReportAsyncWithHttpInfo($company_domain, $format, $request_custom_report, $only_current = false, string $contentType = self::contentTypes['requestCustomReport'][0])
    {
        $returnType = '';
        $request = $this->requestCustomReportRequest($company_domain, $format, $request_custom_report, $only_current, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'requestCustomReport'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON (required)
     * @param  \MySdk\Model\RequestCustomReport $request_custom_report (required)
     * @param  bool|null $only_current Limits the report to only current employees. Setting to false will include future-dated employees in the report. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['requestCustomReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function requestCustomReportRequest($company_domain, $format, $request_custom_report, $only_current = false, string $contentType = self::contentTypes['requestCustomReport'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling requestCustomReport'
            );
        }

        // verify the required parameter 'format' is set
        if ($format === null || (is_array($format) && count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling requestCustomReport'
            );
        }

        // verify the required parameter 'request_custom_report' is set
        if ($request_custom_report === null || (is_array($request_custom_report) && count($request_custom_report) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_custom_report when calling requestCustomReport'
            );
        }



        $resourcePath = '/{companyDomain}/v1/reports/custom';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $format,
            'format', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_current,
            'onlyCurrent', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_custom_report)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_custom_report));
            } else {
                $httpBody = $request_custom_report;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffAddATimeOffHistoryItemForTimeOffRequest
     *
     * Add a Time Off History Item For Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\TimeOffHistory $time_off_history time_off_history (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffAddATimeOffHistoryItemForTimeOffRequest($company_domain, $employee_id, $time_off_history, string $contentType = self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'][0])
    {
        $this->timeOffAddATimeOffHistoryItemForTimeOffRequestWithHttpInfo($company_domain, $employee_id, $time_off_history, $contentType);
    }

    /**
     * Operation timeOffAddATimeOffHistoryItemForTimeOffRequestWithHttpInfo
     *
     * Add a Time Off History Item For Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\TimeOffHistory $time_off_history (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffAddATimeOffHistoryItemForTimeOffRequestWithHttpInfo($company_domain, $employee_id, $time_off_history, string $contentType = self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'][0])
    {
        $request = $this->timeOffAddATimeOffHistoryItemForTimeOffRequestRequest($company_domain, $employee_id, $time_off_history, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffAddATimeOffHistoryItemForTimeOffRequestAsync
     *
     * Add a Time Off History Item For Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\TimeOffHistory $time_off_history (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAddATimeOffHistoryItemForTimeOffRequestAsync($company_domain, $employee_id, $time_off_history, string $contentType = self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'][0])
    {
        return $this->timeOffAddATimeOffHistoryItemForTimeOffRequestAsyncWithHttpInfo($company_domain, $employee_id, $time_off_history, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffAddATimeOffHistoryItemForTimeOffRequestAsyncWithHttpInfo
     *
     * Add a Time Off History Item For Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\TimeOffHistory $time_off_history (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAddATimeOffHistoryItemForTimeOffRequestAsyncWithHttpInfo($company_domain, $employee_id, $time_off_history, string $contentType = self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'][0])
    {
        $returnType = '';
        $request = $this->timeOffAddATimeOffHistoryItemForTimeOffRequestRequest($company_domain, $employee_id, $time_off_history, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffAddATimeOffHistoryItemForTimeOffRequest'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\TimeOffHistory $time_off_history (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffAddATimeOffHistoryItemForTimeOffRequestRequest($company_domain, $employee_id, $time_off_history, string $contentType = self::contentTypes['timeOffAddATimeOffHistoryItemForTimeOffRequest'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffAddATimeOffHistoryItemForTimeOffRequest'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffAddATimeOffHistoryItemForTimeOffRequest'
            );
        }

        // verify the required parameter 'time_off_history' is set
        if ($time_off_history === null || (is_array($time_off_history) && count($time_off_history) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_off_history when calling timeOffAddATimeOffHistoryItemForTimeOffRequest'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($time_off_history)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($time_off_history));
            } else {
                $httpBody = $time_off_history;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffAddATimeOffRequest
     *
     * Add a Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employee_id (required)
     * @param  \MySdk\Model\TimeOffRequest $time_off_request time_off_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffRequest'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffAddATimeOffRequest($company_domain, $employee_id, $time_off_request, string $contentType = self::contentTypes['timeOffAddATimeOffRequest'][0])
    {
        $this->timeOffAddATimeOffRequestWithHttpInfo($company_domain, $employee_id, $time_off_request, $contentType);
    }

    /**
     * Operation timeOffAddATimeOffRequestWithHttpInfo
     *
     * Add a Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  \MySdk\Model\TimeOffRequest $time_off_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffRequest'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffAddATimeOffRequestWithHttpInfo($company_domain, $employee_id, $time_off_request, string $contentType = self::contentTypes['timeOffAddATimeOffRequest'][0])
    {
        $request = $this->timeOffAddATimeOffRequestRequest($company_domain, $employee_id, $time_off_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffAddATimeOffRequestAsync
     *
     * Add a Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  \MySdk\Model\TimeOffRequest $time_off_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAddATimeOffRequestAsync($company_domain, $employee_id, $time_off_request, string $contentType = self::contentTypes['timeOffAddATimeOffRequest'][0])
    {
        return $this->timeOffAddATimeOffRequestAsyncWithHttpInfo($company_domain, $employee_id, $time_off_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffAddATimeOffRequestAsyncWithHttpInfo
     *
     * Add a Time Off Request
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  \MySdk\Model\TimeOffRequest $time_off_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAddATimeOffRequestAsyncWithHttpInfo($company_domain, $employee_id, $time_off_request, string $contentType = self::contentTypes['timeOffAddATimeOffRequest'][0])
    {
        $returnType = '';
        $request = $this->timeOffAddATimeOffRequestRequest($company_domain, $employee_id, $time_off_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffAddATimeOffRequest'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  \MySdk\Model\TimeOffRequest $time_off_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAddATimeOffRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffAddATimeOffRequestRequest($company_domain, $employee_id, $time_off_request, string $contentType = self::contentTypes['timeOffAddATimeOffRequest'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffAddATimeOffRequest'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffAddATimeOffRequest'
            );
        }

        // verify the required parameter 'time_off_request' is set
        if ($time_off_request === null || (is_array($time_off_request) && count($time_off_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_off_request when calling timeOffAddATimeOffRequest'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($time_off_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($time_off_request));
            } else {
                $httpBody = $time_off_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffAdjustTimeOffBalance
     *
     * Adjust Time Off Balance
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\AdjustTimeOffBalance $adjust_time_off_balance adjust_time_off_balance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAdjustTimeOffBalance'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffAdjustTimeOffBalance($company_domain, $employee_id, $adjust_time_off_balance, string $contentType = self::contentTypes['timeOffAdjustTimeOffBalance'][0])
    {
        $this->timeOffAdjustTimeOffBalanceWithHttpInfo($company_domain, $employee_id, $adjust_time_off_balance, $contentType);
    }

    /**
     * Operation timeOffAdjustTimeOffBalanceWithHttpInfo
     *
     * Adjust Time Off Balance
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\AdjustTimeOffBalance $adjust_time_off_balance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAdjustTimeOffBalance'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffAdjustTimeOffBalanceWithHttpInfo($company_domain, $employee_id, $adjust_time_off_balance, string $contentType = self::contentTypes['timeOffAdjustTimeOffBalance'][0])
    {
        $request = $this->timeOffAdjustTimeOffBalanceRequest($company_domain, $employee_id, $adjust_time_off_balance, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffAdjustTimeOffBalanceAsync
     *
     * Adjust Time Off Balance
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\AdjustTimeOffBalance $adjust_time_off_balance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAdjustTimeOffBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAdjustTimeOffBalanceAsync($company_domain, $employee_id, $adjust_time_off_balance, string $contentType = self::contentTypes['timeOffAdjustTimeOffBalance'][0])
    {
        return $this->timeOffAdjustTimeOffBalanceAsyncWithHttpInfo($company_domain, $employee_id, $adjust_time_off_balance, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffAdjustTimeOffBalanceAsyncWithHttpInfo
     *
     * Adjust Time Off Balance
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\AdjustTimeOffBalance $adjust_time_off_balance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAdjustTimeOffBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAdjustTimeOffBalanceAsyncWithHttpInfo($company_domain, $employee_id, $adjust_time_off_balance, string $contentType = self::contentTypes['timeOffAdjustTimeOffBalance'][0])
    {
        $returnType = '';
        $request = $this->timeOffAdjustTimeOffBalanceRequest($company_domain, $employee_id, $adjust_time_off_balance, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffAdjustTimeOffBalance'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id The ID of the employee. (required)
     * @param  \MySdk\Model\AdjustTimeOffBalance $adjust_time_off_balance (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAdjustTimeOffBalance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffAdjustTimeOffBalanceRequest($company_domain, $employee_id, $adjust_time_off_balance, string $contentType = self::contentTypes['timeOffAdjustTimeOffBalance'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffAdjustTimeOffBalance'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffAdjustTimeOffBalance'
            );
        }

        // verify the required parameter 'adjust_time_off_balance' is set
        if ($adjust_time_off_balance === null || (is_array($adjust_time_off_balance) && count($adjust_time_off_balance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adjust_time_off_balance when calling timeOffAdjustTimeOffBalance'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/balance_adjustment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($adjust_time_off_balance)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($adjust_time_off_balance));
            } else {
                $httpBody = $adjust_time_off_balance;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffAssignTimeOffPoliciesForAnEmployee
     *
     * Assign Time Off Policies for an Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employee_id (required)
     * @param  object[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffAssignTimeOffPoliciesForAnEmployee($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'][0])
    {
        $this->timeOffAssignTimeOffPoliciesForAnEmployeeWithHttpInfo($company_domain, $employee_id, $request_body, $contentType);
    }

    /**
     * Operation timeOffAssignTimeOffPoliciesForAnEmployeeWithHttpInfo
     *
     * Assign Time Off Policies for an Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffAssignTimeOffPoliciesForAnEmployeeWithHttpInfo($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'][0])
    {
        $request = $this->timeOffAssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffAssignTimeOffPoliciesForAnEmployeeAsync
     *
     * Assign Time Off Policies for an Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAssignTimeOffPoliciesForAnEmployeeAsync($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'][0])
    {
        return $this->timeOffAssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffAssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo
     *
     * Assign Time Off Policies for an Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffAssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'][0])
    {
        $returnType = '';
        $request = $this->timeOffAssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffAssignTimeOffPoliciesForAnEmployee'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffAssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffAssignTimeOffPoliciesForAnEmployee'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffAssignTimeOffPoliciesForAnEmployee'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffAssignTimeOffPoliciesForAnEmployee'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling timeOffAssignTimeOffPoliciesForAnEmployee'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffChangeARequestStatus
     *
     * Change a Request Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $request_id request_id (required)
     * @param  \MySdk\Model\Request $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffChangeARequestStatus'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffChangeARequestStatus($company_domain, $request_id, $request, string $contentType = self::contentTypes['timeOffChangeARequestStatus'][0])
    {
        $this->timeOffChangeARequestStatusWithHttpInfo($company_domain, $request_id, $request, $contentType);
    }

    /**
     * Operation timeOffChangeARequestStatusWithHttpInfo
     *
     * Change a Request Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $request_id (required)
     * @param  \MySdk\Model\Request $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffChangeARequestStatus'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffChangeARequestStatusWithHttpInfo($company_domain, $request_id, $request, string $contentType = self::contentTypes['timeOffChangeARequestStatus'][0])
    {
        $request = $this->timeOffChangeARequestStatusRequest($company_domain, $request_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffChangeARequestStatusAsync
     *
     * Change a Request Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $request_id (required)
     * @param  \MySdk\Model\Request $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffChangeARequestStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffChangeARequestStatusAsync($company_domain, $request_id, $request, string $contentType = self::contentTypes['timeOffChangeARequestStatus'][0])
    {
        return $this->timeOffChangeARequestStatusAsyncWithHttpInfo($company_domain, $request_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffChangeARequestStatusAsyncWithHttpInfo
     *
     * Change a Request Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $request_id (required)
     * @param  \MySdk\Model\Request $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffChangeARequestStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffChangeARequestStatusAsyncWithHttpInfo($company_domain, $request_id, $request, string $contentType = self::contentTypes['timeOffChangeARequestStatus'][0])
    {
        $returnType = '';
        $request = $this->timeOffChangeARequestStatusRequest($company_domain, $request_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffChangeARequestStatus'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $request_id (required)
     * @param  \MySdk\Model\Request $request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffChangeARequestStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffChangeARequestStatusRequest($company_domain, $request_id, $request, string $contentType = self::contentTypes['timeOffChangeARequestStatus'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffChangeARequestStatus'
            );
        }

        // verify the required parameter 'request_id' is set
        if ($request_id === null || (is_array($request_id) && count($request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_id when calling timeOffChangeARequestStatus'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling timeOffChangeARequestStatus'
            );
        }


        $resourcePath = '/{companyDomain}/v1/time_off/requests/{requestId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'requestId' . '}',
                ObjectSerializer::toPathValue($request_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffGetTimeOffRequests
     *
     * Get Time Off Requests
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $start YYYY-MM-DD. Only show time off that occurs on/after the specified start date. (required)
     * @param  string $end YYYY-MM-DD. Only show time off that occurs on/before the specified end date. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  int|null $id A particular request ID to limit the response to. (optional)
     * @param  string|null $action Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view. (optional)
     * @param  string|null $employee_id A particular employee ID to limit the response to. (optional)
     * @param  string|null $type A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included. (optional)
     * @param  string|null $status A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffGetTimeOffRequests'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffGetTimeOffRequests($company_domain, $start, $end, $accept_header_parameter = null, $id = null, $action = null, $employee_id = null, $type = null, $status = null, string $contentType = self::contentTypes['timeOffGetTimeOffRequests'][0])
    {
        $this->timeOffGetTimeOffRequestsWithHttpInfo($company_domain, $start, $end, $accept_header_parameter, $id, $action, $employee_id, $type, $status, $contentType);
    }

    /**
     * Operation timeOffGetTimeOffRequestsWithHttpInfo
     *
     * Get Time Off Requests
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $start YYYY-MM-DD. Only show time off that occurs on/after the specified start date. (required)
     * @param  string $end YYYY-MM-DD. Only show time off that occurs on/before the specified end date. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  int|null $id A particular request ID to limit the response to. (optional)
     * @param  string|null $action Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view. (optional)
     * @param  string|null $employee_id A particular employee ID to limit the response to. (optional)
     * @param  string|null $type A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included. (optional)
     * @param  string|null $status A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffGetTimeOffRequests'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffGetTimeOffRequestsWithHttpInfo($company_domain, $start, $end, $accept_header_parameter = null, $id = null, $action = null, $employee_id = null, $type = null, $status = null, string $contentType = self::contentTypes['timeOffGetTimeOffRequests'][0])
    {
        $request = $this->timeOffGetTimeOffRequestsRequest($company_domain, $start, $end, $accept_header_parameter, $id, $action, $employee_id, $type, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffGetTimeOffRequestsAsync
     *
     * Get Time Off Requests
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $start YYYY-MM-DD. Only show time off that occurs on/after the specified start date. (required)
     * @param  string $end YYYY-MM-DD. Only show time off that occurs on/before the specified end date. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  int|null $id A particular request ID to limit the response to. (optional)
     * @param  string|null $action Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view. (optional)
     * @param  string|null $employee_id A particular employee ID to limit the response to. (optional)
     * @param  string|null $type A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included. (optional)
     * @param  string|null $status A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffGetTimeOffRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffGetTimeOffRequestsAsync($company_domain, $start, $end, $accept_header_parameter = null, $id = null, $action = null, $employee_id = null, $type = null, $status = null, string $contentType = self::contentTypes['timeOffGetTimeOffRequests'][0])
    {
        return $this->timeOffGetTimeOffRequestsAsyncWithHttpInfo($company_domain, $start, $end, $accept_header_parameter, $id, $action, $employee_id, $type, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffGetTimeOffRequestsAsyncWithHttpInfo
     *
     * Get Time Off Requests
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $start YYYY-MM-DD. Only show time off that occurs on/after the specified start date. (required)
     * @param  string $end YYYY-MM-DD. Only show time off that occurs on/before the specified end date. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  int|null $id A particular request ID to limit the response to. (optional)
     * @param  string|null $action Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view. (optional)
     * @param  string|null $employee_id A particular employee ID to limit the response to. (optional)
     * @param  string|null $type A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included. (optional)
     * @param  string|null $status A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffGetTimeOffRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffGetTimeOffRequestsAsyncWithHttpInfo($company_domain, $start, $end, $accept_header_parameter = null, $id = null, $action = null, $employee_id = null, $type = null, $status = null, string $contentType = self::contentTypes['timeOffGetTimeOffRequests'][0])
    {
        $returnType = '';
        $request = $this->timeOffGetTimeOffRequestsRequest($company_domain, $start, $end, $accept_header_parameter, $id, $action, $employee_id, $type, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffGetTimeOffRequests'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $start YYYY-MM-DD. Only show time off that occurs on/after the specified start date. (required)
     * @param  string $end YYYY-MM-DD. Only show time off that occurs on/before the specified end date. (required)
     * @param  string|null $accept_header_parameter This endpoint can produce either JSON or XML. (optional)
     * @param  int|null $id A particular request ID to limit the response to. (optional)
     * @param  string|null $action Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view. (optional)
     * @param  string|null $employee_id A particular employee ID to limit the response to. (optional)
     * @param  string|null $type A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included. (optional)
     * @param  string|null $status A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffGetTimeOffRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffGetTimeOffRequestsRequest($company_domain, $start, $end, $accept_header_parameter = null, $id = null, $action = null, $employee_id = null, $type = null, $status = null, string $contentType = self::contentTypes['timeOffGetTimeOffRequests'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffGetTimeOffRequests'
            );
        }

        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling timeOffGetTimeOffRequests'
            );
        }

        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling timeOffGetTimeOffRequests'
            );
        }








        $resourcePath = '/{companyDomain}/v1/time_off/requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $action,
            'action', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employee_id,
            'employeeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end,
            'end', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($accept_header_parameter !== null) {
            $headerParams['AcceptHeaderParameter'] = ObjectSerializer::toHeaderValue($accept_header_parameter);
        }

        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffListTimeOffPoliciesForEmployee
     *
     * List Time Off Policies for Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffListTimeOffPoliciesForEmployee($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffListTimeOffPoliciesForEmployee'][0])
    {
        $this->timeOffListTimeOffPoliciesForEmployeeWithHttpInfo($company_domain, $employee_id, $contentType);
    }

    /**
     * Operation timeOffListTimeOffPoliciesForEmployeeWithHttpInfo
     *
     * List Time Off Policies for Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffListTimeOffPoliciesForEmployeeWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffListTimeOffPoliciesForEmployee'][0])
    {
        $request = $this->timeOffListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffListTimeOffPoliciesForEmployeeAsync
     *
     * List Time Off Policies for Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffListTimeOffPoliciesForEmployeeAsync($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffListTimeOffPoliciesForEmployee'][0])
    {
        return $this->timeOffListTimeOffPoliciesForEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffListTimeOffPoliciesForEmployeeAsyncWithHttpInfo
     *
     * List Time Off Policies for Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffListTimeOffPoliciesForEmployeeAsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffListTimeOffPoliciesForEmployee'][0])
    {
        $returnType = '';
        $request = $this->timeOffListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffListTimeOffPoliciesForEmployee'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffListTimeOffPoliciesForEmployee'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffListTimeOffPoliciesForEmployee'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffListTimeOffPoliciesForEmployee'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/time_off/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffV11AssignTimeOffPoliciesForAnEmployee
     *
     * Assign Time Off Policies for an Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employee_id (required)
     * @param  object[] $request_body request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffV11AssignTimeOffPoliciesForAnEmployee($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'][0])
    {
        $this->timeOffV11AssignTimeOffPoliciesForAnEmployeeWithHttpInfo($company_domain, $employee_id, $request_body, $contentType);
    }

    /**
     * Operation timeOffV11AssignTimeOffPoliciesForAnEmployeeWithHttpInfo
     *
     * Assign Time Off Policies for an Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffV11AssignTimeOffPoliciesForAnEmployeeWithHttpInfo($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'][0])
    {
        $request = $this->timeOffV11AssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffV11AssignTimeOffPoliciesForAnEmployeeAsync
     *
     * Assign Time Off Policies for an Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffV11AssignTimeOffPoliciesForAnEmployeeAsync($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'][0])
    {
        return $this->timeOffV11AssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffV11AssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo
     *
     * Assign Time Off Policies for an Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffV11AssignTimeOffPoliciesForAnEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'][0])
    {
        $returnType = '';
        $request = $this->timeOffV11AssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffV11AssignTimeOffPoliciesForAnEmployee'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  object[] $request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffV11AssignTimeOffPoliciesForAnEmployeeRequest($company_domain, $employee_id, $request_body, string $contentType = self::contentTypes['timeOffV11AssignTimeOffPoliciesForAnEmployee'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffV11AssignTimeOffPoliciesForAnEmployee'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffV11AssignTimeOffPoliciesForAnEmployee'
            );
        }

        // verify the required parameter 'request_body' is set
        if ($request_body === null || (is_array($request_body) && count($request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_body when calling timeOffV11AssignTimeOffPoliciesForAnEmployee'
            );
        }


        $resourcePath = '/{companyDomain}/v1_1/employees/{employeeId}/time_off/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request_body));
            } else {
                $httpBody = $request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeOffV11ListTimeOffPoliciesForEmployee
     *
     * List Time Off Policies for Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeOffV11ListTimeOffPoliciesForEmployee($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'][0])
    {
        $this->timeOffV11ListTimeOffPoliciesForEmployeeWithHttpInfo($company_domain, $employee_id, $contentType);
    }

    /**
     * Operation timeOffV11ListTimeOffPoliciesForEmployeeWithHttpInfo
     *
     * List Time Off Policies for Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeOffV11ListTimeOffPoliciesForEmployeeWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'][0])
    {
        $request = $this->timeOffV11ListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation timeOffV11ListTimeOffPoliciesForEmployeeAsync
     *
     * List Time Off Policies for Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffV11ListTimeOffPoliciesForEmployeeAsync($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'][0])
    {
        return $this->timeOffV11ListTimeOffPoliciesForEmployeeAsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeOffV11ListTimeOffPoliciesForEmployeeAsyncWithHttpInfo
     *
     * List Time Off Policies for Employee, Version 1.1
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeOffV11ListTimeOffPoliciesForEmployeeAsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'][0])
    {
        $returnType = '';
        $request = $this->timeOffV11ListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeOffV11ListTimeOffPoliciesForEmployee'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeOffV11ListTimeOffPoliciesForEmployeeRequest($company_domain, $employee_id, string $contentType = self::contentTypes['timeOffV11ListTimeOffPoliciesForEmployee'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling timeOffV11ListTimeOffPoliciesForEmployee'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling timeOffV11ListTimeOffPoliciesForEmployee'
            );
        }


        $resourcePath = '/{companyDomain}/v1_1/employees/{employeeId}/time_off/policies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCompanyFile
     *
     * Update Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the employee file being updated. (required)
     * @param  \MySdk\Model\CompanyFileUpdate $company_file_update company_file_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCompanyFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateCompanyFile($company_domain, $file_id, $company_file_update, string $contentType = self::contentTypes['updateCompanyFile'][0])
    {
        $this->updateCompanyFileWithHttpInfo($company_domain, $file_id, $company_file_update, $contentType);
    }

    /**
     * Operation updateCompanyFileWithHttpInfo
     *
     * Update Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the employee file being updated. (required)
     * @param  \MySdk\Model\CompanyFileUpdate $company_file_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCompanyFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCompanyFileWithHttpInfo($company_domain, $file_id, $company_file_update, string $contentType = self::contentTypes['updateCompanyFile'][0])
    {
        $request = $this->updateCompanyFileRequest($company_domain, $file_id, $company_file_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateCompanyFileAsync
     *
     * Update Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the employee file being updated. (required)
     * @param  \MySdk\Model\CompanyFileUpdate $company_file_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyFileAsync($company_domain, $file_id, $company_file_update, string $contentType = self::contentTypes['updateCompanyFile'][0])
    {
        return $this->updateCompanyFileAsyncWithHttpInfo($company_domain, $file_id, $company_file_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCompanyFileAsyncWithHttpInfo
     *
     * Update Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the employee file being updated. (required)
     * @param  \MySdk\Model\CompanyFileUpdate $company_file_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCompanyFileAsyncWithHttpInfo($company_domain, $file_id, $company_file_update, string $contentType = self::contentTypes['updateCompanyFile'][0])
    {
        $returnType = '';
        $request = $this->updateCompanyFileRequest($company_domain, $file_id, $company_file_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCompanyFile'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $file_id {fileId} is the ID of the employee file being updated. (required)
     * @param  \MySdk\Model\CompanyFileUpdate $company_file_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCompanyFileRequest($company_domain, $file_id, $company_file_update, string $contentType = self::contentTypes['updateCompanyFile'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateCompanyFile'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling updateCompanyFile'
            );
        }

        // verify the required parameter 'company_file_update' is set
        if ($company_file_update === null || (is_array($company_file_update) && count($company_file_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_file_update when calling updateCompanyFile'
            );
        }


        $resourcePath = '/{companyDomain}/v1/files/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($company_file_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($company_file_update));
            } else {
                $httpBody = $company_file_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmployee
     *
     * Update Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. (required)
     * @param  \MySdk\Model\Employee $employee employee (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateEmployee($company_domain, $id, $employee, string $contentType = self::contentTypes['updateEmployee'][0])
    {
        $this->updateEmployeeWithHttpInfo($company_domain, $id, $employee, $contentType);
    }

    /**
     * Operation updateEmployeeWithHttpInfo
     *
     * Update Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. (required)
     * @param  \MySdk\Model\Employee $employee (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployee'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmployeeWithHttpInfo($company_domain, $id, $employee, string $contentType = self::contentTypes['updateEmployee'][0])
    {
        $request = $this->updateEmployeeRequest($company_domain, $id, $employee, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateEmployeeAsync
     *
     * Update Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. (required)
     * @param  \MySdk\Model\Employee $employee (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeAsync($company_domain, $id, $employee, string $contentType = self::contentTypes['updateEmployee'][0])
    {
        return $this->updateEmployeeAsyncWithHttpInfo($company_domain, $id, $employee, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmployeeAsyncWithHttpInfo
     *
     * Update Employee
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. (required)
     * @param  \MySdk\Model\Employee $employee (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeAsyncWithHttpInfo($company_domain, $id, $employee, string $contentType = self::contentTypes['updateEmployee'][0])
    {
        $returnType = '';
        $request = $this->updateEmployeeRequest($company_domain, $id, $employee, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmployee'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. (required)
     * @param  \MySdk\Model\Employee $employee (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployee'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmployeeRequest($company_domain, $id, $employee, string $contentType = self::contentTypes['updateEmployee'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateEmployee'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmployee'
            );
        }

        // verify the required parameter 'employee' is set
        if ($employee === null || (is_array($employee) && count($employee) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee when calling updateEmployee'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($employee)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($employee));
            } else {
                $httpBody = $employee;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmployeeDependent
     *
     * Update an employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee dependent ID. (required)
     * @param  \MySdk\Model\EmployeeDependent $employee_dependent employee_dependent (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateEmployeeDependent($company_domain, $id, $employee_dependent, string $contentType = self::contentTypes['updateEmployeeDependent'][0])
    {
        $this->updateEmployeeDependentWithHttpInfo($company_domain, $id, $employee_dependent, $contentType);
    }

    /**
     * Operation updateEmployeeDependentWithHttpInfo
     *
     * Update an employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee dependent ID. (required)
     * @param  \MySdk\Model\EmployeeDependent $employee_dependent (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmployeeDependentWithHttpInfo($company_domain, $id, $employee_dependent, string $contentType = self::contentTypes['updateEmployeeDependent'][0])
    {
        $request = $this->updateEmployeeDependentRequest($company_domain, $id, $employee_dependent, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateEmployeeDependentAsync
     *
     * Update an employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee dependent ID. (required)
     * @param  \MySdk\Model\EmployeeDependent $employee_dependent (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeDependentAsync($company_domain, $id, $employee_dependent, string $contentType = self::contentTypes['updateEmployeeDependent'][0])
    {
        return $this->updateEmployeeDependentAsyncWithHttpInfo($company_domain, $id, $employee_dependent, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmployeeDependentAsyncWithHttpInfo
     *
     * Update an employee dependent
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee dependent ID. (required)
     * @param  \MySdk\Model\EmployeeDependent $employee_dependent (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeDependentAsyncWithHttpInfo($company_domain, $id, $employee_dependent, string $contentType = self::contentTypes['updateEmployeeDependent'][0])
    {
        $returnType = '';
        $request = $this->updateEmployeeDependentRequest($company_domain, $id, $employee_dependent, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmployeeDependent'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee dependent ID. (required)
     * @param  \MySdk\Model\EmployeeDependent $employee_dependent (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeDependent'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmployeeDependentRequest($company_domain, $id, $employee_dependent, string $contentType = self::contentTypes['updateEmployeeDependent'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateEmployeeDependent'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmployeeDependent'
            );
        }

        // verify the required parameter 'employee_dependent' is set
        if ($employee_dependent === null || (is_array($employee_dependent) && count($employee_dependent) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_dependent when calling updateEmployeeDependent'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employeedependents/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($employee_dependent)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($employee_dependent));
            } else {
                $httpBody = $employee_dependent;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmployeeFile
     *
     * Update Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being updated. (required)
     * @param  \MySdk\Model\EmployeeFileUpdate $employee_file_update employee_file_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateEmployeeFile($company_domain, $id, $file_id, $employee_file_update, string $contentType = self::contentTypes['updateEmployeeFile'][0])
    {
        $this->updateEmployeeFileWithHttpInfo($company_domain, $id, $file_id, $employee_file_update, $contentType);
    }

    /**
     * Operation updateEmployeeFileWithHttpInfo
     *
     * Update Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being updated. (required)
     * @param  \MySdk\Model\EmployeeFileUpdate $employee_file_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmployeeFileWithHttpInfo($company_domain, $id, $file_id, $employee_file_update, string $contentType = self::contentTypes['updateEmployeeFile'][0])
    {
        $request = $this->updateEmployeeFileRequest($company_domain, $id, $file_id, $employee_file_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateEmployeeFileAsync
     *
     * Update Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being updated. (required)
     * @param  \MySdk\Model\EmployeeFileUpdate $employee_file_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeFileAsync($company_domain, $id, $file_id, $employee_file_update, string $contentType = self::contentTypes['updateEmployeeFile'][0])
    {
        return $this->updateEmployeeFileAsyncWithHttpInfo($company_domain, $id, $file_id, $employee_file_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmployeeFileAsyncWithHttpInfo
     *
     * Update Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being updated. (required)
     * @param  \MySdk\Model\EmployeeFileUpdate $employee_file_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeFileAsyncWithHttpInfo($company_domain, $id, $file_id, $employee_file_update, string $contentType = self::contentTypes['updateEmployeeFile'][0])
    {
        $returnType = '';
        $request = $this->updateEmployeeFileRequest($company_domain, $id, $file_id, $employee_file_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmployeeFile'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $file_id {fileId} is the ID of the employee file being updated. (required)
     * @param  \MySdk\Model\EmployeeFileUpdate $employee_file_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmployeeFileRequest($company_domain, $id, $file_id, $employee_file_update, string $contentType = self::contentTypes['updateEmployeeFile'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateEmployeeFile'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmployeeFile'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling updateEmployeeFile'
            );
        }

        // verify the required parameter 'employee_file_update' is set
        if ($employee_file_update === null || (is_array($employee_file_update) && count($employee_file_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_file_update when calling updateEmployeeFile'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{id}/files/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($employee_file_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($employee_file_update));
            } else {
                $httpBody = $employee_file_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmployeeTableRow
     *
     * Updates a table row.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateEmployeeTableRow($company_domain, $id, $table, $row_id, $table_row_update, string $contentType = self::contentTypes['updateEmployeeTableRow'][0])
    {
        $this->updateEmployeeTableRowWithHttpInfo($company_domain, $id, $table, $row_id, $table_row_update, $contentType);
    }

    /**
     * Operation updateEmployeeTableRowWithHttpInfo
     *
     * Updates a table row.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmployeeTableRowWithHttpInfo($company_domain, $id, $table, $row_id, $table_row_update, string $contentType = self::contentTypes['updateEmployeeTableRow'][0])
    {
        $request = $this->updateEmployeeTableRowRequest($company_domain, $id, $table, $row_id, $table_row_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateEmployeeTableRowAsync
     *
     * Updates a table row.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeTableRowAsync($company_domain, $id, $table, $row_id, $table_row_update, string $contentType = self::contentTypes['updateEmployeeTableRow'][0])
    {
        return $this->updateEmployeeTableRowAsyncWithHttpInfo($company_domain, $id, $table, $row_id, $table_row_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmployeeTableRowAsyncWithHttpInfo
     *
     * Updates a table row.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeTableRowAsyncWithHttpInfo($company_domain, $id, $table, $row_id, $table_row_update, string $contentType = self::contentTypes['updateEmployeeTableRow'][0])
    {
        $returnType = '';
        $request = $this->updateEmployeeTableRowRequest($company_domain, $id, $table, $row_id, $table_row_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmployeeTableRow'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTableRow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmployeeTableRowRequest($company_domain, $id, $table, $row_id, $table_row_update, string $contentType = self::contentTypes['updateEmployeeTableRow'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateEmployeeTableRow'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmployeeTableRow'
            );
        }

        // verify the required parameter 'table' is set
        if ($table === null || (is_array($table) && count($table) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table when calling updateEmployeeTableRow'
            );
        }

        // verify the required parameter 'row_id' is set
        if ($row_id === null || (is_array($row_id) && count($row_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_id when calling updateEmployeeTableRow'
            );
        }

        // verify the required parameter 'table_row_update' is set
        if ($table_row_update === null || (is_array($table_row_update) && count($table_row_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_row_update when calling updateEmployeeTableRow'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{id}/tables/{table}/{rowId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($table !== null) {
            $resourcePath = str_replace(
                '{' . 'table' . '}',
                ObjectSerializer::toPathValue($table),
                $resourcePath
            );
        }
        // path params
        if ($row_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rowId' . '}',
                ObjectSerializer::toPathValue($row_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($table_row_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($table_row_update));
            } else {
                $httpBody = $table_row_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmployeeTableRowV
     *
     * Updates a table row.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTableRowV'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateEmployeeTableRowV($company_domain, $id, $table, $row_id, $table_row_update, string $contentType = self::contentTypes['updateEmployeeTableRowV'][0])
    {
        $this->updateEmployeeTableRowVWithHttpInfo($company_domain, $id, $table, $row_id, $table_row_update, $contentType);
    }

    /**
     * Operation updateEmployeeTableRowVWithHttpInfo
     *
     * Updates a table row.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTableRowV'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmployeeTableRowVWithHttpInfo($company_domain, $id, $table, $row_id, $table_row_update, string $contentType = self::contentTypes['updateEmployeeTableRowV'][0])
    {
        $request = $this->updateEmployeeTableRowVRequest($company_domain, $id, $table, $row_id, $table_row_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateEmployeeTableRowVAsync
     *
     * Updates a table row.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTableRowV'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeTableRowVAsync($company_domain, $id, $table, $row_id, $table_row_update, string $contentType = self::contentTypes['updateEmployeeTableRowV'][0])
    {
        return $this->updateEmployeeTableRowVAsyncWithHttpInfo($company_domain, $id, $table, $row_id, $table_row_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmployeeTableRowVAsyncWithHttpInfo
     *
     * Updates a table row.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTableRowV'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeTableRowVAsyncWithHttpInfo($company_domain, $id, $table, $row_id, $table_row_update, string $contentType = self::contentTypes['updateEmployeeTableRowV'][0])
    {
        $returnType = '';
        $request = $this->updateEmployeeTableRowVRequest($company_domain, $id, $table, $row_id, $table_row_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmployeeTableRowV'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is the employee ID. (required)
     * @param  string $table Table name (required)
     * @param  string $row_id Row ID (required)
     * @param  \MySdk\Model\TableRowUpdate $table_row_update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTableRowV'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmployeeTableRowVRequest($company_domain, $id, $table, $row_id, $table_row_update, string $contentType = self::contentTypes['updateEmployeeTableRowV'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateEmployeeTableRowV'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateEmployeeTableRowV'
            );
        }

        // verify the required parameter 'table' is set
        if ($table === null || (is_array($table) && count($table) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table when calling updateEmployeeTableRowV'
            );
        }

        // verify the required parameter 'row_id' is set
        if ($row_id === null || (is_array($row_id) && count($row_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $row_id when calling updateEmployeeTableRowV'
            );
        }

        // verify the required parameter 'table_row_update' is set
        if ($table_row_update === null || (is_array($table_row_update) && count($table_row_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $table_row_update when calling updateEmployeeTableRowV'
            );
        }


        $resourcePath = '/{companyDomain}/v1_1/employees/{id}/tables/{table}/{rowId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($table !== null) {
            $resourcePath = str_replace(
                '{' . 'table' . '}',
                ObjectSerializer::toPathValue($table),
                $resourcePath
            );
        }
        // path params
        if ($row_id !== null) {
            $resourcePath = str_replace(
                '{' . 'rowId' . '}',
                ObjectSerializer::toPathValue($row_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($table_row_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($table_row_update));
            } else {
                $httpBody = $table_row_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEmployeeTrainingRecord
     *
     * Update Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to update. (required)
     * @param  \MySdk\Model\UpdateEmployeeTrainingRecordRequest $update_employee_training_record_request Training object to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingRecord
     */
    public function updateEmployeeTrainingRecord($company_domain, $employee_training_record_id, $update_employee_training_record_request, string $contentType = self::contentTypes['updateEmployeeTrainingRecord'][0])
    {
        list($response) = $this->updateEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_training_record_id, $update_employee_training_record_request, $contentType);
        return $response;
    }

    /**
     * Operation updateEmployeeTrainingRecordWithHttpInfo
     *
     * Update Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to update. (required)
     * @param  \MySdk\Model\UpdateEmployeeTrainingRecordRequest $update_employee_training_record_request Training object to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingRecord, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmployeeTrainingRecordWithHttpInfo($company_domain, $employee_training_record_id, $update_employee_training_record_request, string $contentType = self::contentTypes['updateEmployeeTrainingRecord'][0])
    {
        $request = $this->updateEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, $update_employee_training_record_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingRecord',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingRecord',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingRecord',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateEmployeeTrainingRecordAsync
     *
     * Update Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to update. (required)
     * @param  \MySdk\Model\UpdateEmployeeTrainingRecordRequest $update_employee_training_record_request Training object to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeTrainingRecordAsync($company_domain, $employee_training_record_id, $update_employee_training_record_request, string $contentType = self::contentTypes['updateEmployeeTrainingRecord'][0])
    {
        return $this->updateEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_training_record_id, $update_employee_training_record_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEmployeeTrainingRecordAsyncWithHttpInfo
     *
     * Update Employee Training Record
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to update. (required)
     * @param  \MySdk\Model\UpdateEmployeeTrainingRecordRequest $update_employee_training_record_request Training object to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEmployeeTrainingRecordAsyncWithHttpInfo($company_domain, $employee_training_record_id, $update_employee_training_record_request, string $contentType = self::contentTypes['updateEmployeeTrainingRecord'][0])
    {
        $returnType = '\MySdk\Model\TrainingRecord';
        $request = $this->updateEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, $update_employee_training_record_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEmployeeTrainingRecord'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_training_record_id The ID of the training record to update. (required)
     * @param  \MySdk\Model\UpdateEmployeeTrainingRecordRequest $update_employee_training_record_request Training object to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEmployeeTrainingRecord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEmployeeTrainingRecordRequest($company_domain, $employee_training_record_id, $update_employee_training_record_request, string $contentType = self::contentTypes['updateEmployeeTrainingRecord'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateEmployeeTrainingRecord'
            );
        }

        // verify the required parameter 'employee_training_record_id' is set
        if ($employee_training_record_id === null || (is_array($employee_training_record_id) && count($employee_training_record_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_training_record_id when calling updateEmployeeTrainingRecord'
            );
        }

        // verify the required parameter 'update_employee_training_record_request' is set
        if ($update_employee_training_record_request === null || (is_array($update_employee_training_record_request) && count($update_employee_training_record_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_employee_training_record_request when calling updateEmployeeTrainingRecord'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/record/{employeeTrainingRecordId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_training_record_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeTrainingRecordId' . '}',
                ObjectSerializer::toPathValue($employee_training_record_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_employee_training_record_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_employee_training_record_request));
            } else {
                $httpBody = $update_employee_training_record_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTrainingCategory
     *
     * Update Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to update. (required)
     * @param  \MySdk\Model\UpdateTrainingCategoryRequest $update_training_category_request Training category to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingCategory
     */
    public function updateTrainingCategory($company_domain, $training_category_id, $update_training_category_request, string $contentType = self::contentTypes['updateTrainingCategory'][0])
    {
        list($response) = $this->updateTrainingCategoryWithHttpInfo($company_domain, $training_category_id, $update_training_category_request, $contentType);
        return $response;
    }

    /**
     * Operation updateTrainingCategoryWithHttpInfo
     *
     * Update Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to update. (required)
     * @param  \MySdk\Model\UpdateTrainingCategoryRequest $update_training_category_request Training category to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingCategory'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTrainingCategoryWithHttpInfo($company_domain, $training_category_id, $update_training_category_request, string $contentType = self::contentTypes['updateTrainingCategory'][0])
    {
        $request = $this->updateTrainingCategoryRequest($company_domain, $training_category_id, $update_training_category_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingCategory',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingCategory',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingCategory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTrainingCategoryAsync
     *
     * Update Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to update. (required)
     * @param  \MySdk\Model\UpdateTrainingCategoryRequest $update_training_category_request Training category to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTrainingCategoryAsync($company_domain, $training_category_id, $update_training_category_request, string $contentType = self::contentTypes['updateTrainingCategory'][0])
    {
        return $this->updateTrainingCategoryAsyncWithHttpInfo($company_domain, $training_category_id, $update_training_category_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTrainingCategoryAsyncWithHttpInfo
     *
     * Update Training Category
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to update. (required)
     * @param  \MySdk\Model\UpdateTrainingCategoryRequest $update_training_category_request Training category to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTrainingCategoryAsyncWithHttpInfo($company_domain, $training_category_id, $update_training_category_request, string $contentType = self::contentTypes['updateTrainingCategory'][0])
    {
        $returnType = '\MySdk\Model\TrainingCategory';
        $request = $this->updateTrainingCategoryRequest($company_domain, $training_category_id, $update_training_category_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTrainingCategory'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_category_id The ID of the training category to update. (required)
     * @param  \MySdk\Model\UpdateTrainingCategoryRequest $update_training_category_request Training category to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTrainingCategoryRequest($company_domain, $training_category_id, $update_training_category_request, string $contentType = self::contentTypes['updateTrainingCategory'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateTrainingCategory'
            );
        }

        // verify the required parameter 'training_category_id' is set
        if ($training_category_id === null || (is_array($training_category_id) && count($training_category_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $training_category_id when calling updateTrainingCategory'
            );
        }

        // verify the required parameter 'update_training_category_request' is set
        if ($update_training_category_request === null || (is_array($update_training_category_request) && count($update_training_category_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_training_category_request when calling updateTrainingCategory'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/category/{trainingCategoryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($training_category_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trainingCategoryId' . '}',
                ObjectSerializer::toPathValue($training_category_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_training_category_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_training_category_request));
            } else {
                $httpBody = $update_training_category_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTrainingType
     *
     * Update Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to update. (required)
     * @param  \MySdk\Model\UpdateTrainingTypeRequest $update_training_type_request Training type object to update to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TrainingType
     */
    public function updateTrainingType($company_domain, $training_type_id, $update_training_type_request, string $contentType = self::contentTypes['updateTrainingType'][0])
    {
        list($response) = $this->updateTrainingTypeWithHttpInfo($company_domain, $training_type_id, $update_training_type_request, $contentType);
        return $response;
    }

    /**
     * Operation updateTrainingTypeWithHttpInfo
     *
     * Update Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to update. (required)
     * @param  \MySdk\Model\UpdateTrainingTypeRequest $update_training_type_request Training type object to update to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingType'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TrainingType, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTrainingTypeWithHttpInfo($company_domain, $training_type_id, $update_training_type_request, string $contentType = self::contentTypes['updateTrainingType'][0])
    {
        $request = $this->updateTrainingTypeRequest($company_domain, $training_type_id, $update_training_type_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TrainingType',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TrainingType',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TrainingType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTrainingTypeAsync
     *
     * Update Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to update. (required)
     * @param  \MySdk\Model\UpdateTrainingTypeRequest $update_training_type_request Training type object to update to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTrainingTypeAsync($company_domain, $training_type_id, $update_training_type_request, string $contentType = self::contentTypes['updateTrainingType'][0])
    {
        return $this->updateTrainingTypeAsyncWithHttpInfo($company_domain, $training_type_id, $update_training_type_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTrainingTypeAsyncWithHttpInfo
     *
     * Update Training Type
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to update. (required)
     * @param  \MySdk\Model\UpdateTrainingTypeRequest $update_training_type_request Training type object to update to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTrainingTypeAsyncWithHttpInfo($company_domain, $training_type_id, $update_training_type_request, string $contentType = self::contentTypes['updateTrainingType'][0])
    {
        $returnType = '\MySdk\Model\TrainingType';
        $request = $this->updateTrainingTypeRequest($company_domain, $training_type_id, $update_training_type_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTrainingType'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $training_type_id The ID of the training type to update. (required)
     * @param  \MySdk\Model\UpdateTrainingTypeRequest $update_training_type_request Training type object to update to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTrainingType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTrainingTypeRequest($company_domain, $training_type_id, $update_training_type_request, string $contentType = self::contentTypes['updateTrainingType'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling updateTrainingType'
            );
        }

        // verify the required parameter 'training_type_id' is set
        if ($training_type_id === null || (is_array($training_type_id) && count($training_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $training_type_id when calling updateTrainingType'
            );
        }

        // verify the required parameter 'update_training_type_request' is set
        if ($update_training_type_request === null || (is_array($update_training_type_request) && count($update_training_type_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_training_type_request when calling updateTrainingType'
            );
        }


        $resourcePath = '/{companyDomain}/v1/training/type/{trainingTypeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($training_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'trainingTypeId' . '}',
                ObjectSerializer::toPathValue($training_type_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_training_type_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_training_type_request));
            } else {
                $httpBody = $update_training_type_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadCompanyFile
     *
     * Upload Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadCompanyFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function uploadCompanyFile($company_domain, string $contentType = self::contentTypes['uploadCompanyFile'][0])
    {
        $this->uploadCompanyFileWithHttpInfo($company_domain, $contentType);
    }

    /**
     * Operation uploadCompanyFileWithHttpInfo
     *
     * Upload Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadCompanyFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadCompanyFileWithHttpInfo($company_domain, string $contentType = self::contentTypes['uploadCompanyFile'][0])
    {
        $request = $this->uploadCompanyFileRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation uploadCompanyFileAsync
     *
     * Upload Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadCompanyFileAsync($company_domain, string $contentType = self::contentTypes['uploadCompanyFile'][0])
    {
        return $this->uploadCompanyFileAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadCompanyFileAsyncWithHttpInfo
     *
     * Upload Company File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadCompanyFileAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['uploadCompanyFile'][0])
    {
        $returnType = '';
        $request = $this->uploadCompanyFileRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadCompanyFile'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadCompanyFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadCompanyFileRequest($company_domain, string $contentType = self::contentTypes['uploadCompanyFile'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling uploadCompanyFile'
            );
        }


        $resourcePath = '/{companyDomain}/v1/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadEmployeeFile
     *
     * Upload Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmployeeFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function uploadEmployeeFile($company_domain, $id, string $contentType = self::contentTypes['uploadEmployeeFile'][0])
    {
        $this->uploadEmployeeFileWithHttpInfo($company_domain, $id, $contentType);
    }

    /**
     * Operation uploadEmployeeFileWithHttpInfo
     *
     * Upload Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmployeeFile'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadEmployeeFileWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['uploadEmployeeFile'][0])
    {
        $request = $this->uploadEmployeeFileRequest($company_domain, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation uploadEmployeeFileAsync
     *
     * Upload Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadEmployeeFileAsync($company_domain, $id, string $contentType = self::contentTypes['uploadEmployeeFile'][0])
    {
        return $this->uploadEmployeeFileAsyncWithHttpInfo($company_domain, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadEmployeeFileAsyncWithHttpInfo
     *
     * Upload Employee File
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadEmployeeFileAsyncWithHttpInfo($company_domain, $id, string $contentType = self::contentTypes['uploadEmployeeFile'][0])
    {
        $returnType = '';
        $request = $this->uploadEmployeeFileRequest($company_domain, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadEmployeeFile'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmployeeFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadEmployeeFileRequest($company_domain, $id, string $contentType = self::contentTypes['uploadEmployeeFile'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling uploadEmployeeFile'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling uploadEmployeeFile'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{id}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadEmployeePhoto
     *
     * Store a new employee photo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id The ID for the employee you are setting the photo for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmployeePhoto'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function uploadEmployeePhoto($company_domain, $employee_id, string $contentType = self::contentTypes['uploadEmployeePhoto'][0])
    {
        $this->uploadEmployeePhotoWithHttpInfo($company_domain, $employee_id, $contentType);
    }

    /**
     * Operation uploadEmployeePhotoWithHttpInfo
     *
     * Store a new employee photo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id The ID for the employee you are setting the photo for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmployeePhoto'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadEmployeePhotoWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['uploadEmployeePhoto'][0])
    {
        $request = $this->uploadEmployeePhotoRequest($company_domain, $employee_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation uploadEmployeePhotoAsync
     *
     * Store a new employee photo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id The ID for the employee you are setting the photo for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmployeePhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadEmployeePhotoAsync($company_domain, $employee_id, string $contentType = self::contentTypes['uploadEmployeePhoto'][0])
    {
        return $this->uploadEmployeePhotoAsyncWithHttpInfo($company_domain, $employee_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadEmployeePhotoAsyncWithHttpInfo
     *
     * Store a new employee photo
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id The ID for the employee you are setting the photo for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmployeePhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadEmployeePhotoAsyncWithHttpInfo($company_domain, $employee_id, string $contentType = self::contentTypes['uploadEmployeePhoto'][0])
    {
        $returnType = '';
        $request = $this->uploadEmployeePhotoRequest($company_domain, $employee_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadEmployeePhoto'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $employee_id The ID for the employee you are setting the photo for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['uploadEmployeePhoto'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function uploadEmployeePhotoRequest($company_domain, $employee_id, string $contentType = self::contentTypes['uploadEmployeePhoto'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling uploadEmployeePhoto'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling uploadEmployeePhoto'
            );
        }


        $resourcePath = '/{companyDomain}/v1/employees/{employeeId}/photo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
