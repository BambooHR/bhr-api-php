<?php
/**
 * ApplicantTrackingApi
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use MySdk\ApiException;
use MySdk\Configuration;
use MySdk\FormDataProcessor;
use MySdk\HeaderSelector;
use MySdk\ObjectSerializer;

/**
 * ApplicantTrackingApi Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplicantTrackingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addNewCandidate' => [
            'multipart/form-data',
        ],
        'addNewJobOpening' => [
            'multipart/form-data',
        ],
        'getApplications' => [
            'application/json',
        ],
        'getCompanyLocations' => [
            'application/json',
        ],
        'getHiringLeads' => [
            'application/json',
        ],
        'getJobSummaries' => [
            'application/json',
        ],
        'getStatuses' => [
            'application/json',
        ],
        'postApplicantStatus' => [
            'application/json',
        ],
        'postApplicationComment' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addNewCandidate
     *
     * Add New Candidate
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $first_name The first name of the candidate. (required)
     * @param  string $last_name The last name of the candidate. (required)
     * @param  int $job_id The id of the job opening for the candidate application. (required)
     * @param  string|null $email The email address of the candidate. (optional)
     * @param  string|null $phone_number The phone number of the candidate. (optional)
     * @param  string|null $source The source of the candidate application, e.g. LinkedIn, Indeed, etc. (optional)
     * @param  string|null $address The street address of the candidate. (optional)
     * @param  string|null $city The city of the candidate. (optional)
     * @param  string|null $state The state or province of the candidate. Accepts state name, abbreviation, or ISO code. (optional)
     * @param  string|null $zip The zip code or postal code of the candidate. (optional)
     * @param  string|null $country The country of the candidate. Accepts country name or ISO code. (optional)
     * @param  string|null $linkedin_url The LinkedIn profile url of the candidate. (optional)
     * @param  string|null $date_available The available start date of the candidate with the format YYYY-MM-DD. (optional)
     * @param  string|null $desired_salary The desired salary of the candidate. (optional)
     * @param  string|null $referred_by The person or entity that referred the candidate. (optional)
     * @param  string|null $website_url The personal website, blog, or online portfolio of the candidate. (optional)
     * @param  string|null $highest_education The highest completed education level of the candidate. (optional)
     * @param  string|null $college_name The college or university of the candidate. (optional)
     * @param  string|null $references A list of references supplied by the candidate. (optional)
     * @param  string|null $resume Resume of the candidate. (optional)
     * @param  string|null $cover_letter Cover letter of the candidate. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCandidate'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addNewCandidate($company_domain, $first_name, $last_name, $job_id, $email = null, $phone_number = null, $source = null, $address = null, $city = null, $state = null, $zip = null, $country = null, $linkedin_url = null, $date_available = null, $desired_salary = null, $referred_by = null, $website_url = null, $highest_education = null, $college_name = null, $references = null, $resume = null, $cover_letter = null, string $contentType = self::contentTypes['addNewCandidate'][0])
    {
        $this->addNewCandidateWithHttpInfo($company_domain, $first_name, $last_name, $job_id, $email, $phone_number, $source, $address, $city, $state, $zip, $country, $linkedin_url, $date_available, $desired_salary, $referred_by, $website_url, $highest_education, $college_name, $references, $resume, $cover_letter, $contentType);
    }

    /**
     * Operation addNewCandidateWithHttpInfo
     *
     * Add New Candidate
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $first_name The first name of the candidate. (required)
     * @param  string $last_name The last name of the candidate. (required)
     * @param  int $job_id The id of the job opening for the candidate application. (required)
     * @param  string|null $email The email address of the candidate. (optional)
     * @param  string|null $phone_number The phone number of the candidate. (optional)
     * @param  string|null $source The source of the candidate application, e.g. LinkedIn, Indeed, etc. (optional)
     * @param  string|null $address The street address of the candidate. (optional)
     * @param  string|null $city The city of the candidate. (optional)
     * @param  string|null $state The state or province of the candidate. Accepts state name, abbreviation, or ISO code. (optional)
     * @param  string|null $zip The zip code or postal code of the candidate. (optional)
     * @param  string|null $country The country of the candidate. Accepts country name or ISO code. (optional)
     * @param  string|null $linkedin_url The LinkedIn profile url of the candidate. (optional)
     * @param  string|null $date_available The available start date of the candidate with the format YYYY-MM-DD. (optional)
     * @param  string|null $desired_salary The desired salary of the candidate. (optional)
     * @param  string|null $referred_by The person or entity that referred the candidate. (optional)
     * @param  string|null $website_url The personal website, blog, or online portfolio of the candidate. (optional)
     * @param  string|null $highest_education The highest completed education level of the candidate. (optional)
     * @param  string|null $college_name The college or university of the candidate. (optional)
     * @param  string|null $references A list of references supplied by the candidate. (optional)
     * @param  string|null $resume Resume of the candidate. (optional)
     * @param  string|null $cover_letter Cover letter of the candidate. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCandidate'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewCandidateWithHttpInfo($company_domain, $first_name, $last_name, $job_id, $email = null, $phone_number = null, $source = null, $address = null, $city = null, $state = null, $zip = null, $country = null, $linkedin_url = null, $date_available = null, $desired_salary = null, $referred_by = null, $website_url = null, $highest_education = null, $college_name = null, $references = null, $resume = null, $cover_letter = null, string $contentType = self::contentTypes['addNewCandidate'][0])
    {
        $request = $this->addNewCandidateRequest($company_domain, $first_name, $last_name, $job_id, $email, $phone_number, $source, $address, $city, $state, $zip, $country, $linkedin_url, $date_available, $desired_salary, $referred_by, $website_url, $highest_education, $college_name, $references, $resume, $cover_letter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addNewCandidateAsync
     *
     * Add New Candidate
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $first_name The first name of the candidate. (required)
     * @param  string $last_name The last name of the candidate. (required)
     * @param  int $job_id The id of the job opening for the candidate application. (required)
     * @param  string|null $email The email address of the candidate. (optional)
     * @param  string|null $phone_number The phone number of the candidate. (optional)
     * @param  string|null $source The source of the candidate application, e.g. LinkedIn, Indeed, etc. (optional)
     * @param  string|null $address The street address of the candidate. (optional)
     * @param  string|null $city The city of the candidate. (optional)
     * @param  string|null $state The state or province of the candidate. Accepts state name, abbreviation, or ISO code. (optional)
     * @param  string|null $zip The zip code or postal code of the candidate. (optional)
     * @param  string|null $country The country of the candidate. Accepts country name or ISO code. (optional)
     * @param  string|null $linkedin_url The LinkedIn profile url of the candidate. (optional)
     * @param  string|null $date_available The available start date of the candidate with the format YYYY-MM-DD. (optional)
     * @param  string|null $desired_salary The desired salary of the candidate. (optional)
     * @param  string|null $referred_by The person or entity that referred the candidate. (optional)
     * @param  string|null $website_url The personal website, blog, or online portfolio of the candidate. (optional)
     * @param  string|null $highest_education The highest completed education level of the candidate. (optional)
     * @param  string|null $college_name The college or university of the candidate. (optional)
     * @param  string|null $references A list of references supplied by the candidate. (optional)
     * @param  string|null $resume Resume of the candidate. (optional)
     * @param  string|null $cover_letter Cover letter of the candidate. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCandidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCandidateAsync($company_domain, $first_name, $last_name, $job_id, $email = null, $phone_number = null, $source = null, $address = null, $city = null, $state = null, $zip = null, $country = null, $linkedin_url = null, $date_available = null, $desired_salary = null, $referred_by = null, $website_url = null, $highest_education = null, $college_name = null, $references = null, $resume = null, $cover_letter = null, string $contentType = self::contentTypes['addNewCandidate'][0])
    {
        return $this->addNewCandidateAsyncWithHttpInfo($company_domain, $first_name, $last_name, $job_id, $email, $phone_number, $source, $address, $city, $state, $zip, $country, $linkedin_url, $date_available, $desired_salary, $referred_by, $website_url, $highest_education, $college_name, $references, $resume, $cover_letter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewCandidateAsyncWithHttpInfo
     *
     * Add New Candidate
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $first_name The first name of the candidate. (required)
     * @param  string $last_name The last name of the candidate. (required)
     * @param  int $job_id The id of the job opening for the candidate application. (required)
     * @param  string|null $email The email address of the candidate. (optional)
     * @param  string|null $phone_number The phone number of the candidate. (optional)
     * @param  string|null $source The source of the candidate application, e.g. LinkedIn, Indeed, etc. (optional)
     * @param  string|null $address The street address of the candidate. (optional)
     * @param  string|null $city The city of the candidate. (optional)
     * @param  string|null $state The state or province of the candidate. Accepts state name, abbreviation, or ISO code. (optional)
     * @param  string|null $zip The zip code or postal code of the candidate. (optional)
     * @param  string|null $country The country of the candidate. Accepts country name or ISO code. (optional)
     * @param  string|null $linkedin_url The LinkedIn profile url of the candidate. (optional)
     * @param  string|null $date_available The available start date of the candidate with the format YYYY-MM-DD. (optional)
     * @param  string|null $desired_salary The desired salary of the candidate. (optional)
     * @param  string|null $referred_by The person or entity that referred the candidate. (optional)
     * @param  string|null $website_url The personal website, blog, or online portfolio of the candidate. (optional)
     * @param  string|null $highest_education The highest completed education level of the candidate. (optional)
     * @param  string|null $college_name The college or university of the candidate. (optional)
     * @param  string|null $references A list of references supplied by the candidate. (optional)
     * @param  string|null $resume Resume of the candidate. (optional)
     * @param  string|null $cover_letter Cover letter of the candidate. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCandidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCandidateAsyncWithHttpInfo($company_domain, $first_name, $last_name, $job_id, $email = null, $phone_number = null, $source = null, $address = null, $city = null, $state = null, $zip = null, $country = null, $linkedin_url = null, $date_available = null, $desired_salary = null, $referred_by = null, $website_url = null, $highest_education = null, $college_name = null, $references = null, $resume = null, $cover_letter = null, string $contentType = self::contentTypes['addNewCandidate'][0])
    {
        $returnType = '';
        $request = $this->addNewCandidateRequest($company_domain, $first_name, $last_name, $job_id, $email, $phone_number, $source, $address, $city, $state, $zip, $country, $linkedin_url, $date_available, $desired_salary, $referred_by, $website_url, $highest_education, $college_name, $references, $resume, $cover_letter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNewCandidate'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $first_name The first name of the candidate. (required)
     * @param  string $last_name The last name of the candidate. (required)
     * @param  int $job_id The id of the job opening for the candidate application. (required)
     * @param  string|null $email The email address of the candidate. (optional)
     * @param  string|null $phone_number The phone number of the candidate. (optional)
     * @param  string|null $source The source of the candidate application, e.g. LinkedIn, Indeed, etc. (optional)
     * @param  string|null $address The street address of the candidate. (optional)
     * @param  string|null $city The city of the candidate. (optional)
     * @param  string|null $state The state or province of the candidate. Accepts state name, abbreviation, or ISO code. (optional)
     * @param  string|null $zip The zip code or postal code of the candidate. (optional)
     * @param  string|null $country The country of the candidate. Accepts country name or ISO code. (optional)
     * @param  string|null $linkedin_url The LinkedIn profile url of the candidate. (optional)
     * @param  string|null $date_available The available start date of the candidate with the format YYYY-MM-DD. (optional)
     * @param  string|null $desired_salary The desired salary of the candidate. (optional)
     * @param  string|null $referred_by The person or entity that referred the candidate. (optional)
     * @param  string|null $website_url The personal website, blog, or online portfolio of the candidate. (optional)
     * @param  string|null $highest_education The highest completed education level of the candidate. (optional)
     * @param  string|null $college_name The college or university of the candidate. (optional)
     * @param  string|null $references A list of references supplied by the candidate. (optional)
     * @param  string|null $resume Resume of the candidate. (optional)
     * @param  string|null $cover_letter Cover letter of the candidate. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCandidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewCandidateRequest($company_domain, $first_name, $last_name, $job_id, $email = null, $phone_number = null, $source = null, $address = null, $city = null, $state = null, $zip = null, $country = null, $linkedin_url = null, $date_available = null, $desired_salary = null, $referred_by = null, $website_url = null, $highest_education = null, $college_name = null, $references = null, $resume = null, $cover_letter = null, string $contentType = self::contentTypes['addNewCandidate'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addNewCandidate'
            );
        }

        // verify the required parameter 'first_name' is set
        if ($first_name === null || (is_array($first_name) && count($first_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $first_name when calling addNewCandidate'
            );
        }

        // verify the required parameter 'last_name' is set
        if ($last_name === null || (is_array($last_name) && count($last_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_name when calling addNewCandidate'
            );
        }

        // verify the required parameter 'job_id' is set
        if ($job_id === null || (is_array($job_id) && count($job_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_id when calling addNewCandidate'
            );
        }




















        $resourcePath = '/{companyDomain}/v1/applicant_tracking/application';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }

        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'first_name' => $first_name,
            'last_name' => $last_name,
            'email' => $email,
            'phone_number' => $phone_number,
            'source' => $source,
            'job_id' => $job_id,
            'address' => $address,
            'city' => $city,
            'state' => $state,
            'zip' => $zip,
            'country' => $country,
            'linkedin_url' => $linkedin_url,
            'date_available' => $date_available,
            'desired_salary' => $desired_salary,
            'referred_by' => $referred_by,
            'website_url' => $website_url,
            'highest_education' => $highest_education,
            'college_name' => $college_name,
            'references' => $references,
            'resume' => $resume,
            'cover_letter' => $cover_letter,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addNewJobOpening
     *
     * Add New Job Opening
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $posting_title The posting title of the job opening. (required)
     * @param  string $job_status The status of the job opening. (required)
     * @param  int $hiring_lead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening. (required)
     * @param  string $employment_type The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc. (required)
     * @param  string $job_description The long-form text description of the job opening. (required)
     * @param  string|null $department The department of the job opening. (optional)
     * @param  string|null $minimum_experience The minimum experience level that qualifies a candidate for the job opening. (optional)
     * @param  string|null $compensation The pay rate or compensation for the job opening. (optional)
     * @param  int|null $job_location The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location. (optional)
     * @param  string|null $application_question_resume Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required). (optional)
     * @param  string|null $application_question_address Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required). (optional)
     * @param  string|null $application_question_linkedin_url Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required). (optional)
     * @param  string|null $application_question_date_available Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required). (optional)
     * @param  string|null $application_question_desired_salary Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required). (optional)
     * @param  string|null $application_question_cover_letter Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required). (optional)
     * @param  string|null $application_question_referred_by Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required). (optional)
     * @param  string|null $application_question_website_url Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required). (optional)
     * @param  string|null $application_question_highest_education Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required). (optional)
     * @param  string|null $application_question_college Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required). (optional)
     * @param  string|null $application_question_references Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required). (optional)
     * @param  string|null $internal_job_code The internal job code for the job opening. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewJobOpening'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addNewJobOpening($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department = null, $minimum_experience = null, $compensation = null, $job_location = null, $application_question_resume = null, $application_question_address = null, $application_question_linkedin_url = null, $application_question_date_available = null, $application_question_desired_salary = null, $application_question_cover_letter = null, $application_question_referred_by = null, $application_question_website_url = null, $application_question_highest_education = null, $application_question_college = null, $application_question_references = null, $internal_job_code = null, string $contentType = self::contentTypes['addNewJobOpening'][0])
    {
        $this->addNewJobOpeningWithHttpInfo($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department, $minimum_experience, $compensation, $job_location, $application_question_resume, $application_question_address, $application_question_linkedin_url, $application_question_date_available, $application_question_desired_salary, $application_question_cover_letter, $application_question_referred_by, $application_question_website_url, $application_question_highest_education, $application_question_college, $application_question_references, $internal_job_code, $contentType);
    }

    /**
     * Operation addNewJobOpeningWithHttpInfo
     *
     * Add New Job Opening
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $posting_title The posting title of the job opening. (required)
     * @param  string $job_status The status of the job opening. (required)
     * @param  int $hiring_lead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening. (required)
     * @param  string $employment_type The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc. (required)
     * @param  string $job_description The long-form text description of the job opening. (required)
     * @param  string|null $department The department of the job opening. (optional)
     * @param  string|null $minimum_experience The minimum experience level that qualifies a candidate for the job opening. (optional)
     * @param  string|null $compensation The pay rate or compensation for the job opening. (optional)
     * @param  int|null $job_location The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location. (optional)
     * @param  string|null $application_question_resume Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required). (optional)
     * @param  string|null $application_question_address Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required). (optional)
     * @param  string|null $application_question_linkedin_url Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required). (optional)
     * @param  string|null $application_question_date_available Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required). (optional)
     * @param  string|null $application_question_desired_salary Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required). (optional)
     * @param  string|null $application_question_cover_letter Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required). (optional)
     * @param  string|null $application_question_referred_by Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required). (optional)
     * @param  string|null $application_question_website_url Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required). (optional)
     * @param  string|null $application_question_highest_education Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required). (optional)
     * @param  string|null $application_question_college Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required). (optional)
     * @param  string|null $application_question_references Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required). (optional)
     * @param  string|null $internal_job_code The internal job code for the job opening. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewJobOpening'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewJobOpeningWithHttpInfo($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department = null, $minimum_experience = null, $compensation = null, $job_location = null, $application_question_resume = null, $application_question_address = null, $application_question_linkedin_url = null, $application_question_date_available = null, $application_question_desired_salary = null, $application_question_cover_letter = null, $application_question_referred_by = null, $application_question_website_url = null, $application_question_highest_education = null, $application_question_college = null, $application_question_references = null, $internal_job_code = null, string $contentType = self::contentTypes['addNewJobOpening'][0])
    {
        $request = $this->addNewJobOpeningRequest($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department, $minimum_experience, $compensation, $job_location, $application_question_resume, $application_question_address, $application_question_linkedin_url, $application_question_date_available, $application_question_desired_salary, $application_question_cover_letter, $application_question_referred_by, $application_question_website_url, $application_question_highest_education, $application_question_college, $application_question_references, $internal_job_code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation addNewJobOpeningAsync
     *
     * Add New Job Opening
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $posting_title The posting title of the job opening. (required)
     * @param  string $job_status The status of the job opening. (required)
     * @param  int $hiring_lead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening. (required)
     * @param  string $employment_type The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc. (required)
     * @param  string $job_description The long-form text description of the job opening. (required)
     * @param  string|null $department The department of the job opening. (optional)
     * @param  string|null $minimum_experience The minimum experience level that qualifies a candidate for the job opening. (optional)
     * @param  string|null $compensation The pay rate or compensation for the job opening. (optional)
     * @param  int|null $job_location The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location. (optional)
     * @param  string|null $application_question_resume Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required). (optional)
     * @param  string|null $application_question_address Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required). (optional)
     * @param  string|null $application_question_linkedin_url Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required). (optional)
     * @param  string|null $application_question_date_available Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required). (optional)
     * @param  string|null $application_question_desired_salary Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required). (optional)
     * @param  string|null $application_question_cover_letter Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required). (optional)
     * @param  string|null $application_question_referred_by Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required). (optional)
     * @param  string|null $application_question_website_url Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required). (optional)
     * @param  string|null $application_question_highest_education Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required). (optional)
     * @param  string|null $application_question_college Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required). (optional)
     * @param  string|null $application_question_references Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required). (optional)
     * @param  string|null $internal_job_code The internal job code for the job opening. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewJobOpening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewJobOpeningAsync($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department = null, $minimum_experience = null, $compensation = null, $job_location = null, $application_question_resume = null, $application_question_address = null, $application_question_linkedin_url = null, $application_question_date_available = null, $application_question_desired_salary = null, $application_question_cover_letter = null, $application_question_referred_by = null, $application_question_website_url = null, $application_question_highest_education = null, $application_question_college = null, $application_question_references = null, $internal_job_code = null, string $contentType = self::contentTypes['addNewJobOpening'][0])
    {
        return $this->addNewJobOpeningAsyncWithHttpInfo($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department, $minimum_experience, $compensation, $job_location, $application_question_resume, $application_question_address, $application_question_linkedin_url, $application_question_date_available, $application_question_desired_salary, $application_question_cover_letter, $application_question_referred_by, $application_question_website_url, $application_question_highest_education, $application_question_college, $application_question_references, $internal_job_code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewJobOpeningAsyncWithHttpInfo
     *
     * Add New Job Opening
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $posting_title The posting title of the job opening. (required)
     * @param  string $job_status The status of the job opening. (required)
     * @param  int $hiring_lead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening. (required)
     * @param  string $employment_type The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc. (required)
     * @param  string $job_description The long-form text description of the job opening. (required)
     * @param  string|null $department The department of the job opening. (optional)
     * @param  string|null $minimum_experience The minimum experience level that qualifies a candidate for the job opening. (optional)
     * @param  string|null $compensation The pay rate or compensation for the job opening. (optional)
     * @param  int|null $job_location The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location. (optional)
     * @param  string|null $application_question_resume Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required). (optional)
     * @param  string|null $application_question_address Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required). (optional)
     * @param  string|null $application_question_linkedin_url Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required). (optional)
     * @param  string|null $application_question_date_available Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required). (optional)
     * @param  string|null $application_question_desired_salary Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required). (optional)
     * @param  string|null $application_question_cover_letter Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required). (optional)
     * @param  string|null $application_question_referred_by Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required). (optional)
     * @param  string|null $application_question_website_url Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required). (optional)
     * @param  string|null $application_question_highest_education Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required). (optional)
     * @param  string|null $application_question_college Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required). (optional)
     * @param  string|null $application_question_references Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required). (optional)
     * @param  string|null $internal_job_code The internal job code for the job opening. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewJobOpening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewJobOpeningAsyncWithHttpInfo($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department = null, $minimum_experience = null, $compensation = null, $job_location = null, $application_question_resume = null, $application_question_address = null, $application_question_linkedin_url = null, $application_question_date_available = null, $application_question_desired_salary = null, $application_question_cover_letter = null, $application_question_referred_by = null, $application_question_website_url = null, $application_question_highest_education = null, $application_question_college = null, $application_question_references = null, $internal_job_code = null, string $contentType = self::contentTypes['addNewJobOpening'][0])
    {
        $returnType = '';
        $request = $this->addNewJobOpeningRequest($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department, $minimum_experience, $compensation, $job_location, $application_question_resume, $application_question_address, $application_question_linkedin_url, $application_question_date_available, $application_question_desired_salary, $application_question_cover_letter, $application_question_referred_by, $application_question_website_url, $application_question_highest_education, $application_question_college, $application_question_references, $internal_job_code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addNewJobOpening'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $posting_title The posting title of the job opening. (required)
     * @param  string $job_status The status of the job opening. (required)
     * @param  int $hiring_lead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening. (required)
     * @param  string $employment_type The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc. (required)
     * @param  string $job_description The long-form text description of the job opening. (required)
     * @param  string|null $department The department of the job opening. (optional)
     * @param  string|null $minimum_experience The minimum experience level that qualifies a candidate for the job opening. (optional)
     * @param  string|null $compensation The pay rate or compensation for the job opening. (optional)
     * @param  int|null $job_location The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location. (optional)
     * @param  string|null $application_question_resume Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required). (optional)
     * @param  string|null $application_question_address Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required). (optional)
     * @param  string|null $application_question_linkedin_url Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required). (optional)
     * @param  string|null $application_question_date_available Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required). (optional)
     * @param  string|null $application_question_desired_salary Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required). (optional)
     * @param  string|null $application_question_cover_letter Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required). (optional)
     * @param  string|null $application_question_referred_by Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required). (optional)
     * @param  string|null $application_question_website_url Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required). (optional)
     * @param  string|null $application_question_highest_education Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required). (optional)
     * @param  string|null $application_question_college Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required). (optional)
     * @param  string|null $application_question_references Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required). (optional)
     * @param  string|null $internal_job_code The internal job code for the job opening. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewJobOpening'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewJobOpeningRequest($company_domain, $posting_title, $job_status, $hiring_lead, $employment_type, $job_description, $department = null, $minimum_experience = null, $compensation = null, $job_location = null, $application_question_resume = null, $application_question_address = null, $application_question_linkedin_url = null, $application_question_date_available = null, $application_question_desired_salary = null, $application_question_cover_letter = null, $application_question_referred_by = null, $application_question_website_url = null, $application_question_highest_education = null, $application_question_college = null, $application_question_references = null, $internal_job_code = null, string $contentType = self::contentTypes['addNewJobOpening'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling addNewJobOpening'
            );
        }

        // verify the required parameter 'posting_title' is set
        if ($posting_title === null || (is_array($posting_title) && count($posting_title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $posting_title when calling addNewJobOpening'
            );
        }

        // verify the required parameter 'job_status' is set
        if ($job_status === null || (is_array($job_status) && count($job_status) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_status when calling addNewJobOpening'
            );
        }

        // verify the required parameter 'hiring_lead' is set
        if ($hiring_lead === null || (is_array($hiring_lead) && count($hiring_lead) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $hiring_lead when calling addNewJobOpening'
            );
        }

        // verify the required parameter 'employment_type' is set
        if ($employment_type === null || (is_array($employment_type) && count($employment_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employment_type when calling addNewJobOpening'
            );
        }

        // verify the required parameter 'job_description' is set
        if ($job_description === null || (is_array($job_description) && count($job_description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $job_description when calling addNewJobOpening'
            );
        }


















        $resourcePath = '/{companyDomain}/v1/applicant_tracking/job_opening';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }

        // form params
        $formDataProcessor = new FormDataProcessor();

        $formData = $formDataProcessor->prepare([
            'posting_title' => $posting_title,
            'job_status' => $job_status,
            'hiring_lead' => $hiring_lead,
            'department' => $department,
            'employment_type' => $employment_type,
            'minimum_experience' => $minimum_experience,
            'compensation' => $compensation,
            'job_location' => $job_location,
            'job_description' => $job_description,
            'application_question_resume' => $application_question_resume,
            'application_question_address' => $application_question_address,
            'application_question_linkedin_url' => $application_question_linkedin_url,
            'application_question_date_available' => $application_question_date_available,
            'application_question_desired_salary' => $application_question_desired_salary,
            'application_question_cover_letter' => $application_question_cover_letter,
            'application_question_referred_by' => $application_question_referred_by,
            'application_question_website_url' => $application_question_website_url,
            'application_question_highest_education' => $application_question_highest_education,
            'application_question_college' => $application_question_college,
            'application_question_references' => $application_question_references,
            'internal_job_code' => $internal_job_code,
        ]);

        $formParams = $formDataProcessor->flatten($formData);
        $multipart = $formDataProcessor->has_file;

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getApplications
     *
     * Get Applications
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number (optional)
     * @param  int|null $job_id A Job Id to limit results to (optional)
     * @param  int|null $application_status_id Application status id to filter by. (optional)
     * @param  string|null $application_status A list of application status groups to filter by. (optional)
     * @param  string|null $job_status_groups A list of position status groups to filter by. (optional)
     * @param  string|null $search_string A general search criteria by which to find applications. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  \DateTime|null $new_since Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetApplications200Response
     */
    public function getApplications($company_domain, $page = null, $job_id = null, $application_status_id = null, $application_status = null, $job_status_groups = null, $search_string = null, $sort_by = null, $sort_order = null, $new_since = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        list($response) = $this->getApplicationsWithHttpInfo($company_domain, $page, $job_id, $application_status_id, $application_status, $job_status_groups, $search_string, $sort_by, $sort_order, $new_since, $contentType);
        return $response;
    }

    /**
     * Operation getApplicationsWithHttpInfo
     *
     * Get Applications
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number (optional)
     * @param  int|null $job_id A Job Id to limit results to (optional)
     * @param  int|null $application_status_id Application status id to filter by. (optional)
     * @param  string|null $application_status A list of application status groups to filter by. (optional)
     * @param  string|null $job_status_groups A list of position status groups to filter by. (optional)
     * @param  string|null $search_string A general search criteria by which to find applications. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  \DateTime|null $new_since Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetApplications200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getApplicationsWithHttpInfo($company_domain, $page = null, $job_id = null, $application_status_id = null, $application_status = null, $job_status_groups = null, $search_string = null, $sort_by = null, $sort_order = null, $new_since = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        $request = $this->getApplicationsRequest($company_domain, $page, $job_id, $application_status_id, $application_status, $job_status_groups, $search_string, $sort_by, $sort_order, $new_since, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetApplications200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetApplications200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetApplications200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getApplicationsAsync
     *
     * Get Applications
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number (optional)
     * @param  int|null $job_id A Job Id to limit results to (optional)
     * @param  int|null $application_status_id Application status id to filter by. (optional)
     * @param  string|null $application_status A list of application status groups to filter by. (optional)
     * @param  string|null $job_status_groups A list of position status groups to filter by. (optional)
     * @param  string|null $search_string A general search criteria by which to find applications. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  \DateTime|null $new_since Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsAsync($company_domain, $page = null, $job_id = null, $application_status_id = null, $application_status = null, $job_status_groups = null, $search_string = null, $sort_by = null, $sort_order = null, $new_since = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        return $this->getApplicationsAsyncWithHttpInfo($company_domain, $page, $job_id, $application_status_id, $application_status, $job_status_groups, $search_string, $sort_by, $sort_order, $new_since, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getApplicationsAsyncWithHttpInfo
     *
     * Get Applications
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number (optional)
     * @param  int|null $job_id A Job Id to limit results to (optional)
     * @param  int|null $application_status_id Application status id to filter by. (optional)
     * @param  string|null $application_status A list of application status groups to filter by. (optional)
     * @param  string|null $job_status_groups A list of position status groups to filter by. (optional)
     * @param  string|null $search_string A general search criteria by which to find applications. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  \DateTime|null $new_since Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getApplicationsAsyncWithHttpInfo($company_domain, $page = null, $job_id = null, $application_status_id = null, $application_status = null, $job_status_groups = null, $search_string = null, $sort_by = null, $sort_order = null, $new_since = null, string $contentType = self::contentTypes['getApplications'][0])
    {
        $returnType = '\MySdk\Model\GetApplications200Response';
        $request = $this->getApplicationsRequest($company_domain, $page, $job_id, $application_status_id, $application_status, $job_status_groups, $search_string, $sort_by, $sort_order, $new_since, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getApplications'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int|null $page The page number (optional)
     * @param  int|null $job_id A Job Id to limit results to (optional)
     * @param  int|null $application_status_id Application status id to filter by. (optional)
     * @param  string|null $application_status A list of application status groups to filter by. (optional)
     * @param  string|null $job_status_groups A list of position status groups to filter by. (optional)
     * @param  string|null $search_string A general search criteria by which to find applications. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  \DateTime|null $new_since Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getApplications'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getApplicationsRequest($company_domain, $page = null, $job_id = null, $application_status_id = null, $application_status = null, $job_status_groups = null, $search_string = null, $sort_by = null, $sort_order = null, $new_since = null, string $contentType = self::contentTypes['getApplications'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getApplications'
            );
        }











        $resourcePath = '/{companyDomain}/v1/applicant_tracking/applications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $job_id,
            'jobId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $application_status_id,
            'applicationStatusId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $application_status,
            'applicationStatus', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $job_status_groups,
            'jobStatusGroups', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_string,
            'searchString', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $new_since,
            'newSince', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyLocations
     *
     * Get Company Locations
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyLocations'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetCompanyLocations200ResponseInner[]
     */
    public function getCompanyLocations($company_domain, string $contentType = self::contentTypes['getCompanyLocations'][0])
    {
        list($response) = $this->getCompanyLocationsWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyLocationsWithHttpInfo
     *
     * Get Company Locations
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyLocations'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetCompanyLocations200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyLocationsWithHttpInfo($company_domain, string $contentType = self::contentTypes['getCompanyLocations'][0])
    {
        $request = $this->getCompanyLocationsRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetCompanyLocations200ResponseInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetCompanyLocations200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetCompanyLocations200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getCompanyLocationsAsync
     *
     * Get Company Locations
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyLocationsAsync($company_domain, string $contentType = self::contentTypes['getCompanyLocations'][0])
    {
        return $this->getCompanyLocationsAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyLocationsAsyncWithHttpInfo
     *
     * Get Company Locations
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyLocationsAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getCompanyLocations'][0])
    {
        $returnType = '\MySdk\Model\GetCompanyLocations200ResponseInner[]';
        $request = $this->getCompanyLocationsRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyLocations'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyLocationsRequest($company_domain, string $contentType = self::contentTypes['getCompanyLocations'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getCompanyLocations'
            );
        }


        $resourcePath = '/{companyDomain}/v1/applicant_tracking/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHiringLeads
     *
     * Get Hiring Leads
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHiringLeads'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\GetHiringLeads200ResponseInner[]
     */
    public function getHiringLeads($company_domain, string $contentType = self::contentTypes['getHiringLeads'][0])
    {
        list($response) = $this->getHiringLeadsWithHttpInfo($company_domain, $contentType);
        return $response;
    }

    /**
     * Operation getHiringLeadsWithHttpInfo
     *
     * Get Hiring Leads
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHiringLeads'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\GetHiringLeads200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHiringLeadsWithHttpInfo($company_domain, string $contentType = self::contentTypes['getHiringLeads'][0])
    {
        $request = $this->getHiringLeadsRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\GetHiringLeads200ResponseInner[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\GetHiringLeads200ResponseInner[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\GetHiringLeads200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getHiringLeadsAsync
     *
     * Get Hiring Leads
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHiringLeads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHiringLeadsAsync($company_domain, string $contentType = self::contentTypes['getHiringLeads'][0])
    {
        return $this->getHiringLeadsAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHiringLeadsAsyncWithHttpInfo
     *
     * Get Hiring Leads
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHiringLeads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHiringLeadsAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getHiringLeads'][0])
    {
        $returnType = '\MySdk\Model\GetHiringLeads200ResponseInner[]';
        $request = $this->getHiringLeadsRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHiringLeads'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHiringLeads'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHiringLeadsRequest($company_domain, string $contentType = self::contentTypes['getHiringLeads'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getHiringLeads'
            );
        }


        $resourcePath = '/{companyDomain}/v1/applicant_tracking/hiring_leads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJobSummaries
     *
     * Get Job Summaries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $status_groups A list of status groups to filter positions by. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobSummaries'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getJobSummaries($company_domain, $status_groups = null, $sort_by = null, $sort_order = null, string $contentType = self::contentTypes['getJobSummaries'][0])
    {
        $this->getJobSummariesWithHttpInfo($company_domain, $status_groups, $sort_by, $sort_order, $contentType);
    }

    /**
     * Operation getJobSummariesWithHttpInfo
     *
     * Get Job Summaries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $status_groups A list of status groups to filter positions by. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobSummaries'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobSummariesWithHttpInfo($company_domain, $status_groups = null, $sort_by = null, $sort_order = null, string $contentType = self::contentTypes['getJobSummaries'][0])
    {
        $request = $this->getJobSummariesRequest($company_domain, $status_groups, $sort_by, $sort_order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getJobSummariesAsync
     *
     * Get Job Summaries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $status_groups A list of status groups to filter positions by. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobSummariesAsync($company_domain, $status_groups = null, $sort_by = null, $sort_order = null, string $contentType = self::contentTypes['getJobSummaries'][0])
    {
        return $this->getJobSummariesAsyncWithHttpInfo($company_domain, $status_groups, $sort_by, $sort_order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJobSummariesAsyncWithHttpInfo
     *
     * Get Job Summaries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $status_groups A list of status groups to filter positions by. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJobSummariesAsyncWithHttpInfo($company_domain, $status_groups = null, $sort_by = null, $sort_order = null, string $contentType = self::contentTypes['getJobSummaries'][0])
    {
        $returnType = '';
        $request = $this->getJobSummariesRequest($company_domain, $status_groups, $sort_by, $sort_order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJobSummaries'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string|null $status_groups A list of status groups to filter positions by. (optional)
     * @param  string|null $sort_by A specific field to sort the results by. (optional)
     * @param  string|null $sort_order Order by which to sort results. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getJobSummaries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getJobSummariesRequest($company_domain, $status_groups = null, $sort_by = null, $sort_order = null, string $contentType = self::contentTypes['getJobSummaries'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getJobSummaries'
            );
        }





        $resourcePath = '/{companyDomain}/v1/applicant_tracking/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_groups,
            'statusGroups', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStatuses
     *
     * Get Statuses
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatuses'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getStatuses($company_domain, string $contentType = self::contentTypes['getStatuses'][0])
    {
        $this->getStatusesWithHttpInfo($company_domain, $contentType);
    }

    /**
     * Operation getStatusesWithHttpInfo
     *
     * Get Statuses
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatuses'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStatusesWithHttpInfo($company_domain, string $contentType = self::contentTypes['getStatuses'][0])
    {
        $request = $this->getStatusesRequest($company_domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation getStatusesAsync
     *
     * Get Statuses
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusesAsync($company_domain, string $contentType = self::contentTypes['getStatuses'][0])
    {
        return $this->getStatusesAsyncWithHttpInfo($company_domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStatusesAsyncWithHttpInfo
     *
     * Get Statuses
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStatusesAsyncWithHttpInfo($company_domain, string $contentType = self::contentTypes['getStatuses'][0])
    {
        $returnType = '';
        $request = $this->getStatusesRequest($company_domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStatuses'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStatusesRequest($company_domain, string $contentType = self::contentTypes['getStatuses'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling getStatuses'
            );
        }


        $resourcePath = '/{companyDomain}/v1/applicant_tracking/statuses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicantStatus
     *
     * Change Applicant&#39;s Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicantStatusRequest $post_applicant_status_request Sample Post Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicantStatus'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postApplicantStatus($company_domain, $application_id, $post_applicant_status_request, string $contentType = self::contentTypes['postApplicantStatus'][0])
    {
        $this->postApplicantStatusWithHttpInfo($company_domain, $application_id, $post_applicant_status_request, $contentType);
    }

    /**
     * Operation postApplicantStatusWithHttpInfo
     *
     * Change Applicant&#39;s Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicantStatusRequest $post_applicant_status_request Sample Post Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicantStatus'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicantStatusWithHttpInfo($company_domain, $application_id, $post_applicant_status_request, string $contentType = self::contentTypes['postApplicantStatus'][0])
    {
        $request = $this->postApplicantStatusRequest($company_domain, $application_id, $post_applicant_status_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation postApplicantStatusAsync
     *
     * Change Applicant&#39;s Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicantStatusRequest $post_applicant_status_request Sample Post Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicantStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicantStatusAsync($company_domain, $application_id, $post_applicant_status_request, string $contentType = self::contentTypes['postApplicantStatus'][0])
    {
        return $this->postApplicantStatusAsyncWithHttpInfo($company_domain, $application_id, $post_applicant_status_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicantStatusAsyncWithHttpInfo
     *
     * Change Applicant&#39;s Status
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicantStatusRequest $post_applicant_status_request Sample Post Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicantStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicantStatusAsyncWithHttpInfo($company_domain, $application_id, $post_applicant_status_request, string $contentType = self::contentTypes['postApplicantStatus'][0])
    {
        $returnType = '';
        $request = $this->postApplicantStatusRequest($company_domain, $application_id, $post_applicant_status_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicantStatus'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicantStatusRequest $post_applicant_status_request Sample Post Data. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicantStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicantStatusRequest($company_domain, $application_id, $post_applicant_status_request, string $contentType = self::contentTypes['postApplicantStatus'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling postApplicantStatus'
            );
        }

        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling postApplicantStatus'
            );
        }

        // verify the required parameter 'post_applicant_status_request' is set
        if ($post_applicant_status_request === null || (is_array($post_applicant_status_request) && count($post_applicant_status_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_applicant_status_request when calling postApplicantStatus'
            );
        }


        $resourcePath = '/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_applicant_status_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_applicant_status_request));
            } else {
                $httpBody = $post_applicant_status_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postApplicationComment
     *
     * Add Application Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicationCommentRequest $post_application_comment_request Comment object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationComment'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postApplicationComment($company_domain, $application_id, $post_application_comment_request, string $contentType = self::contentTypes['postApplicationComment'][0])
    {
        $this->postApplicationCommentWithHttpInfo($company_domain, $application_id, $post_application_comment_request, $contentType);
    }

    /**
     * Operation postApplicationCommentWithHttpInfo
     *
     * Add Application Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicationCommentRequest $post_application_comment_request Comment object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationComment'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postApplicationCommentWithHttpInfo($company_domain, $application_id, $post_application_comment_request, string $contentType = self::contentTypes['postApplicationComment'][0])
    {
        $request = $this->postApplicationCommentRequest($company_domain, $application_id, $post_application_comment_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation postApplicationCommentAsync
     *
     * Add Application Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicationCommentRequest $post_application_comment_request Comment object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationCommentAsync($company_domain, $application_id, $post_application_comment_request, string $contentType = self::contentTypes['postApplicationComment'][0])
    {
        return $this->postApplicationCommentAsyncWithHttpInfo($company_domain, $application_id, $post_application_comment_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postApplicationCommentAsyncWithHttpInfo
     *
     * Add Application Comment
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicationCommentRequest $post_application_comment_request Comment object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postApplicationCommentAsyncWithHttpInfo($company_domain, $application_id, $post_application_comment_request, string $contentType = self::contentTypes['postApplicationComment'][0])
    {
        $returnType = '';
        $request = $this->postApplicationCommentRequest($company_domain, $application_id, $post_application_comment_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postApplicationComment'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $application_id The ID of the application to add a comment to. (required)
     * @param  \MySdk\Model\PostApplicationCommentRequest $post_application_comment_request Comment object to post (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postApplicationComment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postApplicationCommentRequest($company_domain, $application_id, $post_application_comment_request, string $contentType = self::contentTypes['postApplicationComment'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling postApplicationComment'
            );
        }

        // verify the required parameter 'application_id' is set
        if ($application_id === null || (is_array($application_id) && count($application_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $application_id when calling postApplicationComment'
            );
        }

        // verify the required parameter 'post_application_comment_request' is set
        if ($post_application_comment_request === null || (is_array($post_application_comment_request) && count($post_application_comment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_application_comment_request when calling postApplicationComment'
            );
        }


        $resourcePath = '/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($application_id !== null) {
            $resourcePath = str_replace(
                '{' . 'applicationId' . '}',
                ObjectSerializer::toPathValue($application_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($post_application_comment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($post_application_comment_request));
            } else {
                $httpBody = $post_application_comment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
