<?php
/**
 * TimeTrackingApi
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use MySdk\ApiException;
use MySdk\Configuration;
use MySdk\FormDataProcessor;
use MySdk\HeaderSelector;
use MySdk\ObjectSerializer;

/**
 * TimeTrackingApi Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TimeTrackingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'b86bb5db603786dfc98c8f6a7bb1a218' => [
            'application/json',
        ],
        'call149e00955713fb486cd7a81dd6ee31aa' => [
            'application/json',
        ],
        'call88ef63550f43537c6b3bfaa03d51d95d' => [
            'application/json',
        ],
        'call910252128bfbd9d42e50f9dc31bb6120' => [
            'application/json',
        ],
        'call9a6d5660f03eadcf705c808a1f44b8c4' => [
            'application/json',
        ],
        'db65bacaf29686d9c3b1296f6047a065' => [
            'application/json',
        ],
        'dcb62a5d1780635153b978462f9debd0' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation b86bb5db603786dfc98c8f6a7bb1a218
     *
     * Add Timesheet Clock-In Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock in. (required)
     * @param  \MySdk\Model\B86bb5db603786dfc98c8f6a7bb1a218Request|null $b86bb5db603786dfc98c8f6a7bb1a218_request b86bb5db603786dfc98c8f6a7bb1a218_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TimesheetEntryInfoApiTransformer|mixed|mixed|mixed|mixed|mixed
     */
    public function b86bb5db603786dfc98c8f6a7bb1a218($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request = null, string $contentType = self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'][0])
    {
        list($response) = $this->b86bb5db603786dfc98c8f6a7bb1a218WithHttpInfo($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request, $contentType);
        return $response;
    }

    /**
     * Operation b86bb5db603786dfc98c8f6a7bb1a218WithHttpInfo
     *
     * Add Timesheet Clock-In Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock in. (required)
     * @param  \MySdk\Model\B86bb5db603786dfc98c8f6a7bb1a218Request|null $b86bb5db603786dfc98c8f6a7bb1a218_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TimesheetEntryInfoApiTransformer|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function b86bb5db603786dfc98c8f6a7bb1a218WithHttpInfo($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request = null, string $contentType = self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'][0])
    {
        $request = $this->b86bb5db603786dfc98c8f6a7bb1a218Request($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation b86bb5db603786dfc98c8f6a7bb1a218Async
     *
     * Add Timesheet Clock-In Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock in. (required)
     * @param  \MySdk\Model\B86bb5db603786dfc98c8f6a7bb1a218Request|null $b86bb5db603786dfc98c8f6a7bb1a218_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function b86bb5db603786dfc98c8f6a7bb1a218Async($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request = null, string $contentType = self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'][0])
    {
        return $this->b86bb5db603786dfc98c8f6a7bb1a218AsyncWithHttpInfo($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation b86bb5db603786dfc98c8f6a7bb1a218AsyncWithHttpInfo
     *
     * Add Timesheet Clock-In Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock in. (required)
     * @param  \MySdk\Model\B86bb5db603786dfc98c8f6a7bb1a218Request|null $b86bb5db603786dfc98c8f6a7bb1a218_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function b86bb5db603786dfc98c8f6a7bb1a218AsyncWithHttpInfo($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request = null, string $contentType = self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'][0])
    {
        $returnType = '\MySdk\Model\TimesheetEntryInfoApiTransformer';
        $request = $this->b86bb5db603786dfc98c8f6a7bb1a218Request($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'b86bb5db603786dfc98c8f6a7bb1a218'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock in. (required)
     * @param  \MySdk\Model\B86bb5db603786dfc98c8f6a7bb1a218Request|null $b86bb5db603786dfc98c8f6a7bb1a218_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function b86bb5db603786dfc98c8f6a7bb1a218Request($company_domain, $employee_id, $b86bb5db603786dfc98c8f6a7bb1a218_request = null, string $contentType = self::contentTypes['b86bb5db603786dfc98c8f6a7bb1a218'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling b86bb5db603786dfc98c8f6a7bb1a218'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling b86bb5db603786dfc98c8f6a7bb1a218'
            );
        }



        $resourcePath = '/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_in';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($b86bb5db603786dfc98c8f6a7bb1a218_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($b86bb5db603786dfc98c8f6a7bb1a218_request));
            } else {
                $httpBody = $b86bb5db603786dfc98c8f6a7bb1a218_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call149e00955713fb486cd7a81dd6ee31aa
     *
     * Add/Edit Timesheet Clock Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\149e00955713fb486cd7a81dd6ee31aaRequest|null $_149e00955713fb486cd7a81dd6ee31aa_request _149e00955713fb486cd7a81dd6ee31aa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TimesheetEntryInfoApiTransformer[]|mixed|mixed|mixed|mixed|mixed|mixed
     */
    public function call149e00955713fb486cd7a81dd6ee31aa($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request = null, string $contentType = self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'][0])
    {
        list($response) = $this->call149e00955713fb486cd7a81dd6ee31aaWithHttpInfo($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request, $contentType);
        return $response;
    }

    /**
     * Operation call149e00955713fb486cd7a81dd6ee31aaWithHttpInfo
     *
     * Add/Edit Timesheet Clock Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\149e00955713fb486cd7a81dd6ee31aaRequest|null $_149e00955713fb486cd7a81dd6ee31aa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TimesheetEntryInfoApiTransformer[]|mixed|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function call149e00955713fb486cd7a81dd6ee31aaWithHttpInfo($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request = null, string $contentType = self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'][0])
    {
        $request = $this->call149e00955713fb486cd7a81dd6ee31aaRequest($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call149e00955713fb486cd7a81dd6ee31aaAsync
     *
     * Add/Edit Timesheet Clock Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\149e00955713fb486cd7a81dd6ee31aaRequest|null $_149e00955713fb486cd7a81dd6ee31aa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call149e00955713fb486cd7a81dd6ee31aaAsync($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request = null, string $contentType = self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'][0])
    {
        return $this->call149e00955713fb486cd7a81dd6ee31aaAsyncWithHttpInfo($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call149e00955713fb486cd7a81dd6ee31aaAsyncWithHttpInfo
     *
     * Add/Edit Timesheet Clock Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\149e00955713fb486cd7a81dd6ee31aaRequest|null $_149e00955713fb486cd7a81dd6ee31aa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call149e00955713fb486cd7a81dd6ee31aaAsyncWithHttpInfo($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request = null, string $contentType = self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'][0])
    {
        $returnType = '\MySdk\Model\TimesheetEntryInfoApiTransformer[]';
        $request = $this->call149e00955713fb486cd7a81dd6ee31aaRequest($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call149e00955713fb486cd7a81dd6ee31aa'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\149e00955713fb486cd7a81dd6ee31aaRequest|null $_149e00955713fb486cd7a81dd6ee31aa_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call149e00955713fb486cd7a81dd6ee31aaRequest($company_domain, $_149e00955713fb486cd7a81dd6ee31aa_request = null, string $contentType = self::contentTypes['call149e00955713fb486cd7a81dd6ee31aa'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call149e00955713fb486cd7a81dd6ee31aa'
            );
        }



        $resourcePath = '/{companyDomain}/v1/time_tracking/clock_entries/store';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_149e00955713fb486cd7a81dd6ee31aa_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_149e00955713fb486cd7a81dd6ee31aa_request));
            } else {
                $httpBody = $_149e00955713fb486cd7a81dd6ee31aa_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call88ef63550f43537c6b3bfaa03d51d95d
     *
     * Add Timesheet Clock-Out Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock out. (required)
     * @param  \MySdk\Model\88ef63550f43537c6b3bfaa03d51d95dRequest|null $_88ef63550f43537c6b3bfaa03d51d95d_request _88ef63550f43537c6b3bfaa03d51d95d_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TimesheetEntryInfoApiTransformer|mixed|mixed|mixed|mixed|mixed|mixed
     */
    public function call88ef63550f43537c6b3bfaa03d51d95d($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request = null, string $contentType = self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'][0])
    {
        list($response) = $this->call88ef63550f43537c6b3bfaa03d51d95dWithHttpInfo($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request, $contentType);
        return $response;
    }

    /**
     * Operation call88ef63550f43537c6b3bfaa03d51d95dWithHttpInfo
     *
     * Add Timesheet Clock-Out Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock out. (required)
     * @param  \MySdk\Model\88ef63550f43537c6b3bfaa03d51d95dRequest|null $_88ef63550f43537c6b3bfaa03d51d95d_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TimesheetEntryInfoApiTransformer|mixed|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function call88ef63550f43537c6b3bfaa03d51d95dWithHttpInfo($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request = null, string $contentType = self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'][0])
    {
        $request = $this->call88ef63550f43537c6b3bfaa03d51d95dRequest($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call88ef63550f43537c6b3bfaa03d51d95dAsync
     *
     * Add Timesheet Clock-Out Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock out. (required)
     * @param  \MySdk\Model\88ef63550f43537c6b3bfaa03d51d95dRequest|null $_88ef63550f43537c6b3bfaa03d51d95d_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call88ef63550f43537c6b3bfaa03d51d95dAsync($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request = null, string $contentType = self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'][0])
    {
        return $this->call88ef63550f43537c6b3bfaa03d51d95dAsyncWithHttpInfo($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call88ef63550f43537c6b3bfaa03d51d95dAsyncWithHttpInfo
     *
     * Add Timesheet Clock-Out Entry
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock out. (required)
     * @param  \MySdk\Model\88ef63550f43537c6b3bfaa03d51d95dRequest|null $_88ef63550f43537c6b3bfaa03d51d95d_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call88ef63550f43537c6b3bfaa03d51d95dAsyncWithHttpInfo($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request = null, string $contentType = self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'][0])
    {
        $returnType = '\MySdk\Model\TimesheetEntryInfoApiTransformer';
        $request = $this->call88ef63550f43537c6b3bfaa03d51d95dRequest($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call88ef63550f43537c6b3bfaa03d51d95d'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  int $employee_id ID of the employee to clock out. (required)
     * @param  \MySdk\Model\88ef63550f43537c6b3bfaa03d51d95dRequest|null $_88ef63550f43537c6b3bfaa03d51d95d_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call88ef63550f43537c6b3bfaa03d51d95dRequest($company_domain, $employee_id, $_88ef63550f43537c6b3bfaa03d51d95d_request = null, string $contentType = self::contentTypes['call88ef63550f43537c6b3bfaa03d51d95d'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call88ef63550f43537c6b3bfaa03d51d95d'
            );
        }

        // verify the required parameter 'employee_id' is set
        if ($employee_id === null || (is_array($employee_id) && count($employee_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $employee_id when calling call88ef63550f43537c6b3bfaa03d51d95d'
            );
        }



        $resourcePath = '/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_out';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }
        // path params
        if ($employee_id !== null) {
            $resourcePath = str_replace(
                '{' . 'employeeId' . '}',
                ObjectSerializer::toPathValue($employee_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_88ef63550f43537c6b3bfaa03d51d95d_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_88ef63550f43537c6b3bfaa03d51d95d_request));
            } else {
                $httpBody = $_88ef63550f43537c6b3bfaa03d51d95d_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call910252128bfbd9d42e50f9dc31bb6120
     *
     * Add/Edit Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\910252128bfbd9d42e50f9dc31bb6120Request|null $_910252128bfbd9d42e50f9dc31bb6120_request _910252128bfbd9d42e50f9dc31bb6120_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\TimesheetEntryInfoApiTransformer[]|mixed|mixed|mixed|mixed|mixed|mixed
     */
    public function call910252128bfbd9d42e50f9dc31bb6120($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request = null, string $contentType = self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'][0])
    {
        list($response) = $this->call910252128bfbd9d42e50f9dc31bb6120WithHttpInfo($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request, $contentType);
        return $response;
    }

    /**
     * Operation call910252128bfbd9d42e50f9dc31bb6120WithHttpInfo
     *
     * Add/Edit Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\910252128bfbd9d42e50f9dc31bb6120Request|null $_910252128bfbd9d42e50f9dc31bb6120_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\TimesheetEntryInfoApiTransformer[]|mixed|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function call910252128bfbd9d42e50f9dc31bb6120WithHttpInfo($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request = null, string $contentType = self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'][0])
    {
        $request = $this->call910252128bfbd9d42e50f9dc31bb6120Request($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\TimesheetEntryInfoApiTransformer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call910252128bfbd9d42e50f9dc31bb6120Async
     *
     * Add/Edit Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\910252128bfbd9d42e50f9dc31bb6120Request|null $_910252128bfbd9d42e50f9dc31bb6120_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call910252128bfbd9d42e50f9dc31bb6120Async($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request = null, string $contentType = self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'][0])
    {
        return $this->call910252128bfbd9d42e50f9dc31bb6120AsyncWithHttpInfo($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call910252128bfbd9d42e50f9dc31bb6120AsyncWithHttpInfo
     *
     * Add/Edit Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\910252128bfbd9d42e50f9dc31bb6120Request|null $_910252128bfbd9d42e50f9dc31bb6120_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call910252128bfbd9d42e50f9dc31bb6120AsyncWithHttpInfo($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request = null, string $contentType = self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'][0])
    {
        $returnType = '\MySdk\Model\TimesheetEntryInfoApiTransformer[]';
        $request = $this->call910252128bfbd9d42e50f9dc31bb6120Request($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call910252128bfbd9d42e50f9dc31bb6120'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\910252128bfbd9d42e50f9dc31bb6120Request|null $_910252128bfbd9d42e50f9dc31bb6120_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call910252128bfbd9d42e50f9dc31bb6120Request($company_domain, $_910252128bfbd9d42e50f9dc31bb6120_request = null, string $contentType = self::contentTypes['call910252128bfbd9d42e50f9dc31bb6120'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call910252128bfbd9d42e50f9dc31bb6120'
            );
        }



        $resourcePath = '/{companyDomain}/v1/time_tracking/hour_entries/store';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($_910252128bfbd9d42e50f9dc31bb6120_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($_910252128bfbd9d42e50f9dc31bb6120_request));
            } else {
                $httpBody = $_910252128bfbd9d42e50f9dc31bb6120_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation call9a6d5660f03eadcf705c808a1f44b8c4
     *
     * Get Timesheet Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days. (required)
     * @param  \DateTime $end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days. (required)
     * @param  string|null $employee_ids A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \MySdk\Model\EmployeeTimesheetEntryTransformer[]|mixed|mixed|mixed|mixed
     */
    public function call9a6d5660f03eadcf705c808a1f44b8c4($company_domain, $start, $end, $employee_ids = null, string $contentType = self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'][0])
    {
        list($response) = $this->call9a6d5660f03eadcf705c808a1f44b8c4WithHttpInfo($company_domain, $start, $end, $employee_ids, $contentType);
        return $response;
    }

    /**
     * Operation call9a6d5660f03eadcf705c808a1f44b8c4WithHttpInfo
     *
     * Get Timesheet Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days. (required)
     * @param  \DateTime $end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days. (required)
     * @param  string|null $employee_ids A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \MySdk\Model\EmployeeTimesheetEntryTransformer[]|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function call9a6d5660f03eadcf705c808a1f44b8c4WithHttpInfo($company_domain, $start, $end, $employee_ids = null, string $contentType = self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'][0])
    {
        $request = $this->call9a6d5660f03eadcf705c808a1f44b8c4Request($company_domain, $start, $end, $employee_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\MySdk\Model\EmployeeTimesheetEntryTransformer[]',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\MySdk\Model\EmployeeTimesheetEntryTransformer[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MySdk\Model\EmployeeTimesheetEntryTransformer[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation call9a6d5660f03eadcf705c808a1f44b8c4Async
     *
     * Get Timesheet Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days. (required)
     * @param  \DateTime $end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days. (required)
     * @param  string|null $employee_ids A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call9a6d5660f03eadcf705c808a1f44b8c4Async($company_domain, $start, $end, $employee_ids = null, string $contentType = self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'][0])
    {
        return $this->call9a6d5660f03eadcf705c808a1f44b8c4AsyncWithHttpInfo($company_domain, $start, $end, $employee_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation call9a6d5660f03eadcf705c808a1f44b8c4AsyncWithHttpInfo
     *
     * Get Timesheet Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days. (required)
     * @param  \DateTime $end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days. (required)
     * @param  string|null $employee_ids A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function call9a6d5660f03eadcf705c808a1f44b8c4AsyncWithHttpInfo($company_domain, $start, $end, $employee_ids = null, string $contentType = self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'][0])
    {
        $returnType = '\MySdk\Model\EmployeeTimesheetEntryTransformer[]';
        $request = $this->call9a6d5660f03eadcf705c808a1f44b8c4Request($company_domain, $start, $end, $employee_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'call9a6d5660f03eadcf705c808a1f44b8c4'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \DateTime $start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days. (required)
     * @param  \DateTime $end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days. (required)
     * @param  string|null $employee_ids A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function call9a6d5660f03eadcf705c808a1f44b8c4Request($company_domain, $start, $end, $employee_ids = null, string $contentType = self::contentTypes['call9a6d5660f03eadcf705c808a1f44b8c4'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling call9a6d5660f03eadcf705c808a1f44b8c4'
            );
        }

        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling call9a6d5660f03eadcf705c808a1f44b8c4'
            );
        }

        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling call9a6d5660f03eadcf705c808a1f44b8c4'
            );
        }

        if ($employee_ids !== null && !preg_match("/^\\d+(,\\d+)*$/", $employee_ids)) {
            throw new \InvalidArgumentException("invalid value for \"employee_ids\" when calling TimeTrackingApi.call9a6d5660f03eadcf705c808a1f44b8c4, must conform to the pattern /^\\d+(,\\d+)*$/.");
        }
        

        $resourcePath = '/{companyDomain}/v1/time_tracking/timesheet_entries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $end,
            'end', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $employee_ids,
            'employeeIds', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation db65bacaf29686d9c3b1296f6047a065
     *
     * Delete Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Db65bacaf29686d9c3b1296f6047a065Request|null $db65bacaf29686d9c3b1296f6047a065_request db65bacaf29686d9c3b1296f6047a065_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['db65bacaf29686d9c3b1296f6047a065'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|mixed|mixed|mixed|mixed|mixed|mixed|mixed
     */
    public function db65bacaf29686d9c3b1296f6047a065($company_domain, $db65bacaf29686d9c3b1296f6047a065_request = null, string $contentType = self::contentTypes['db65bacaf29686d9c3b1296f6047a065'][0])
    {
        list($response) = $this->db65bacaf29686d9c3b1296f6047a065WithHttpInfo($company_domain, $db65bacaf29686d9c3b1296f6047a065_request, $contentType);
        return $response;
    }

    /**
     * Operation db65bacaf29686d9c3b1296f6047a065WithHttpInfo
     *
     * Delete Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Db65bacaf29686d9c3b1296f6047a065Request|null $db65bacaf29686d9c3b1296f6047a065_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['db65bacaf29686d9c3b1296f6047a065'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|mixed|mixed|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function db65bacaf29686d9c3b1296f6047a065WithHttpInfo($company_domain, $db65bacaf29686d9c3b1296f6047a065_request = null, string $contentType = self::contentTypes['db65bacaf29686d9c3b1296f6047a065'][0])
    {
        $request = $this->db65bacaf29686d9c3b1296f6047a065Request($company_domain, $db65bacaf29686d9c3b1296f6047a065_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 204:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation db65bacaf29686d9c3b1296f6047a065Async
     *
     * Delete Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Db65bacaf29686d9c3b1296f6047a065Request|null $db65bacaf29686d9c3b1296f6047a065_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['db65bacaf29686d9c3b1296f6047a065'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function db65bacaf29686d9c3b1296f6047a065Async($company_domain, $db65bacaf29686d9c3b1296f6047a065_request = null, string $contentType = self::contentTypes['db65bacaf29686d9c3b1296f6047a065'][0])
    {
        return $this->db65bacaf29686d9c3b1296f6047a065AsyncWithHttpInfo($company_domain, $db65bacaf29686d9c3b1296f6047a065_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation db65bacaf29686d9c3b1296f6047a065AsyncWithHttpInfo
     *
     * Delete Timesheet Hour Entries
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Db65bacaf29686d9c3b1296f6047a065Request|null $db65bacaf29686d9c3b1296f6047a065_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['db65bacaf29686d9c3b1296f6047a065'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function db65bacaf29686d9c3b1296f6047a065AsyncWithHttpInfo($company_domain, $db65bacaf29686d9c3b1296f6047a065_request = null, string $contentType = self::contentTypes['db65bacaf29686d9c3b1296f6047a065'][0])
    {
        $returnType = 'mixed';
        $request = $this->db65bacaf29686d9c3b1296f6047a065Request($company_domain, $db65bacaf29686d9c3b1296f6047a065_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'db65bacaf29686d9c3b1296f6047a065'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Db65bacaf29686d9c3b1296f6047a065Request|null $db65bacaf29686d9c3b1296f6047a065_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['db65bacaf29686d9c3b1296f6047a065'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function db65bacaf29686d9c3b1296f6047a065Request($company_domain, $db65bacaf29686d9c3b1296f6047a065_request = null, string $contentType = self::contentTypes['db65bacaf29686d9c3b1296f6047a065'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling db65bacaf29686d9c3b1296f6047a065'
            );
        }



        $resourcePath = '/{companyDomain}/v1/time_tracking/hour_entries/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($db65bacaf29686d9c3b1296f6047a065_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($db65bacaf29686d9c3b1296f6047a065_request));
            } else {
                $httpBody = $db65bacaf29686d9c3b1296f6047a065_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dcb62a5d1780635153b978462f9debd0
     *
     * Delete timesheet clock entries.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Dcb62a5d1780635153b978462f9debd0Request $dcb62a5d1780635153b978462f9debd0_request dcb62a5d1780635153b978462f9debd0_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dcb62a5d1780635153b978462f9debd0'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return mixed|mixed|mixed|mixed|mixed|mixed|mixed
     */
    public function dcb62a5d1780635153b978462f9debd0($company_domain, $dcb62a5d1780635153b978462f9debd0_request, string $contentType = self::contentTypes['dcb62a5d1780635153b978462f9debd0'][0])
    {
        list($response) = $this->dcb62a5d1780635153b978462f9debd0WithHttpInfo($company_domain, $dcb62a5d1780635153b978462f9debd0_request, $contentType);
        return $response;
    }

    /**
     * Operation dcb62a5d1780635153b978462f9debd0WithHttpInfo
     *
     * Delete timesheet clock entries.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Dcb62a5d1780635153b978462f9debd0Request $dcb62a5d1780635153b978462f9debd0_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dcb62a5d1780635153b978462f9debd0'] to see the possible values for this operation
     *
     * @throws \MySdk\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of mixed|mixed|mixed|mixed|mixed|mixed|mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function dcb62a5d1780635153b978462f9debd0WithHttpInfo($company_domain, $dcb62a5d1780635153b978462f9debd0_request, string $contentType = self::contentTypes['dcb62a5d1780635153b978462f9debd0'][0])
    {
        $request = $this->dcb62a5d1780635153b978462f9debd0Request($company_domain, $dcb62a5d1780635153b978462f9debd0_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 204:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 409:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        'mixed',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'mixed',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation dcb62a5d1780635153b978462f9debd0Async
     *
     * Delete timesheet clock entries.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Dcb62a5d1780635153b978462f9debd0Request $dcb62a5d1780635153b978462f9debd0_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dcb62a5d1780635153b978462f9debd0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dcb62a5d1780635153b978462f9debd0Async($company_domain, $dcb62a5d1780635153b978462f9debd0_request, string $contentType = self::contentTypes['dcb62a5d1780635153b978462f9debd0'][0])
    {
        return $this->dcb62a5d1780635153b978462f9debd0AsyncWithHttpInfo($company_domain, $dcb62a5d1780635153b978462f9debd0_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dcb62a5d1780635153b978462f9debd0AsyncWithHttpInfo
     *
     * Delete timesheet clock entries.
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Dcb62a5d1780635153b978462f9debd0Request $dcb62a5d1780635153b978462f9debd0_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dcb62a5d1780635153b978462f9debd0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dcb62a5d1780635153b978462f9debd0AsyncWithHttpInfo($company_domain, $dcb62a5d1780635153b978462f9debd0_request, string $contentType = self::contentTypes['dcb62a5d1780635153b978462f9debd0'][0])
    {
        $returnType = 'mixed';
        $request = $this->dcb62a5d1780635153b978462f9debd0Request($company_domain, $dcb62a5d1780635153b978462f9debd0_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dcb62a5d1780635153b978462f9debd0'
     *
     * @param  string $company_domain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot; (required)
     * @param  \MySdk\Model\Dcb62a5d1780635153b978462f9debd0Request $dcb62a5d1780635153b978462f9debd0_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dcb62a5d1780635153b978462f9debd0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dcb62a5d1780635153b978462f9debd0Request($company_domain, $dcb62a5d1780635153b978462f9debd0_request, string $contentType = self::contentTypes['dcb62a5d1780635153b978462f9debd0'][0])
    {

        // verify the required parameter 'company_domain' is set
        if ($company_domain === null || (is_array($company_domain) && count($company_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_domain when calling dcb62a5d1780635153b978462f9debd0'
            );
        }

        // verify the required parameter 'dcb62a5d1780635153b978462f9debd0_request' is set
        if ($dcb62a5d1780635153b978462f9debd0_request === null || (is_array($dcb62a5d1780635153b978462f9debd0_request) && count($dcb62a5d1780635153b978462f9debd0_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dcb62a5d1780635153b978462f9debd0_request when calling dcb62a5d1780635153b978462f9debd0'
            );
        }


        $resourcePath = '/{companyDomain}/v1/time_tracking/clock_entries/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_domain !== null) {
            $resourcePath = str_replace(
                '{' . 'companyDomain' . '}',
                ObjectSerializer::toPathValue($company_domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dcb62a5d1780635153b978462f9debd0_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dcb62a5d1780635153b978462f9debd0_request));
            } else {
                $httpBody = $dcb62a5d1780635153b978462f9debd0_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
