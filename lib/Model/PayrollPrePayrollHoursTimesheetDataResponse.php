<?php
/**
 * PayrollPrePayrollHoursTimesheetDataResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollPrePayrollHoursTimesheetDataResponse Class Doc Comment
 *
 * @category Class
 * @description Response object for timesheet data
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollPrePayrollHoursTimesheetDataResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payroll-PrePayrollHours-TimesheetDataResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'approval_start_date_time' => '\DateTime',
        'approver_employee_data' => 'array<string,\MySdk\Model\PayrollPrePayrollHoursTimesheetDataResponseApproverEmployeeDataValue>',
        'approver_user_data' => 'array<string,\MySdk\Model\PayrollPrePayrollHoursTimesheetDataResponseApproverUserDataValue>',
        'client_job_data' => 'array<string,\MySdk\Model\PayrollPrePayrollHoursClientJobDataValue>',
        'client_job_category_data' => 'array<string,\MySdk\Model\PayrollPrePayrollHoursClientJobCategoryDataValue>',
        'shift_differential_data' => 'array<string,\MySdk\Model\PayrollPrePayrollHoursShiftDifferentialDataItemValue>',
        'data' => 'array<string,\MySdk\Model\PayrollPrePayrollHoursTimesheetDataResponseDataValue>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'approval_start_date_time' => 'date-time',
        'approver_employee_data' => null,
        'approver_user_data' => null,
        'client_job_data' => null,
        'client_job_category_data' => null,
        'shift_differential_data' => null,
        'data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'approval_start_date_time' => false,
        'approver_employee_data' => false,
        'approver_user_data' => false,
        'client_job_data' => false,
        'client_job_category_data' => false,
        'shift_differential_data' => false,
        'data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'approval_start_date_time' => 'approvalStartDateTime',
        'approver_employee_data' => 'approverEmployeeData',
        'approver_user_data' => 'approverUserData',
        'client_job_data' => 'clientJobData',
        'client_job_category_data' => 'clientJobCategoryData',
        'shift_differential_data' => 'shiftDifferentialData',
        'data' => 'data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'approval_start_date_time' => 'setApprovalStartDateTime',
        'approver_employee_data' => 'setApproverEmployeeData',
        'approver_user_data' => 'setApproverUserData',
        'client_job_data' => 'setClientJobData',
        'client_job_category_data' => 'setClientJobCategoryData',
        'shift_differential_data' => 'setShiftDifferentialData',
        'data' => 'setData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'approval_start_date_time' => 'getApprovalStartDateTime',
        'approver_employee_data' => 'getApproverEmployeeData',
        'approver_user_data' => 'getApproverUserData',
        'client_job_data' => 'getClientJobData',
        'client_job_category_data' => 'getClientJobCategoryData',
        'shift_differential_data' => 'getShiftDifferentialData',
        'data' => 'getData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('approval_start_date_time', $data ?? [], null);
        $this->setIfExists('approver_employee_data', $data ?? [], null);
        $this->setIfExists('approver_user_data', $data ?? [], null);
        $this->setIfExists('client_job_data', $data ?? [], null);
        $this->setIfExists('client_job_category_data', $data ?? [], null);
        $this->setIfExists('shift_differential_data', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets approval_start_date_time
     *
     * @return \DateTime|null
     */
    public function getApprovalStartDateTime()
    {
        return $this->container['approval_start_date_time'];
    }

    /**
     * Sets approval_start_date_time
     *
     * @param \DateTime|null $approval_start_date_time Date and time when the approval process for this timesheet began
     *
     * @return self
     */
    public function setApprovalStartDateTime($approval_start_date_time)
    {
        if (is_null($approval_start_date_time)) {
            throw new \InvalidArgumentException('non-nullable approval_start_date_time cannot be null');
        }
        $this->container['approval_start_date_time'] = $approval_start_date_time;

        return $this;
    }

    /**
     * Gets approver_employee_data
     *
     * @return array<string,\MySdk\Model\PayrollPrePayrollHoursTimesheetDataResponseApproverEmployeeDataValue>|null
     */
    public function getApproverEmployeeData()
    {
        return $this->container['approver_employee_data'];
    }

    /**
     * Sets approver_employee_data
     *
     * @param array<string,\MySdk\Model\PayrollPrePayrollHoursTimesheetDataResponseApproverEmployeeDataValue>|null $approver_employee_data Approver employee data keyed by employee ID
     *
     * @return self
     */
    public function setApproverEmployeeData($approver_employee_data)
    {
        if (is_null($approver_employee_data)) {
            throw new \InvalidArgumentException('non-nullable approver_employee_data cannot be null');
        }
        $this->container['approver_employee_data'] = $approver_employee_data;

        return $this;
    }

    /**
     * Gets approver_user_data
     *
     * @return array<string,\MySdk\Model\PayrollPrePayrollHoursTimesheetDataResponseApproverUserDataValue>|null
     */
    public function getApproverUserData()
    {
        return $this->container['approver_user_data'];
    }

    /**
     * Sets approver_user_data
     *
     * @param array<string,\MySdk\Model\PayrollPrePayrollHoursTimesheetDataResponseApproverUserDataValue>|null $approver_user_data Approver user data keyed by user ID
     *
     * @return self
     */
    public function setApproverUserData($approver_user_data)
    {
        if (is_null($approver_user_data)) {
            throw new \InvalidArgumentException('non-nullable approver_user_data cannot be null');
        }
        $this->container['approver_user_data'] = $approver_user_data;

        return $this;
    }

    /**
     * Gets client_job_data
     *
     * @return array<string,\MySdk\Model\PayrollPrePayrollHoursClientJobDataValue>|null
     */
    public function getClientJobData()
    {
        return $this->container['client_job_data'];
    }

    /**
     * Sets client_job_data
     *
     * @param array<string,\MySdk\Model\PayrollPrePayrollHoursClientJobDataValue>|null $client_job_data Client job (project) data keyed by job ID
     *
     * @return self
     */
    public function setClientJobData($client_job_data)
    {
        if (is_null($client_job_data)) {
            throw new \InvalidArgumentException('non-nullable client_job_data cannot be null');
        }
        $this->container['client_job_data'] = $client_job_data;

        return $this;
    }

    /**
     * Gets client_job_category_data
     *
     * @return array<string,\MySdk\Model\PayrollPrePayrollHoursClientJobCategoryDataValue>|null
     */
    public function getClientJobCategoryData()
    {
        return $this->container['client_job_category_data'];
    }

    /**
     * Sets client_job_category_data
     *
     * @param array<string,\MySdk\Model\PayrollPrePayrollHoursClientJobCategoryDataValue>|null $client_job_category_data Client job category (task) data keyed by category ID
     *
     * @return self
     */
    public function setClientJobCategoryData($client_job_category_data)
    {
        if (is_null($client_job_category_data)) {
            throw new \InvalidArgumentException('non-nullable client_job_category_data cannot be null');
        }
        $this->container['client_job_category_data'] = $client_job_category_data;

        return $this;
    }

    /**
     * Gets shift_differential_data
     *
     * @return array<string,\MySdk\Model\PayrollPrePayrollHoursShiftDifferentialDataItemValue>|null
     */
    public function getShiftDifferentialData()
    {
        return $this->container['shift_differential_data'];
    }

    /**
     * Sets shift_differential_data
     *
     * @param array<string,\MySdk\Model\PayrollPrePayrollHoursShiftDifferentialDataItemValue>|null $shift_differential_data Shift differential data keyed by shift differential ID
     *
     * @return self
     */
    public function setShiftDifferentialData($shift_differential_data)
    {
        if (is_null($shift_differential_data)) {
            throw new \InvalidArgumentException('non-nullable shift_differential_data cannot be null');
        }
        $this->container['shift_differential_data'] = $shift_differential_data;

        return $this;
    }

    /**
     * Gets data
     *
     * @return array<string,\MySdk\Model\PayrollPrePayrollHoursTimesheetDataResponseDataValue>|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param array<string,\MySdk\Model\PayrollPrePayrollHoursTimesheetDataResponseDataValue>|null $data Employee timesheet data keyed by employee ID
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


