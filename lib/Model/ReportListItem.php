<?php
/**
 * ReportListItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * ReportListItem Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportListItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'reportListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'icon' => 'string',
        'path' => 'string',
        'is_shared' => 'bool',
        'shared_by' => 'string',
        'shared_by_user_id' => 'int',
        'owner' => 'string',
        'owner_id' => 'int',
        'user_last_viewed' => '\DateTime',
        'created' => '\DateTime',
        'created_by' => 'string',
        'modified' => '\DateTime',
        'modified_by' => 'string',
        'can_be_shared' => 'bool',
        'report_type' => 'string',
        'is_legacy_custom_report' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'icon' => null,
        'path' => null,
        'is_shared' => null,
        'shared_by' => null,
        'shared_by_user_id' => null,
        'owner' => null,
        'owner_id' => null,
        'user_last_viewed' => 'date-time',
        'created' => 'date-time',
        'created_by' => null,
        'modified' => 'date-time',
        'modified_by' => null,
        'can_be_shared' => null,
        'report_type' => null,
        'is_legacy_custom_report' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'icon' => false,
        'path' => false,
        'is_shared' => false,
        'shared_by' => true,
        'shared_by_user_id' => true,
        'owner' => true,
        'owner_id' => true,
        'user_last_viewed' => true,
        'created' => true,
        'created_by' => true,
        'modified' => true,
        'modified_by' => true,
        'can_be_shared' => false,
        'report_type' => false,
        'is_legacy_custom_report' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'icon' => 'icon',
        'path' => 'path',
        'is_shared' => 'isShared',
        'shared_by' => 'sharedBy',
        'shared_by_user_id' => 'sharedByUserId',
        'owner' => 'owner',
        'owner_id' => 'ownerId',
        'user_last_viewed' => 'userLastViewed',
        'created' => 'created',
        'created_by' => 'createdBy',
        'modified' => 'modified',
        'modified_by' => 'modifiedBy',
        'can_be_shared' => 'canBeShared',
        'report_type' => 'reportType',
        'is_legacy_custom_report' => 'isLegacyCustomReport'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'icon' => 'setIcon',
        'path' => 'setPath',
        'is_shared' => 'setIsShared',
        'shared_by' => 'setSharedBy',
        'shared_by_user_id' => 'setSharedByUserId',
        'owner' => 'setOwner',
        'owner_id' => 'setOwnerId',
        'user_last_viewed' => 'setUserLastViewed',
        'created' => 'setCreated',
        'created_by' => 'setCreatedBy',
        'modified' => 'setModified',
        'modified_by' => 'setModifiedBy',
        'can_be_shared' => 'setCanBeShared',
        'report_type' => 'setReportType',
        'is_legacy_custom_report' => 'setIsLegacyCustomReport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'icon' => 'getIcon',
        'path' => 'getPath',
        'is_shared' => 'getIsShared',
        'shared_by' => 'getSharedBy',
        'shared_by_user_id' => 'getSharedByUserId',
        'owner' => 'getOwner',
        'owner_id' => 'getOwnerId',
        'user_last_viewed' => 'getUserLastViewed',
        'created' => 'getCreated',
        'created_by' => 'getCreatedBy',
        'modified' => 'getModified',
        'modified_by' => 'getModifiedBy',
        'can_be_shared' => 'getCanBeShared',
        'report_type' => 'getReportType',
        'is_legacy_custom_report' => 'getIsLegacyCustomReport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('is_shared', $data ?? [], null);
        $this->setIfExists('shared_by', $data ?? [], null);
        $this->setIfExists('shared_by_user_id', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('owner_id', $data ?? [], null);
        $this->setIfExists('user_last_viewed', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('modified', $data ?? [], null);
        $this->setIfExists('modified_by', $data ?? [], null);
        $this->setIfExists('can_be_shared', $data ?? [], null);
        $this->setIfExists('report_type', $data ?? [], null);
        $this->setIfExists('is_legacy_custom_report', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon icon
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            throw new \InvalidArgumentException('non-nullable icon cannot be null');
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets is_shared
     *
     * @return bool|null
     */
    public function getIsShared()
    {
        return $this->container['is_shared'];
    }

    /**
     * Sets is_shared
     *
     * @param bool|null $is_shared is_shared
     *
     * @return self
     */
    public function setIsShared($is_shared)
    {
        if (is_null($is_shared)) {
            throw new \InvalidArgumentException('non-nullable is_shared cannot be null');
        }
        $this->container['is_shared'] = $is_shared;

        return $this;
    }

    /**
     * Gets shared_by
     *
     * @return string|null
     */
    public function getSharedBy()
    {
        return $this->container['shared_by'];
    }

    /**
     * Sets shared_by
     *
     * @param string|null $shared_by shared_by
     *
     * @return self
     */
    public function setSharedBy($shared_by)
    {
        if (is_null($shared_by)) {
            array_push($this->openAPINullablesSetToNull, 'shared_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shared_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shared_by'] = $shared_by;

        return $this;
    }

    /**
     * Gets shared_by_user_id
     *
     * @return int|null
     */
    public function getSharedByUserId()
    {
        return $this->container['shared_by_user_id'];
    }

    /**
     * Sets shared_by_user_id
     *
     * @param int|null $shared_by_user_id shared_by_user_id
     *
     * @return self
     */
    public function setSharedByUserId($shared_by_user_id)
    {
        if (is_null($shared_by_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'shared_by_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shared_by_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shared_by_user_id'] = $shared_by_user_id;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            array_push($this->openAPINullablesSetToNull, 'owner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return int|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param int|null $owner_id owner_id
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {
        if (is_null($owner_id)) {
            array_push($this->openAPINullablesSetToNull, 'owner_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('owner_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets user_last_viewed
     *
     * @return \DateTime|null
     */
    public function getUserLastViewed()
    {
        return $this->container['user_last_viewed'];
    }

    /**
     * Sets user_last_viewed
     *
     * @param \DateTime|null $user_last_viewed user_last_viewed
     *
     * @return self
     */
    public function setUserLastViewed($user_last_viewed)
    {
        if (is_null($user_last_viewed)) {
            array_push($this->openAPINullablesSetToNull, 'user_last_viewed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_last_viewed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_last_viewed'] = $user_last_viewed;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            array_push($this->openAPINullablesSetToNull, 'created_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime|null
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime|null $modified modified
     *
     * @return self
     */
    public function setModified($modified)
    {
        if (is_null($modified)) {
            array_push($this->openAPINullablesSetToNull, 'modified');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return string|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param string|null $modified_by modified_by
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        if (is_null($modified_by)) {
            array_push($this->openAPINullablesSetToNull, 'modified_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('modified_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets can_be_shared
     *
     * @return bool|null
     */
    public function getCanBeShared()
    {
        return $this->container['can_be_shared'];
    }

    /**
     * Sets can_be_shared
     *
     * @param bool|null $can_be_shared can_be_shared
     *
     * @return self
     */
    public function setCanBeShared($can_be_shared)
    {
        if (is_null($can_be_shared)) {
            throw new \InvalidArgumentException('non-nullable can_be_shared cannot be null');
        }
        $this->container['can_be_shared'] = $can_be_shared;

        return $this;
    }

    /**
     * Gets report_type
     *
     * @return string|null
     */
    public function getReportType()
    {
        return $this->container['report_type'];
    }

    /**
     * Sets report_type
     *
     * @param string|null $report_type report_type
     *
     * @return self
     */
    public function setReportType($report_type)
    {
        if (is_null($report_type)) {
            throw new \InvalidArgumentException('non-nullable report_type cannot be null');
        }
        $this->container['report_type'] = $report_type;

        return $this;
    }

    /**
     * Gets is_legacy_custom_report
     *
     * @return bool|null
     */
    public function getIsLegacyCustomReport()
    {
        return $this->container['is_legacy_custom_report'];
    }

    /**
     * Sets is_legacy_custom_report
     *
     * @param bool|null $is_legacy_custom_report is_legacy_custom_report
     *
     * @return self
     */
    public function setIsLegacyCustomReport($is_legacy_custom_report)
    {
        if (is_null($is_legacy_custom_report)) {
            throw new \InvalidArgumentException('non-nullable is_legacy_custom_report cannot be null');
        }
        $this->container['is_legacy_custom_report'] = $is_legacy_custom_report;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


