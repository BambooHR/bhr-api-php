<?php
/**
 * EmployeePaystub
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeePaystub Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeePaystub implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeePaystub';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'string',
        'external_record_id' => 'string',
        'pay_period_from' => 'string',
        'pay_period_to' => 'string',
        'pay_date' => 'string',
        'payor_name' => 'string',
        'payor_add1' => 'string',
        'payor_add2' => 'string',
        'payor_city' => 'string',
        'payor_state' => 'string',
        'payor_zip' => 'string',
        'payee_name' => 'string',
        'currency_code' => 'string',
        'net' => 'string',
        'gross' => 'string',
        'total_taxes' => 'string',
        'total_deductions' => 'string',
        'ytd_net' => 'string',
        'ytd_gross' => 'string',
        'ytd_taxes' => 'string',
        'ytd_deductions' => 'string',
        'fed_witholding' => 'string',
        'federal_type' => 'string',
        'two_jobs' => 'string',
        'dependents_amount' => 'string',
        'other_income' => 'string',
        'deductions_amount' => 'string',
        'state_withholding' => 'string',
        'local_withholding' => 'string',
        'additional_fed' => 'string',
        'additional_state' => 'string',
        'additional_local' => 'string',
        'tax_state' => 'string',
        'tax_local' => 'string',
        'wages' => 'object[]',
        'taxes' => 'object[]',
        'deductions' => 'object[]',
        'deposits' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'external_record_id' => null,
        'pay_period_from' => null,
        'pay_period_to' => null,
        'pay_date' => null,
        'payor_name' => null,
        'payor_add1' => null,
        'payor_add2' => null,
        'payor_city' => null,
        'payor_state' => null,
        'payor_zip' => null,
        'payee_name' => null,
        'currency_code' => null,
        'net' => null,
        'gross' => null,
        'total_taxes' => null,
        'total_deductions' => null,
        'ytd_net' => null,
        'ytd_gross' => null,
        'ytd_taxes' => null,
        'ytd_deductions' => null,
        'fed_witholding' => null,
        'federal_type' => null,
        'two_jobs' => null,
        'dependents_amount' => null,
        'other_income' => null,
        'deductions_amount' => null,
        'state_withholding' => null,
        'local_withholding' => null,
        'additional_fed' => null,
        'additional_state' => null,
        'additional_local' => null,
        'tax_state' => null,
        'tax_local' => null,
        'wages' => null,
        'taxes' => null,
        'deductions' => null,
        'deposits' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'external_record_id' => false,
        'pay_period_from' => false,
        'pay_period_to' => false,
        'pay_date' => false,
        'payor_name' => false,
        'payor_add1' => false,
        'payor_add2' => false,
        'payor_city' => false,
        'payor_state' => false,
        'payor_zip' => false,
        'payee_name' => false,
        'currency_code' => false,
        'net' => false,
        'gross' => false,
        'total_taxes' => false,
        'total_deductions' => false,
        'ytd_net' => false,
        'ytd_gross' => false,
        'ytd_taxes' => false,
        'ytd_deductions' => false,
        'fed_witholding' => false,
        'federal_type' => false,
        'two_jobs' => false,
        'dependents_amount' => false,
        'other_income' => false,
        'deductions_amount' => false,
        'state_withholding' => false,
        'local_withholding' => false,
        'additional_fed' => false,
        'additional_state' => false,
        'additional_local' => false,
        'tax_state' => false,
        'tax_local' => false,
        'wages' => false,
        'taxes' => false,
        'deductions' => false,
        'deposits' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'external_record_id' => 'externalRecordId',
        'pay_period_from' => 'payPeriodFrom',
        'pay_period_to' => 'payPeriodTo',
        'pay_date' => 'payDate',
        'payor_name' => 'payorName',
        'payor_add1' => 'payorAdd1',
        'payor_add2' => 'payorAdd2',
        'payor_city' => 'payorCity',
        'payor_state' => 'payorState',
        'payor_zip' => 'payorZip',
        'payee_name' => 'payeeName',
        'currency_code' => 'currencyCode',
        'net' => 'net',
        'gross' => 'gross',
        'total_taxes' => 'totalTaxes',
        'total_deductions' => 'totalDeductions',
        'ytd_net' => 'ytdNet',
        'ytd_gross' => 'ytdGross',
        'ytd_taxes' => 'ytdTaxes',
        'ytd_deductions' => 'ytdDeductions',
        'fed_witholding' => 'fedWitholding',
        'federal_type' => 'federalType',
        'two_jobs' => 'twoJobs',
        'dependents_amount' => 'dependentsAmount',
        'other_income' => 'otherIncome',
        'deductions_amount' => 'deductionsAmount',
        'state_withholding' => 'stateWithholding',
        'local_withholding' => 'localWithholding',
        'additional_fed' => 'additionalFed',
        'additional_state' => 'additionalState',
        'additional_local' => 'additionalLocal',
        'tax_state' => 'taxState',
        'tax_local' => 'taxLocal',
        'wages' => 'wages',
        'taxes' => 'taxes',
        'deductions' => 'deductions',
        'deposits' => 'deposits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'external_record_id' => 'setExternalRecordId',
        'pay_period_from' => 'setPayPeriodFrom',
        'pay_period_to' => 'setPayPeriodTo',
        'pay_date' => 'setPayDate',
        'payor_name' => 'setPayorName',
        'payor_add1' => 'setPayorAdd1',
        'payor_add2' => 'setPayorAdd2',
        'payor_city' => 'setPayorCity',
        'payor_state' => 'setPayorState',
        'payor_zip' => 'setPayorZip',
        'payee_name' => 'setPayeeName',
        'currency_code' => 'setCurrencyCode',
        'net' => 'setNet',
        'gross' => 'setGross',
        'total_taxes' => 'setTotalTaxes',
        'total_deductions' => 'setTotalDeductions',
        'ytd_net' => 'setYtdNet',
        'ytd_gross' => 'setYtdGross',
        'ytd_taxes' => 'setYtdTaxes',
        'ytd_deductions' => 'setYtdDeductions',
        'fed_witholding' => 'setFedWitholding',
        'federal_type' => 'setFederalType',
        'two_jobs' => 'setTwoJobs',
        'dependents_amount' => 'setDependentsAmount',
        'other_income' => 'setOtherIncome',
        'deductions_amount' => 'setDeductionsAmount',
        'state_withholding' => 'setStateWithholding',
        'local_withholding' => 'setLocalWithholding',
        'additional_fed' => 'setAdditionalFed',
        'additional_state' => 'setAdditionalState',
        'additional_local' => 'setAdditionalLocal',
        'tax_state' => 'setTaxState',
        'tax_local' => 'setTaxLocal',
        'wages' => 'setWages',
        'taxes' => 'setTaxes',
        'deductions' => 'setDeductions',
        'deposits' => 'setDeposits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'external_record_id' => 'getExternalRecordId',
        'pay_period_from' => 'getPayPeriodFrom',
        'pay_period_to' => 'getPayPeriodTo',
        'pay_date' => 'getPayDate',
        'payor_name' => 'getPayorName',
        'payor_add1' => 'getPayorAdd1',
        'payor_add2' => 'getPayorAdd2',
        'payor_city' => 'getPayorCity',
        'payor_state' => 'getPayorState',
        'payor_zip' => 'getPayorZip',
        'payee_name' => 'getPayeeName',
        'currency_code' => 'getCurrencyCode',
        'net' => 'getNet',
        'gross' => 'getGross',
        'total_taxes' => 'getTotalTaxes',
        'total_deductions' => 'getTotalDeductions',
        'ytd_net' => 'getYtdNet',
        'ytd_gross' => 'getYtdGross',
        'ytd_taxes' => 'getYtdTaxes',
        'ytd_deductions' => 'getYtdDeductions',
        'fed_witholding' => 'getFedWitholding',
        'federal_type' => 'getFederalType',
        'two_jobs' => 'getTwoJobs',
        'dependents_amount' => 'getDependentsAmount',
        'other_income' => 'getOtherIncome',
        'deductions_amount' => 'getDeductionsAmount',
        'state_withholding' => 'getStateWithholding',
        'local_withholding' => 'getLocalWithholding',
        'additional_fed' => 'getAdditionalFed',
        'additional_state' => 'getAdditionalState',
        'additional_local' => 'getAdditionalLocal',
        'tax_state' => 'getTaxState',
        'tax_local' => 'getTaxLocal',
        'wages' => 'getWages',
        'taxes' => 'getTaxes',
        'deductions' => 'getDeductions',
        'deposits' => 'getDeposits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FEDERAL_TYPE__2020_W4 = '2020_w4';
    public const FEDERAL_TYPE_PRE_2020_W4 = 'pre_2020_w4';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFederalTypeAllowableValues()
    {
        return [
            self::FEDERAL_TYPE__2020_W4,
            self::FEDERAL_TYPE_PRE_2020_W4,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('external_record_id', $data ?? [], null);
        $this->setIfExists('pay_period_from', $data ?? [], null);
        $this->setIfExists('pay_period_to', $data ?? [], null);
        $this->setIfExists('pay_date', $data ?? [], null);
        $this->setIfExists('payor_name', $data ?? [], null);
        $this->setIfExists('payor_add1', $data ?? [], null);
        $this->setIfExists('payor_add2', $data ?? [], null);
        $this->setIfExists('payor_city', $data ?? [], null);
        $this->setIfExists('payor_state', $data ?? [], null);
        $this->setIfExists('payor_zip', $data ?? [], null);
        $this->setIfExists('payee_name', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('net', $data ?? [], null);
        $this->setIfExists('gross', $data ?? [], null);
        $this->setIfExists('total_taxes', $data ?? [], null);
        $this->setIfExists('total_deductions', $data ?? [], null);
        $this->setIfExists('ytd_net', $data ?? [], null);
        $this->setIfExists('ytd_gross', $data ?? [], null);
        $this->setIfExists('ytd_taxes', $data ?? [], null);
        $this->setIfExists('ytd_deductions', $data ?? [], null);
        $this->setIfExists('fed_witholding', $data ?? [], null);
        $this->setIfExists('federal_type', $data ?? [], null);
        $this->setIfExists('two_jobs', $data ?? [], null);
        $this->setIfExists('dependents_amount', $data ?? [], null);
        $this->setIfExists('other_income', $data ?? [], null);
        $this->setIfExists('deductions_amount', $data ?? [], null);
        $this->setIfExists('state_withholding', $data ?? [], null);
        $this->setIfExists('local_withholding', $data ?? [], null);
        $this->setIfExists('additional_fed', $data ?? [], null);
        $this->setIfExists('additional_state', $data ?? [], null);
        $this->setIfExists('additional_local', $data ?? [], null);
        $this->setIfExists('tax_state', $data ?? [], null);
        $this->setIfExists('tax_local', $data ?? [], null);
        $this->setIfExists('wages', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('deductions', $data ?? [], null);
        $this->setIfExists('deposits', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFederalTypeAllowableValues();
        if (!is_null($this->container['federal_type']) && !in_array($this->container['federal_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'federal_type', must be one of '%s'",
                $this->container['federal_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return string|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string|null $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets external_record_id
     *
     * @return string|null
     */
    public function getExternalRecordId()
    {
        return $this->container['external_record_id'];
    }

    /**
     * Sets external_record_id
     *
     * @param string|null $external_record_id external_record_id
     *
     * @return self
     */
    public function setExternalRecordId($external_record_id)
    {
        if (is_null($external_record_id)) {
            throw new \InvalidArgumentException('non-nullable external_record_id cannot be null');
        }
        $this->container['external_record_id'] = $external_record_id;

        return $this;
    }

    /**
     * Gets pay_period_from
     *
     * @return string|null
     */
    public function getPayPeriodFrom()
    {
        return $this->container['pay_period_from'];
    }

    /**
     * Sets pay_period_from
     *
     * @param string|null $pay_period_from pay_period_from
     *
     * @return self
     */
    public function setPayPeriodFrom($pay_period_from)
    {
        if (is_null($pay_period_from)) {
            throw new \InvalidArgumentException('non-nullable pay_period_from cannot be null');
        }
        $this->container['pay_period_from'] = $pay_period_from;

        return $this;
    }

    /**
     * Gets pay_period_to
     *
     * @return string|null
     */
    public function getPayPeriodTo()
    {
        return $this->container['pay_period_to'];
    }

    /**
     * Sets pay_period_to
     *
     * @param string|null $pay_period_to pay_period_to
     *
     * @return self
     */
    public function setPayPeriodTo($pay_period_to)
    {
        if (is_null($pay_period_to)) {
            throw new \InvalidArgumentException('non-nullable pay_period_to cannot be null');
        }
        $this->container['pay_period_to'] = $pay_period_to;

        return $this;
    }

    /**
     * Gets pay_date
     *
     * @return string|null
     */
    public function getPayDate()
    {
        return $this->container['pay_date'];
    }

    /**
     * Sets pay_date
     *
     * @param string|null $pay_date pay_date
     *
     * @return self
     */
    public function setPayDate($pay_date)
    {
        if (is_null($pay_date)) {
            throw new \InvalidArgumentException('non-nullable pay_date cannot be null');
        }
        $this->container['pay_date'] = $pay_date;

        return $this;
    }

    /**
     * Gets payor_name
     *
     * @return string|null
     */
    public function getPayorName()
    {
        return $this->container['payor_name'];
    }

    /**
     * Sets payor_name
     *
     * @param string|null $payor_name payor_name
     *
     * @return self
     */
    public function setPayorName($payor_name)
    {
        if (is_null($payor_name)) {
            throw new \InvalidArgumentException('non-nullable payor_name cannot be null');
        }
        $this->container['payor_name'] = $payor_name;

        return $this;
    }

    /**
     * Gets payor_add1
     *
     * @return string|null
     */
    public function getPayorAdd1()
    {
        return $this->container['payor_add1'];
    }

    /**
     * Sets payor_add1
     *
     * @param string|null $payor_add1 payor_add1
     *
     * @return self
     */
    public function setPayorAdd1($payor_add1)
    {
        if (is_null($payor_add1)) {
            throw new \InvalidArgumentException('non-nullable payor_add1 cannot be null');
        }
        $this->container['payor_add1'] = $payor_add1;

        return $this;
    }

    /**
     * Gets payor_add2
     *
     * @return string|null
     */
    public function getPayorAdd2()
    {
        return $this->container['payor_add2'];
    }

    /**
     * Sets payor_add2
     *
     * @param string|null $payor_add2 payor_add2
     *
     * @return self
     */
    public function setPayorAdd2($payor_add2)
    {
        if (is_null($payor_add2)) {
            throw new \InvalidArgumentException('non-nullable payor_add2 cannot be null');
        }
        $this->container['payor_add2'] = $payor_add2;

        return $this;
    }

    /**
     * Gets payor_city
     *
     * @return string|null
     */
    public function getPayorCity()
    {
        return $this->container['payor_city'];
    }

    /**
     * Sets payor_city
     *
     * @param string|null $payor_city payor_city
     *
     * @return self
     */
    public function setPayorCity($payor_city)
    {
        if (is_null($payor_city)) {
            throw new \InvalidArgumentException('non-nullable payor_city cannot be null');
        }
        $this->container['payor_city'] = $payor_city;

        return $this;
    }

    /**
     * Gets payor_state
     *
     * @return string|null
     */
    public function getPayorState()
    {
        return $this->container['payor_state'];
    }

    /**
     * Sets payor_state
     *
     * @param string|null $payor_state payor_state
     *
     * @return self
     */
    public function setPayorState($payor_state)
    {
        if (is_null($payor_state)) {
            throw new \InvalidArgumentException('non-nullable payor_state cannot be null');
        }
        $this->container['payor_state'] = $payor_state;

        return $this;
    }

    /**
     * Gets payor_zip
     *
     * @return string|null
     */
    public function getPayorZip()
    {
        return $this->container['payor_zip'];
    }

    /**
     * Sets payor_zip
     *
     * @param string|null $payor_zip payor_zip
     *
     * @return self
     */
    public function setPayorZip($payor_zip)
    {
        if (is_null($payor_zip)) {
            throw new \InvalidArgumentException('non-nullable payor_zip cannot be null');
        }
        $this->container['payor_zip'] = $payor_zip;

        return $this;
    }

    /**
     * Gets payee_name
     *
     * @return string|null
     */
    public function getPayeeName()
    {
        return $this->container['payee_name'];
    }

    /**
     * Sets payee_name
     *
     * @param string|null $payee_name payee_name
     *
     * @return self
     */
    public function setPayeeName($payee_name)
    {
        if (is_null($payee_name)) {
            throw new \InvalidArgumentException('non-nullable payee_name cannot be null');
        }
        $this->container['payee_name'] = $payee_name;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets net
     *
     * @return string|null
     */
    public function getNet()
    {
        return $this->container['net'];
    }

    /**
     * Sets net
     *
     * @param string|null $net net
     *
     * @return self
     */
    public function setNet($net)
    {
        if (is_null($net)) {
            throw new \InvalidArgumentException('non-nullable net cannot be null');
        }
        $this->container['net'] = $net;

        return $this;
    }

    /**
     * Gets gross
     *
     * @return string|null
     */
    public function getGross()
    {
        return $this->container['gross'];
    }

    /**
     * Sets gross
     *
     * @param string|null $gross gross
     *
     * @return self
     */
    public function setGross($gross)
    {
        if (is_null($gross)) {
            throw new \InvalidArgumentException('non-nullable gross cannot be null');
        }
        $this->container['gross'] = $gross;

        return $this;
    }

    /**
     * Gets total_taxes
     *
     * @return string|null
     */
    public function getTotalTaxes()
    {
        return $this->container['total_taxes'];
    }

    /**
     * Sets total_taxes
     *
     * @param string|null $total_taxes total_taxes
     *
     * @return self
     */
    public function setTotalTaxes($total_taxes)
    {
        if (is_null($total_taxes)) {
            throw new \InvalidArgumentException('non-nullable total_taxes cannot be null');
        }
        $this->container['total_taxes'] = $total_taxes;

        return $this;
    }

    /**
     * Gets total_deductions
     *
     * @return string|null
     */
    public function getTotalDeductions()
    {
        return $this->container['total_deductions'];
    }

    /**
     * Sets total_deductions
     *
     * @param string|null $total_deductions total_deductions
     *
     * @return self
     */
    public function setTotalDeductions($total_deductions)
    {
        if (is_null($total_deductions)) {
            throw new \InvalidArgumentException('non-nullable total_deductions cannot be null');
        }
        $this->container['total_deductions'] = $total_deductions;

        return $this;
    }

    /**
     * Gets ytd_net
     *
     * @return string|null
     */
    public function getYtdNet()
    {
        return $this->container['ytd_net'];
    }

    /**
     * Sets ytd_net
     *
     * @param string|null $ytd_net ytd_net
     *
     * @return self
     */
    public function setYtdNet($ytd_net)
    {
        if (is_null($ytd_net)) {
            throw new \InvalidArgumentException('non-nullable ytd_net cannot be null');
        }
        $this->container['ytd_net'] = $ytd_net;

        return $this;
    }

    /**
     * Gets ytd_gross
     *
     * @return string|null
     */
    public function getYtdGross()
    {
        return $this->container['ytd_gross'];
    }

    /**
     * Sets ytd_gross
     *
     * @param string|null $ytd_gross ytd_gross
     *
     * @return self
     */
    public function setYtdGross($ytd_gross)
    {
        if (is_null($ytd_gross)) {
            throw new \InvalidArgumentException('non-nullable ytd_gross cannot be null');
        }
        $this->container['ytd_gross'] = $ytd_gross;

        return $this;
    }

    /**
     * Gets ytd_taxes
     *
     * @return string|null
     */
    public function getYtdTaxes()
    {
        return $this->container['ytd_taxes'];
    }

    /**
     * Sets ytd_taxes
     *
     * @param string|null $ytd_taxes ytd_taxes
     *
     * @return self
     */
    public function setYtdTaxes($ytd_taxes)
    {
        if (is_null($ytd_taxes)) {
            throw new \InvalidArgumentException('non-nullable ytd_taxes cannot be null');
        }
        $this->container['ytd_taxes'] = $ytd_taxes;

        return $this;
    }

    /**
     * Gets ytd_deductions
     *
     * @return string|null
     */
    public function getYtdDeductions()
    {
        return $this->container['ytd_deductions'];
    }

    /**
     * Sets ytd_deductions
     *
     * @param string|null $ytd_deductions ytd_deductions
     *
     * @return self
     */
    public function setYtdDeductions($ytd_deductions)
    {
        if (is_null($ytd_deductions)) {
            throw new \InvalidArgumentException('non-nullable ytd_deductions cannot be null');
        }
        $this->container['ytd_deductions'] = $ytd_deductions;

        return $this;
    }

    /**
     * Gets fed_witholding
     *
     * @return string|null
     */
    public function getFedWitholding()
    {
        return $this->container['fed_witholding'];
    }

    /**
     * Sets fed_witholding
     *
     * @param string|null $fed_witholding fed_witholding
     *
     * @return self
     */
    public function setFedWitholding($fed_witholding)
    {
        if (is_null($fed_witholding)) {
            throw new \InvalidArgumentException('non-nullable fed_witholding cannot be null');
        }
        $this->container['fed_witholding'] = $fed_witholding;

        return $this;
    }

    /**
     * Gets federal_type
     *
     * @return string|null
     */
    public function getFederalType()
    {
        return $this->container['federal_type'];
    }

    /**
     * Sets federal_type
     *
     * @param string|null $federal_type must be 2020_w4, pre_2020_w4, or null
     *
     * @return self
     */
    public function setFederalType($federal_type)
    {
        if (is_null($federal_type)) {
            throw new \InvalidArgumentException('non-nullable federal_type cannot be null');
        }
        $allowedValues = $this->getFederalTypeAllowableValues();
        if (!in_array($federal_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'federal_type', must be one of '%s'",
                    $federal_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['federal_type'] = $federal_type;

        return $this;
    }

    /**
     * Gets two_jobs
     *
     * @return string|null
     */
    public function getTwoJobs()
    {
        return $this->container['two_jobs'];
    }

    /**
     * Sets two_jobs
     *
     * @param string|null $two_jobs boolean value
     *
     * @return self
     */
    public function setTwoJobs($two_jobs)
    {
        if (is_null($two_jobs)) {
            throw new \InvalidArgumentException('non-nullable two_jobs cannot be null');
        }
        $this->container['two_jobs'] = $two_jobs;

        return $this;
    }

    /**
     * Gets dependents_amount
     *
     * @return string|null
     */
    public function getDependentsAmount()
    {
        return $this->container['dependents_amount'];
    }

    /**
     * Sets dependents_amount
     *
     * @param string|null $dependents_amount float value
     *
     * @return self
     */
    public function setDependentsAmount($dependents_amount)
    {
        if (is_null($dependents_amount)) {
            throw new \InvalidArgumentException('non-nullable dependents_amount cannot be null');
        }
        $this->container['dependents_amount'] = $dependents_amount;

        return $this;
    }

    /**
     * Gets other_income
     *
     * @return string|null
     */
    public function getOtherIncome()
    {
        return $this->container['other_income'];
    }

    /**
     * Sets other_income
     *
     * @param string|null $other_income float value
     *
     * @return self
     */
    public function setOtherIncome($other_income)
    {
        if (is_null($other_income)) {
            throw new \InvalidArgumentException('non-nullable other_income cannot be null');
        }
        $this->container['other_income'] = $other_income;

        return $this;
    }

    /**
     * Gets deductions_amount
     *
     * @return string|null
     */
    public function getDeductionsAmount()
    {
        return $this->container['deductions_amount'];
    }

    /**
     * Sets deductions_amount
     *
     * @param string|null $deductions_amount float value
     *
     * @return self
     */
    public function setDeductionsAmount($deductions_amount)
    {
        if (is_null($deductions_amount)) {
            throw new \InvalidArgumentException('non-nullable deductions_amount cannot be null');
        }
        $this->container['deductions_amount'] = $deductions_amount;

        return $this;
    }

    /**
     * Gets state_withholding
     *
     * @return string|null
     */
    public function getStateWithholding()
    {
        return $this->container['state_withholding'];
    }

    /**
     * Sets state_withholding
     *
     * @param string|null $state_withholding state_withholding
     *
     * @return self
     */
    public function setStateWithholding($state_withholding)
    {
        if (is_null($state_withholding)) {
            throw new \InvalidArgumentException('non-nullable state_withholding cannot be null');
        }
        $this->container['state_withholding'] = $state_withholding;

        return $this;
    }

    /**
     * Gets local_withholding
     *
     * @return string|null
     */
    public function getLocalWithholding()
    {
        return $this->container['local_withholding'];
    }

    /**
     * Sets local_withholding
     *
     * @param string|null $local_withholding local_withholding
     *
     * @return self
     */
    public function setLocalWithholding($local_withholding)
    {
        if (is_null($local_withholding)) {
            throw new \InvalidArgumentException('non-nullable local_withholding cannot be null');
        }
        $this->container['local_withholding'] = $local_withholding;

        return $this;
    }

    /**
     * Gets additional_fed
     *
     * @return string|null
     */
    public function getAdditionalFed()
    {
        return $this->container['additional_fed'];
    }

    /**
     * Sets additional_fed
     *
     * @param string|null $additional_fed additional_fed
     *
     * @return self
     */
    public function setAdditionalFed($additional_fed)
    {
        if (is_null($additional_fed)) {
            throw new \InvalidArgumentException('non-nullable additional_fed cannot be null');
        }
        $this->container['additional_fed'] = $additional_fed;

        return $this;
    }

    /**
     * Gets additional_state
     *
     * @return string|null
     */
    public function getAdditionalState()
    {
        return $this->container['additional_state'];
    }

    /**
     * Sets additional_state
     *
     * @param string|null $additional_state additional_state
     *
     * @return self
     */
    public function setAdditionalState($additional_state)
    {
        if (is_null($additional_state)) {
            throw new \InvalidArgumentException('non-nullable additional_state cannot be null');
        }
        $this->container['additional_state'] = $additional_state;

        return $this;
    }

    /**
     * Gets additional_local
     *
     * @return string|null
     */
    public function getAdditionalLocal()
    {
        return $this->container['additional_local'];
    }

    /**
     * Sets additional_local
     *
     * @param string|null $additional_local additional_local
     *
     * @return self
     */
    public function setAdditionalLocal($additional_local)
    {
        if (is_null($additional_local)) {
            throw new \InvalidArgumentException('non-nullable additional_local cannot be null');
        }
        $this->container['additional_local'] = $additional_local;

        return $this;
    }

    /**
     * Gets tax_state
     *
     * @return string|null
     */
    public function getTaxState()
    {
        return $this->container['tax_state'];
    }

    /**
     * Sets tax_state
     *
     * @param string|null $tax_state tax_state
     *
     * @return self
     */
    public function setTaxState($tax_state)
    {
        if (is_null($tax_state)) {
            throw new \InvalidArgumentException('non-nullable tax_state cannot be null');
        }
        $this->container['tax_state'] = $tax_state;

        return $this;
    }

    /**
     * Gets tax_local
     *
     * @return string|null
     */
    public function getTaxLocal()
    {
        return $this->container['tax_local'];
    }

    /**
     * Sets tax_local
     *
     * @param string|null $tax_local tax_local
     *
     * @return self
     */
    public function setTaxLocal($tax_local)
    {
        if (is_null($tax_local)) {
            throw new \InvalidArgumentException('non-nullable tax_local cannot be null');
        }
        $this->container['tax_local'] = $tax_local;

        return $this;
    }

    /**
     * Gets wages
     *
     * @return object[]|null
     */
    public function getWages()
    {
        return $this->container['wages'];
    }

    /**
     * Sets wages
     *
     * @param object[]|null $wages wages
     *
     * @return self
     */
    public function setWages($wages)
    {
        if (is_null($wages)) {
            throw new \InvalidArgumentException('non-nullable wages cannot be null');
        }
        $this->container['wages'] = $wages;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return object[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param object[]|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return object[]|null
     */
    public function getDeductions()
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param object[]|null $deductions deductions
     *
     * @return self
     */
    public function setDeductions($deductions)
    {
        if (is_null($deductions)) {
            throw new \InvalidArgumentException('non-nullable deductions cannot be null');
        }
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets deposits
     *
     * @return object[]|null
     */
    public function getDeposits()
    {
        return $this->container['deposits'];
    }

    /**
     * Sets deposits
     *
     * @param object[]|null $deposits deposits
     *
     * @return self
     */
    public function setDeposits($deposits)
    {
        if (is_null($deposits)) {
            throw new \InvalidArgumentException('non-nullable deposits cannot be null');
        }
        $this->container['deposits'] = $deposits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


