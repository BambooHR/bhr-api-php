<?php
/**
 * LevelsAndBandsCompPlanningEmployee
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * LevelsAndBandsCompPlanningEmployee Class Doc Comment
 *
 * @category Class
 * @description Levels and Bands Employee
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LevelsAndBandsCompPlanningEmployee implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LevelsAndBands-CompPlanningEmployee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'job_title' => 'string',
        'hire_date' => '\DateTime',
        'current_compensation' => 'float',
        'current_compensation_ratio' => 'float',
        'paid_per' => 'string',
        'compensation_level' => '\MySdk\Model\LevelsAndBandsCompPlanningLevel',
        'currency_code' => 'string',
        'employment_status' => 'string',
        'compensation_effective_date' => '\DateTime',
        'photo_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'job_title' => null,
        'hire_date' => 'date',
        'current_compensation' => 'float',
        'current_compensation_ratio' => 'float',
        'paid_per' => null,
        'compensation_level' => null,
        'currency_code' => null,
        'employment_status' => null,
        'compensation_effective_date' => 'date',
        'photo_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'job_title' => true,
        'hire_date' => true,
        'current_compensation' => true,
        'current_compensation_ratio' => true,
        'paid_per' => true,
        'compensation_level' => true,
        'currency_code' => true,
        'employment_status' => true,
        'compensation_effective_date' => true,
        'photo_url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'job_title' => 'jobTitle',
        'hire_date' => 'hireDate',
        'current_compensation' => 'currentCompensation',
        'current_compensation_ratio' => 'currentCompensationRatio',
        'paid_per' => 'paidPer',
        'compensation_level' => 'compensationLevel',
        'currency_code' => 'currencyCode',
        'employment_status' => 'employmentStatus',
        'compensation_effective_date' => 'compensationEffectiveDate',
        'photo_url' => 'photoUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'job_title' => 'setJobTitle',
        'hire_date' => 'setHireDate',
        'current_compensation' => 'setCurrentCompensation',
        'current_compensation_ratio' => 'setCurrentCompensationRatio',
        'paid_per' => 'setPaidPer',
        'compensation_level' => 'setCompensationLevel',
        'currency_code' => 'setCurrencyCode',
        'employment_status' => 'setEmploymentStatus',
        'compensation_effective_date' => 'setCompensationEffectiveDate',
        'photo_url' => 'setPhotoUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'job_title' => 'getJobTitle',
        'hire_date' => 'getHireDate',
        'current_compensation' => 'getCurrentCompensation',
        'current_compensation_ratio' => 'getCurrentCompensationRatio',
        'paid_per' => 'getPaidPer',
        'compensation_level' => 'getCompensationLevel',
        'currency_code' => 'getCurrencyCode',
        'employment_status' => 'getEmploymentStatus',
        'compensation_effective_date' => 'getCompensationEffectiveDate',
        'photo_url' => 'getPhotoUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('hire_date', $data ?? [], null);
        $this->setIfExists('current_compensation', $data ?? [], null);
        $this->setIfExists('current_compensation_ratio', $data ?? [], null);
        $this->setIfExists('paid_per', $data ?? [], null);
        $this->setIfExists('compensation_level', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('employment_status', $data ?? [], null);
        $this->setIfExists('compensation_effective_date', $data ?? [], null);
        $this->setIfExists('photo_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Employee id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Employee name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Employee job title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            array_push($this->openAPINullablesSetToNull, 'job_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets hire_date
     *
     * @return \DateTime|null
     */
    public function getHireDate()
    {
        return $this->container['hire_date'];
    }

    /**
     * Sets hire_date
     *
     * @param \DateTime|null $hire_date Employee hire date
     *
     * @return self
     */
    public function setHireDate($hire_date)
    {
        if (is_null($hire_date)) {
            array_push($this->openAPINullablesSetToNull, 'hire_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hire_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hire_date'] = $hire_date;

        return $this;
    }

    /**
     * Gets current_compensation
     *
     * @return float|null
     */
    public function getCurrentCompensation()
    {
        return $this->container['current_compensation'];
    }

    /**
     * Sets current_compensation
     *
     * @param float|null $current_compensation Employee current compensation
     *
     * @return self
     */
    public function setCurrentCompensation($current_compensation)
    {
        if (is_null($current_compensation)) {
            array_push($this->openAPINullablesSetToNull, 'current_compensation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_compensation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_compensation'] = $current_compensation;

        return $this;
    }

    /**
     * Gets current_compensation_ratio
     *
     * @return float|null
     */
    public function getCurrentCompensationRatio()
    {
        return $this->container['current_compensation_ratio'];
    }

    /**
     * Sets current_compensation_ratio
     *
     * @param float|null $current_compensation_ratio Employee current compensation ratio
     *
     * @return self
     */
    public function setCurrentCompensationRatio($current_compensation_ratio)
    {
        if (is_null($current_compensation_ratio)) {
            array_push($this->openAPINullablesSetToNull, 'current_compensation_ratio');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_compensation_ratio', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_compensation_ratio'] = $current_compensation_ratio;

        return $this;
    }

    /**
     * Gets paid_per
     *
     * @return string|null
     */
    public function getPaidPer()
    {
        return $this->container['paid_per'];
    }

    /**
     * Sets paid_per
     *
     * @param string|null $paid_per Employee paid per
     *
     * @return self
     */
    public function setPaidPer($paid_per)
    {
        if (is_null($paid_per)) {
            array_push($this->openAPINullablesSetToNull, 'paid_per');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paid_per', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paid_per'] = $paid_per;

        return $this;
    }

    /**
     * Gets compensation_level
     *
     * @return \MySdk\Model\LevelsAndBandsCompPlanningLevel|null
     */
    public function getCompensationLevel()
    {
        return $this->container['compensation_level'];
    }

    /**
     * Sets compensation_level
     *
     * @param \MySdk\Model\LevelsAndBandsCompPlanningLevel|null $compensation_level compensation_level
     *
     * @return self
     */
    public function setCompensationLevel($compensation_level)
    {
        if (is_null($compensation_level)) {
            array_push($this->openAPINullablesSetToNull, 'compensation_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('compensation_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['compensation_level'] = $compensation_level;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Employee currency code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            array_push($this->openAPINullablesSetToNull, 'currency_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets employment_status
     *
     * @return string|null
     */
    public function getEmploymentStatus()
    {
        return $this->container['employment_status'];
    }

    /**
     * Sets employment_status
     *
     * @param string|null $employment_status Employee employement status
     *
     * @return self
     */
    public function setEmploymentStatus($employment_status)
    {
        if (is_null($employment_status)) {
            array_push($this->openAPINullablesSetToNull, 'employment_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employment_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employment_status'] = $employment_status;

        return $this;
    }

    /**
     * Gets compensation_effective_date
     *
     * @return \DateTime|null
     */
    public function getCompensationEffectiveDate()
    {
        return $this->container['compensation_effective_date'];
    }

    /**
     * Sets compensation_effective_date
     *
     * @param \DateTime|null $compensation_effective_date Employee compensation effective date
     *
     * @return self
     */
    public function setCompensationEffectiveDate($compensation_effective_date)
    {
        if (is_null($compensation_effective_date)) {
            array_push($this->openAPINullablesSetToNull, 'compensation_effective_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('compensation_effective_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['compensation_effective_date'] = $compensation_effective_date;

        return $this;
    }

    /**
     * Gets photo_url
     *
     * @return string|null
     */
    public function getPhotoUrl()
    {
        return $this->container['photo_url'];
    }

    /**
     * Sets photo_url
     *
     * @param string|null $photo_url Employee photo url
     *
     * @return self
     */
    public function setPhotoUrl($photo_url)
    {
        if (is_null($photo_url)) {
            array_push($this->openAPINullablesSetToNull, 'photo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photo_url'] = $photo_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


