<?php
/**
 * EmployeeTaskFileDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeTaskFileDataObject Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeTaskFileDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeTaskFileDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'employee_tasklist_item_id' => 'int',
        'file_id' => 'int',
        'is_esignature' => 'bool',
        'esignature_workflow_id' => 'int',
        'workflow_instance_id' => 'int',
        'esignature_required' => 'bool',
        'esignature_instance_id' => 'int',
        'esignature_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'employee_tasklist_item_id' => null,
        'file_id' => null,
        'is_esignature' => null,
        'esignature_workflow_id' => null,
        'workflow_instance_id' => null,
        'esignature_required' => null,
        'esignature_instance_id' => null,
        'esignature_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'employee_tasklist_item_id' => true,
        'file_id' => true,
        'is_esignature' => true,
        'esignature_workflow_id' => true,
        'workflow_instance_id' => true,
        'esignature_required' => false,
        'esignature_instance_id' => true,
        'esignature_status' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_tasklist_item_id' => 'employeeTasklistItemId',
        'file_id' => 'fileId',
        'is_esignature' => 'isEsignature',
        'esignature_workflow_id' => 'esignatureWorkflowId',
        'workflow_instance_id' => 'workflowInstanceId',
        'esignature_required' => 'esignatureRequired',
        'esignature_instance_id' => 'esignatureInstanceId',
        'esignature_status' => 'esignatureStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_tasklist_item_id' => 'setEmployeeTasklistItemId',
        'file_id' => 'setFileId',
        'is_esignature' => 'setIsEsignature',
        'esignature_workflow_id' => 'setEsignatureWorkflowId',
        'workflow_instance_id' => 'setWorkflowInstanceId',
        'esignature_required' => 'setEsignatureRequired',
        'esignature_instance_id' => 'setEsignatureInstanceId',
        'esignature_status' => 'setEsignatureStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_tasklist_item_id' => 'getEmployeeTasklistItemId',
        'file_id' => 'getFileId',
        'is_esignature' => 'getIsEsignature',
        'esignature_workflow_id' => 'getEsignatureWorkflowId',
        'workflow_instance_id' => 'getWorkflowInstanceId',
        'esignature_required' => 'getEsignatureRequired',
        'esignature_instance_id' => 'getEsignatureInstanceId',
        'esignature_status' => 'getEsignatureStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_tasklist_item_id', $data ?? [], null);
        $this->setIfExists('file_id', $data ?? [], null);
        $this->setIfExists('is_esignature', $data ?? [], null);
        $this->setIfExists('esignature_workflow_id', $data ?? [], null);
        $this->setIfExists('workflow_instance_id', $data ?? [], null);
        $this->setIfExists('esignature_required', $data ?? [], false);
        $this->setIfExists('esignature_instance_id', $data ?? [], null);
        $this->setIfExists('esignature_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the task list item file
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_tasklist_item_id
     *
     * @return int|null
     */
    public function getEmployeeTasklistItemId()
    {
        return $this->container['employee_tasklist_item_id'];
    }

    /**
     * Sets employee_tasklist_item_id
     *
     * @param int|null $employee_tasklist_item_id The ID of the employee task list item
     *
     * @return self
     */
    public function setEmployeeTasklistItemId($employee_tasklist_item_id)
    {
        if (is_null($employee_tasklist_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'employee_tasklist_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_tasklist_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_tasklist_item_id'] = $employee_tasklist_item_id;

        return $this;
    }

    /**
     * Gets file_id
     *
     * @return int|null
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param int|null $file_id The ID of the file
     *
     * @return self
     */
    public function setFileId($file_id)
    {
        if (is_null($file_id)) {
            array_push($this->openAPINullablesSetToNull, 'file_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets is_esignature
     *
     * @return bool|null
     */
    public function getIsEsignature()
    {
        return $this->container['is_esignature'];
    }

    /**
     * Sets is_esignature
     *
     * @param bool|null $is_esignature Whether the file is an e-signature
     *
     * @return self
     */
    public function setIsEsignature($is_esignature)
    {
        if (is_null($is_esignature)) {
            array_push($this->openAPINullablesSetToNull, 'is_esignature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_esignature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_esignature'] = $is_esignature;

        return $this;
    }

    /**
     * Gets esignature_workflow_id
     *
     * @return int|null
     */
    public function getEsignatureWorkflowId()
    {
        return $this->container['esignature_workflow_id'];
    }

    /**
     * Sets esignature_workflow_id
     *
     * @param int|null $esignature_workflow_id The ID of the e-signature workflow
     *
     * @return self
     */
    public function setEsignatureWorkflowId($esignature_workflow_id)
    {
        if (is_null($esignature_workflow_id)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_workflow_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_workflow_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_workflow_id'] = $esignature_workflow_id;

        return $this;
    }

    /**
     * Gets workflow_instance_id
     *
     * @return int|null
     */
    public function getWorkflowInstanceId()
    {
        return $this->container['workflow_instance_id'];
    }

    /**
     * Sets workflow_instance_id
     *
     * @param int|null $workflow_instance_id The ID of the workflow instance
     *
     * @return self
     */
    public function setWorkflowInstanceId($workflow_instance_id)
    {
        if (is_null($workflow_instance_id)) {
            array_push($this->openAPINullablesSetToNull, 'workflow_instance_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workflow_instance_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workflow_instance_id'] = $workflow_instance_id;

        return $this;
    }

    /**
     * Gets esignature_required
     *
     * @return bool|null
     */
    public function getEsignatureRequired()
    {
        return $this->container['esignature_required'];
    }

    /**
     * Sets esignature_required
     *
     * @param bool|null $esignature_required Whether the e-signature is required
     *
     * @return self
     */
    public function setEsignatureRequired($esignature_required)
    {
        if (is_null($esignature_required)) {
            throw new \InvalidArgumentException('non-nullable esignature_required cannot be null');
        }
        $this->container['esignature_required'] = $esignature_required;

        return $this;
    }

    /**
     * Gets esignature_instance_id
     *
     * @return int|null
     */
    public function getEsignatureInstanceId()
    {
        return $this->container['esignature_instance_id'];
    }

    /**
     * Sets esignature_instance_id
     *
     * @param int|null $esignature_instance_id The ID of the e-signature instance
     *
     * @return self
     */
    public function setEsignatureInstanceId($esignature_instance_id)
    {
        if (is_null($esignature_instance_id)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_instance_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_instance_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_instance_id'] = $esignature_instance_id;

        return $this;
    }

    /**
     * Gets esignature_status
     *
     * @return string|null
     */
    public function getEsignatureStatus()
    {
        return $this->container['esignature_status'];
    }

    /**
     * Sets esignature_status
     *
     * @param string|null $esignature_status The status of the e-signature
     *
     * @return self
     */
    public function setEsignatureStatus($esignature_status)
    {
        if (is_null($esignature_status)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_status'] = $esignature_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


