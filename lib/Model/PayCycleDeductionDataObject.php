<?php
/**
 * PayCycleDeductionDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayCycleDeductionDataObject Class Doc Comment
 *
 * @category Class
 * @description Pay Cycle Deduction Data Object
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayCycleDeductionDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayCycleDeductionDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_amount' => 'float',
        'employee_amount_type' => 'string',
        'employee_rate' => 'float',
        'employer_rate' => 'float',
        'employee_based_on' => 'string',
        'employer_amount' => 'float',
        'employer_amount_type' => 'string',
        'employer_based_on' => 'string',
        'name' => 'string',
        'deduction_type' => 'string',
        'is_benefit' => 'bool',
        'has_change' => 'bool',
        'change_type' => 'string',
        'deduction_id' => 'int',
        'company_deduction_id' => 'int',
        'benefit_plan_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_amount' => null,
        'employee_amount_type' => null,
        'employee_rate' => null,
        'employer_rate' => null,
        'employee_based_on' => null,
        'employer_amount' => null,
        'employer_amount_type' => null,
        'employer_based_on' => null,
        'name' => null,
        'deduction_type' => null,
        'is_benefit' => null,
        'has_change' => null,
        'change_type' => null,
        'deduction_id' => null,
        'company_deduction_id' => null,
        'benefit_plan_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_amount' => false,
        'employee_amount_type' => false,
        'employee_rate' => true,
        'employer_rate' => true,
        'employee_based_on' => true,
        'employer_amount' => true,
        'employer_amount_type' => true,
        'employer_based_on' => true,
        'name' => false,
        'deduction_type' => true,
        'is_benefit' => true,
        'has_change' => true,
        'change_type' => true,
        'deduction_id' => false,
        'company_deduction_id' => false,
        'benefit_plan_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_amount' => 'employeeAmount',
        'employee_amount_type' => 'employeeAmountType',
        'employee_rate' => 'employeeRate',
        'employer_rate' => 'employerRate',
        'employee_based_on' => 'employeeBasedOn',
        'employer_amount' => 'employerAmount',
        'employer_amount_type' => 'employerAmountType',
        'employer_based_on' => 'employerBasedOn',
        'name' => 'name',
        'deduction_type' => 'deductionType',
        'is_benefit' => 'isBenefit',
        'has_change' => 'hasChange',
        'change_type' => 'changeType',
        'deduction_id' => 'deductionId',
        'company_deduction_id' => 'companyDeductionId',
        'benefit_plan_id' => 'benefitPlanId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_amount' => 'setEmployeeAmount',
        'employee_amount_type' => 'setEmployeeAmountType',
        'employee_rate' => 'setEmployeeRate',
        'employer_rate' => 'setEmployerRate',
        'employee_based_on' => 'setEmployeeBasedOn',
        'employer_amount' => 'setEmployerAmount',
        'employer_amount_type' => 'setEmployerAmountType',
        'employer_based_on' => 'setEmployerBasedOn',
        'name' => 'setName',
        'deduction_type' => 'setDeductionType',
        'is_benefit' => 'setIsBenefit',
        'has_change' => 'setHasChange',
        'change_type' => 'setChangeType',
        'deduction_id' => 'setDeductionId',
        'company_deduction_id' => 'setCompanyDeductionId',
        'benefit_plan_id' => 'setBenefitPlanId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_amount' => 'getEmployeeAmount',
        'employee_amount_type' => 'getEmployeeAmountType',
        'employee_rate' => 'getEmployeeRate',
        'employer_rate' => 'getEmployerRate',
        'employee_based_on' => 'getEmployeeBasedOn',
        'employer_amount' => 'getEmployerAmount',
        'employer_amount_type' => 'getEmployerAmountType',
        'employer_based_on' => 'getEmployerBasedOn',
        'name' => 'getName',
        'deduction_type' => 'getDeductionType',
        'is_benefit' => 'getIsBenefit',
        'has_change' => 'getHasChange',
        'change_type' => 'getChangeType',
        'deduction_id' => 'getDeductionId',
        'company_deduction_id' => 'getCompanyDeductionId',
        'benefit_plan_id' => 'getBenefitPlanId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_amount', $data ?? [], null);
        $this->setIfExists('employee_amount_type', $data ?? [], null);
        $this->setIfExists('employee_rate', $data ?? [], null);
        $this->setIfExists('employer_rate', $data ?? [], null);
        $this->setIfExists('employee_based_on', $data ?? [], null);
        $this->setIfExists('employer_amount', $data ?? [], null);
        $this->setIfExists('employer_amount_type', $data ?? [], null);
        $this->setIfExists('employer_based_on', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('deduction_type', $data ?? [], null);
        $this->setIfExists('is_benefit', $data ?? [], null);
        $this->setIfExists('has_change', $data ?? [], null);
        $this->setIfExists('change_type', $data ?? [], null);
        $this->setIfExists('deduction_id', $data ?? [], null);
        $this->setIfExists('company_deduction_id', $data ?? [], null);
        $this->setIfExists('benefit_plan_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_amount
     *
     * @return float|null
     */
    public function getEmployeeAmount()
    {
        return $this->container['employee_amount'];
    }

    /**
     * Sets employee_amount
     *
     * @param float|null $employee_amount Employee Amount
     *
     * @return self
     */
    public function setEmployeeAmount($employee_amount)
    {
        if (is_null($employee_amount)) {
            throw new \InvalidArgumentException('non-nullable employee_amount cannot be null');
        }
        $this->container['employee_amount'] = $employee_amount;

        return $this;
    }

    /**
     * Gets employee_amount_type
     *
     * @return string|null
     */
    public function getEmployeeAmountType()
    {
        return $this->container['employee_amount_type'];
    }

    /**
     * Sets employee_amount_type
     *
     * @param string|null $employee_amount_type Employee Amount Type
     *
     * @return self
     */
    public function setEmployeeAmountType($employee_amount_type)
    {
        if (is_null($employee_amount_type)) {
            throw new \InvalidArgumentException('non-nullable employee_amount_type cannot be null');
        }
        $this->container['employee_amount_type'] = $employee_amount_type;

        return $this;
    }

    /**
     * Gets employee_rate
     *
     * @return float|null
     */
    public function getEmployeeRate()
    {
        return $this->container['employee_rate'];
    }

    /**
     * Sets employee_rate
     *
     * @param float|null $employee_rate Employee Rate
     *
     * @return self
     */
    public function setEmployeeRate($employee_rate)
    {
        if (is_null($employee_rate)) {
            array_push($this->openAPINullablesSetToNull, 'employee_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_rate'] = $employee_rate;

        return $this;
    }

    /**
     * Gets employer_rate
     *
     * @return float|null
     */
    public function getEmployerRate()
    {
        return $this->container['employer_rate'];
    }

    /**
     * Sets employer_rate
     *
     * @param float|null $employer_rate Employer Rate
     *
     * @return self
     */
    public function setEmployerRate($employer_rate)
    {
        if (is_null($employer_rate)) {
            array_push($this->openAPINullablesSetToNull, 'employer_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employer_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employer_rate'] = $employer_rate;

        return $this;
    }

    /**
     * Gets employee_based_on
     *
     * @return string|null
     */
    public function getEmployeeBasedOn()
    {
        return $this->container['employee_based_on'];
    }

    /**
     * Sets employee_based_on
     *
     * @param string|null $employee_based_on Employee Based On
     *
     * @return self
     */
    public function setEmployeeBasedOn($employee_based_on)
    {
        if (is_null($employee_based_on)) {
            array_push($this->openAPINullablesSetToNull, 'employee_based_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_based_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_based_on'] = $employee_based_on;

        return $this;
    }

    /**
     * Gets employer_amount
     *
     * @return float|null
     */
    public function getEmployerAmount()
    {
        return $this->container['employer_amount'];
    }

    /**
     * Sets employer_amount
     *
     * @param float|null $employer_amount Employer Amount
     *
     * @return self
     */
    public function setEmployerAmount($employer_amount)
    {
        if (is_null($employer_amount)) {
            array_push($this->openAPINullablesSetToNull, 'employer_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employer_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employer_amount'] = $employer_amount;

        return $this;
    }

    /**
     * Gets employer_amount_type
     *
     * @return string|null
     */
    public function getEmployerAmountType()
    {
        return $this->container['employer_amount_type'];
    }

    /**
     * Sets employer_amount_type
     *
     * @param string|null $employer_amount_type Employer Amount Type
     *
     * @return self
     */
    public function setEmployerAmountType($employer_amount_type)
    {
        if (is_null($employer_amount_type)) {
            array_push($this->openAPINullablesSetToNull, 'employer_amount_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employer_amount_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employer_amount_type'] = $employer_amount_type;

        return $this;
    }

    /**
     * Gets employer_based_on
     *
     * @return string|null
     */
    public function getEmployerBasedOn()
    {
        return $this->container['employer_based_on'];
    }

    /**
     * Sets employer_based_on
     *
     * @param string|null $employer_based_on Employer Based On
     *
     * @return self
     */
    public function setEmployerBasedOn($employer_based_on)
    {
        if (is_null($employer_based_on)) {
            array_push($this->openAPINullablesSetToNull, 'employer_based_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employer_based_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employer_based_on'] = $employer_based_on;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets deduction_type
     *
     * @return string|null
     */
    public function getDeductionType()
    {
        return $this->container['deduction_type'];
    }

    /**
     * Sets deduction_type
     *
     * @param string|null $deduction_type Deduction Type
     *
     * @return self
     */
    public function setDeductionType($deduction_type)
    {
        if (is_null($deduction_type)) {
            array_push($this->openAPINullablesSetToNull, 'deduction_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deduction_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deduction_type'] = $deduction_type;

        return $this;
    }

    /**
     * Gets is_benefit
     *
     * @return bool|null
     */
    public function getIsBenefit()
    {
        return $this->container['is_benefit'];
    }

    /**
     * Sets is_benefit
     *
     * @param bool|null $is_benefit Is Benefit
     *
     * @return self
     */
    public function setIsBenefit($is_benefit)
    {
        if (is_null($is_benefit)) {
            array_push($this->openAPINullablesSetToNull, 'is_benefit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_benefit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_benefit'] = $is_benefit;

        return $this;
    }

    /**
     * Gets has_change
     *
     * @return bool|null
     */
    public function getHasChange()
    {
        return $this->container['has_change'];
    }

    /**
     * Sets has_change
     *
     * @param bool|null $has_change Has Change
     *
     * @return self
     */
    public function setHasChange($has_change)
    {
        if (is_null($has_change)) {
            array_push($this->openAPINullablesSetToNull, 'has_change');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_change', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_change'] = $has_change;

        return $this;
    }

    /**
     * Gets change_type
     *
     * @return string|null
     */
    public function getChangeType()
    {
        return $this->container['change_type'];
    }

    /**
     * Sets change_type
     *
     * @param string|null $change_type Change Type
     *
     * @return self
     */
    public function setChangeType($change_type)
    {
        if (is_null($change_type)) {
            array_push($this->openAPINullablesSetToNull, 'change_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('change_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['change_type'] = $change_type;

        return $this;
    }

    /**
     * Gets deduction_id
     *
     * @return int|null
     */
    public function getDeductionId()
    {
        return $this->container['deduction_id'];
    }

    /**
     * Sets deduction_id
     *
     * @param int|null $deduction_id Deduction Id
     *
     * @return self
     */
    public function setDeductionId($deduction_id)
    {
        if (is_null($deduction_id)) {
            throw new \InvalidArgumentException('non-nullable deduction_id cannot be null');
        }
        $this->container['deduction_id'] = $deduction_id;

        return $this;
    }

    /**
     * Gets company_deduction_id
     *
     * @return int|null
     */
    public function getCompanyDeductionId()
    {
        return $this->container['company_deduction_id'];
    }

    /**
     * Sets company_deduction_id
     *
     * @param int|null $company_deduction_id Company Deduction Id
     *
     * @return self
     */
    public function setCompanyDeductionId($company_deduction_id)
    {
        if (is_null($company_deduction_id)) {
            throw new \InvalidArgumentException('non-nullable company_deduction_id cannot be null');
        }
        $this->container['company_deduction_id'] = $company_deduction_id;

        return $this;
    }

    /**
     * Gets benefit_plan_id
     *
     * @return int|null
     */
    public function getBenefitPlanId()
    {
        return $this->container['benefit_plan_id'];
    }

    /**
     * Sets benefit_plan_id
     *
     * @param int|null $benefit_plan_id Benefit Plan Id
     *
     * @return self
     */
    public function setBenefitPlanId($benefit_plan_id)
    {
        if (is_null($benefit_plan_id)) {
            array_push($this->openAPINullablesSetToNull, 'benefit_plan_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('benefit_plan_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['benefit_plan_id'] = $benefit_plan_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


