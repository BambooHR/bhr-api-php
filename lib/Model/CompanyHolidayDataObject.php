<?php
/**
 * CompanyHolidayDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * CompanyHolidayDataObject Class Doc Comment
 *
 * @category Class
 * @description Company holiday information including date range, name, and payment details
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyHolidayDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyHolidayDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'company_id' => 'string',
        'name' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'standard_holiday_id' => 'string',
        'apply_pay_multiplier' => 'string',
        'pay_type' => 'string',
        'default_hours' => 'string',
        'multiplier' => 'string',
        'updated_ymdt' => '\DateTime',
        'deleted_ymdt' => '\DateTime',
        'created_ymdt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'company_id' => null,
        'name' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'standard_holiday_id' => null,
        'apply_pay_multiplier' => null,
        'pay_type' => null,
        'default_hours' => null,
        'multiplier' => null,
        'updated_ymdt' => 'date-time',
        'deleted_ymdt' => 'date-time',
        'created_ymdt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'company_id' => false,
        'name' => false,
        'start_date' => false,
        'end_date' => true,
        'standard_holiday_id' => true,
        'apply_pay_multiplier' => false,
        'pay_type' => false,
        'default_hours' => false,
        'multiplier' => false,
        'updated_ymdt' => false,
        'deleted_ymdt' => true,
        'created_ymdt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'name' => 'name',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'standard_holiday_id' => 'standardHolidayId',
        'apply_pay_multiplier' => 'applyPayMultiplier',
        'pay_type' => 'payType',
        'default_hours' => 'defaultHours',
        'multiplier' => 'multiplier',
        'updated_ymdt' => 'updatedYmdt',
        'deleted_ymdt' => 'deletedYmdt',
        'created_ymdt' => 'createdYmdt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'name' => 'setName',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'standard_holiday_id' => 'setStandardHolidayId',
        'apply_pay_multiplier' => 'setApplyPayMultiplier',
        'pay_type' => 'setPayType',
        'default_hours' => 'setDefaultHours',
        'multiplier' => 'setMultiplier',
        'updated_ymdt' => 'setUpdatedYmdt',
        'deleted_ymdt' => 'setDeletedYmdt',
        'created_ymdt' => 'setCreatedYmdt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'name' => 'getName',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'standard_holiday_id' => 'getStandardHolidayId',
        'apply_pay_multiplier' => 'getApplyPayMultiplier',
        'pay_type' => 'getPayType',
        'default_hours' => 'getDefaultHours',
        'multiplier' => 'getMultiplier',
        'updated_ymdt' => 'getUpdatedYmdt',
        'deleted_ymdt' => 'getDeletedYmdt',
        'created_ymdt' => 'getCreatedYmdt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const APPLY_PAY_MULTIPLIER_YES = 'yes';
    public const APPLY_PAY_MULTIPLIER_NO = 'no';
    public const PAY_TYPE_NORMAL = 'normal';
    public const PAY_TYPE_MULTIPLIER = 'multiplier';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getApplyPayMultiplierAllowableValues()
    {
        return [
            self::APPLY_PAY_MULTIPLIER_YES,
            self::APPLY_PAY_MULTIPLIER_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayTypeAllowableValues()
    {
        return [
            self::PAY_TYPE_NORMAL,
            self::PAY_TYPE_MULTIPLIER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('company_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('standard_holiday_id', $data ?? [], null);
        $this->setIfExists('apply_pay_multiplier', $data ?? [], null);
        $this->setIfExists('pay_type', $data ?? [], null);
        $this->setIfExists('default_hours', $data ?? [], null);
        $this->setIfExists('multiplier', $data ?? [], null);
        $this->setIfExists('updated_ymdt', $data ?? [], null);
        $this->setIfExists('deleted_ymdt', $data ?? [], null);
        $this->setIfExists('created_ymdt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getApplyPayMultiplierAllowableValues();
        if (!is_null($this->container['apply_pay_multiplier']) && !in_array($this->container['apply_pay_multiplier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'apply_pay_multiplier', must be one of '%s'",
                $this->container['apply_pay_multiplier'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPayTypeAllowableValues();
        if (!is_null($this->container['pay_type']) && !in_array($this->container['pay_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pay_type', must be one of '%s'",
                $this->container['pay_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Holiday ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id Company ID
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        if (is_null($company_id)) {
            throw new \InvalidArgumentException('non-nullable company_id cannot be null');
        }
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Holiday Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Holiday Start Date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date Holiday End Date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets standard_holiday_id
     *
     * @return string|null
     */
    public function getStandardHolidayId()
    {
        return $this->container['standard_holiday_id'];
    }

    /**
     * Sets standard_holiday_id
     *
     * @param string|null $standard_holiday_id Standard holiday ID reference
     *
     * @return self
     */
    public function setStandardHolidayId($standard_holiday_id)
    {
        if (is_null($standard_holiday_id)) {
            array_push($this->openAPINullablesSetToNull, 'standard_holiday_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('standard_holiday_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['standard_holiday_id'] = $standard_holiday_id;

        return $this;
    }

    /**
     * Gets apply_pay_multiplier
     *
     * @return string|null
     */
    public function getApplyPayMultiplier()
    {
        return $this->container['apply_pay_multiplier'];
    }

    /**
     * Sets apply_pay_multiplier
     *
     * @param string|null $apply_pay_multiplier Indicates if pay multiplier should be applied
     *
     * @return self
     */
    public function setApplyPayMultiplier($apply_pay_multiplier)
    {
        if (is_null($apply_pay_multiplier)) {
            throw new \InvalidArgumentException('non-nullable apply_pay_multiplier cannot be null');
        }
        $allowedValues = $this->getApplyPayMultiplierAllowableValues();
        if (!in_array($apply_pay_multiplier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'apply_pay_multiplier', must be one of '%s'",
                    $apply_pay_multiplier,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['apply_pay_multiplier'] = $apply_pay_multiplier;

        return $this;
    }

    /**
     * Gets pay_type
     *
     * @return string|null
     */
    public function getPayType()
    {
        return $this->container['pay_type'];
    }

    /**
     * Sets pay_type
     *
     * @param string|null $pay_type Pay type for the holiday
     *
     * @return self
     */
    public function setPayType($pay_type)
    {
        if (is_null($pay_type)) {
            throw new \InvalidArgumentException('non-nullable pay_type cannot be null');
        }
        $allowedValues = $this->getPayTypeAllowableValues();
        if (!in_array($pay_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pay_type', must be one of '%s'",
                    $pay_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_type'] = $pay_type;

        return $this;
    }

    /**
     * Gets default_hours
     *
     * @return string|null
     */
    public function getDefaultHours()
    {
        return $this->container['default_hours'];
    }

    /**
     * Sets default_hours
     *
     * @param string|null $default_hours Default hours for the holiday
     *
     * @return self
     */
    public function setDefaultHours($default_hours)
    {
        if (is_null($default_hours)) {
            throw new \InvalidArgumentException('non-nullable default_hours cannot be null');
        }
        $this->container['default_hours'] = $default_hours;

        return $this;
    }

    /**
     * Gets multiplier
     *
     * @return string|null
     */
    public function getMultiplier()
    {
        return $this->container['multiplier'];
    }

    /**
     * Sets multiplier
     *
     * @param string|null $multiplier Pay multiplier value
     *
     * @return self
     */
    public function setMultiplier($multiplier)
    {
        if (is_null($multiplier)) {
            throw new \InvalidArgumentException('non-nullable multiplier cannot be null');
        }
        $this->container['multiplier'] = $multiplier;

        return $this;
    }

    /**
     * Gets updated_ymdt
     *
     * @return \DateTime|null
     */
    public function getUpdatedYmdt()
    {
        return $this->container['updated_ymdt'];
    }

    /**
     * Sets updated_ymdt
     *
     * @param \DateTime|null $updated_ymdt Last update timestamp
     *
     * @return self
     */
    public function setUpdatedYmdt($updated_ymdt)
    {
        if (is_null($updated_ymdt)) {
            throw new \InvalidArgumentException('non-nullable updated_ymdt cannot be null');
        }
        $this->container['updated_ymdt'] = $updated_ymdt;

        return $this;
    }

    /**
     * Gets deleted_ymdt
     *
     * @return \DateTime|null
     */
    public function getDeletedYmdt()
    {
        return $this->container['deleted_ymdt'];
    }

    /**
     * Sets deleted_ymdt
     *
     * @param \DateTime|null $deleted_ymdt Deletion timestamp
     *
     * @return self
     */
    public function setDeletedYmdt($deleted_ymdt)
    {
        if (is_null($deleted_ymdt)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_ymdt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_ymdt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_ymdt'] = $deleted_ymdt;

        return $this;
    }

    /**
     * Gets created_ymdt
     *
     * @return \DateTime|null
     */
    public function getCreatedYmdt()
    {
        return $this->container['created_ymdt'];
    }

    /**
     * Sets created_ymdt
     *
     * @param \DateTime|null $created_ymdt Creation timestamp
     *
     * @return self
     */
    public function setCreatedYmdt($created_ymdt)
    {
        if (is_null($created_ymdt)) {
            throw new \InvalidArgumentException('non-nullable created_ymdt cannot be null');
        }
        $this->container['created_ymdt'] = $created_ymdt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


