<?php
/**
 * PayrollTraxPayrollApiControllerTraxEmployeePersonalInformationDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollTraxPayrollApiControllerTraxEmployeePersonalInformationDataObject Class Doc Comment
 *
 * @category Class
 * @description Employee personal information data
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollTraxPayrollApiControllerTraxEmployeePersonalInformationDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payroll.TraxPayrollApiController.TraxEmployeePersonalInformationDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'ssn' => 'string',
        'employee_number' => 'string',
        'last_name' => 'string',
        'first_name' => 'string',
        'middle_name' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'city' => 'string',
        'state_abbrev' => 'string',
        'zipcode' => 'string',
        'best_email' => 'string',
        'home_email' => 'string',
        'date_of_birth' => '\DateTime',
        'hire_date' => '\DateTime',
        'termination_date' => '\DateTime',
        'home_phone' => 'string',
        'mobile_phone' => 'string',
        'pay_group_id' => 'int',
        'marital_status' => 'string',
        'job_title' => 'string',
        'gender' => 'string',
        'employment_history_status' => 'string',
        'pay_schedule_id' => 'int',
        'final_pay_date' => 'string',
        'workers_comp_code' => 'string',
        'original_hire_date' => '\DateTime',
        'hours_per_pay_cycle' => 'string',
        'is_included_in_payroll' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'ssn' => null,
        'employee_number' => null,
        'last_name' => null,
        'first_name' => null,
        'middle_name' => null,
        'address_line1' => null,
        'address_line2' => null,
        'city' => null,
        'state_abbrev' => null,
        'zipcode' => null,
        'best_email' => null,
        'home_email' => null,
        'date_of_birth' => 'date',
        'hire_date' => 'date',
        'termination_date' => 'date',
        'home_phone' => null,
        'mobile_phone' => null,
        'pay_group_id' => null,
        'marital_status' => null,
        'job_title' => null,
        'gender' => null,
        'employment_history_status' => null,
        'pay_schedule_id' => null,
        'final_pay_date' => null,
        'workers_comp_code' => null,
        'original_hire_date' => 'date',
        'hours_per_pay_cycle' => null,
        'is_included_in_payroll' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'ssn' => false,
        'employee_number' => true,
        'last_name' => false,
        'first_name' => false,
        'middle_name' => true,
        'address_line1' => false,
        'address_line2' => true,
        'city' => false,
        'state_abbrev' => false,
        'zipcode' => false,
        'best_email' => true,
        'home_email' => true,
        'date_of_birth' => true,
        'hire_date' => true,
        'termination_date' => true,
        'home_phone' => true,
        'mobile_phone' => true,
        'pay_group_id' => true,
        'marital_status' => true,
        'job_title' => false,
        'gender' => false,
        'employment_history_status' => false,
        'pay_schedule_id' => true,
        'final_pay_date' => true,
        'workers_comp_code' => true,
        'original_hire_date' => true,
        'hours_per_pay_cycle' => true,
        'is_included_in_payroll' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'ssn' => 'ssn',
        'employee_number' => 'employeeNumber',
        'last_name' => 'lastName',
        'first_name' => 'firstName',
        'middle_name' => 'middleName',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'city' => 'city',
        'state_abbrev' => 'stateAbbrev',
        'zipcode' => 'zipcode',
        'best_email' => 'bestEmail',
        'home_email' => 'homeEmail',
        'date_of_birth' => 'dateOfBirth',
        'hire_date' => 'hireDate',
        'termination_date' => 'terminationDate',
        'home_phone' => 'homePhone',
        'mobile_phone' => 'mobilePhone',
        'pay_group_id' => 'payGroupId',
        'marital_status' => 'maritalStatus',
        'job_title' => 'jobTitle',
        'gender' => 'gender',
        'employment_history_status' => 'employmentHistoryStatus',
        'pay_schedule_id' => 'payScheduleId',
        'final_pay_date' => 'finalPayDate',
        'workers_comp_code' => 'workersCompCode',
        'original_hire_date' => 'originalHireDate',
        'hours_per_pay_cycle' => 'hoursPerPayCycle',
        'is_included_in_payroll' => 'isIncludedInPayroll'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'ssn' => 'setSsn',
        'employee_number' => 'setEmployeeNumber',
        'last_name' => 'setLastName',
        'first_name' => 'setFirstName',
        'middle_name' => 'setMiddleName',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'city' => 'setCity',
        'state_abbrev' => 'setStateAbbrev',
        'zipcode' => 'setZipcode',
        'best_email' => 'setBestEmail',
        'home_email' => 'setHomeEmail',
        'date_of_birth' => 'setDateOfBirth',
        'hire_date' => 'setHireDate',
        'termination_date' => 'setTerminationDate',
        'home_phone' => 'setHomePhone',
        'mobile_phone' => 'setMobilePhone',
        'pay_group_id' => 'setPayGroupId',
        'marital_status' => 'setMaritalStatus',
        'job_title' => 'setJobTitle',
        'gender' => 'setGender',
        'employment_history_status' => 'setEmploymentHistoryStatus',
        'pay_schedule_id' => 'setPayScheduleId',
        'final_pay_date' => 'setFinalPayDate',
        'workers_comp_code' => 'setWorkersCompCode',
        'original_hire_date' => 'setOriginalHireDate',
        'hours_per_pay_cycle' => 'setHoursPerPayCycle',
        'is_included_in_payroll' => 'setIsIncludedInPayroll'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'ssn' => 'getSsn',
        'employee_number' => 'getEmployeeNumber',
        'last_name' => 'getLastName',
        'first_name' => 'getFirstName',
        'middle_name' => 'getMiddleName',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'city' => 'getCity',
        'state_abbrev' => 'getStateAbbrev',
        'zipcode' => 'getZipcode',
        'best_email' => 'getBestEmail',
        'home_email' => 'getHomeEmail',
        'date_of_birth' => 'getDateOfBirth',
        'hire_date' => 'getHireDate',
        'termination_date' => 'getTerminationDate',
        'home_phone' => 'getHomePhone',
        'mobile_phone' => 'getMobilePhone',
        'pay_group_id' => 'getPayGroupId',
        'marital_status' => 'getMaritalStatus',
        'job_title' => 'getJobTitle',
        'gender' => 'getGender',
        'employment_history_status' => 'getEmploymentHistoryStatus',
        'pay_schedule_id' => 'getPayScheduleId',
        'final_pay_date' => 'getFinalPayDate',
        'workers_comp_code' => 'getWorkersCompCode',
        'original_hire_date' => 'getOriginalHireDate',
        'hours_per_pay_cycle' => 'getHoursPerPayCycle',
        'is_included_in_payroll' => 'getIsIncludedInPayroll'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('ssn', $data ?? [], null);
        $this->setIfExists('employee_number', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('middle_name', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state_abbrev', $data ?? [], null);
        $this->setIfExists('zipcode', $data ?? [], null);
        $this->setIfExists('best_email', $data ?? [], null);
        $this->setIfExists('home_email', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('hire_date', $data ?? [], null);
        $this->setIfExists('termination_date', $data ?? [], null);
        $this->setIfExists('home_phone', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('pay_group_id', $data ?? [], null);
        $this->setIfExists('marital_status', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('employment_history_status', $data ?? [], null);
        $this->setIfExists('pay_schedule_id', $data ?? [], null);
        $this->setIfExists('final_pay_date', $data ?? [], null);
        $this->setIfExists('workers_comp_code', $data ?? [], null);
        $this->setIfExists('original_hire_date', $data ?? [], null);
        $this->setIfExists('hours_per_pay_cycle', $data ?? [], null);
        $this->setIfExists('is_included_in_payroll', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Employee ID
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets ssn
     *
     * @return string|null
     */
    public function getSsn()
    {
        return $this->container['ssn'];
    }

    /**
     * Sets ssn
     *
     * @param string|null $ssn Social Security Number
     *
     * @return self
     */
    public function setSsn($ssn)
    {
        if (is_null($ssn)) {
            throw new \InvalidArgumentException('non-nullable ssn cannot be null');
        }
        $this->container['ssn'] = $ssn;

        return $this;
    }

    /**
     * Gets employee_number
     *
     * @return string|null
     */
    public function getEmployeeNumber()
    {
        return $this->container['employee_number'];
    }

    /**
     * Sets employee_number
     *
     * @param string|null $employee_number Employee number
     *
     * @return self
     */
    public function setEmployeeNumber($employee_number)
    {
        if (is_null($employee_number)) {
            array_push($this->openAPINullablesSetToNull, 'employee_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_number'] = $employee_number;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string|null
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string|null $middle_name Middle name
     *
     * @return self
     */
    public function setMiddleName($middle_name)
    {
        if (is_null($middle_name)) {
            array_push($this->openAPINullablesSetToNull, 'middle_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('middle_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string|null $address_line1 Address line 1
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            throw new \InvalidArgumentException('non-nullable address_line1 cannot be null');
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string|null $address_line2 Address line 2
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            array_push($this->openAPINullablesSetToNull, 'address_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address_line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state_abbrev
     *
     * @return string|null
     */
    public function getStateAbbrev()
    {
        return $this->container['state_abbrev'];
    }

    /**
     * Sets state_abbrev
     *
     * @param string|null $state_abbrev State abbreviation
     *
     * @return self
     */
    public function setStateAbbrev($state_abbrev)
    {
        if (is_null($state_abbrev)) {
            throw new \InvalidArgumentException('non-nullable state_abbrev cannot be null');
        }
        $this->container['state_abbrev'] = $state_abbrev;

        return $this;
    }

    /**
     * Gets zipcode
     *
     * @return string|null
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     *
     * @param string|null $zipcode Zip code
     *
     * @return self
     */
    public function setZipcode($zipcode)
    {
        if (is_null($zipcode)) {
            throw new \InvalidArgumentException('non-nullable zipcode cannot be null');
        }
        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets best_email
     *
     * @return string|null
     */
    public function getBestEmail()
    {
        return $this->container['best_email'];
    }

    /**
     * Sets best_email
     *
     * @param string|null $best_email Best email address
     *
     * @return self
     */
    public function setBestEmail($best_email)
    {
        if (is_null($best_email)) {
            array_push($this->openAPINullablesSetToNull, 'best_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('best_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['best_email'] = $best_email;

        return $this;
    }

    /**
     * Gets home_email
     *
     * @return string|null
     */
    public function getHomeEmail()
    {
        return $this->container['home_email'];
    }

    /**
     * Sets home_email
     *
     * @param string|null $home_email Home email address
     *
     * @return self
     */
    public function setHomeEmail($home_email)
    {
        if (is_null($home_email)) {
            array_push($this->openAPINullablesSetToNull, 'home_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_email'] = $home_email;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth Date of birth
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            array_push($this->openAPINullablesSetToNull, 'date_of_birth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_of_birth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets hire_date
     *
     * @return \DateTime|null
     */
    public function getHireDate()
    {
        return $this->container['hire_date'];
    }

    /**
     * Sets hire_date
     *
     * @param \DateTime|null $hire_date Hire date
     *
     * @return self
     */
    public function setHireDate($hire_date)
    {
        if (is_null($hire_date)) {
            array_push($this->openAPINullablesSetToNull, 'hire_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hire_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hire_date'] = $hire_date;

        return $this;
    }

    /**
     * Gets termination_date
     *
     * @return \DateTime|null
     */
    public function getTerminationDate()
    {
        return $this->container['termination_date'];
    }

    /**
     * Sets termination_date
     *
     * @param \DateTime|null $termination_date Termination date
     *
     * @return self
     */
    public function setTerminationDate($termination_date)
    {
        if (is_null($termination_date)) {
            array_push($this->openAPINullablesSetToNull, 'termination_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('termination_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['termination_date'] = $termination_date;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string|null
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string|null $home_phone Home phone number
     *
     * @return self
     */
    public function setHomePhone($home_phone)
    {
        if (is_null($home_phone)) {
            array_push($this->openAPINullablesSetToNull, 'home_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('home_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone Mobile phone number
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            array_push($this->openAPINullablesSetToNull, 'mobile_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mobile_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets pay_group_id
     *
     * @return int|null
     */
    public function getPayGroupId()
    {
        return $this->container['pay_group_id'];
    }

    /**
     * Sets pay_group_id
     *
     * @param int|null $pay_group_id Pay group ID
     *
     * @return self
     */
    public function setPayGroupId($pay_group_id)
    {
        if (is_null($pay_group_id)) {
            array_push($this->openAPINullablesSetToNull, 'pay_group_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_group_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_group_id'] = $pay_group_id;

        return $this;
    }

    /**
     * Gets marital_status
     *
     * @return string|null
     */
    public function getMaritalStatus()
    {
        return $this->container['marital_status'];
    }

    /**
     * Sets marital_status
     *
     * @param string|null $marital_status Marital status
     *
     * @return self
     */
    public function setMaritalStatus($marital_status)
    {
        if (is_null($marital_status)) {
            array_push($this->openAPINullablesSetToNull, 'marital_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('marital_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['marital_status'] = $marital_status;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Job title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            throw new \InvalidArgumentException('non-nullable job_title cannot be null');
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender Gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets employment_history_status
     *
     * @return string|null
     */
    public function getEmploymentHistoryStatus()
    {
        return $this->container['employment_history_status'];
    }

    /**
     * Sets employment_history_status
     *
     * @param string|null $employment_history_status Employment history status
     *
     * @return self
     */
    public function setEmploymentHistoryStatus($employment_history_status)
    {
        if (is_null($employment_history_status)) {
            throw new \InvalidArgumentException('non-nullable employment_history_status cannot be null');
        }
        $this->container['employment_history_status'] = $employment_history_status;

        return $this;
    }

    /**
     * Gets pay_schedule_id
     *
     * @return int|null
     */
    public function getPayScheduleId()
    {
        return $this->container['pay_schedule_id'];
    }

    /**
     * Sets pay_schedule_id
     *
     * @param int|null $pay_schedule_id Pay schedule ID
     *
     * @return self
     */
    public function setPayScheduleId($pay_schedule_id)
    {
        if (is_null($pay_schedule_id)) {
            array_push($this->openAPINullablesSetToNull, 'pay_schedule_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_schedule_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_schedule_id'] = $pay_schedule_id;

        return $this;
    }

    /**
     * Gets final_pay_date
     *
     * @return string|null
     */
    public function getFinalPayDate()
    {
        return $this->container['final_pay_date'];
    }

    /**
     * Sets final_pay_date
     *
     * @param string|null $final_pay_date Final pay date
     *
     * @return self
     */
    public function setFinalPayDate($final_pay_date)
    {
        if (is_null($final_pay_date)) {
            array_push($this->openAPINullablesSetToNull, 'final_pay_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('final_pay_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['final_pay_date'] = $final_pay_date;

        return $this;
    }

    /**
     * Gets workers_comp_code
     *
     * @return string|null
     */
    public function getWorkersCompCode()
    {
        return $this->container['workers_comp_code'];
    }

    /**
     * Sets workers_comp_code
     *
     * @param string|null $workers_comp_code Workers compensation code
     *
     * @return self
     */
    public function setWorkersCompCode($workers_comp_code)
    {
        if (is_null($workers_comp_code)) {
            array_push($this->openAPINullablesSetToNull, 'workers_comp_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workers_comp_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workers_comp_code'] = $workers_comp_code;

        return $this;
    }

    /**
     * Gets original_hire_date
     *
     * @return \DateTime|null
     */
    public function getOriginalHireDate()
    {
        return $this->container['original_hire_date'];
    }

    /**
     * Sets original_hire_date
     *
     * @param \DateTime|null $original_hire_date Original hire date
     *
     * @return self
     */
    public function setOriginalHireDate($original_hire_date)
    {
        if (is_null($original_hire_date)) {
            array_push($this->openAPINullablesSetToNull, 'original_hire_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_hire_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['original_hire_date'] = $original_hire_date;

        return $this;
    }

    /**
     * Gets hours_per_pay_cycle
     *
     * @return string|null
     */
    public function getHoursPerPayCycle()
    {
        return $this->container['hours_per_pay_cycle'];
    }

    /**
     * Sets hours_per_pay_cycle
     *
     * @param string|null $hours_per_pay_cycle Hours per pay cycle
     *
     * @return self
     */
    public function setHoursPerPayCycle($hours_per_pay_cycle)
    {
        if (is_null($hours_per_pay_cycle)) {
            array_push($this->openAPINullablesSetToNull, 'hours_per_pay_cycle');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hours_per_pay_cycle', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hours_per_pay_cycle'] = $hours_per_pay_cycle;

        return $this;
    }

    /**
     * Gets is_included_in_payroll
     *
     * @return bool|null
     */
    public function getIsIncludedInPayroll()
    {
        return $this->container['is_included_in_payroll'];
    }

    /**
     * Sets is_included_in_payroll
     *
     * @param bool|null $is_included_in_payroll Whether employee is included in payroll
     *
     * @return self
     */
    public function setIsIncludedInPayroll($is_included_in_payroll)
    {
        if (is_null($is_included_in_payroll)) {
            array_push($this->openAPINullablesSetToNull, 'is_included_in_payroll');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_included_in_payroll', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_included_in_payroll'] = $is_included_in_payroll;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


