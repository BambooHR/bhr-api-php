<?php
/**
 * ReviewCycleAssessments
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * ReviewCycleAssessments Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReviewCycleAssessments implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReviewCycleAssessments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enabled' => 'bool',
        'frequency' => 'int',
        'file_attachments_enabled' => 'bool',
        'file_attachments_required' => 'bool',
        'window_start_date' => 'string',
        'window_is_open' => 'bool',
        'custom_questions' => '\MySdk\Model\PerformanceSettingsQuestionViewObject',
        'anniversary_repeat' => 'bool',
        'anniversary_months' => 'int',
        'use_default_questions' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enabled' => null,
        'frequency' => null,
        'file_attachments_enabled' => null,
        'file_attachments_required' => null,
        'window_start_date' => null,
        'window_is_open' => null,
        'custom_questions' => null,
        'anniversary_repeat' => null,
        'anniversary_months' => null,
        'use_default_questions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enabled' => false,
        'frequency' => true,
        'file_attachments_enabled' => false,
        'file_attachments_required' => false,
        'window_start_date' => false,
        'window_is_open' => false,
        'custom_questions' => false,
        'anniversary_repeat' => false,
        'anniversary_months' => true,
        'use_default_questions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'frequency' => 'frequency',
        'file_attachments_enabled' => 'fileAttachmentsEnabled',
        'file_attachments_required' => 'fileAttachmentsRequired',
        'window_start_date' => 'windowStartDate',
        'window_is_open' => 'windowIsOpen',
        'custom_questions' => 'customQuestions',
        'anniversary_repeat' => 'anniversaryRepeat',
        'anniversary_months' => 'anniversaryMonths',
        'use_default_questions' => 'useDefaultQuestions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'frequency' => 'setFrequency',
        'file_attachments_enabled' => 'setFileAttachmentsEnabled',
        'file_attachments_required' => 'setFileAttachmentsRequired',
        'window_start_date' => 'setWindowStartDate',
        'window_is_open' => 'setWindowIsOpen',
        'custom_questions' => 'setCustomQuestions',
        'anniversary_repeat' => 'setAnniversaryRepeat',
        'anniversary_months' => 'setAnniversaryMonths',
        'use_default_questions' => 'setUseDefaultQuestions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'frequency' => 'getFrequency',
        'file_attachments_enabled' => 'getFileAttachmentsEnabled',
        'file_attachments_required' => 'getFileAttachmentsRequired',
        'window_start_date' => 'getWindowStartDate',
        'window_is_open' => 'getWindowIsOpen',
        'custom_questions' => 'getCustomQuestions',
        'anniversary_repeat' => 'getAnniversaryRepeat',
        'anniversary_months' => 'getAnniversaryMonths',
        'use_default_questions' => 'getUseDefaultQuestions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('frequency', $data ?? [], null);
        $this->setIfExists('file_attachments_enabled', $data ?? [], null);
        $this->setIfExists('file_attachments_required', $data ?? [], null);
        $this->setIfExists('window_start_date', $data ?? [], null);
        $this->setIfExists('window_is_open', $data ?? [], null);
        $this->setIfExists('custom_questions', $data ?? [], null);
        $this->setIfExists('anniversary_repeat', $data ?? [], null);
        $this->setIfExists('anniversary_months', $data ?? [], null);
        $this->setIfExists('use_default_questions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled Indicates if assessments are enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return int|null
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param int|null $frequency Frequency of assessments in months
     *
     * @return self
     */
    public function setFrequency($frequency)
    {
        if (is_null($frequency)) {
            array_push($this->openAPINullablesSetToNull, 'frequency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('frequency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets file_attachments_enabled
     *
     * @return bool|null
     */
    public function getFileAttachmentsEnabled()
    {
        return $this->container['file_attachments_enabled'];
    }

    /**
     * Sets file_attachments_enabled
     *
     * @param bool|null $file_attachments_enabled Indicates if file attachments are enabled for assessments
     *
     * @return self
     */
    public function setFileAttachmentsEnabled($file_attachments_enabled)
    {
        if (is_null($file_attachments_enabled)) {
            throw new \InvalidArgumentException('non-nullable file_attachments_enabled cannot be null');
        }
        $this->container['file_attachments_enabled'] = $file_attachments_enabled;

        return $this;
    }

    /**
     * Gets file_attachments_required
     *
     * @return bool|null
     */
    public function getFileAttachmentsRequired()
    {
        return $this->container['file_attachments_required'];
    }

    /**
     * Sets file_attachments_required
     *
     * @param bool|null $file_attachments_required Indicates if file attachments are required for assessments
     *
     * @return self
     */
    public function setFileAttachmentsRequired($file_attachments_required)
    {
        if (is_null($file_attachments_required)) {
            throw new \InvalidArgumentException('non-nullable file_attachments_required cannot be null');
        }
        $this->container['file_attachments_required'] = $file_attachments_required;

        return $this;
    }

    /**
     * Gets window_start_date
     *
     * @return string|null
     */
    public function getWindowStartDate()
    {
        return $this->container['window_start_date'];
    }

    /**
     * Sets window_start_date
     *
     * @param string|null $window_start_date Start date of the assessment window
     *
     * @return self
     */
    public function setWindowStartDate($window_start_date)
    {
        if (is_null($window_start_date)) {
            throw new \InvalidArgumentException('non-nullable window_start_date cannot be null');
        }
        $this->container['window_start_date'] = $window_start_date;

        return $this;
    }

    /**
     * Gets window_is_open
     *
     * @return bool|null
     */
    public function getWindowIsOpen()
    {
        return $this->container['window_is_open'];
    }

    /**
     * Sets window_is_open
     *
     * @param bool|null $window_is_open Indicates if the assessment window is open
     *
     * @return self
     */
    public function setWindowIsOpen($window_is_open)
    {
        if (is_null($window_is_open)) {
            throw new \InvalidArgumentException('non-nullable window_is_open cannot be null');
        }
        $this->container['window_is_open'] = $window_is_open;

        return $this;
    }

    /**
     * Gets custom_questions
     *
     * @return \MySdk\Model\PerformanceSettingsQuestionViewObject|null
     */
    public function getCustomQuestions()
    {
        return $this->container['custom_questions'];
    }

    /**
     * Sets custom_questions
     *
     * @param \MySdk\Model\PerformanceSettingsQuestionViewObject|null $custom_questions custom_questions
     *
     * @return self
     */
    public function setCustomQuestions($custom_questions)
    {
        if (is_null($custom_questions)) {
            throw new \InvalidArgumentException('non-nullable custom_questions cannot be null');
        }
        $this->container['custom_questions'] = $custom_questions;

        return $this;
    }

    /**
     * Gets anniversary_repeat
     *
     * @return bool|null
     */
    public function getAnniversaryRepeat()
    {
        return $this->container['anniversary_repeat'];
    }

    /**
     * Sets anniversary_repeat
     *
     * @param bool|null $anniversary_repeat Indicates if assessments repeat on anniversaries
     *
     * @return self
     */
    public function setAnniversaryRepeat($anniversary_repeat)
    {
        if (is_null($anniversary_repeat)) {
            throw new \InvalidArgumentException('non-nullable anniversary_repeat cannot be null');
        }
        $this->container['anniversary_repeat'] = $anniversary_repeat;

        return $this;
    }

    /**
     * Gets anniversary_months
     *
     * @return int|null
     */
    public function getAnniversaryMonths()
    {
        return $this->container['anniversary_months'];
    }

    /**
     * Sets anniversary_months
     *
     * @param int|null $anniversary_months Number of months for anniversary repeat
     *
     * @return self
     */
    public function setAnniversaryMonths($anniversary_months)
    {
        if (is_null($anniversary_months)) {
            array_push($this->openAPINullablesSetToNull, 'anniversary_months');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('anniversary_months', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['anniversary_months'] = $anniversary_months;

        return $this;
    }

    /**
     * Gets use_default_questions
     *
     * @return bool|null
     */
    public function getUseDefaultQuestions()
    {
        return $this->container['use_default_questions'];
    }

    /**
     * Sets use_default_questions
     *
     * @param bool|null $use_default_questions Indicates if default questions are used for assessments
     *
     * @return self
     */
    public function setUseDefaultQuestions($use_default_questions)
    {
        if (is_null($use_default_questions)) {
            throw new \InvalidArgumentException('non-nullable use_default_questions cannot be null');
        }
        $this->container['use_default_questions'] = $use_default_questions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


