<?php
/**
 * BulkEnrollBenefitPlanContract
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * BulkEnrollBenefitPlanContract Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BulkEnrollBenefitPlanContract implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BulkEnrollBenefitPlanContract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'type' => 'string',
        'is_variable' => 'bool',
        'uses_safe_harbor' => 'bool',
        'deduction_type_id' => 'int',
        'start_ymd' => 'string',
        'end_ymd' => 'string',
        'show_pays' => 'bool',
        'carrier_name' => 'string',
        'plan_category_data_options' => 'object',
        'plan_years' => '\MySdk\Model\BulkEditPlanYear[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'is_variable' => null,
        'uses_safe_harbor' => null,
        'deduction_type_id' => null,
        'start_ymd' => null,
        'end_ymd' => null,
        'show_pays' => null,
        'carrier_name' => null,
        'plan_category_data_options' => null,
        'plan_years' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'type' => false,
        'is_variable' => true,
        'uses_safe_harbor' => true,
        'deduction_type_id' => true,
        'start_ymd' => false,
        'end_ymd' => true,
        'show_pays' => false,
        'carrier_name' => false,
        'plan_category_data_options' => false,
        'plan_years' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'is_variable' => 'isVariable',
        'uses_safe_harbor' => 'usesSafeHarbor',
        'deduction_type_id' => 'deductionTypeId',
        'start_ymd' => 'startYmd',
        'end_ymd' => 'endYmd',
        'show_pays' => 'showPays',
        'carrier_name' => 'carrierName',
        'plan_category_data_options' => 'planCategoryDataOptions',
        'plan_years' => 'planYears'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'is_variable' => 'setIsVariable',
        'uses_safe_harbor' => 'setUsesSafeHarbor',
        'deduction_type_id' => 'setDeductionTypeId',
        'start_ymd' => 'setStartYmd',
        'end_ymd' => 'setEndYmd',
        'show_pays' => 'setShowPays',
        'carrier_name' => 'setCarrierName',
        'plan_category_data_options' => 'setPlanCategoryDataOptions',
        'plan_years' => 'setPlanYears'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'is_variable' => 'getIsVariable',
        'uses_safe_harbor' => 'getUsesSafeHarbor',
        'deduction_type_id' => 'getDeductionTypeId',
        'start_ymd' => 'getStartYmd',
        'end_ymd' => 'getEndYmd',
        'show_pays' => 'getShowPays',
        'carrier_name' => 'getCarrierName',
        'plan_category_data_options' => 'getPlanCategoryDataOptions',
        'plan_years' => 'getPlanYears'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('is_variable', $data ?? [], null);
        $this->setIfExists('uses_safe_harbor', $data ?? [], null);
        $this->setIfExists('deduction_type_id', $data ?? [], null);
        $this->setIfExists('start_ymd', $data ?? [], null);
        $this->setIfExists('end_ymd', $data ?? [], null);
        $this->setIfExists('show_pays', $data ?? [], null);
        $this->setIfExists('carrier_name', $data ?? [], null);
        $this->setIfExists('plan_category_data_options', $data ?? [], null);
        $this->setIfExists('plan_years', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_variable
     *
     * @return bool|null
     */
    public function getIsVariable()
    {
        return $this->container['is_variable'];
    }

    /**
     * Sets is_variable
     *
     * @param bool|null $is_variable is_variable
     *
     * @return self
     */
    public function setIsVariable($is_variable)
    {
        if (is_null($is_variable)) {
            array_push($this->openAPINullablesSetToNull, 'is_variable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_variable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_variable'] = $is_variable;

        return $this;
    }

    /**
     * Gets uses_safe_harbor
     *
     * @return bool|null
     */
    public function getUsesSafeHarbor()
    {
        return $this->container['uses_safe_harbor'];
    }

    /**
     * Sets uses_safe_harbor
     *
     * @param bool|null $uses_safe_harbor uses_safe_harbor
     *
     * @return self
     */
    public function setUsesSafeHarbor($uses_safe_harbor)
    {
        if (is_null($uses_safe_harbor)) {
            array_push($this->openAPINullablesSetToNull, 'uses_safe_harbor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uses_safe_harbor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uses_safe_harbor'] = $uses_safe_harbor;

        return $this;
    }

    /**
     * Gets deduction_type_id
     *
     * @return int|null
     */
    public function getDeductionTypeId()
    {
        return $this->container['deduction_type_id'];
    }

    /**
     * Sets deduction_type_id
     *
     * @param int|null $deduction_type_id deduction_type_id
     *
     * @return self
     */
    public function setDeductionTypeId($deduction_type_id)
    {
        if (is_null($deduction_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'deduction_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deduction_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deduction_type_id'] = $deduction_type_id;

        return $this;
    }

    /**
     * Gets start_ymd
     *
     * @return string|null
     */
    public function getStartYmd()
    {
        return $this->container['start_ymd'];
    }

    /**
     * Sets start_ymd
     *
     * @param string|null $start_ymd start_ymd
     *
     * @return self
     */
    public function setStartYmd($start_ymd)
    {
        if (is_null($start_ymd)) {
            throw new \InvalidArgumentException('non-nullable start_ymd cannot be null');
        }
        $this->container['start_ymd'] = $start_ymd;

        return $this;
    }

    /**
     * Gets end_ymd
     *
     * @return string|null
     */
    public function getEndYmd()
    {
        return $this->container['end_ymd'];
    }

    /**
     * Sets end_ymd
     *
     * @param string|null $end_ymd end_ymd
     *
     * @return self
     */
    public function setEndYmd($end_ymd)
    {
        if (is_null($end_ymd)) {
            array_push($this->openAPINullablesSetToNull, 'end_ymd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_ymd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_ymd'] = $end_ymd;

        return $this;
    }

    /**
     * Gets show_pays
     *
     * @return bool|null
     */
    public function getShowPays()
    {
        return $this->container['show_pays'];
    }

    /**
     * Sets show_pays
     *
     * @param bool|null $show_pays show_pays
     *
     * @return self
     */
    public function setShowPays($show_pays)
    {
        if (is_null($show_pays)) {
            throw new \InvalidArgumentException('non-nullable show_pays cannot be null');
        }
        $this->container['show_pays'] = $show_pays;

        return $this;
    }

    /**
     * Gets carrier_name
     *
     * @return string|null
     */
    public function getCarrierName()
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name
     *
     * @param string|null $carrier_name carrier_name
     *
     * @return self
     */
    public function setCarrierName($carrier_name)
    {
        if (is_null($carrier_name)) {
            throw new \InvalidArgumentException('non-nullable carrier_name cannot be null');
        }
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets plan_category_data_options
     *
     * @return object|null
     */
    public function getPlanCategoryDataOptions()
    {
        return $this->container['plan_category_data_options'];
    }

    /**
     * Sets plan_category_data_options
     *
     * @param object|null $plan_category_data_options plan_category_data_options
     *
     * @return self
     */
    public function setPlanCategoryDataOptions($plan_category_data_options)
    {
        if (is_null($plan_category_data_options)) {
            throw new \InvalidArgumentException('non-nullable plan_category_data_options cannot be null');
        }
        $this->container['plan_category_data_options'] = $plan_category_data_options;

        return $this;
    }

    /**
     * Gets plan_years
     *
     * @return \MySdk\Model\BulkEditPlanYear[]|null
     */
    public function getPlanYears()
    {
        return $this->container['plan_years'];
    }

    /**
     * Sets plan_years
     *
     * @param \MySdk\Model\BulkEditPlanYear[]|null $plan_years plan_years
     *
     * @return self
     */
    public function setPlanYears($plan_years)
    {
        if (is_null($plan_years)) {
            throw new \InvalidArgumentException('non-nullable plan_years cannot be null');
        }
        $this->container['plan_years'] = $plan_years;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


