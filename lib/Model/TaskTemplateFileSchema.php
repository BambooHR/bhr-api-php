<?php
/**
 * TaskTemplateFileSchema
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TaskTemplateFileSchema Class Doc Comment
 *
 * @category Class
 * @description Schema representing a file associated with a task template.
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaskTemplateFileSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskTemplateFileSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'fid' => 'string',
        'file_id' => 'string',
        'name' => 'string',
        'original_file_name' => 'string',
        'created' => 'string',
        'mime_type' => 'string',
        'description' => 'string',
        'size' => 'string',
        'esignature_template_id' => 'string',
        'forms' => 'string',
        'share_with_employees' => 'string',
        'created_user' => 'string',
        'created_user_id' => 'string',
        'most_recent_file_data_id' => 'string',
        'file_section_id' => 'string',
        'file_on_s3' => 'string',
        'scan_info' => 'string',
        'scan_complete' => 'string',
        'preview' => 'string',
        'section_name' => 'string',
        'fs_id' => 'string',
        'fs_type' => 'string',
        'fd_id' => 'string',
        'type' => 'string',
        'parent_type' => 'string',
        'for_data_cleaning' => 'string',
        'generate_preview_on_upload' => 'string',
        'archived' => 'string',
        'parent_id' => 'string',
        'formatted_created' => 'string',
        'formatted_size' => 'string',
        'scan_status' => 'string',
        'mode' => 'string',
        'img_sizes' => '\MySdk\Model\TaskTemplateFileSchemaImgSizes',
        'file_class' => 'string',
        'ext' => 'string',
        'can_generate_preview' => 'bool',
        'is_assumed_user' => 'bool',
        'created_str' => 'string',
        'can_see_file' => 'bool',
        'is_shared_with_anyone' => 'bool',
        'can_edit' => 'bool',
        'has_esignatures' => 'bool',
        'can_request_esignature' => 'bool',
        'esignatures' => '\MySdk\Model\TaskTemplateFileSchemaEsignatures',
        'number_of_signers' => 'int',
        'completed_check' => 'string',
        'file_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'fid' => null,
        'file_id' => null,
        'name' => null,
        'original_file_name' => null,
        'created' => null,
        'mime_type' => null,
        'description' => null,
        'size' => null,
        'esignature_template_id' => null,
        'forms' => null,
        'share_with_employees' => null,
        'created_user' => null,
        'created_user_id' => null,
        'most_recent_file_data_id' => null,
        'file_section_id' => null,
        'file_on_s3' => null,
        'scan_info' => null,
        'scan_complete' => null,
        'preview' => null,
        'section_name' => null,
        'fs_id' => null,
        'fs_type' => null,
        'fd_id' => null,
        'type' => null,
        'parent_type' => null,
        'for_data_cleaning' => null,
        'generate_preview_on_upload' => null,
        'archived' => null,
        'parent_id' => null,
        'formatted_created' => null,
        'formatted_size' => null,
        'scan_status' => null,
        'mode' => null,
        'img_sizes' => null,
        'file_class' => null,
        'ext' => null,
        'can_generate_preview' => null,
        'is_assumed_user' => null,
        'created_str' => null,
        'can_see_file' => null,
        'is_shared_with_anyone' => null,
        'can_edit' => null,
        'has_esignatures' => null,
        'can_request_esignature' => null,
        'esignatures' => null,
        'number_of_signers' => null,
        'completed_check' => null,
        'file_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'fid' => false,
        'file_id' => false,
        'name' => false,
        'original_file_name' => false,
        'created' => false,
        'mime_type' => false,
        'description' => true,
        'size' => false,
        'esignature_template_id' => true,
        'forms' => false,
        'share_with_employees' => false,
        'created_user' => false,
        'created_user_id' => false,
        'most_recent_file_data_id' => false,
        'file_section_id' => false,
        'file_on_s3' => false,
        'scan_info' => true,
        'scan_complete' => false,
        'preview' => false,
        'section_name' => false,
        'fs_id' => false,
        'fs_type' => false,
        'fd_id' => false,
        'type' => false,
        'parent_type' => true,
        'for_data_cleaning' => false,
        'generate_preview_on_upload' => false,
        'archived' => false,
        'parent_id' => true,
        'formatted_created' => false,
        'formatted_size' => false,
        'scan_status' => false,
        'mode' => false,
        'img_sizes' => false,
        'file_class' => false,
        'ext' => false,
        'can_generate_preview' => false,
        'is_assumed_user' => false,
        'created_str' => false,
        'can_see_file' => false,
        'is_shared_with_anyone' => false,
        'can_edit' => false,
        'has_esignatures' => false,
        'can_request_esignature' => false,
        'esignatures' => false,
        'number_of_signers' => false,
        'completed_check' => false,
        'file_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'fid' => 'fid',
        'file_id' => 'file_id',
        'name' => 'name',
        'original_file_name' => 'original_file_name',
        'created' => 'created',
        'mime_type' => 'mime_type',
        'description' => 'description',
        'size' => 'size',
        'esignature_template_id' => 'esignature_template_id',
        'forms' => 'forms',
        'share_with_employees' => 'share_with_employees',
        'created_user' => 'created_user',
        'created_user_id' => 'created_user_id',
        'most_recent_file_data_id' => 'most_recent_file_data_id',
        'file_section_id' => 'file_section_id',
        'file_on_s3' => 'file_on_s3',
        'scan_info' => 'scan_info',
        'scan_complete' => 'scan_complete',
        'preview' => 'preview',
        'section_name' => 'section_name',
        'fs_id' => 'fs_id',
        'fs_type' => 'fs_type',
        'fd_id' => 'fd_id',
        'type' => 'type',
        'parent_type' => 'parent_type',
        'for_data_cleaning' => 'for_data_cleaning',
        'generate_preview_on_upload' => 'generate_preview_on_upload',
        'archived' => 'archived',
        'parent_id' => 'parent_id',
        'formatted_created' => 'formatted_created',
        'formatted_size' => 'formatted_size',
        'scan_status' => 'scan_status',
        'mode' => 'mode',
        'img_sizes' => 'img_sizes',
        'file_class' => 'file_class',
        'ext' => 'ext',
        'can_generate_preview' => 'can_generate_preview',
        'is_assumed_user' => 'is_assumed_user',
        'created_str' => 'created_str',
        'can_see_file' => 'can_see_file',
        'is_shared_with_anyone' => 'is_shared_with_anyone',
        'can_edit' => 'can_edit',
        'has_esignatures' => 'has_esignatures',
        'can_request_esignature' => 'can_request_esignature',
        'esignatures' => 'esignatures',
        'number_of_signers' => 'numberOfSigners',
        'completed_check' => 'completedCheck',
        'file_id' => 'fileId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'fid' => 'setFid',
        'file_id' => 'setFileId',
        'name' => 'setName',
        'original_file_name' => 'setOriginalFileName',
        'created' => 'setCreated',
        'mime_type' => 'setMimeType',
        'description' => 'setDescription',
        'size' => 'setSize',
        'esignature_template_id' => 'setEsignatureTemplateId',
        'forms' => 'setForms',
        'share_with_employees' => 'setShareWithEmployees',
        'created_user' => 'setCreatedUser',
        'created_user_id' => 'setCreatedUserId',
        'most_recent_file_data_id' => 'setMostRecentFileDataId',
        'file_section_id' => 'setFileSectionId',
        'file_on_s3' => 'setFileOnS3',
        'scan_info' => 'setScanInfo',
        'scan_complete' => 'setScanComplete',
        'preview' => 'setPreview',
        'section_name' => 'setSectionName',
        'fs_id' => 'setFsId',
        'fs_type' => 'setFsType',
        'fd_id' => 'setFdId',
        'type' => 'setType',
        'parent_type' => 'setParentType',
        'for_data_cleaning' => 'setForDataCleaning',
        'generate_preview_on_upload' => 'setGeneratePreviewOnUpload',
        'archived' => 'setArchived',
        'parent_id' => 'setParentId',
        'formatted_created' => 'setFormattedCreated',
        'formatted_size' => 'setFormattedSize',
        'scan_status' => 'setScanStatus',
        'mode' => 'setMode',
        'img_sizes' => 'setImgSizes',
        'file_class' => 'setFileClass',
        'ext' => 'setExt',
        'can_generate_preview' => 'setCanGeneratePreview',
        'is_assumed_user' => 'setIsAssumedUser',
        'created_str' => 'setCreatedStr',
        'can_see_file' => 'setCanSeeFile',
        'is_shared_with_anyone' => 'setIsSharedWithAnyone',
        'can_edit' => 'setCanEdit',
        'has_esignatures' => 'setHasEsignatures',
        'can_request_esignature' => 'setCanRequestEsignature',
        'esignatures' => 'setEsignatures',
        'number_of_signers' => 'setNumberOfSigners',
        'completed_check' => 'setCompletedCheck',
        'file_id' => 'setFileId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'fid' => 'getFid',
        'file_id' => 'getFileId',
        'name' => 'getName',
        'original_file_name' => 'getOriginalFileName',
        'created' => 'getCreated',
        'mime_type' => 'getMimeType',
        'description' => 'getDescription',
        'size' => 'getSize',
        'esignature_template_id' => 'getEsignatureTemplateId',
        'forms' => 'getForms',
        'share_with_employees' => 'getShareWithEmployees',
        'created_user' => 'getCreatedUser',
        'created_user_id' => 'getCreatedUserId',
        'most_recent_file_data_id' => 'getMostRecentFileDataId',
        'file_section_id' => 'getFileSectionId',
        'file_on_s3' => 'getFileOnS3',
        'scan_info' => 'getScanInfo',
        'scan_complete' => 'getScanComplete',
        'preview' => 'getPreview',
        'section_name' => 'getSectionName',
        'fs_id' => 'getFsId',
        'fs_type' => 'getFsType',
        'fd_id' => 'getFdId',
        'type' => 'getType',
        'parent_type' => 'getParentType',
        'for_data_cleaning' => 'getForDataCleaning',
        'generate_preview_on_upload' => 'getGeneratePreviewOnUpload',
        'archived' => 'getArchived',
        'parent_id' => 'getParentId',
        'formatted_created' => 'getFormattedCreated',
        'formatted_size' => 'getFormattedSize',
        'scan_status' => 'getScanStatus',
        'mode' => 'getMode',
        'img_sizes' => 'getImgSizes',
        'file_class' => 'getFileClass',
        'ext' => 'getExt',
        'can_generate_preview' => 'getCanGeneratePreview',
        'is_assumed_user' => 'getIsAssumedUser',
        'created_str' => 'getCreatedStr',
        'can_see_file' => 'getCanSeeFile',
        'is_shared_with_anyone' => 'getIsSharedWithAnyone',
        'can_edit' => 'getCanEdit',
        'has_esignatures' => 'getHasEsignatures',
        'can_request_esignature' => 'getCanRequestEsignature',
        'esignatures' => 'getEsignatures',
        'number_of_signers' => 'getNumberOfSigners',
        'completed_check' => 'getCompletedCheck',
        'file_id' => 'getFileId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('fid', $data ?? [], null);
        $this->setIfExists('file_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('original_file_name', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('mime_type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('esignature_template_id', $data ?? [], null);
        $this->setIfExists('forms', $data ?? [], null);
        $this->setIfExists('share_with_employees', $data ?? [], null);
        $this->setIfExists('created_user', $data ?? [], null);
        $this->setIfExists('created_user_id', $data ?? [], null);
        $this->setIfExists('most_recent_file_data_id', $data ?? [], null);
        $this->setIfExists('file_section_id', $data ?? [], null);
        $this->setIfExists('file_on_s3', $data ?? [], null);
        $this->setIfExists('scan_info', $data ?? [], null);
        $this->setIfExists('scan_complete', $data ?? [], null);
        $this->setIfExists('preview', $data ?? [], null);
        $this->setIfExists('section_name', $data ?? [], null);
        $this->setIfExists('fs_id', $data ?? [], null);
        $this->setIfExists('fs_type', $data ?? [], null);
        $this->setIfExists('fd_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('parent_type', $data ?? [], null);
        $this->setIfExists('for_data_cleaning', $data ?? [], null);
        $this->setIfExists('generate_preview_on_upload', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('formatted_created', $data ?? [], null);
        $this->setIfExists('formatted_size', $data ?? [], null);
        $this->setIfExists('scan_status', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('img_sizes', $data ?? [], null);
        $this->setIfExists('file_class', $data ?? [], null);
        $this->setIfExists('ext', $data ?? [], null);
        $this->setIfExists('can_generate_preview', $data ?? [], null);
        $this->setIfExists('is_assumed_user', $data ?? [], null);
        $this->setIfExists('created_str', $data ?? [], null);
        $this->setIfExists('can_see_file', $data ?? [], null);
        $this->setIfExists('is_shared_with_anyone', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('has_esignatures', $data ?? [], null);
        $this->setIfExists('can_request_esignature', $data ?? [], null);
        $this->setIfExists('esignatures', $data ?? [], null);
        $this->setIfExists('number_of_signers', $data ?? [], null);
        $this->setIfExists('completed_check', $data ?? [], null);
        $this->setIfExists('file_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier of the file.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets fid
     *
     * @return string|null
     */
    public function getFid()
    {
        return $this->container['fid'];
    }

    /**
     * Sets fid
     *
     * @param string|null $fid File ID.
     *
     * @return self
     */
    public function setFid($fid)
    {
        if (is_null($fid)) {
            throw new \InvalidArgumentException('non-nullable fid cannot be null');
        }
        $this->container['fid'] = $fid;

        return $this;
    }

    /**
     * Gets file_id
     *
     * @return string|null
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string|null $file_id File ID (duplicate of fid).
     *
     * @return self
     */
    public function setFileId($file_id)
    {
        if (is_null($file_id)) {
            throw new \InvalidArgumentException('non-nullable file_id cannot be null');
        }
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the file.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets original_file_name
     *
     * @return string|null
     */
    public function getOriginalFileName()
    {
        return $this->container['original_file_name'];
    }

    /**
     * Sets original_file_name
     *
     * @param string|null $original_file_name Original name of the file.
     *
     * @return self
     */
    public function setOriginalFileName($original_file_name)
    {
        if (is_null($original_file_name)) {
            throw new \InvalidArgumentException('non-nullable original_file_name cannot be null');
        }
        $this->container['original_file_name'] = $original_file_name;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created Creation timestamp of the file.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets mime_type
     *
     * @return string|null
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string|null $mime_type MIME type of the file.
     *
     * @return self
     */
    public function setMimeType($mime_type)
    {
        if (is_null($mime_type)) {
            throw new \InvalidArgumentException('non-nullable mime_type cannot be null');
        }
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the file.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size Size of the file in bytes.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets esignature_template_id
     *
     * @return string|null
     */
    public function getEsignatureTemplateId()
    {
        return $this->container['esignature_template_id'];
    }

    /**
     * Sets esignature_template_id
     *
     * @param string|null $esignature_template_id eSignature template ID.
     *
     * @return self
     */
    public function setEsignatureTemplateId($esignature_template_id)
    {
        if (is_null($esignature_template_id)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_template_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_template_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_template_id'] = $esignature_template_id;

        return $this;
    }

    /**
     * Gets forms
     *
     * @return string|null
     */
    public function getForms()
    {
        return $this->container['forms'];
    }

    /**
     * Sets forms
     *
     * @param string|null $forms Forms associated with the file.
     *
     * @return self
     */
    public function setForms($forms)
    {
        if (is_null($forms)) {
            throw new \InvalidArgumentException('non-nullable forms cannot be null');
        }
        $this->container['forms'] = $forms;

        return $this;
    }

    /**
     * Gets share_with_employees
     *
     * @return string|null
     */
    public function getShareWithEmployees()
    {
        return $this->container['share_with_employees'];
    }

    /**
     * Sets share_with_employees
     *
     * @param string|null $share_with_employees Whether the file is shared with employees.
     *
     * @return self
     */
    public function setShareWithEmployees($share_with_employees)
    {
        if (is_null($share_with_employees)) {
            throw new \InvalidArgumentException('non-nullable share_with_employees cannot be null');
        }
        $this->container['share_with_employees'] = $share_with_employees;

        return $this;
    }

    /**
     * Gets created_user
     *
     * @return string|null
     */
    public function getCreatedUser()
    {
        return $this->container['created_user'];
    }

    /**
     * Sets created_user
     *
     * @param string|null $created_user User who created the file.
     *
     * @return self
     */
    public function setCreatedUser($created_user)
    {
        if (is_null($created_user)) {
            throw new \InvalidArgumentException('non-nullable created_user cannot be null');
        }
        $this->container['created_user'] = $created_user;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return string|null
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param string|null $created_user_id ID of the user who created the file.
     *
     * @return self
     */
    public function setCreatedUserId($created_user_id)
    {
        if (is_null($created_user_id)) {
            throw new \InvalidArgumentException('non-nullable created_user_id cannot be null');
        }
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets most_recent_file_data_id
     *
     * @return string|null
     */
    public function getMostRecentFileDataId()
    {
        return $this->container['most_recent_file_data_id'];
    }

    /**
     * Sets most_recent_file_data_id
     *
     * @param string|null $most_recent_file_data_id ID of the most recent file data.
     *
     * @return self
     */
    public function setMostRecentFileDataId($most_recent_file_data_id)
    {
        if (is_null($most_recent_file_data_id)) {
            throw new \InvalidArgumentException('non-nullable most_recent_file_data_id cannot be null');
        }
        $this->container['most_recent_file_data_id'] = $most_recent_file_data_id;

        return $this;
    }

    /**
     * Gets file_section_id
     *
     * @return string|null
     */
    public function getFileSectionId()
    {
        return $this->container['file_section_id'];
    }

    /**
     * Sets file_section_id
     *
     * @param string|null $file_section_id ID of the file section.
     *
     * @return self
     */
    public function setFileSectionId($file_section_id)
    {
        if (is_null($file_section_id)) {
            throw new \InvalidArgumentException('non-nullable file_section_id cannot be null');
        }
        $this->container['file_section_id'] = $file_section_id;

        return $this;
    }

    /**
     * Gets file_on_s3
     *
     * @return string|null
     */
    public function getFileOnS3()
    {
        return $this->container['file_on_s3'];
    }

    /**
     * Sets file_on_s3
     *
     * @param string|null $file_on_s3 Whether the file is stored on S3.
     *
     * @return self
     */
    public function setFileOnS3($file_on_s3)
    {
        if (is_null($file_on_s3)) {
            throw new \InvalidArgumentException('non-nullable file_on_s3 cannot be null');
        }
        $this->container['file_on_s3'] = $file_on_s3;

        return $this;
    }

    /**
     * Gets scan_info
     *
     * @return string|null
     */
    public function getScanInfo()
    {
        return $this->container['scan_info'];
    }

    /**
     * Sets scan_info
     *
     * @param string|null $scan_info Scan information of the file.
     *
     * @return self
     */
    public function setScanInfo($scan_info)
    {
        if (is_null($scan_info)) {
            array_push($this->openAPINullablesSetToNull, 'scan_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scan_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scan_info'] = $scan_info;

        return $this;
    }

    /**
     * Gets scan_complete
     *
     * @return string|null
     */
    public function getScanComplete()
    {
        return $this->container['scan_complete'];
    }

    /**
     * Sets scan_complete
     *
     * @param string|null $scan_complete Whether the scan is complete.
     *
     * @return self
     */
    public function setScanComplete($scan_complete)
    {
        if (is_null($scan_complete)) {
            throw new \InvalidArgumentException('non-nullable scan_complete cannot be null');
        }
        $this->container['scan_complete'] = $scan_complete;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return string|null
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param string|null $preview Whether the file has a preview available.
     *
     * @return self
     */
    public function setPreview($preview)
    {
        if (is_null($preview)) {
            throw new \InvalidArgumentException('non-nullable preview cannot be null');
        }
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets section_name
     *
     * @return string|null
     */
    public function getSectionName()
    {
        return $this->container['section_name'];
    }

    /**
     * Sets section_name
     *
     * @param string|null $section_name Name of the file section.
     *
     * @return self
     */
    public function setSectionName($section_name)
    {
        if (is_null($section_name)) {
            throw new \InvalidArgumentException('non-nullable section_name cannot be null');
        }
        $this->container['section_name'] = $section_name;

        return $this;
    }

    /**
     * Gets fs_id
     *
     * @return string|null
     */
    public function getFsId()
    {
        return $this->container['fs_id'];
    }

    /**
     * Sets fs_id
     *
     * @param string|null $fs_id File section ID.
     *
     * @return self
     */
    public function setFsId($fs_id)
    {
        if (is_null($fs_id)) {
            throw new \InvalidArgumentException('non-nullable fs_id cannot be null');
        }
        $this->container['fs_id'] = $fs_id;

        return $this;
    }

    /**
     * Gets fs_type
     *
     * @return string|null
     */
    public function getFsType()
    {
        return $this->container['fs_type'];
    }

    /**
     * Sets fs_type
     *
     * @param string|null $fs_type Type of the file section.
     *
     * @return self
     */
    public function setFsType($fs_type)
    {
        if (is_null($fs_type)) {
            throw new \InvalidArgumentException('non-nullable fs_type cannot be null');
        }
        $this->container['fs_type'] = $fs_type;

        return $this;
    }

    /**
     * Gets fd_id
     *
     * @return string|null
     */
    public function getFdId()
    {
        return $this->container['fd_id'];
    }

    /**
     * Sets fd_id
     *
     * @param string|null $fd_id File data ID.
     *
     * @return self
     */
    public function setFdId($fd_id)
    {
        if (is_null($fd_id)) {
            throw new \InvalidArgumentException('non-nullable fd_id cannot be null');
        }
        $this->container['fd_id'] = $fd_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of the file.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets parent_type
     *
     * @return string|null
     */
    public function getParentType()
    {
        return $this->container['parent_type'];
    }

    /**
     * Sets parent_type
     *
     * @param string|null $parent_type Parent type of the file.
     *
     * @return self
     */
    public function setParentType($parent_type)
    {
        if (is_null($parent_type)) {
            array_push($this->openAPINullablesSetToNull, 'parent_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_type'] = $parent_type;

        return $this;
    }

    /**
     * Gets for_data_cleaning
     *
     * @return string|null
     */
    public function getForDataCleaning()
    {
        return $this->container['for_data_cleaning'];
    }

    /**
     * Sets for_data_cleaning
     *
     * @param string|null $for_data_cleaning Whether the file is for data cleaning.
     *
     * @return self
     */
    public function setForDataCleaning($for_data_cleaning)
    {
        if (is_null($for_data_cleaning)) {
            throw new \InvalidArgumentException('non-nullable for_data_cleaning cannot be null');
        }
        $this->container['for_data_cleaning'] = $for_data_cleaning;

        return $this;
    }

    /**
     * Gets generate_preview_on_upload
     *
     * @return string|null
     */
    public function getGeneratePreviewOnUpload()
    {
        return $this->container['generate_preview_on_upload'];
    }

    /**
     * Sets generate_preview_on_upload
     *
     * @param string|null $generate_preview_on_upload Whether to generate a preview on upload.
     *
     * @return self
     */
    public function setGeneratePreviewOnUpload($generate_preview_on_upload)
    {
        if (is_null($generate_preview_on_upload)) {
            throw new \InvalidArgumentException('non-nullable generate_preview_on_upload cannot be null');
        }
        $this->container['generate_preview_on_upload'] = $generate_preview_on_upload;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return string|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param string|null $archived Whether the file is archived.
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return string|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param string|null $parent_id Parent ID of the file.
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets formatted_created
     *
     * @return string|null
     */
    public function getFormattedCreated()
    {
        return $this->container['formatted_created'];
    }

    /**
     * Sets formatted_created
     *
     * @param string|null $formatted_created Formatted creation date of the file.
     *
     * @return self
     */
    public function setFormattedCreated($formatted_created)
    {
        if (is_null($formatted_created)) {
            throw new \InvalidArgumentException('non-nullable formatted_created cannot be null');
        }
        $this->container['formatted_created'] = $formatted_created;

        return $this;
    }

    /**
     * Gets formatted_size
     *
     * @return string|null
     */
    public function getFormattedSize()
    {
        return $this->container['formatted_size'];
    }

    /**
     * Sets formatted_size
     *
     * @param string|null $formatted_size Formatted size of the file.
     *
     * @return self
     */
    public function setFormattedSize($formatted_size)
    {
        if (is_null($formatted_size)) {
            throw new \InvalidArgumentException('non-nullable formatted_size cannot be null');
        }
        $this->container['formatted_size'] = $formatted_size;

        return $this;
    }

    /**
     * Gets scan_status
     *
     * @return string|null
     */
    public function getScanStatus()
    {
        return $this->container['scan_status'];
    }

    /**
     * Sets scan_status
     *
     * @param string|null $scan_status Scan status of the file.
     *
     * @return self
     */
    public function setScanStatus($scan_status)
    {
        if (is_null($scan_status)) {
            throw new \InvalidArgumentException('non-nullable scan_status cannot be null');
        }
        $this->container['scan_status'] = $scan_status;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Mode of the file.
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets img_sizes
     *
     * @return \MySdk\Model\TaskTemplateFileSchemaImgSizes|null
     */
    public function getImgSizes()
    {
        return $this->container['img_sizes'];
    }

    /**
     * Sets img_sizes
     *
     * @param \MySdk\Model\TaskTemplateFileSchemaImgSizes|null $img_sizes img_sizes
     *
     * @return self
     */
    public function setImgSizes($img_sizes)
    {
        if (is_null($img_sizes)) {
            throw new \InvalidArgumentException('non-nullable img_sizes cannot be null');
        }
        $this->container['img_sizes'] = $img_sizes;

        return $this;
    }

    /**
     * Gets file_class
     *
     * @return string|null
     */
    public function getFileClass()
    {
        return $this->container['file_class'];
    }

    /**
     * Sets file_class
     *
     * @param string|null $file_class Class of the file.
     *
     * @return self
     */
    public function setFileClass($file_class)
    {
        if (is_null($file_class)) {
            throw new \InvalidArgumentException('non-nullable file_class cannot be null');
        }
        $this->container['file_class'] = $file_class;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return string|null
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param string|null $ext File extension.
     *
     * @return self
     */
    public function setExt($ext)
    {
        if (is_null($ext)) {
            throw new \InvalidArgumentException('non-nullable ext cannot be null');
        }
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets can_generate_preview
     *
     * @return bool|null
     */
    public function getCanGeneratePreview()
    {
        return $this->container['can_generate_preview'];
    }

    /**
     * Sets can_generate_preview
     *
     * @param bool|null $can_generate_preview Whether a preview can be generated.
     *
     * @return self
     */
    public function setCanGeneratePreview($can_generate_preview)
    {
        if (is_null($can_generate_preview)) {
            throw new \InvalidArgumentException('non-nullable can_generate_preview cannot be null');
        }
        $this->container['can_generate_preview'] = $can_generate_preview;

        return $this;
    }

    /**
     * Gets is_assumed_user
     *
     * @return bool|null
     */
    public function getIsAssumedUser()
    {
        return $this->container['is_assumed_user'];
    }

    /**
     * Sets is_assumed_user
     *
     * @param bool|null $is_assumed_user Whether the user is assumed.
     *
     * @return self
     */
    public function setIsAssumedUser($is_assumed_user)
    {
        if (is_null($is_assumed_user)) {
            throw new \InvalidArgumentException('non-nullable is_assumed_user cannot be null');
        }
        $this->container['is_assumed_user'] = $is_assumed_user;

        return $this;
    }

    /**
     * Gets created_str
     *
     * @return string|null
     */
    public function getCreatedStr()
    {
        return $this->container['created_str'];
    }

    /**
     * Sets created_str
     *
     * @param string|null $created_str String representation of the creation date.
     *
     * @return self
     */
    public function setCreatedStr($created_str)
    {
        if (is_null($created_str)) {
            throw new \InvalidArgumentException('non-nullable created_str cannot be null');
        }
        $this->container['created_str'] = $created_str;

        return $this;
    }

    /**
     * Gets can_see_file
     *
     * @return bool|null
     */
    public function getCanSeeFile()
    {
        return $this->container['can_see_file'];
    }

    /**
     * Sets can_see_file
     *
     * @param bool|null $can_see_file Whether the file is visible to the user.
     *
     * @return self
     */
    public function setCanSeeFile($can_see_file)
    {
        if (is_null($can_see_file)) {
            throw new \InvalidArgumentException('non-nullable can_see_file cannot be null');
        }
        $this->container['can_see_file'] = $can_see_file;

        return $this;
    }

    /**
     * Gets is_shared_with_anyone
     *
     * @return bool|null
     */
    public function getIsSharedWithAnyone()
    {
        return $this->container['is_shared_with_anyone'];
    }

    /**
     * Sets is_shared_with_anyone
     *
     * @param bool|null $is_shared_with_anyone Whether the file is shared with anyone.
     *
     * @return self
     */
    public function setIsSharedWithAnyone($is_shared_with_anyone)
    {
        if (is_null($is_shared_with_anyone)) {
            throw new \InvalidArgumentException('non-nullable is_shared_with_anyone cannot be null');
        }
        $this->container['is_shared_with_anyone'] = $is_shared_with_anyone;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit Whether the file can be edited.
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets has_esignatures
     *
     * @return bool|null
     */
    public function getHasEsignatures()
    {
        return $this->container['has_esignatures'];
    }

    /**
     * Sets has_esignatures
     *
     * @param bool|null $has_esignatures Whether the file has eSignatures.
     *
     * @return self
     */
    public function setHasEsignatures($has_esignatures)
    {
        if (is_null($has_esignatures)) {
            throw new \InvalidArgumentException('non-nullable has_esignatures cannot be null');
        }
        $this->container['has_esignatures'] = $has_esignatures;

        return $this;
    }

    /**
     * Gets can_request_esignature
     *
     * @return bool|null
     */
    public function getCanRequestEsignature()
    {
        return $this->container['can_request_esignature'];
    }

    /**
     * Sets can_request_esignature
     *
     * @param bool|null $can_request_esignature Whether an eSignature can be requested.
     *
     * @return self
     */
    public function setCanRequestEsignature($can_request_esignature)
    {
        if (is_null($can_request_esignature)) {
            throw new \InvalidArgumentException('non-nullable can_request_esignature cannot be null');
        }
        $this->container['can_request_esignature'] = $can_request_esignature;

        return $this;
    }

    /**
     * Gets esignatures
     *
     * @return \MySdk\Model\TaskTemplateFileSchemaEsignatures|null
     */
    public function getEsignatures()
    {
        return $this->container['esignatures'];
    }

    /**
     * Sets esignatures
     *
     * @param \MySdk\Model\TaskTemplateFileSchemaEsignatures|null $esignatures esignatures
     *
     * @return self
     */
    public function setEsignatures($esignatures)
    {
        if (is_null($esignatures)) {
            throw new \InvalidArgumentException('non-nullable esignatures cannot be null');
        }
        $this->container['esignatures'] = $esignatures;

        return $this;
    }

    /**
     * Gets number_of_signers
     *
     * @return int|null
     */
    public function getNumberOfSigners()
    {
        return $this->container['number_of_signers'];
    }

    /**
     * Sets number_of_signers
     *
     * @param int|null $number_of_signers Number of signers for the file.
     *
     * @return self
     */
    public function setNumberOfSigners($number_of_signers)
    {
        if (is_null($number_of_signers)) {
            throw new \InvalidArgumentException('non-nullable number_of_signers cannot be null');
        }
        $this->container['number_of_signers'] = $number_of_signers;

        return $this;
    }

    /**
     * Gets completed_check
     *
     * @return string|null
     */
    public function getCompletedCheck()
    {
        return $this->container['completed_check'];
    }

    /**
     * Sets completed_check
     *
     * @param string|null $completed_check Whether the file check is completed.
     *
     * @return self
     */
    public function setCompletedCheck($completed_check)
    {
        if (is_null($completed_check)) {
            throw new \InvalidArgumentException('non-nullable completed_check cannot be null');
        }
        $this->container['completed_check'] = $completed_check;

        return $this;
    }

    /**
     * Gets file_id
     *
     * @return string|null
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string|null $file_id File ID (duplicate of id).
     *
     * @return self
     */
    public function setFileId($file_id)
    {
        if (is_null($file_id)) {
            throw new \InvalidArgumentException('non-nullable file_id cannot be null');
        }
        $this->container['file_id'] = $file_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


