<?php
/**
 * PayrollPayrollValidationErrorsControllerValidationErrorDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollPayrollValidationErrorsControllerValidationErrorDataObject Class Doc Comment
 *
 * @category Class
 * @description Validation error object returned by payroll validation errors endpoint.
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollPayrollValidationErrorsControllerValidationErrorDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payroll.PayrollValidationErrorsController.ValidationErrorDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'client_id' => 'int',
        'employee_id' => 'int',
        'sync_type' => 'string',
        'scope' => 'string',
        'error_type_id' => 'int',
        'error_type_label' => 'string',
        'meta_data' => 'mixed',
        'created' => 'string',
        'pay_schedule_id' => 'int',
        'related_model' => 'string',
        'related_external_id' => 'string',
        'related_trax_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'client_id' => null,
        'employee_id' => null,
        'sync_type' => null,
        'scope' => null,
        'error_type_id' => null,
        'error_type_label' => null,
        'meta_data' => null,
        'created' => null,
        'pay_schedule_id' => null,
        'related_model' => null,
        'related_external_id' => null,
        'related_trax_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'client_id' => false,
        'employee_id' => true,
        'sync_type' => false,
        'scope' => false,
        'error_type_id' => false,
        'error_type_label' => false,
        'meta_data' => true,
        'created' => false,
        'pay_schedule_id' => true,
        'related_model' => true,
        'related_external_id' => true,
        'related_trax_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'client_id' => 'clientId',
        'employee_id' => 'employeeId',
        'sync_type' => 'syncType',
        'scope' => 'scope',
        'error_type_id' => 'errorTypeId',
        'error_type_label' => 'errorTypeLabel',
        'meta_data' => 'metaData',
        'created' => 'created',
        'pay_schedule_id' => 'payScheduleId',
        'related_model' => 'relatedModel',
        'related_external_id' => 'relatedExternalId',
        'related_trax_id' => 'relatedTraxId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'client_id' => 'setClientId',
        'employee_id' => 'setEmployeeId',
        'sync_type' => 'setSyncType',
        'scope' => 'setScope',
        'error_type_id' => 'setErrorTypeId',
        'error_type_label' => 'setErrorTypeLabel',
        'meta_data' => 'setMetaData',
        'created' => 'setCreated',
        'pay_schedule_id' => 'setPayScheduleId',
        'related_model' => 'setRelatedModel',
        'related_external_id' => 'setRelatedExternalId',
        'related_trax_id' => 'setRelatedTraxId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'client_id' => 'getClientId',
        'employee_id' => 'getEmployeeId',
        'sync_type' => 'getSyncType',
        'scope' => 'getScope',
        'error_type_id' => 'getErrorTypeId',
        'error_type_label' => 'getErrorTypeLabel',
        'meta_data' => 'getMetaData',
        'created' => 'getCreated',
        'pay_schedule_id' => 'getPayScheduleId',
        'related_model' => 'getRelatedModel',
        'related_external_id' => 'getRelatedExternalId',
        'related_trax_id' => 'getRelatedTraxId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('sync_type', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('error_type_id', $data ?? [], null);
        $this->setIfExists('error_type_label', $data ?? [], null);
        $this->setIfExists('meta_data', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('pay_schedule_id', $data ?? [], null);
        $this->setIfExists('related_model', $data ?? [], null);
        $this->setIfExists('related_external_id', $data ?? [], null);
        $this->setIfExists('related_trax_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique identifier for the validation error.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int|null $client_id Client ID associated with the error.
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Employee ID associated with the error, if applicable.
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            array_push($this->openAPINullablesSetToNull, 'employee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets sync_type
     *
     * @return string|null
     */
    public function getSyncType()
    {
        return $this->container['sync_type'];
    }

    /**
     * Sets sync_type
     *
     * @param string|null $sync_type Sync type for the error (e.g., 'employee', 'company').
     *
     * @return self
     */
    public function setSyncType($sync_type)
    {
        if (is_null($sync_type)) {
            throw new \InvalidArgumentException('non-nullable sync_type cannot be null');
        }
        $this->container['sync_type'] = $sync_type;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope Scope of the error.
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets error_type_id
     *
     * @return int|null
     */
    public function getErrorTypeId()
    {
        return $this->container['error_type_id'];
    }

    /**
     * Sets error_type_id
     *
     * @param int|null $error_type_id Error type ID.
     *
     * @return self
     */
    public function setErrorTypeId($error_type_id)
    {
        if (is_null($error_type_id)) {
            throw new \InvalidArgumentException('non-nullable error_type_id cannot be null');
        }
        $this->container['error_type_id'] = $error_type_id;

        return $this;
    }

    /**
     * Gets error_type_label
     *
     * @return string|null
     */
    public function getErrorTypeLabel()
    {
        return $this->container['error_type_label'];
    }

    /**
     * Sets error_type_label
     *
     * @param string|null $error_type_label Human-readable label for the error type.
     *
     * @return self
     */
    public function setErrorTypeLabel($error_type_label)
    {
        if (is_null($error_type_label)) {
            throw new \InvalidArgumentException('non-nullable error_type_label cannot be null');
        }
        $this->container['error_type_label'] = $error_type_label;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return mixed|null
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param mixed|null $meta_data Metadata associated with the error.
     *
     * @return self
     */
    public function setMetaData($meta_data)
    {
        if (is_null($meta_data)) {
            array_push($this->openAPINullablesSetToNull, 'meta_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string|null $created ISO8601 date/time string when the error was created.
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets pay_schedule_id
     *
     * @return int|null
     */
    public function getPayScheduleId()
    {
        return $this->container['pay_schedule_id'];
    }

    /**
     * Sets pay_schedule_id
     *
     * @param int|null $pay_schedule_id Pay schedule ID, if applicable.
     *
     * @return self
     */
    public function setPayScheduleId($pay_schedule_id)
    {
        if (is_null($pay_schedule_id)) {
            array_push($this->openAPINullablesSetToNull, 'pay_schedule_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_schedule_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_schedule_id'] = $pay_schedule_id;

        return $this;
    }

    /**
     * Gets related_model
     *
     * @return string|null
     */
    public function getRelatedModel()
    {
        return $this->container['related_model'];
    }

    /**
     * Sets related_model
     *
     * @param string|null $related_model Related model name, if applicable.
     *
     * @return self
     */
    public function setRelatedModel($related_model)
    {
        if (is_null($related_model)) {
            array_push($this->openAPINullablesSetToNull, 'related_model');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_model', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_model'] = $related_model;

        return $this;
    }

    /**
     * Gets related_external_id
     *
     * @return string|null
     */
    public function getRelatedExternalId()
    {
        return $this->container['related_external_id'];
    }

    /**
     * Sets related_external_id
     *
     * @param string|null $related_external_id Related external ID, if applicable.
     *
     * @return self
     */
    public function setRelatedExternalId($related_external_id)
    {
        if (is_null($related_external_id)) {
            array_push($this->openAPINullablesSetToNull, 'related_external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_external_id'] = $related_external_id;

        return $this;
    }

    /**
     * Gets related_trax_id
     *
     * @return string|null
     */
    public function getRelatedTraxId()
    {
        return $this->container['related_trax_id'];
    }

    /**
     * Sets related_trax_id
     *
     * @param string|null $related_trax_id Related Trax ID, if applicable.
     *
     * @return self
     */
    public function setRelatedTraxId($related_trax_id)
    {
        if (is_null($related_trax_id)) {
            array_push($this->openAPINullablesSetToNull, 'related_trax_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_trax_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_trax_id'] = $related_trax_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


