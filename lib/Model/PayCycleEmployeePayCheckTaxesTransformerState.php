<?php
/**
 * PayCycleEmployeePayCheckTaxesTransformerState
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayCycleEmployeePayCheckTaxesTransformerState Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayCycleEmployeePayCheckTaxesTransformerState implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayCycleEmployeePayCheckTaxesTransformer_state';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bhr_is_exempt' => 'bool',
        'trax_is_exempt' => 'bool',
        'additional_withholding' => '\MySdk\Model\PayCycleEmployeePayCheckTaxesTransformerStateAdditionalWithholding',
        'work_in' => 'string',
        'exemptions' => 'int',
        'filing_status' => 'string',
        'options' => 'string[]',
        'ui' => '\MySdk\Model\PayCycleEmployeePayCheckTaxesTransformerStateUi'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bhr_is_exempt' => null,
        'trax_is_exempt' => null,
        'additional_withholding' => null,
        'work_in' => null,
        'exemptions' => null,
        'filing_status' => null,
        'options' => null,
        'ui' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bhr_is_exempt' => true,
        'trax_is_exempt' => true,
        'additional_withholding' => false,
        'work_in' => true,
        'exemptions' => true,
        'filing_status' => true,
        'options' => true,
        'ui' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bhr_is_exempt' => 'bhrIsExempt',
        'trax_is_exempt' => 'traxIsExempt',
        'additional_withholding' => 'additionalWithholding',
        'work_in' => 'workIn',
        'exemptions' => 'exemptions',
        'filing_status' => 'filingStatus',
        'options' => 'options',
        'ui' => 'ui'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bhr_is_exempt' => 'setBhrIsExempt',
        'trax_is_exempt' => 'setTraxIsExempt',
        'additional_withholding' => 'setAdditionalWithholding',
        'work_in' => 'setWorkIn',
        'exemptions' => 'setExemptions',
        'filing_status' => 'setFilingStatus',
        'options' => 'setOptions',
        'ui' => 'setUi'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bhr_is_exempt' => 'getBhrIsExempt',
        'trax_is_exempt' => 'getTraxIsExempt',
        'additional_withholding' => 'getAdditionalWithholding',
        'work_in' => 'getWorkIn',
        'exemptions' => 'getExemptions',
        'filing_status' => 'getFilingStatus',
        'options' => 'getOptions',
        'ui' => 'getUi'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bhr_is_exempt', $data ?? [], null);
        $this->setIfExists('trax_is_exempt', $data ?? [], null);
        $this->setIfExists('additional_withholding', $data ?? [], null);
        $this->setIfExists('work_in', $data ?? [], null);
        $this->setIfExists('exemptions', $data ?? [], null);
        $this->setIfExists('filing_status', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('ui', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bhr_is_exempt
     *
     * @return bool|null
     */
    public function getBhrIsExempt()
    {
        return $this->container['bhr_is_exempt'];
    }

    /**
     * Sets bhr_is_exempt
     *
     * @param bool|null $bhr_is_exempt bhr_is_exempt
     *
     * @return self
     */
    public function setBhrIsExempt($bhr_is_exempt)
    {
        if (is_null($bhr_is_exempt)) {
            array_push($this->openAPINullablesSetToNull, 'bhr_is_exempt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bhr_is_exempt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bhr_is_exempt'] = $bhr_is_exempt;

        return $this;
    }

    /**
     * Gets trax_is_exempt
     *
     * @return bool|null
     */
    public function getTraxIsExempt()
    {
        return $this->container['trax_is_exempt'];
    }

    /**
     * Sets trax_is_exempt
     *
     * @param bool|null $trax_is_exempt trax_is_exempt
     *
     * @return self
     */
    public function setTraxIsExempt($trax_is_exempt)
    {
        if (is_null($trax_is_exempt)) {
            array_push($this->openAPINullablesSetToNull, 'trax_is_exempt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trax_is_exempt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trax_is_exempt'] = $trax_is_exempt;

        return $this;
    }

    /**
     * Gets additional_withholding
     *
     * @return \MySdk\Model\PayCycleEmployeePayCheckTaxesTransformerStateAdditionalWithholding|null
     */
    public function getAdditionalWithholding()
    {
        return $this->container['additional_withholding'];
    }

    /**
     * Sets additional_withholding
     *
     * @param \MySdk\Model\PayCycleEmployeePayCheckTaxesTransformerStateAdditionalWithholding|null $additional_withholding additional_withholding
     *
     * @return self
     */
    public function setAdditionalWithholding($additional_withholding)
    {
        if (is_null($additional_withholding)) {
            throw new \InvalidArgumentException('non-nullable additional_withholding cannot be null');
        }
        $this->container['additional_withholding'] = $additional_withholding;

        return $this;
    }

    /**
     * Gets work_in
     *
     * @return string|null
     */
    public function getWorkIn()
    {
        return $this->container['work_in'];
    }

    /**
     * Sets work_in
     *
     * @param string|null $work_in work_in
     *
     * @return self
     */
    public function setWorkIn($work_in)
    {
        if (is_null($work_in)) {
            array_push($this->openAPINullablesSetToNull, 'work_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('work_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['work_in'] = $work_in;

        return $this;
    }

    /**
     * Gets exemptions
     *
     * @return int|null
     */
    public function getExemptions()
    {
        return $this->container['exemptions'];
    }

    /**
     * Sets exemptions
     *
     * @param int|null $exemptions exemptions
     *
     * @return self
     */
    public function setExemptions($exemptions)
    {
        if (is_null($exemptions)) {
            array_push($this->openAPINullablesSetToNull, 'exemptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exemptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exemptions'] = $exemptions;

        return $this;
    }

    /**
     * Gets filing_status
     *
     * @return string|null
     */
    public function getFilingStatus()
    {
        return $this->container['filing_status'];
    }

    /**
     * Sets filing_status
     *
     * @param string|null $filing_status filing_status
     *
     * @return self
     */
    public function setFilingStatus($filing_status)
    {
        if (is_null($filing_status)) {
            array_push($this->openAPINullablesSetToNull, 'filing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('filing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['filing_status'] = $filing_status;

        return $this;
    }

    /**
     * Gets options
     *
     * @return string[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param string[]|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            array_push($this->openAPINullablesSetToNull, 'options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets ui
     *
     * @return \MySdk\Model\PayCycleEmployeePayCheckTaxesTransformerStateUi|null
     */
    public function getUi()
    {
        return $this->container['ui'];
    }

    /**
     * Sets ui
     *
     * @param \MySdk\Model\PayCycleEmployeePayCheckTaxesTransformerStateUi|null $ui ui
     *
     * @return self
     */
    public function setUi($ui)
    {
        if (is_null($ui)) {
            throw new \InvalidArgumentException('non-nullable ui cannot be null');
        }
        $this->container['ui'] = $ui;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


