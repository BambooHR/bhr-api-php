<?php
/**
 * PayCycleEmployeeCheck
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayCycleEmployeeCheck Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayCycleEmployeeCheck implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayCycleEmployeeCheck';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'check_id' => 'int',
        'modified_regular_hours' => 'float',
        'direct_deposit_disable' => 'bool',
        'deduction_disable' => 'bool',
        'note' => 'string',
        'taxes' => '\MySdk\Model\PayCycleEmployeePayCheckTaxesTransformer',
        'wages' => '\MySdk\Model\PayCycleEmployeeWageTransformer[]',
        'deductions' => '\MySdk\Model\PayCycleEmployeeDeductionsCollectionTransformer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'check_id' => null,
        'modified_regular_hours' => null,
        'direct_deposit_disable' => null,
        'deduction_disable' => null,
        'note' => null,
        'taxes' => null,
        'wages' => null,
        'deductions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'check_id' => false,
        'modified_regular_hours' => false,
        'direct_deposit_disable' => false,
        'deduction_disable' => false,
        'note' => false,
        'taxes' => false,
        'wages' => false,
        'deductions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'check_id' => 'checkId',
        'modified_regular_hours' => 'modifiedRegularHours',
        'direct_deposit_disable' => 'directDepositDisable',
        'deduction_disable' => 'deductionDisable',
        'note' => 'note',
        'taxes' => 'taxes',
        'wages' => 'wages',
        'deductions' => 'deductions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'check_id' => 'setCheckId',
        'modified_regular_hours' => 'setModifiedRegularHours',
        'direct_deposit_disable' => 'setDirectDepositDisable',
        'deduction_disable' => 'setDeductionDisable',
        'note' => 'setNote',
        'taxes' => 'setTaxes',
        'wages' => 'setWages',
        'deductions' => 'setDeductions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'check_id' => 'getCheckId',
        'modified_regular_hours' => 'getModifiedRegularHours',
        'direct_deposit_disable' => 'getDirectDepositDisable',
        'deduction_disable' => 'getDeductionDisable',
        'note' => 'getNote',
        'taxes' => 'getTaxes',
        'wages' => 'getWages',
        'deductions' => 'getDeductions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('check_id', $data ?? [], null);
        $this->setIfExists('modified_regular_hours', $data ?? [], null);
        $this->setIfExists('direct_deposit_disable', $data ?? [], null);
        $this->setIfExists('deduction_disable', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('wages', $data ?? [], null);
        $this->setIfExists('deductions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets check_id
     *
     * @return int|null
     */
    public function getCheckId()
    {
        return $this->container['check_id'];
    }

    /**
     * Sets check_id
     *
     * @param int|null $check_id transform
     *
     * @return self
     */
    public function setCheckId($check_id)
    {
        if (is_null($check_id)) {
            throw new \InvalidArgumentException('non-nullable check_id cannot be null');
        }
        $this->container['check_id'] = $check_id;

        return $this;
    }

    /**
     * Gets modified_regular_hours
     *
     * @return float|null
     */
    public function getModifiedRegularHours()
    {
        return $this->container['modified_regular_hours'];
    }

    /**
     * Sets modified_regular_hours
     *
     * @param float|null $modified_regular_hours modified_regular_hours
     *
     * @return self
     */
    public function setModifiedRegularHours($modified_regular_hours)
    {
        if (is_null($modified_regular_hours)) {
            throw new \InvalidArgumentException('non-nullable modified_regular_hours cannot be null');
        }
        $this->container['modified_regular_hours'] = $modified_regular_hours;

        return $this;
    }

    /**
     * Gets direct_deposit_disable
     *
     * @return bool|null
     */
    public function getDirectDepositDisable()
    {
        return $this->container['direct_deposit_disable'];
    }

    /**
     * Sets direct_deposit_disable
     *
     * @param bool|null $direct_deposit_disable direct_deposit_disable
     *
     * @return self
     */
    public function setDirectDepositDisable($direct_deposit_disable)
    {
        if (is_null($direct_deposit_disable)) {
            throw new \InvalidArgumentException('non-nullable direct_deposit_disable cannot be null');
        }
        $this->container['direct_deposit_disable'] = $direct_deposit_disable;

        return $this;
    }

    /**
     * Gets deduction_disable
     *
     * @return bool|null
     */
    public function getDeductionDisable()
    {
        return $this->container['deduction_disable'];
    }

    /**
     * Sets deduction_disable
     *
     * @param bool|null $deduction_disable deduction_disable
     *
     * @return self
     */
    public function setDeductionDisable($deduction_disable)
    {
        if (is_null($deduction_disable)) {
            throw new \InvalidArgumentException('non-nullable deduction_disable cannot be null');
        }
        $this->container['deduction_disable'] = $deduction_disable;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \MySdk\Model\PayCycleEmployeePayCheckTaxesTransformer|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \MySdk\Model\PayCycleEmployeePayCheckTaxesTransformer|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets wages
     *
     * @return \MySdk\Model\PayCycleEmployeeWageTransformer[]|null
     */
    public function getWages()
    {
        return $this->container['wages'];
    }

    /**
     * Sets wages
     *
     * @param \MySdk\Model\PayCycleEmployeeWageTransformer[]|null $wages transform
     *
     * @return self
     */
    public function setWages($wages)
    {
        if (is_null($wages)) {
            throw new \InvalidArgumentException('non-nullable wages cannot be null');
        }
        $this->container['wages'] = $wages;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return \MySdk\Model\PayCycleEmployeeDeductionsCollectionTransformer|null
     */
    public function getDeductions()
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param \MySdk\Model\PayCycleEmployeeDeductionsCollectionTransformer|null $deductions deductions
     *
     * @return self
     */
    public function setDeductions($deductions)
    {
        if (is_null($deductions)) {
            throw new \InvalidArgumentException('non-nullable deductions cannot be null');
        }
        $this->container['deductions'] = $deductions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


