<?php
/**
 * BenefitPlanModel
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * BenefitPlanModel Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BenefitPlanModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BenefitPlanModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'plan_dates' => '\MySdk\Model\PlanDates',
        'plan_type_data' => '\MySdk\Model\PlanTypeData',
        'eligibility_groups' => '\MySdk\Model\EligibilityGroups',
        'additional_plan_urls' => '\MySdk\Model\NamedPlanUrl[]',
        'id' => 'int',
        'plan_state' => 'string',
        'parent_benefit_plan_id' => 'string',
        'enrollment_info' => '\MySdk\Model\EnrollmentInfo',
        'name' => 'string',
        'description' => 'string',
        'summary' => 'string',
        'url' => 'string',
        'is_restorable' => 'bool',
        'type' => 'string',
        'employee_questions' => 'string[]',
        'dependent_questions' => 'string[]',
        'carrier_plan_id' => 'string',
        'plan_files' => 'string[]',
        'legal_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'plan_dates' => null,
        'plan_type_data' => null,
        'eligibility_groups' => null,
        'additional_plan_urls' => null,
        'id' => null,
        'plan_state' => null,
        'parent_benefit_plan_id' => null,
        'enrollment_info' => null,
        'name' => null,
        'description' => null,
        'summary' => null,
        'url' => null,
        'is_restorable' => null,
        'type' => null,
        'employee_questions' => null,
        'dependent_questions' => null,
        'carrier_plan_id' => null,
        'plan_files' => null,
        'legal_text' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'plan_dates' => false,
        'plan_type_data' => false,
        'eligibility_groups' => false,
        'additional_plan_urls' => false,
        'id' => true,
        'plan_state' => true,
        'parent_benefit_plan_id' => false,
        'enrollment_info' => true,
        'name' => true,
        'description' => true,
        'summary' => true,
        'url' => true,
        'is_restorable' => true,
        'type' => true,
        'employee_questions' => false,
        'dependent_questions' => false,
        'carrier_plan_id' => true,
        'plan_files' => false,
        'legal_text' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plan_dates' => 'planDates',
        'plan_type_data' => 'planTypeData',
        'eligibility_groups' => 'eligibilityGroups',
        'additional_plan_urls' => 'additionalPlanUrls',
        'id' => 'id',
        'plan_state' => 'planState',
        'parent_benefit_plan_id' => 'parentBenefitPlanId',
        'enrollment_info' => 'enrollmentInfo',
        'name' => 'name',
        'description' => 'description',
        'summary' => 'summary',
        'url' => 'url',
        'is_restorable' => 'isRestorable',
        'type' => 'type',
        'employee_questions' => 'employeeQuestions',
        'dependent_questions' => 'dependentQuestions',
        'carrier_plan_id' => 'carrierPlanId',
        'plan_files' => 'planFiles',
        'legal_text' => 'legalText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plan_dates' => 'setPlanDates',
        'plan_type_data' => 'setPlanTypeData',
        'eligibility_groups' => 'setEligibilityGroups',
        'additional_plan_urls' => 'setAdditionalPlanUrls',
        'id' => 'setId',
        'plan_state' => 'setPlanState',
        'parent_benefit_plan_id' => 'setParentBenefitPlanId',
        'enrollment_info' => 'setEnrollmentInfo',
        'name' => 'setName',
        'description' => 'setDescription',
        'summary' => 'setSummary',
        'url' => 'setUrl',
        'is_restorable' => 'setIsRestorable',
        'type' => 'setType',
        'employee_questions' => 'setEmployeeQuestions',
        'dependent_questions' => 'setDependentQuestions',
        'carrier_plan_id' => 'setCarrierPlanId',
        'plan_files' => 'setPlanFiles',
        'legal_text' => 'setLegalText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plan_dates' => 'getPlanDates',
        'plan_type_data' => 'getPlanTypeData',
        'eligibility_groups' => 'getEligibilityGroups',
        'additional_plan_urls' => 'getAdditionalPlanUrls',
        'id' => 'getId',
        'plan_state' => 'getPlanState',
        'parent_benefit_plan_id' => 'getParentBenefitPlanId',
        'enrollment_info' => 'getEnrollmentInfo',
        'name' => 'getName',
        'description' => 'getDescription',
        'summary' => 'getSummary',
        'url' => 'getUrl',
        'is_restorable' => 'getIsRestorable',
        'type' => 'getType',
        'employee_questions' => 'getEmployeeQuestions',
        'dependent_questions' => 'getDependentQuestions',
        'carrier_plan_id' => 'getCarrierPlanId',
        'plan_files' => 'getPlanFiles',
        'legal_text' => 'getLegalText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('plan_dates', $data ?? [], null);
        $this->setIfExists('plan_type_data', $data ?? [], null);
        $this->setIfExists('eligibility_groups', $data ?? [], null);
        $this->setIfExists('additional_plan_urls', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('plan_state', $data ?? [], null);
        $this->setIfExists('parent_benefit_plan_id', $data ?? [], null);
        $this->setIfExists('enrollment_info', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('is_restorable', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('employee_questions', $data ?? [], null);
        $this->setIfExists('dependent_questions', $data ?? [], null);
        $this->setIfExists('carrier_plan_id', $data ?? [], null);
        $this->setIfExists('plan_files', $data ?? [], null);
        $this->setIfExists('legal_text', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plan_dates
     *
     * @return \MySdk\Model\PlanDates|null
     */
    public function getPlanDates()
    {
        return $this->container['plan_dates'];
    }

    /**
     * Sets plan_dates
     *
     * @param \MySdk\Model\PlanDates|null $plan_dates plan_dates
     *
     * @return self
     */
    public function setPlanDates($plan_dates)
    {
        if (is_null($plan_dates)) {
            throw new \InvalidArgumentException('non-nullable plan_dates cannot be null');
        }
        $this->container['plan_dates'] = $plan_dates;

        return $this;
    }

    /**
     * Gets plan_type_data
     *
     * @return \MySdk\Model\PlanTypeData|null
     */
    public function getPlanTypeData()
    {
        return $this->container['plan_type_data'];
    }

    /**
     * Sets plan_type_data
     *
     * @param \MySdk\Model\PlanTypeData|null $plan_type_data plan_type_data
     *
     * @return self
     */
    public function setPlanTypeData($plan_type_data)
    {
        if (is_null($plan_type_data)) {
            throw new \InvalidArgumentException('non-nullable plan_type_data cannot be null');
        }
        $this->container['plan_type_data'] = $plan_type_data;

        return $this;
    }

    /**
     * Gets eligibility_groups
     *
     * @return \MySdk\Model\EligibilityGroups|null
     */
    public function getEligibilityGroups()
    {
        return $this->container['eligibility_groups'];
    }

    /**
     * Sets eligibility_groups
     *
     * @param \MySdk\Model\EligibilityGroups|null $eligibility_groups eligibility_groups
     *
     * @return self
     */
    public function setEligibilityGroups($eligibility_groups)
    {
        if (is_null($eligibility_groups)) {
            throw new \InvalidArgumentException('non-nullable eligibility_groups cannot be null');
        }
        $this->container['eligibility_groups'] = $eligibility_groups;

        return $this;
    }

    /**
     * Gets additional_plan_urls
     *
     * @return \MySdk\Model\NamedPlanUrl[]|null
     */
    public function getAdditionalPlanUrls()
    {
        return $this->container['additional_plan_urls'];
    }

    /**
     * Sets additional_plan_urls
     *
     * @param \MySdk\Model\NamedPlanUrl[]|null $additional_plan_urls additional_plan_urls
     *
     * @return self
     */
    public function setAdditionalPlanUrls($additional_plan_urls)
    {
        if (is_null($additional_plan_urls)) {
            throw new \InvalidArgumentException('non-nullable additional_plan_urls cannot be null');
        }
        $this->container['additional_plan_urls'] = $additional_plan_urls;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets plan_state
     *
     * @return string|null
     */
    public function getPlanState()
    {
        return $this->container['plan_state'];
    }

    /**
     * Sets plan_state
     *
     * @param string|null $plan_state plan_state
     *
     * @return self
     */
    public function setPlanState($plan_state)
    {
        if (is_null($plan_state)) {
            array_push($this->openAPINullablesSetToNull, 'plan_state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plan_state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plan_state'] = $plan_state;

        return $this;
    }

    /**
     * Gets parent_benefit_plan_id
     *
     * @return string|null
     */
    public function getParentBenefitPlanId()
    {
        return $this->container['parent_benefit_plan_id'];
    }

    /**
     * Sets parent_benefit_plan_id
     *
     * @param string|null $parent_benefit_plan_id parent_benefit_plan_id
     *
     * @return self
     */
    public function setParentBenefitPlanId($parent_benefit_plan_id)
    {
        if (is_null($parent_benefit_plan_id)) {
            throw new \InvalidArgumentException('non-nullable parent_benefit_plan_id cannot be null');
        }
        $this->container['parent_benefit_plan_id'] = $parent_benefit_plan_id;

        return $this;
    }

    /**
     * Gets enrollment_info
     *
     * @return \MySdk\Model\EnrollmentInfo|null
     */
    public function getEnrollmentInfo()
    {
        return $this->container['enrollment_info'];
    }

    /**
     * Sets enrollment_info
     *
     * @param \MySdk\Model\EnrollmentInfo|null $enrollment_info enrollment_info
     *
     * @return self
     */
    public function setEnrollmentInfo($enrollment_info)
    {
        if (is_null($enrollment_info)) {
            array_push($this->openAPINullablesSetToNull, 'enrollment_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrollment_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enrollment_info'] = $enrollment_info;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            array_push($this->openAPINullablesSetToNull, 'summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            array_push($this->openAPINullablesSetToNull, 'url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets is_restorable
     *
     * @return bool|null
     */
    public function getIsRestorable()
    {
        return $this->container['is_restorable'];
    }

    /**
     * Sets is_restorable
     *
     * @param bool|null $is_restorable is_restorable
     *
     * @return self
     */
    public function setIsRestorable($is_restorable)
    {
        if (is_null($is_restorable)) {
            array_push($this->openAPINullablesSetToNull, 'is_restorable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_restorable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_restorable'] = $is_restorable;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets employee_questions
     *
     * @return string[]|null
     */
    public function getEmployeeQuestions()
    {
        return $this->container['employee_questions'];
    }

    /**
     * Sets employee_questions
     *
     * @param string[]|null $employee_questions employee_questions
     *
     * @return self
     */
    public function setEmployeeQuestions($employee_questions)
    {
        if (is_null($employee_questions)) {
            throw new \InvalidArgumentException('non-nullable employee_questions cannot be null');
        }
        $this->container['employee_questions'] = $employee_questions;

        return $this;
    }

    /**
     * Gets dependent_questions
     *
     * @return string[]|null
     */
    public function getDependentQuestions()
    {
        return $this->container['dependent_questions'];
    }

    /**
     * Sets dependent_questions
     *
     * @param string[]|null $dependent_questions dependent_questions
     *
     * @return self
     */
    public function setDependentQuestions($dependent_questions)
    {
        if (is_null($dependent_questions)) {
            throw new \InvalidArgumentException('non-nullable dependent_questions cannot be null');
        }
        $this->container['dependent_questions'] = $dependent_questions;

        return $this;
    }

    /**
     * Gets carrier_plan_id
     *
     * @return string|null
     */
    public function getCarrierPlanId()
    {
        return $this->container['carrier_plan_id'];
    }

    /**
     * Sets carrier_plan_id
     *
     * @param string|null $carrier_plan_id carrier_plan_id
     *
     * @return self
     */
    public function setCarrierPlanId($carrier_plan_id)
    {
        if (is_null($carrier_plan_id)) {
            array_push($this->openAPINullablesSetToNull, 'carrier_plan_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('carrier_plan_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['carrier_plan_id'] = $carrier_plan_id;

        return $this;
    }

    /**
     * Gets plan_files
     *
     * @return string[]|null
     */
    public function getPlanFiles()
    {
        return $this->container['plan_files'];
    }

    /**
     * Sets plan_files
     *
     * @param string[]|null $plan_files plan_files
     *
     * @return self
     */
    public function setPlanFiles($plan_files)
    {
        if (is_null($plan_files)) {
            throw new \InvalidArgumentException('non-nullable plan_files cannot be null');
        }
        $this->container['plan_files'] = $plan_files;

        return $this;
    }

    /**
     * Gets legal_text
     *
     * @return string|null
     */
    public function getLegalText()
    {
        return $this->container['legal_text'];
    }

    /**
     * Sets legal_text
     *
     * @param string|null $legal_text legal_text
     *
     * @return self
     */
    public function setLegalText($legal_text)
    {
        if (is_null($legal_text)) {
            array_push($this->openAPINullablesSetToNull, 'legal_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('legal_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['legal_text'] = $legal_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


