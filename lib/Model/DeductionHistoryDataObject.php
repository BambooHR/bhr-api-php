<?php
/**
 * DeductionHistoryDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * DeductionHistoryDataObject Class Doc Comment
 *
 * @category Class
 * @description Deduction History Data Object
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeductionHistoryDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeductionHistoryDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pay_date' => 'string',
        'event' => 'string',
        'employee_paid' => 'float',
        'company_paid' => 'float',
        'payroll_user' => 'string',
        'deduction_comment' => 'string',
        'company_level_deduction_id' => 'int',
        'start_date' => 'string',
        'end_date' => 'string',
        'is_benefit' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pay_date' => null,
        'event' => null,
        'employee_paid' => 'float',
        'company_paid' => 'float',
        'payroll_user' => null,
        'deduction_comment' => null,
        'company_level_deduction_id' => null,
        'start_date' => null,
        'end_date' => null,
        'is_benefit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pay_date' => false,
        'event' => false,
        'employee_paid' => false,
        'company_paid' => false,
        'payroll_user' => false,
        'deduction_comment' => true,
        'company_level_deduction_id' => false,
        'start_date' => true,
        'end_date' => true,
        'is_benefit' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_date' => 'payDate',
        'event' => 'event',
        'employee_paid' => 'employeePaid',
        'company_paid' => 'companyPaid',
        'payroll_user' => 'payrollUser',
        'deduction_comment' => 'deductionComment',
        'company_level_deduction_id' => 'companyLevelDeductionId',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'is_benefit' => 'isBenefit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_date' => 'setPayDate',
        'event' => 'setEvent',
        'employee_paid' => 'setEmployeePaid',
        'company_paid' => 'setCompanyPaid',
        'payroll_user' => 'setPayrollUser',
        'deduction_comment' => 'setDeductionComment',
        'company_level_deduction_id' => 'setCompanyLevelDeductionId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'is_benefit' => 'setIsBenefit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_date' => 'getPayDate',
        'event' => 'getEvent',
        'employee_paid' => 'getEmployeePaid',
        'company_paid' => 'getCompanyPaid',
        'payroll_user' => 'getPayrollUser',
        'deduction_comment' => 'getDeductionComment',
        'company_level_deduction_id' => 'getCompanyLevelDeductionId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'is_benefit' => 'getIsBenefit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pay_date', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('employee_paid', $data ?? [], null);
        $this->setIfExists('company_paid', $data ?? [], null);
        $this->setIfExists('payroll_user', $data ?? [], null);
        $this->setIfExists('deduction_comment', $data ?? [], null);
        $this->setIfExists('company_level_deduction_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('is_benefit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_date
     *
     * @return string|null
     */
    public function getPayDate()
    {
        return $this->container['pay_date'];
    }

    /**
     * Sets pay_date
     *
     * @param string|null $pay_date Pay Date
     *
     * @return self
     */
    public function setPayDate($pay_date)
    {
        if (is_null($pay_date)) {
            throw new \InvalidArgumentException('non-nullable pay_date cannot be null');
        }
        $this->container['pay_date'] = $pay_date;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string|null $event Event
     *
     * @return self
     */
    public function setEvent($event)
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets employee_paid
     *
     * @return float|null
     */
    public function getEmployeePaid()
    {
        return $this->container['employee_paid'];
    }

    /**
     * Sets employee_paid
     *
     * @param float|null $employee_paid Employee Paid
     *
     * @return self
     */
    public function setEmployeePaid($employee_paid)
    {
        if (is_null($employee_paid)) {
            throw new \InvalidArgumentException('non-nullable employee_paid cannot be null');
        }
        $this->container['employee_paid'] = $employee_paid;

        return $this;
    }

    /**
     * Gets company_paid
     *
     * @return float|null
     */
    public function getCompanyPaid()
    {
        return $this->container['company_paid'];
    }

    /**
     * Sets company_paid
     *
     * @param float|null $company_paid Company Paid
     *
     * @return self
     */
    public function setCompanyPaid($company_paid)
    {
        if (is_null($company_paid)) {
            throw new \InvalidArgumentException('non-nullable company_paid cannot be null');
        }
        $this->container['company_paid'] = $company_paid;

        return $this;
    }

    /**
     * Gets payroll_user
     *
     * @return string|null
     */
    public function getPayrollUser()
    {
        return $this->container['payroll_user'];
    }

    /**
     * Sets payroll_user
     *
     * @param string|null $payroll_user Payroll User
     *
     * @return self
     */
    public function setPayrollUser($payroll_user)
    {
        if (is_null($payroll_user)) {
            throw new \InvalidArgumentException('non-nullable payroll_user cannot be null');
        }
        $this->container['payroll_user'] = $payroll_user;

        return $this;
    }

    /**
     * Gets deduction_comment
     *
     * @return string|null
     */
    public function getDeductionComment()
    {
        return $this->container['deduction_comment'];
    }

    /**
     * Sets deduction_comment
     *
     * @param string|null $deduction_comment Deduction Comment
     *
     * @return self
     */
    public function setDeductionComment($deduction_comment)
    {
        if (is_null($deduction_comment)) {
            array_push($this->openAPINullablesSetToNull, 'deduction_comment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deduction_comment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deduction_comment'] = $deduction_comment;

        return $this;
    }

    /**
     * Gets company_level_deduction_id
     *
     * @return int|null
     */
    public function getCompanyLevelDeductionId()
    {
        return $this->container['company_level_deduction_id'];
    }

    /**
     * Sets company_level_deduction_id
     *
     * @param int|null $company_level_deduction_id Company Level Deduction Id
     *
     * @return self
     */
    public function setCompanyLevelDeductionId($company_level_deduction_id)
    {
        if (is_null($company_level_deduction_id)) {
            throw new \InvalidArgumentException('non-nullable company_level_deduction_id cannot be null');
        }
        $this->container['company_level_deduction_id'] = $company_level_deduction_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date Start Date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            array_push($this->openAPINullablesSetToNull, 'start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date End Date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets is_benefit
     *
     * @return bool|null
     */
    public function getIsBenefit()
    {
        return $this->container['is_benefit'];
    }

    /**
     * Sets is_benefit
     *
     * @param bool|null $is_benefit Is Benefit
     *
     * @return self
     */
    public function setIsBenefit($is_benefit)
    {
        if (is_null($is_benefit)) {
            array_push($this->openAPINullablesSetToNull, 'is_benefit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_benefit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_benefit'] = $is_benefit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


