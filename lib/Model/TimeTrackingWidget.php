<?php
/**
 * TimeTrackingWidget
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TimeTrackingWidget Class Doc Comment
 *
 * @category Class
 * @description Widget data for the time tracking dashboard widget, including employee, timesheet, and project/task details.
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeTrackingWidget implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeTrackingWidget';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'on' => 'bool',
        'employee_id' => 'int',
        'today' => '\DateTime',
        'daily_total' => 'float',
        'weekly_total' => 'float',
        'weekly_overtime' => 'bool',
        'pay_period_total' => 'float',
        'pay_period_overtime' => 'bool',
        'type' => 'string',
        'show_time_entry_hint' => 'bool',
        'last_clock_entry' => 'object',
        'clock_entries' => 'object[]',
        'hour_entries' => 'object[]',
        'can_edit' => 'bool',
        'show_edit_actions' => 'bool',
        'approved' => 'bool',
        'holidays' => 'string[]',
        'holiday_pay_type' => 'string',
        'projects_with_tasks' => 'object[]',
        'recent_projects_and_tasks' => 'object[]',
        'note' => 'string',
        'id' => 'int',
        'project_id' => 'int',
        'project_name' => 'string',
        'task_id' => 'int',
        'task_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'on' => null,
        'employee_id' => null,
        'today' => 'date-time',
        'daily_total' => 'float',
        'weekly_total' => 'float',
        'weekly_overtime' => null,
        'pay_period_total' => 'float',
        'pay_period_overtime' => null,
        'type' => null,
        'show_time_entry_hint' => null,
        'last_clock_entry' => null,
        'clock_entries' => null,
        'hour_entries' => null,
        'can_edit' => null,
        'show_edit_actions' => null,
        'approved' => null,
        'holidays' => null,
        'holiday_pay_type' => null,
        'projects_with_tasks' => null,
        'recent_projects_and_tasks' => null,
        'note' => null,
        'id' => null,
        'project_id' => null,
        'project_name' => null,
        'task_id' => null,
        'task_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'on' => false,
        'employee_id' => false,
        'today' => false,
        'daily_total' => true,
        'weekly_total' => false,
        'weekly_overtime' => false,
        'pay_period_total' => false,
        'pay_period_overtime' => false,
        'type' => false,
        'show_time_entry_hint' => false,
        'last_clock_entry' => true,
        'clock_entries' => false,
        'hour_entries' => false,
        'can_edit' => false,
        'show_edit_actions' => false,
        'approved' => false,
        'holidays' => false,
        'holiday_pay_type' => false,
        'projects_with_tasks' => true,
        'recent_projects_and_tasks' => true,
        'note' => true,
        'id' => false,
        'project_id' => true,
        'project_name' => true,
        'task_id' => true,
        'task_name' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'on' => 'on',
        'employee_id' => 'employeeId',
        'today' => 'today',
        'daily_total' => 'dailyTotal',
        'weekly_total' => 'weeklyTotal',
        'weekly_overtime' => 'weeklyOvertime',
        'pay_period_total' => 'payPeriodTotal',
        'pay_period_overtime' => 'payPeriodOvertime',
        'type' => 'type',
        'show_time_entry_hint' => 'showTimeEntryHint',
        'last_clock_entry' => 'lastClockEntry',
        'clock_entries' => 'clockEntries',
        'hour_entries' => 'hourEntries',
        'can_edit' => 'canEdit',
        'show_edit_actions' => 'showEditActions',
        'approved' => 'approved',
        'holidays' => 'holidays',
        'holiday_pay_type' => 'holidayPayType',
        'projects_with_tasks' => 'projectsWithTasks',
        'recent_projects_and_tasks' => 'recentProjectsAndTasks',
        'note' => 'note',
        'id' => 'id',
        'project_id' => 'projectId',
        'project_name' => 'projectName',
        'task_id' => 'taskId',
        'task_name' => 'taskName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'on' => 'setOn',
        'employee_id' => 'setEmployeeId',
        'today' => 'setToday',
        'daily_total' => 'setDailyTotal',
        'weekly_total' => 'setWeeklyTotal',
        'weekly_overtime' => 'setWeeklyOvertime',
        'pay_period_total' => 'setPayPeriodTotal',
        'pay_period_overtime' => 'setPayPeriodOvertime',
        'type' => 'setType',
        'show_time_entry_hint' => 'setShowTimeEntryHint',
        'last_clock_entry' => 'setLastClockEntry',
        'clock_entries' => 'setClockEntries',
        'hour_entries' => 'setHourEntries',
        'can_edit' => 'setCanEdit',
        'show_edit_actions' => 'setShowEditActions',
        'approved' => 'setApproved',
        'holidays' => 'setHolidays',
        'holiday_pay_type' => 'setHolidayPayType',
        'projects_with_tasks' => 'setProjectsWithTasks',
        'recent_projects_and_tasks' => 'setRecentProjectsAndTasks',
        'note' => 'setNote',
        'id' => 'setId',
        'project_id' => 'setProjectId',
        'project_name' => 'setProjectName',
        'task_id' => 'setTaskId',
        'task_name' => 'setTaskName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'on' => 'getOn',
        'employee_id' => 'getEmployeeId',
        'today' => 'getToday',
        'daily_total' => 'getDailyTotal',
        'weekly_total' => 'getWeeklyTotal',
        'weekly_overtime' => 'getWeeklyOvertime',
        'pay_period_total' => 'getPayPeriodTotal',
        'pay_period_overtime' => 'getPayPeriodOvertime',
        'type' => 'getType',
        'show_time_entry_hint' => 'getShowTimeEntryHint',
        'last_clock_entry' => 'getLastClockEntry',
        'clock_entries' => 'getClockEntries',
        'hour_entries' => 'getHourEntries',
        'can_edit' => 'getCanEdit',
        'show_edit_actions' => 'getShowEditActions',
        'approved' => 'getApproved',
        'holidays' => 'getHolidays',
        'holiday_pay_type' => 'getHolidayPayType',
        'projects_with_tasks' => 'getProjectsWithTasks',
        'recent_projects_and_tasks' => 'getRecentProjectsAndTasks',
        'note' => 'getNote',
        'id' => 'getId',
        'project_id' => 'getProjectId',
        'project_name' => 'getProjectName',
        'task_id' => 'getTaskId',
        'task_name' => 'getTaskName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('on', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('today', $data ?? [], null);
        $this->setIfExists('daily_total', $data ?? [], null);
        $this->setIfExists('weekly_total', $data ?? [], null);
        $this->setIfExists('weekly_overtime', $data ?? [], null);
        $this->setIfExists('pay_period_total', $data ?? [], null);
        $this->setIfExists('pay_period_overtime', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('show_time_entry_hint', $data ?? [], null);
        $this->setIfExists('last_clock_entry', $data ?? [], null);
        $this->setIfExists('clock_entries', $data ?? [], null);
        $this->setIfExists('hour_entries', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('show_edit_actions', $data ?? [], null);
        $this->setIfExists('approved', $data ?? [], null);
        $this->setIfExists('holidays', $data ?? [], null);
        $this->setIfExists('holiday_pay_type', $data ?? [], null);
        $this->setIfExists('projects_with_tasks', $data ?? [], null);
        $this->setIfExists('recent_projects_and_tasks', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('project_name', $data ?? [], null);
        $this->setIfExists('task_id', $data ?? [], null);
        $this->setIfExists('task_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets on
     *
     * @return bool|null
     */
    public function getOn()
    {
        return $this->container['on'];
    }

    /**
     * Sets on
     *
     * @param bool|null $on Whether the widget is enabled for the user.
     *
     * @return self
     */
    public function setOn($on)
    {
        if (is_null($on)) {
            throw new \InvalidArgumentException('non-nullable on cannot be null');
        }
        $this->container['on'] = $on;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Employee ID for the timesheet owner.
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets today
     *
     * @return \DateTime|null
     */
    public function getToday()
    {
        return $this->container['today'];
    }

    /**
     * Sets today
     *
     * @param \DateTime|null $today Current date/time for the employee.
     *
     * @return self
     */
    public function setToday($today)
    {
        if (is_null($today)) {
            throw new \InvalidArgumentException('non-nullable today cannot be null');
        }
        $this->container['today'] = $today;

        return $this;
    }

    /**
     * Gets daily_total
     *
     * @return float|null
     */
    public function getDailyTotal()
    {
        return $this->container['daily_total'];
    }

    /**
     * Sets daily_total
     *
     * @param float|null $daily_total Total hours worked today.
     *
     * @return self
     */
    public function setDailyTotal($daily_total)
    {
        if (is_null($daily_total)) {
            array_push($this->openAPINullablesSetToNull, 'daily_total');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('daily_total', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['daily_total'] = $daily_total;

        return $this;
    }

    /**
     * Gets weekly_total
     *
     * @return float|null
     */
    public function getWeeklyTotal()
    {
        return $this->container['weekly_total'];
    }

    /**
     * Sets weekly_total
     *
     * @param float|null $weekly_total Total hours worked this week.
     *
     * @return self
     */
    public function setWeeklyTotal($weekly_total)
    {
        if (is_null($weekly_total)) {
            throw new \InvalidArgumentException('non-nullable weekly_total cannot be null');
        }
        $this->container['weekly_total'] = $weekly_total;

        return $this;
    }

    /**
     * Gets weekly_overtime
     *
     * @return bool|null
     */
    public function getWeeklyOvertime()
    {
        return $this->container['weekly_overtime'];
    }

    /**
     * Sets weekly_overtime
     *
     * @param bool|null $weekly_overtime Whether weekly overtime has been reached.
     *
     * @return self
     */
    public function setWeeklyOvertime($weekly_overtime)
    {
        if (is_null($weekly_overtime)) {
            throw new \InvalidArgumentException('non-nullable weekly_overtime cannot be null');
        }
        $this->container['weekly_overtime'] = $weekly_overtime;

        return $this;
    }

    /**
     * Gets pay_period_total
     *
     * @return float|null
     */
    public function getPayPeriodTotal()
    {
        return $this->container['pay_period_total'];
    }

    /**
     * Sets pay_period_total
     *
     * @param float|null $pay_period_total Total hours worked in the pay period.
     *
     * @return self
     */
    public function setPayPeriodTotal($pay_period_total)
    {
        if (is_null($pay_period_total)) {
            throw new \InvalidArgumentException('non-nullable pay_period_total cannot be null');
        }
        $this->container['pay_period_total'] = $pay_period_total;

        return $this;
    }

    /**
     * Gets pay_period_overtime
     *
     * @return bool|null
     */
    public function getPayPeriodOvertime()
    {
        return $this->container['pay_period_overtime'];
    }

    /**
     * Sets pay_period_overtime
     *
     * @param bool|null $pay_period_overtime Whether pay period overtime has been reached.
     *
     * @return self
     */
    public function setPayPeriodOvertime($pay_period_overtime)
    {
        if (is_null($pay_period_overtime)) {
            throw new \InvalidArgumentException('non-nullable pay_period_overtime cannot be null');
        }
        $this->container['pay_period_overtime'] = $pay_period_overtime;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of timesheet.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets show_time_entry_hint
     *
     * @return bool|null
     */
    public function getShowTimeEntryHint()
    {
        return $this->container['show_time_entry_hint'];
    }

    /**
     * Sets show_time_entry_hint
     *
     * @param bool|null $show_time_entry_hint Show time entry hint popover.
     *
     * @return self
     */
    public function setShowTimeEntryHint($show_time_entry_hint)
    {
        if (is_null($show_time_entry_hint)) {
            throw new \InvalidArgumentException('non-nullable show_time_entry_hint cannot be null');
        }
        $this->container['show_time_entry_hint'] = $show_time_entry_hint;

        return $this;
    }

    /**
     * Gets last_clock_entry
     *
     * @return object|null
     */
    public function getLastClockEntry()
    {
        return $this->container['last_clock_entry'];
    }

    /**
     * Sets last_clock_entry
     *
     * @param object|null $last_clock_entry Last clock entry for the employee.
     *
     * @return self
     */
    public function setLastClockEntry($last_clock_entry)
    {
        if (is_null($last_clock_entry)) {
            array_push($this->openAPINullablesSetToNull, 'last_clock_entry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_clock_entry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_clock_entry'] = $last_clock_entry;

        return $this;
    }

    /**
     * Gets clock_entries
     *
     * @return object[]|null
     */
    public function getClockEntries()
    {
        return $this->container['clock_entries'];
    }

    /**
     * Sets clock_entries
     *
     * @param object[]|null $clock_entries Array of clock entries for today.
     *
     * @return self
     */
    public function setClockEntries($clock_entries)
    {
        if (is_null($clock_entries)) {
            throw new \InvalidArgumentException('non-nullable clock_entries cannot be null');
        }
        $this->container['clock_entries'] = $clock_entries;

        return $this;
    }

    /**
     * Gets hour_entries
     *
     * @return object[]|null
     */
    public function getHourEntries()
    {
        return $this->container['hour_entries'];
    }

    /**
     * Sets hour_entries
     *
     * @param object[]|null $hour_entries Array of hour entries for today.
     *
     * @return self
     */
    public function setHourEntries($hour_entries)
    {
        if (is_null($hour_entries)) {
            throw new \InvalidArgumentException('non-nullable hour_entries cannot be null');
        }
        $this->container['hour_entries'] = $hour_entries;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit Whether the user can edit the timesheet.
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets show_edit_actions
     *
     * @return bool|null
     */
    public function getShowEditActions()
    {
        return $this->container['show_edit_actions'];
    }

    /**
     * Sets show_edit_actions
     *
     * @param bool|null $show_edit_actions Whether edit actions should be shown.
     *
     * @return self
     */
    public function setShowEditActions($show_edit_actions)
    {
        if (is_null($show_edit_actions)) {
            throw new \InvalidArgumentException('non-nullable show_edit_actions cannot be null');
        }
        $this->container['show_edit_actions'] = $show_edit_actions;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool|null
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool|null $approved Whether the timesheet is approved.
     *
     * @return self
     */
    public function setApproved($approved)
    {
        if (is_null($approved)) {
            throw new \InvalidArgumentException('non-nullable approved cannot be null');
        }
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets holidays
     *
     * @return string[]|null
     */
    public function getHolidays()
    {
        return $this->container['holidays'];
    }

    /**
     * Sets holidays
     *
     * @param string[]|null $holidays List of holidays for today.
     *
     * @return self
     */
    public function setHolidays($holidays)
    {
        if (is_null($holidays)) {
            throw new \InvalidArgumentException('non-nullable holidays cannot be null');
        }
        $this->container['holidays'] = $holidays;

        return $this;
    }

    /**
     * Gets holiday_pay_type
     *
     * @return string|null
     */
    public function getHolidayPayType()
    {
        return $this->container['holiday_pay_type'];
    }

    /**
     * Sets holiday_pay_type
     *
     * @param string|null $holiday_pay_type Pay type for holidays.
     *
     * @return self
     */
    public function setHolidayPayType($holiday_pay_type)
    {
        if (is_null($holiday_pay_type)) {
            throw new \InvalidArgumentException('non-nullable holiday_pay_type cannot be null');
        }
        $this->container['holiday_pay_type'] = $holiday_pay_type;

        return $this;
    }

    /**
     * Gets projects_with_tasks
     *
     * @return object[]|null
     */
    public function getProjectsWithTasks()
    {
        return $this->container['projects_with_tasks'];
    }

    /**
     * Sets projects_with_tasks
     *
     * @param object[]|null $projects_with_tasks All projects and tasks for the employee.
     *
     * @return self
     */
    public function setProjectsWithTasks($projects_with_tasks)
    {
        if (is_null($projects_with_tasks)) {
            array_push($this->openAPINullablesSetToNull, 'projects_with_tasks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('projects_with_tasks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['projects_with_tasks'] = $projects_with_tasks;

        return $this;
    }

    /**
     * Gets recent_projects_and_tasks
     *
     * @return object[]|null
     */
    public function getRecentProjectsAndTasks()
    {
        return $this->container['recent_projects_and_tasks'];
    }

    /**
     * Sets recent_projects_and_tasks
     *
     * @param object[]|null $recent_projects_and_tasks Recent projects and tasks for the employee.
     *
     * @return self
     */
    public function setRecentProjectsAndTasks($recent_projects_and_tasks)
    {
        if (is_null($recent_projects_and_tasks)) {
            array_push($this->openAPINullablesSetToNull, 'recent_projects_and_tasks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recent_projects_and_tasks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['recent_projects_and_tasks'] = $recent_projects_and_tasks;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Today's note for the timesheet.
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Timesheet ID.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id Project ID for today.
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            array_push($this->openAPINullablesSetToNull, 'project_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string|null
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string|null $project_name Project name for today.
     *
     * @return self
     */
    public function setProjectName($project_name)
    {
        if (is_null($project_name)) {
            array_push($this->openAPINullablesSetToNull, 'project_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return int|null
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param int|null $task_id Task ID for today.
     *
     * @return self
     */
    public function setTaskId($task_id)
    {
        if (is_null($task_id)) {
            array_push($this->openAPINullablesSetToNull, 'task_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets task_name
     *
     * @return string|null
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     *
     * @param string|null $task_name Task name for today.
     *
     * @return self
     */
    public function setTaskName($task_name)
    {
        if (is_null($task_name)) {
            array_push($this->openAPINullablesSetToNull, 'task_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_name'] = $task_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


