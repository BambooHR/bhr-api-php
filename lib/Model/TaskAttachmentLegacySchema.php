<?php
/**
 * TaskAttachmentLegacySchema
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TaskAttachmentLegacySchema Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaskAttachmentLegacySchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskAttachmentLegacySchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'file_id' => 'int',
        'name' => 'string',
        'type' => 'string',
        'can_delete' => 'bool',
        'is_esignature' => 'bool',
        'is_required' => 'bool',
        'workflow_instance_id' => 'int',
        'can_sign' => 'bool',
        'is_current_signer' => 'bool',
        'has_signed' => 'bool',
        'is_complete' => 'bool',
        'employee_file_id' => 'int',
        'workflow_status' => 'string',
        'esignature_instance_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'file_id' => null,
        'name' => null,
        'type' => null,
        'can_delete' => null,
        'is_esignature' => null,
        'is_required' => null,
        'workflow_instance_id' => null,
        'can_sign' => null,
        'is_current_signer' => null,
        'has_signed' => null,
        'is_complete' => null,
        'employee_file_id' => null,
        'workflow_status' => null,
        'esignature_instance_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'file_id' => false,
        'name' => false,
        'type' => true,
        'can_delete' => false,
        'is_esignature' => false,
        'is_required' => false,
        'workflow_instance_id' => true,
        'can_sign' => true,
        'is_current_signer' => true,
        'has_signed' => true,
        'is_complete' => true,
        'employee_file_id' => true,
        'workflow_status' => true,
        'esignature_instance_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'file_id' => 'fileId',
        'name' => 'name',
        'type' => 'type',
        'can_delete' => 'canDelete',
        'is_esignature' => 'isEsignature',
        'is_required' => 'isRequired',
        'workflow_instance_id' => 'workflowInstanceId',
        'can_sign' => 'canSign',
        'is_current_signer' => 'isCurrentSigner',
        'has_signed' => 'hasSigned',
        'is_complete' => 'isComplete',
        'employee_file_id' => 'employeeFileId',
        'workflow_status' => 'workflowStatus',
        'esignature_instance_id' => 'esignatureInstanceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'file_id' => 'setFileId',
        'name' => 'setName',
        'type' => 'setType',
        'can_delete' => 'setCanDelete',
        'is_esignature' => 'setIsEsignature',
        'is_required' => 'setIsRequired',
        'workflow_instance_id' => 'setWorkflowInstanceId',
        'can_sign' => 'setCanSign',
        'is_current_signer' => 'setIsCurrentSigner',
        'has_signed' => 'setHasSigned',
        'is_complete' => 'setIsComplete',
        'employee_file_id' => 'setEmployeeFileId',
        'workflow_status' => 'setWorkflowStatus',
        'esignature_instance_id' => 'setEsignatureInstanceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'file_id' => 'getFileId',
        'name' => 'getName',
        'type' => 'getType',
        'can_delete' => 'getCanDelete',
        'is_esignature' => 'getIsEsignature',
        'is_required' => 'getIsRequired',
        'workflow_instance_id' => 'getWorkflowInstanceId',
        'can_sign' => 'getCanSign',
        'is_current_signer' => 'getIsCurrentSigner',
        'has_signed' => 'getHasSigned',
        'is_complete' => 'getIsComplete',
        'employee_file_id' => 'getEmployeeFileId',
        'workflow_status' => 'getWorkflowStatus',
        'esignature_instance_id' => 'getEsignatureInstanceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_FILE = 'file';
    public const TYPE_ESIGNATURE = 'esignature';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_FILE,
            self::TYPE_ESIGNATURE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('file_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('can_delete', $data ?? [], null);
        $this->setIfExists('is_esignature', $data ?? [], null);
        $this->setIfExists('is_required', $data ?? [], null);
        $this->setIfExists('workflow_instance_id', $data ?? [], null);
        $this->setIfExists('can_sign', $data ?? [], null);
        $this->setIfExists('is_current_signer', $data ?? [], null);
        $this->setIfExists('has_signed', $data ?? [], null);
        $this->setIfExists('is_complete', $data ?? [], null);
        $this->setIfExists('employee_file_id', $data ?? [], null);
        $this->setIfExists('workflow_status', $data ?? [], null);
        $this->setIfExists('esignature_instance_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Task Attachment ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets file_id
     *
     * @return int|null
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param int|null $file_id Task Attachment File ID
     *
     * @return self
     */
    public function setFileId($file_id)
    {
        if (is_null($file_id)) {
            throw new \InvalidArgumentException('non-nullable file_id cannot be null');
        }
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Task Attachment Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Task Attachment Type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool|null
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool|null $can_delete Task Attachment Can Delete
     *
     * @return self
     */
    public function setCanDelete($can_delete)
    {
        if (is_null($can_delete)) {
            throw new \InvalidArgumentException('non-nullable can_delete cannot be null');
        }
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets is_esignature
     *
     * @return bool|null
     */
    public function getIsEsignature()
    {
        return $this->container['is_esignature'];
    }

    /**
     * Sets is_esignature
     *
     * @param bool|null $is_esignature Task Attachment Is Esignature
     *
     * @return self
     */
    public function setIsEsignature($is_esignature)
    {
        if (is_null($is_esignature)) {
            throw new \InvalidArgumentException('non-nullable is_esignature cannot be null');
        }
        $this->container['is_esignature'] = $is_esignature;

        return $this;
    }

    /**
     * Gets is_required
     *
     * @return bool|null
     */
    public function getIsRequired()
    {
        return $this->container['is_required'];
    }

    /**
     * Sets is_required
     *
     * @param bool|null $is_required Task Attachment Is Required
     *
     * @return self
     */
    public function setIsRequired($is_required)
    {
        if (is_null($is_required)) {
            throw new \InvalidArgumentException('non-nullable is_required cannot be null');
        }
        $this->container['is_required'] = $is_required;

        return $this;
    }

    /**
     * Gets workflow_instance_id
     *
     * @return int|null
     */
    public function getWorkflowInstanceId()
    {
        return $this->container['workflow_instance_id'];
    }

    /**
     * Sets workflow_instance_id
     *
     * @param int|null $workflow_instance_id Task Attachment Workflow Instance ID
     *
     * @return self
     */
    public function setWorkflowInstanceId($workflow_instance_id)
    {
        if (is_null($workflow_instance_id)) {
            array_push($this->openAPINullablesSetToNull, 'workflow_instance_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workflow_instance_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workflow_instance_id'] = $workflow_instance_id;

        return $this;
    }

    /**
     * Gets can_sign
     *
     * @return bool|null
     */
    public function getCanSign()
    {
        return $this->container['can_sign'];
    }

    /**
     * Sets can_sign
     *
     * @param bool|null $can_sign Task Attachment Can Sign
     *
     * @return self
     */
    public function setCanSign($can_sign)
    {
        if (is_null($can_sign)) {
            array_push($this->openAPINullablesSetToNull, 'can_sign');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('can_sign', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['can_sign'] = $can_sign;

        return $this;
    }

    /**
     * Gets is_current_signer
     *
     * @return bool|null
     */
    public function getIsCurrentSigner()
    {
        return $this->container['is_current_signer'];
    }

    /**
     * Sets is_current_signer
     *
     * @param bool|null $is_current_signer Task Attachment Is Current Signer
     *
     * @return self
     */
    public function setIsCurrentSigner($is_current_signer)
    {
        if (is_null($is_current_signer)) {
            array_push($this->openAPINullablesSetToNull, 'is_current_signer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_current_signer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_current_signer'] = $is_current_signer;

        return $this;
    }

    /**
     * Gets has_signed
     *
     * @return bool|null
     */
    public function getHasSigned()
    {
        return $this->container['has_signed'];
    }

    /**
     * Sets has_signed
     *
     * @param bool|null $has_signed Task Attachment Has Signed
     *
     * @return self
     */
    public function setHasSigned($has_signed)
    {
        if (is_null($has_signed)) {
            array_push($this->openAPINullablesSetToNull, 'has_signed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_signed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_signed'] = $has_signed;

        return $this;
    }

    /**
     * Gets is_complete
     *
     * @return bool|null
     */
    public function getIsComplete()
    {
        return $this->container['is_complete'];
    }

    /**
     * Sets is_complete
     *
     * @param bool|null $is_complete Task Attachment Is Complete
     *
     * @return self
     */
    public function setIsComplete($is_complete)
    {
        if (is_null($is_complete)) {
            array_push($this->openAPINullablesSetToNull, 'is_complete');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_complete', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_complete'] = $is_complete;

        return $this;
    }

    /**
     * Gets employee_file_id
     *
     * @return int|null
     */
    public function getEmployeeFileId()
    {
        return $this->container['employee_file_id'];
    }

    /**
     * Sets employee_file_id
     *
     * @param int|null $employee_file_id Task Attachment Employee File ID
     *
     * @return self
     */
    public function setEmployeeFileId($employee_file_id)
    {
        if (is_null($employee_file_id)) {
            array_push($this->openAPINullablesSetToNull, 'employee_file_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_file_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_file_id'] = $employee_file_id;

        return $this;
    }

    /**
     * Gets workflow_status
     *
     * @return string|null
     */
    public function getWorkflowStatus()
    {
        return $this->container['workflow_status'];
    }

    /**
     * Sets workflow_status
     *
     * @param string|null $workflow_status Task Attachment Workflow Status
     *
     * @return self
     */
    public function setWorkflowStatus($workflow_status)
    {
        if (is_null($workflow_status)) {
            array_push($this->openAPINullablesSetToNull, 'workflow_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workflow_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workflow_status'] = $workflow_status;

        return $this;
    }

    /**
     * Gets esignature_instance_id
     *
     * @return string|null
     */
    public function getEsignatureInstanceId()
    {
        return $this->container['esignature_instance_id'];
    }

    /**
     * Sets esignature_instance_id
     *
     * @param string|null $esignature_instance_id Task Attachment Esignature Instance ID
     *
     * @return self
     */
    public function setEsignatureInstanceId($esignature_instance_id)
    {
        if (is_null($esignature_instance_id)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_instance_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_instance_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_instance_id'] = $esignature_instance_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


