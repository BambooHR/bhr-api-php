<?php
/**
 * EsignatureInstanceFieldSchema
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EsignatureInstanceFieldSchema Class Doc Comment
 *
 * @category Class
 * @description Schema for eSignature instance field
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EsignatureInstanceFieldSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EsignatureInstanceFieldSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pdf_template_field_id' => 'int',
        'field_value' => 'string',
        'page_number' => 'int',
        'top_percent' => 'float',
        'left_percent' => 'float',
        'height_percent' => 'float',
        'width_percent' => 'float',
        'field_type' => 'string',
        'group_id' => 'int',
        'group_mode' => 'string',
        'tab_order' => 'int',
        'field_name' => 'string',
        'required' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pdf_template_field_id' => null,
        'field_value' => null,
        'page_number' => null,
        'top_percent' => 'float',
        'left_percent' => 'float',
        'height_percent' => 'float',
        'width_percent' => 'float',
        'field_type' => null,
        'group_id' => null,
        'group_mode' => null,
        'tab_order' => null,
        'field_name' => null,
        'required' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pdf_template_field_id' => false,
        'field_value' => true,
        'page_number' => false,
        'top_percent' => false,
        'left_percent' => false,
        'height_percent' => false,
        'width_percent' => false,
        'field_type' => false,
        'group_id' => true,
        'group_mode' => true,
        'tab_order' => false,
        'field_name' => false,
        'required' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pdf_template_field_id' => 'pdfTemplateFieldId',
        'field_value' => 'fieldValue',
        'page_number' => 'pageNumber',
        'top_percent' => 'topPercent',
        'left_percent' => 'leftPercent',
        'height_percent' => 'heightPercent',
        'width_percent' => 'widthPercent',
        'field_type' => 'fieldType',
        'group_id' => 'groupId',
        'group_mode' => 'groupMode',
        'tab_order' => 'tabOrder',
        'field_name' => 'fieldName',
        'required' => 'required'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pdf_template_field_id' => 'setPdfTemplateFieldId',
        'field_value' => 'setFieldValue',
        'page_number' => 'setPageNumber',
        'top_percent' => 'setTopPercent',
        'left_percent' => 'setLeftPercent',
        'height_percent' => 'setHeightPercent',
        'width_percent' => 'setWidthPercent',
        'field_type' => 'setFieldType',
        'group_id' => 'setGroupId',
        'group_mode' => 'setGroupMode',
        'tab_order' => 'setTabOrder',
        'field_name' => 'setFieldName',
        'required' => 'setRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pdf_template_field_id' => 'getPdfTemplateFieldId',
        'field_value' => 'getFieldValue',
        'page_number' => 'getPageNumber',
        'top_percent' => 'getTopPercent',
        'left_percent' => 'getLeftPercent',
        'height_percent' => 'getHeightPercent',
        'width_percent' => 'getWidthPercent',
        'field_type' => 'getFieldType',
        'group_id' => 'getGroupId',
        'group_mode' => 'getGroupMode',
        'tab_order' => 'getTabOrder',
        'field_name' => 'getFieldName',
        'required' => 'getRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pdf_template_field_id', $data ?? [], null);
        $this->setIfExists('field_value', $data ?? [], null);
        $this->setIfExists('page_number', $data ?? [], null);
        $this->setIfExists('top_percent', $data ?? [], null);
        $this->setIfExists('left_percent', $data ?? [], null);
        $this->setIfExists('height_percent', $data ?? [], null);
        $this->setIfExists('width_percent', $data ?? [], null);
        $this->setIfExists('field_type', $data ?? [], null);
        $this->setIfExists('group_id', $data ?? [], null);
        $this->setIfExists('group_mode', $data ?? [], null);
        $this->setIfExists('tab_order', $data ?? [], null);
        $this->setIfExists('field_name', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pdf_template_field_id
     *
     * @return int|null
     */
    public function getPdfTemplateFieldId()
    {
        return $this->container['pdf_template_field_id'];
    }

    /**
     * Sets pdf_template_field_id
     *
     * @param int|null $pdf_template_field_id ID of the PDF template field.
     *
     * @return self
     */
    public function setPdfTemplateFieldId($pdf_template_field_id)
    {
        if (is_null($pdf_template_field_id)) {
            throw new \InvalidArgumentException('non-nullable pdf_template_field_id cannot be null');
        }
        $this->container['pdf_template_field_id'] = $pdf_template_field_id;

        return $this;
    }

    /**
     * Gets field_value
     *
     * @return string|null
     */
    public function getFieldValue()
    {
        return $this->container['field_value'];
    }

    /**
     * Sets field_value
     *
     * @param string|null $field_value Value of the field.
     *
     * @return self
     */
    public function setFieldValue($field_value)
    {
        if (is_null($field_value)) {
            array_push($this->openAPINullablesSetToNull, 'field_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('field_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['field_value'] = $field_value;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int|null
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int|null $page_number Page number where the field is located.
     *
     * @return self
     */
    public function setPageNumber($page_number)
    {
        if (is_null($page_number)) {
            throw new \InvalidArgumentException('non-nullable page_number cannot be null');
        }
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets top_percent
     *
     * @return float|null
     */
    public function getTopPercent()
    {
        return $this->container['top_percent'];
    }

    /**
     * Sets top_percent
     *
     * @param float|null $top_percent Top position of the field as a percentage.
     *
     * @return self
     */
    public function setTopPercent($top_percent)
    {
        if (is_null($top_percent)) {
            throw new \InvalidArgumentException('non-nullable top_percent cannot be null');
        }
        $this->container['top_percent'] = $top_percent;

        return $this;
    }

    /**
     * Gets left_percent
     *
     * @return float|null
     */
    public function getLeftPercent()
    {
        return $this->container['left_percent'];
    }

    /**
     * Sets left_percent
     *
     * @param float|null $left_percent Left position of the field as a percentage.
     *
     * @return self
     */
    public function setLeftPercent($left_percent)
    {
        if (is_null($left_percent)) {
            throw new \InvalidArgumentException('non-nullable left_percent cannot be null');
        }
        $this->container['left_percent'] = $left_percent;

        return $this;
    }

    /**
     * Gets height_percent
     *
     * @return float|null
     */
    public function getHeightPercent()
    {
        return $this->container['height_percent'];
    }

    /**
     * Sets height_percent
     *
     * @param float|null $height_percent Height of the field as a percentage.
     *
     * @return self
     */
    public function setHeightPercent($height_percent)
    {
        if (is_null($height_percent)) {
            throw new \InvalidArgumentException('non-nullable height_percent cannot be null');
        }
        $this->container['height_percent'] = $height_percent;

        return $this;
    }

    /**
     * Gets width_percent
     *
     * @return float|null
     */
    public function getWidthPercent()
    {
        return $this->container['width_percent'];
    }

    /**
     * Sets width_percent
     *
     * @param float|null $width_percent Width of the field as a percentage.
     *
     * @return self
     */
    public function setWidthPercent($width_percent)
    {
        if (is_null($width_percent)) {
            throw new \InvalidArgumentException('non-nullable width_percent cannot be null');
        }
        $this->container['width_percent'] = $width_percent;

        return $this;
    }

    /**
     * Gets field_type
     *
     * @return string|null
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     *
     * @param string|null $field_type Type of the field.
     *
     * @return self
     */
    public function setFieldType($field_type)
    {
        if (is_null($field_type)) {
            throw new \InvalidArgumentException('non-nullable field_type cannot be null');
        }
        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int|null
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int|null $group_id Group ID associated with the field if checkbox.
     *
     * @return self
     */
    public function setGroupId($group_id)
    {
        if (is_null($group_id)) {
            array_push($this->openAPINullablesSetToNull, 'group_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets group_mode
     *
     * @return string|null
     */
    public function getGroupMode()
    {
        return $this->container['group_mode'];
    }

    /**
     * Sets group_mode
     *
     * @param string|null $group_mode Group mode associated with the field if checkbox.
     *
     * @return self
     */
    public function setGroupMode($group_mode)
    {
        if (is_null($group_mode)) {
            array_push($this->openAPINullablesSetToNull, 'group_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['group_mode'] = $group_mode;

        return $this;
    }

    /**
     * Gets tab_order
     *
     * @return int|null
     */
    public function getTabOrder()
    {
        return $this->container['tab_order'];
    }

    /**
     * Sets tab_order
     *
     * @param int|null $tab_order Tab order of the field.
     *
     * @return self
     */
    public function setTabOrder($tab_order)
    {
        if (is_null($tab_order)) {
            throw new \InvalidArgumentException('non-nullable tab_order cannot be null');
        }
        $this->container['tab_order'] = $tab_order;

        return $this;
    }

    /**
     * Gets field_name
     *
     * @return string|null
     */
    public function getFieldName()
    {
        return $this->container['field_name'];
    }

    /**
     * Sets field_name
     *
     * @param string|null $field_name Name of the field.
     *
     * @return self
     */
    public function setFieldName($field_name)
    {
        if (is_null($field_name)) {
            throw new \InvalidArgumentException('non-nullable field_name cannot be null');
        }
        $this->container['field_name'] = $field_name;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required Indicates whether the field is required.
     *
     * @return self
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


