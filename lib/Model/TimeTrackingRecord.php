<?php
/**
 * TimeTrackingRecord
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TimeTrackingRecord Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeTrackingRecord implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeTrackingRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'time_tracking_id' => 'string',
        'employee_id' => 'int',
        'division_id' => 'int',
        'department_id' => 'int',
        'job_title_id' => 'int',
        'pay_code' => 'string',
        'date_hours_worked' => 'string',
        'pay_rate' => 'float',
        'rate_type' => 'string',
        'hours_worked' => 'float',
        'job_code' => 'int',
        'job_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'time_tracking_id' => null,
        'employee_id' => null,
        'division_id' => null,
        'department_id' => null,
        'job_title_id' => null,
        'pay_code' => null,
        'date_hours_worked' => null,
        'pay_rate' => null,
        'rate_type' => null,
        'hours_worked' => null,
        'job_code' => null,
        'job_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'time_tracking_id' => false,
        'employee_id' => false,
        'division_id' => false,
        'department_id' => false,
        'job_title_id' => false,
        'pay_code' => false,
        'date_hours_worked' => false,
        'pay_rate' => false,
        'rate_type' => false,
        'hours_worked' => false,
        'job_code' => false,
        'job_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time_tracking_id' => 'timeTrackingId',
        'employee_id' => 'employeeId',
        'division_id' => 'divisionId',
        'department_id' => 'departmentId',
        'job_title_id' => 'jobTitleId',
        'pay_code' => 'payCode',
        'date_hours_worked' => 'dateHoursWorked',
        'pay_rate' => 'payRate',
        'rate_type' => 'rateType',
        'hours_worked' => 'hoursWorked',
        'job_code' => 'jobCode',
        'job_data' => 'jobData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time_tracking_id' => 'setTimeTrackingId',
        'employee_id' => 'setEmployeeId',
        'division_id' => 'setDivisionId',
        'department_id' => 'setDepartmentId',
        'job_title_id' => 'setJobTitleId',
        'pay_code' => 'setPayCode',
        'date_hours_worked' => 'setDateHoursWorked',
        'pay_rate' => 'setPayRate',
        'rate_type' => 'setRateType',
        'hours_worked' => 'setHoursWorked',
        'job_code' => 'setJobCode',
        'job_data' => 'setJobData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time_tracking_id' => 'getTimeTrackingId',
        'employee_id' => 'getEmployeeId',
        'division_id' => 'getDivisionId',
        'department_id' => 'getDepartmentId',
        'job_title_id' => 'getJobTitleId',
        'pay_code' => 'getPayCode',
        'date_hours_worked' => 'getDateHoursWorked',
        'pay_rate' => 'getPayRate',
        'rate_type' => 'getRateType',
        'hours_worked' => 'getHoursWorked',
        'job_code' => 'getJobCode',
        'job_data' => 'getJobData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('time_tracking_id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('division_id', $data ?? [], null);
        $this->setIfExists('department_id', $data ?? [], null);
        $this->setIfExists('job_title_id', $data ?? [], null);
        $this->setIfExists('pay_code', $data ?? [], null);
        $this->setIfExists('date_hours_worked', $data ?? [], null);
        $this->setIfExists('pay_rate', $data ?? [], null);
        $this->setIfExists('rate_type', $data ?? [], null);
        $this->setIfExists('hours_worked', $data ?? [], null);
        $this->setIfExists('job_code', $data ?? [], null);
        $this->setIfExists('job_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['time_tracking_id'] === null) {
            $invalidProperties[] = "'time_tracking_id' can't be null";
        }
        if ($this->container['employee_id'] === null) {
            $invalidProperties[] = "'employee_id' can't be null";
        }
        if ($this->container['date_hours_worked'] === null) {
            $invalidProperties[] = "'date_hours_worked' can't be null";
        }
        if ($this->container['rate_type'] === null) {
            $invalidProperties[] = "'rate_type' can't be null";
        }
        if ($this->container['hours_worked'] === null) {
            $invalidProperties[] = "'hours_worked' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time_tracking_id
     *
     * @return string
     */
    public function getTimeTrackingId()
    {
        return $this->container['time_tracking_id'];
    }

    /**
     * Sets time_tracking_id
     *
     * @param string $time_tracking_id A unique identifier for the record. Use this ID to adjust or delete these hours. It can be any ID you use to track the record up to 36 characters in length. (i.e. UUID).
     *
     * @return self
     */
    public function setTimeTrackingId($time_tracking_id)
    {
        if (is_null($time_tracking_id)) {
            throw new \InvalidArgumentException('non-nullable time_tracking_id cannot be null');
        }
        $this->container['time_tracking_id'] = $time_tracking_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int $employee_id The ID of the employee.
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets division_id
     *
     * @return int|null
     */
    public function getDivisionId()
    {
        return $this->container['division_id'];
    }

    /**
     * Sets division_id
     *
     * @param int|null $division_id [Optional] The ID of the division for the employee.
     *
     * @return self
     */
    public function setDivisionId($division_id)
    {
        if (is_null($division_id)) {
            throw new \InvalidArgumentException('non-nullable division_id cannot be null');
        }
        $this->container['division_id'] = $division_id;

        return $this;
    }

    /**
     * Gets department_id
     *
     * @return int|null
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     *
     * @param int|null $department_id [Optional] The ID of the department for the employee.
     *
     * @return self
     */
    public function setDepartmentId($department_id)
    {
        if (is_null($department_id)) {
            throw new \InvalidArgumentException('non-nullable department_id cannot be null');
        }
        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets job_title_id
     *
     * @return int|null
     */
    public function getJobTitleId()
    {
        return $this->container['job_title_id'];
    }

    /**
     * Sets job_title_id
     *
     * @param int|null $job_title_id [Optional] The ID of the job title for the employee.
     *
     * @return self
     */
    public function setJobTitleId($job_title_id)
    {
        if (is_null($job_title_id)) {
            throw new \InvalidArgumentException('non-nullable job_title_id cannot be null');
        }
        $this->container['job_title_id'] = $job_title_id;

        return $this;
    }

    /**
     * Gets pay_code
     *
     * @return string|null
     */
    public function getPayCode()
    {
        return $this->container['pay_code'];
    }

    /**
     * Sets pay_code
     *
     * @param string|null $pay_code [Optional] Only necessary if the payroll provider requires a pay code
     *
     * @return self
     */
    public function setPayCode($pay_code)
    {
        if (is_null($pay_code)) {
            throw new \InvalidArgumentException('non-nullable pay_code cannot be null');
        }
        $this->container['pay_code'] = $pay_code;

        return $this;
    }

    /**
     * Gets date_hours_worked
     *
     * @return string
     */
    public function getDateHoursWorked()
    {
        return $this->container['date_hours_worked'];
    }

    /**
     * Sets date_hours_worked
     *
     * @param string $date_hours_worked The date the hours were worked. Please use the ISO-8601 date format YYYY-MM-DD.
     *
     * @return self
     */
    public function setDateHoursWorked($date_hours_worked)
    {
        if (is_null($date_hours_worked)) {
            throw new \InvalidArgumentException('non-nullable date_hours_worked cannot be null');
        }
        $this->container['date_hours_worked'] = $date_hours_worked;

        return $this;
    }

    /**
     * Gets pay_rate
     *
     * @return float|null
     */
    public function getPayRate()
    {
        return $this->container['pay_rate'];
    }

    /**
     * Sets pay_rate
     *
     * @param float|null $pay_rate [Optional] The rate of pay. e.g. $15.00/hour should use 15.00 here. Only necessary if the payroll provider requires a pay rate.
     *
     * @return self
     */
    public function setPayRate($pay_rate)
    {
        if (is_null($pay_rate)) {
            throw new \InvalidArgumentException('non-nullable pay_rate cannot be null');
        }
        $this->container['pay_rate'] = $pay_rate;

        return $this;
    }

    /**
     * Gets rate_type
     *
     * @return string
     */
    public function getRateType()
    {
        return $this->container['rate_type'];
    }

    /**
     * Sets rate_type
     *
     * @param string $rate_type The type of hours - regular or overtime. Please use either \"REG\" or \"OT\" here.
     *
     * @return self
     */
    public function setRateType($rate_type)
    {
        if (is_null($rate_type)) {
            throw new \InvalidArgumentException('non-nullable rate_type cannot be null');
        }
        $this->container['rate_type'] = $rate_type;

        return $this;
    }

    /**
     * Gets hours_worked
     *
     * @return float
     */
    public function getHoursWorked()
    {
        return $this->container['hours_worked'];
    }

    /**
     * Sets hours_worked
     *
     * @param float $hours_worked The number of hours worked.
     *
     * @return self
     */
    public function setHoursWorked($hours_worked)
    {
        if (is_null($hours_worked)) {
            throw new \InvalidArgumentException('non-nullable hours_worked cannot be null');
        }
        $this->container['hours_worked'] = $hours_worked;

        return $this;
    }

    /**
     * Gets job_code
     *
     * @return int|null
     */
    public function getJobCode()
    {
        return $this->container['job_code'];
    }

    /**
     * Sets job_code
     *
     * @param int|null $job_code [Optional] A job code.
     *
     * @return self
     */
    public function setJobCode($job_code)
    {
        if (is_null($job_code)) {
            throw new \InvalidArgumentException('non-nullable job_code cannot be null');
        }
        $this->container['job_code'] = $job_code;

        return $this;
    }

    /**
     * Gets job_data
     *
     * @return string|null
     */
    public function getJobData()
    {
        return $this->container['job_data'];
    }

    /**
     * Sets job_data
     *
     * @param string|null $job_data [Optional] A list of up to four 20 characters max job numbers in comma delimited format with no spaces.
     *
     * @return self
     */
    public function setJobData($job_data)
    {
        if (is_null($job_data)) {
            throw new \InvalidArgumentException('non-nullable job_data cannot be null');
        }
        $this->container['job_data'] = $job_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


