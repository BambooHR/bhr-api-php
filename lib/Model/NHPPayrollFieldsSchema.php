<?php
/**
 * NHPPayrollFieldsSchema
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * NHPPayrollFieldsSchema Class Doc Comment
 *
 * @category Class
 * @description Object containing the payroll fields for the new hire packet
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NHPPayrollFieldsSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NHP-PayrollFieldsSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_payroll_synced' => 'bool',
        'show_payroll_bullets' => 'bool',
        'show_federal_withholding' => 'bool',
        'show_state_withholding' => 'bool',
        'has_trax_federal_and_direct_deposit_enabled' => 'bool',
        'has_employee_tax_information_enabled' => 'bool',
        'has_trax' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_payroll_synced' => null,
        'show_payroll_bullets' => null,
        'show_federal_withholding' => null,
        'show_state_withholding' => null,
        'has_trax_federal_and_direct_deposit_enabled' => null,
        'has_employee_tax_information_enabled' => null,
        'has_trax' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_payroll_synced' => false,
        'show_payroll_bullets' => false,
        'show_federal_withholding' => false,
        'show_state_withholding' => false,
        'has_trax_federal_and_direct_deposit_enabled' => false,
        'has_employee_tax_information_enabled' => false,
        'has_trax' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_payroll_synced' => 'employeePayrollSynced',
        'show_payroll_bullets' => 'showPayrollBullets',
        'show_federal_withholding' => 'showFederalWithholding',
        'show_state_withholding' => 'showStateWithholding',
        'has_trax_federal_and_direct_deposit_enabled' => 'hasTraxFederalAndDirectDepositEnabled',
        'has_employee_tax_information_enabled' => 'hasEmployeeTaxInformationEnabled',
        'has_trax' => 'hasTrax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_payroll_synced' => 'setEmployeePayrollSynced',
        'show_payroll_bullets' => 'setShowPayrollBullets',
        'show_federal_withholding' => 'setShowFederalWithholding',
        'show_state_withholding' => 'setShowStateWithholding',
        'has_trax_federal_and_direct_deposit_enabled' => 'setHasTraxFederalAndDirectDepositEnabled',
        'has_employee_tax_information_enabled' => 'setHasEmployeeTaxInformationEnabled',
        'has_trax' => 'setHasTrax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_payroll_synced' => 'getEmployeePayrollSynced',
        'show_payroll_bullets' => 'getShowPayrollBullets',
        'show_federal_withholding' => 'getShowFederalWithholding',
        'show_state_withholding' => 'getShowStateWithholding',
        'has_trax_federal_and_direct_deposit_enabled' => 'getHasTraxFederalAndDirectDepositEnabled',
        'has_employee_tax_information_enabled' => 'getHasEmployeeTaxInformationEnabled',
        'has_trax' => 'getHasTrax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_payroll_synced', $data ?? [], null);
        $this->setIfExists('show_payroll_bullets', $data ?? [], null);
        $this->setIfExists('show_federal_withholding', $data ?? [], null);
        $this->setIfExists('show_state_withholding', $data ?? [], null);
        $this->setIfExists('has_trax_federal_and_direct_deposit_enabled', $data ?? [], null);
        $this->setIfExists('has_employee_tax_information_enabled', $data ?? [], null);
        $this->setIfExists('has_trax', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_payroll_synced
     *
     * @return bool|null
     */
    public function getEmployeePayrollSynced()
    {
        return $this->container['employee_payroll_synced'];
    }

    /**
     * Sets employee_payroll_synced
     *
     * @param bool|null $employee_payroll_synced Whether the employee is synced with payroll
     *
     * @return self
     */
    public function setEmployeePayrollSynced($employee_payroll_synced)
    {
        if (is_null($employee_payroll_synced)) {
            throw new \InvalidArgumentException('non-nullable employee_payroll_synced cannot be null');
        }
        $this->container['employee_payroll_synced'] = $employee_payroll_synced;

        return $this;
    }

    /**
     * Gets show_payroll_bullets
     *
     * @return bool|null
     */
    public function getShowPayrollBullets()
    {
        return $this->container['show_payroll_bullets'];
    }

    /**
     * Sets show_payroll_bullets
     *
     * @param bool|null $show_payroll_bullets Whether to show the payroll bullets
     *
     * @return self
     */
    public function setShowPayrollBullets($show_payroll_bullets)
    {
        if (is_null($show_payroll_bullets)) {
            throw new \InvalidArgumentException('non-nullable show_payroll_bullets cannot be null');
        }
        $this->container['show_payroll_bullets'] = $show_payroll_bullets;

        return $this;
    }

    /**
     * Gets show_federal_withholding
     *
     * @return bool|null
     */
    public function getShowFederalWithholding()
    {
        return $this->container['show_federal_withholding'];
    }

    /**
     * Sets show_federal_withholding
     *
     * @param bool|null $show_federal_withholding Whether to show federal withholding
     *
     * @return self
     */
    public function setShowFederalWithholding($show_federal_withholding)
    {
        if (is_null($show_federal_withholding)) {
            throw new \InvalidArgumentException('non-nullable show_federal_withholding cannot be null');
        }
        $this->container['show_federal_withholding'] = $show_federal_withholding;

        return $this;
    }

    /**
     * Gets show_state_withholding
     *
     * @return bool|null
     */
    public function getShowStateWithholding()
    {
        return $this->container['show_state_withholding'];
    }

    /**
     * Sets show_state_withholding
     *
     * @param bool|null $show_state_withholding Whether to show state withholding
     *
     * @return self
     */
    public function setShowStateWithholding($show_state_withholding)
    {
        if (is_null($show_state_withholding)) {
            throw new \InvalidArgumentException('non-nullable show_state_withholding cannot be null');
        }
        $this->container['show_state_withholding'] = $show_state_withholding;

        return $this;
    }

    /**
     * Gets has_trax_federal_and_direct_deposit_enabled
     *
     * @return bool|null
     */
    public function getHasTraxFederalAndDirectDepositEnabled()
    {
        return $this->container['has_trax_federal_and_direct_deposit_enabled'];
    }

    /**
     * Sets has_trax_federal_and_direct_deposit_enabled
     *
     * @param bool|null $has_trax_federal_and_direct_deposit_enabled Whether to show Trax federal and direct deposit
     *
     * @return self
     */
    public function setHasTraxFederalAndDirectDepositEnabled($has_trax_federal_and_direct_deposit_enabled)
    {
        if (is_null($has_trax_federal_and_direct_deposit_enabled)) {
            throw new \InvalidArgumentException('non-nullable has_trax_federal_and_direct_deposit_enabled cannot be null');
        }
        $this->container['has_trax_federal_and_direct_deposit_enabled'] = $has_trax_federal_and_direct_deposit_enabled;

        return $this;
    }

    /**
     * Gets has_employee_tax_information_enabled
     *
     * @return bool|null
     */
    public function getHasEmployeeTaxInformationEnabled()
    {
        return $this->container['has_employee_tax_information_enabled'];
    }

    /**
     * Sets has_employee_tax_information_enabled
     *
     * @param bool|null $has_employee_tax_information_enabled Whether the employee tax information is enabled
     *
     * @return self
     */
    public function setHasEmployeeTaxInformationEnabled($has_employee_tax_information_enabled)
    {
        if (is_null($has_employee_tax_information_enabled)) {
            throw new \InvalidArgumentException('non-nullable has_employee_tax_information_enabled cannot be null');
        }
        $this->container['has_employee_tax_information_enabled'] = $has_employee_tax_information_enabled;

        return $this;
    }

    /**
     * Gets has_trax
     *
     * @return bool|null
     */
    public function getHasTrax()
    {
        return $this->container['has_trax'];
    }

    /**
     * Sets has_trax
     *
     * @param bool|null $has_trax Whether the company has Trax
     *
     * @return self
     */
    public function setHasTrax($has_trax)
    {
        if (is_null($has_trax)) {
            throw new \InvalidArgumentException('non-nullable has_trax cannot be null');
        }
        $this->container['has_trax'] = $has_trax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


