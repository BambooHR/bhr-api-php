<?php
/**
 * PayCycleEmployeeDataObjectCollectionInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayCycleEmployeeDataObjectCollectionInner Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayCycleEmployeeDataObjectCollectionInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayCycleEmployeeDataObjectCollection_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'job_title_id' => 'int',
        'is_included_in_payroll' => 'bool',
        'employee_pay_cycle_meta_data' => '\MySdk\Model\PayCycleEmployeeDataObjectCollectionInnerEmployeePayCycleMetaData',
        'employee_payroll_ready' => '\MySdk\Model\PayCycleEmployeeDataObjectCollectionInnerEmployeePayrollReady',
        'wage' => '\MySdk\Model\PayCycleEmployeeDataObjectCollectionInnerWage',
        'rates' => '\MySdk\Model\EmployeeRatesInner[]',
        'earnings' => '\MySdk\Model\EmployeeEarningsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'job_title_id' => null,
        'is_included_in_payroll' => null,
        'employee_pay_cycle_meta_data' => null,
        'employee_payroll_ready' => null,
        'wage' => null,
        'rates' => null,
        'earnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'job_title_id' => false,
        'is_included_in_payroll' => false,
        'employee_pay_cycle_meta_data' => false,
        'employee_payroll_ready' => false,
        'wage' => false,
        'rates' => false,
        'earnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'job_title_id' => 'jobTitleId',
        'is_included_in_payroll' => 'isIncludedInPayroll',
        'employee_pay_cycle_meta_data' => 'employeePayCycleMetaData',
        'employee_payroll_ready' => 'employeePayrollReady',
        'wage' => 'wage',
        'rates' => 'rates',
        'earnings' => 'earnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'job_title_id' => 'setJobTitleId',
        'is_included_in_payroll' => 'setIsIncludedInPayroll',
        'employee_pay_cycle_meta_data' => 'setEmployeePayCycleMetaData',
        'employee_payroll_ready' => 'setEmployeePayrollReady',
        'wage' => 'setWage',
        'rates' => 'setRates',
        'earnings' => 'setEarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'job_title_id' => 'getJobTitleId',
        'is_included_in_payroll' => 'getIsIncludedInPayroll',
        'employee_pay_cycle_meta_data' => 'getEmployeePayCycleMetaData',
        'employee_payroll_ready' => 'getEmployeePayrollReady',
        'wage' => 'getWage',
        'rates' => 'getRates',
        'earnings' => 'getEarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('job_title_id', $data ?? [], null);
        $this->setIfExists('is_included_in_payroll', $data ?? [], null);
        $this->setIfExists('employee_pay_cycle_meta_data', $data ?? [], null);
        $this->setIfExists('employee_payroll_ready', $data ?? [], null);
        $this->setIfExists('wage', $data ?? [], null);
        $this->setIfExists('rates', $data ?? [], null);
        $this->setIfExists('earnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets job_title_id
     *
     * @return int|null
     */
    public function getJobTitleId()
    {
        return $this->container['job_title_id'];
    }

    /**
     * Sets job_title_id
     *
     * @param int|null $job_title_id job_title_id
     *
     * @return self
     */
    public function setJobTitleId($job_title_id)
    {
        if (is_null($job_title_id)) {
            throw new \InvalidArgumentException('non-nullable job_title_id cannot be null');
        }
        $this->container['job_title_id'] = $job_title_id;

        return $this;
    }

    /**
     * Gets is_included_in_payroll
     *
     * @return bool|null
     */
    public function getIsIncludedInPayroll()
    {
        return $this->container['is_included_in_payroll'];
    }

    /**
     * Sets is_included_in_payroll
     *
     * @param bool|null $is_included_in_payroll is_included_in_payroll
     *
     * @return self
     */
    public function setIsIncludedInPayroll($is_included_in_payroll)
    {
        if (is_null($is_included_in_payroll)) {
            throw new \InvalidArgumentException('non-nullable is_included_in_payroll cannot be null');
        }
        $this->container['is_included_in_payroll'] = $is_included_in_payroll;

        return $this;
    }

    /**
     * Gets employee_pay_cycle_meta_data
     *
     * @return \MySdk\Model\PayCycleEmployeeDataObjectCollectionInnerEmployeePayCycleMetaData|null
     */
    public function getEmployeePayCycleMetaData()
    {
        return $this->container['employee_pay_cycle_meta_data'];
    }

    /**
     * Sets employee_pay_cycle_meta_data
     *
     * @param \MySdk\Model\PayCycleEmployeeDataObjectCollectionInnerEmployeePayCycleMetaData|null $employee_pay_cycle_meta_data employee_pay_cycle_meta_data
     *
     * @return self
     */
    public function setEmployeePayCycleMetaData($employee_pay_cycle_meta_data)
    {
        if (is_null($employee_pay_cycle_meta_data)) {
            throw new \InvalidArgumentException('non-nullable employee_pay_cycle_meta_data cannot be null');
        }
        $this->container['employee_pay_cycle_meta_data'] = $employee_pay_cycle_meta_data;

        return $this;
    }

    /**
     * Gets employee_payroll_ready
     *
     * @return \MySdk\Model\PayCycleEmployeeDataObjectCollectionInnerEmployeePayrollReady|null
     */
    public function getEmployeePayrollReady()
    {
        return $this->container['employee_payroll_ready'];
    }

    /**
     * Sets employee_payroll_ready
     *
     * @param \MySdk\Model\PayCycleEmployeeDataObjectCollectionInnerEmployeePayrollReady|null $employee_payroll_ready employee_payroll_ready
     *
     * @return self
     */
    public function setEmployeePayrollReady($employee_payroll_ready)
    {
        if (is_null($employee_payroll_ready)) {
            throw new \InvalidArgumentException('non-nullable employee_payroll_ready cannot be null');
        }
        $this->container['employee_payroll_ready'] = $employee_payroll_ready;

        return $this;
    }

    /**
     * Gets wage
     *
     * @return \MySdk\Model\PayCycleEmployeeDataObjectCollectionInnerWage|null
     */
    public function getWage()
    {
        return $this->container['wage'];
    }

    /**
     * Sets wage
     *
     * @param \MySdk\Model\PayCycleEmployeeDataObjectCollectionInnerWage|null $wage wage
     *
     * @return self
     */
    public function setWage($wage)
    {
        if (is_null($wage)) {
            throw new \InvalidArgumentException('non-nullable wage cannot be null');
        }
        $this->container['wage'] = $wage;

        return $this;
    }

    /**
     * Gets rates
     *
     * @return \MySdk\Model\EmployeeRatesInner[]|null
     */
    public function getRates()
    {
        return $this->container['rates'];
    }

    /**
     * Sets rates
     *
     * @param \MySdk\Model\EmployeeRatesInner[]|null $rates rates
     *
     * @return self
     */
    public function setRates($rates)
    {
        if (is_null($rates)) {
            throw new \InvalidArgumentException('non-nullable rates cannot be null');
        }
        $this->container['rates'] = $rates;

        return $this;
    }

    /**
     * Gets earnings
     *
     * @return \MySdk\Model\EmployeeEarningsInner[]|null
     */
    public function getEarnings()
    {
        return $this->container['earnings'];
    }

    /**
     * Sets earnings
     *
     * @param \MySdk\Model\EmployeeEarningsInner[]|null $earnings earnings
     *
     * @return self
     */
    public function setEarnings($earnings)
    {
        if (is_null($earnings)) {
            throw new \InvalidArgumentException('non-nullable earnings cannot be null');
        }
        $this->container['earnings'] = $earnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


