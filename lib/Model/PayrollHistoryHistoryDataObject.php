<?php
/**
 * PayrollHistoryHistoryDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollHistoryHistoryDataObject Class Doc Comment
 *
 * @category Class
 * @description PayrollHistoryHistoryDataObject
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollHistoryHistoryDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayrollHistoryHistoryDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pay_cycle_id' => 'int',
        'is_manual' => 'bool',
        'pay_cycle_name' => 'string',
        'pay_schedule_list_value_id' => 'int',
        'external_pay_schedule_id' => 'int',
        'pay_schedule_name' => 'string',
        'pay_date' => '\DateTime',
        'pay_period_start_date' => '\DateTime',
        'pay_period_end_date' => '\DateTime',
        'employee_count' => 'int',
        'pay_cycle_status' => 'string',
        'external_pay_cycle_id' => 'int',
        'transfer_amount' => 'float',
        'reminders' => 'string[]',
        'timeline' => 'string[]',
        'approved_date' => 'string',
        'approved_by' => 'string',
        'paid_by' => 'string',
        'paid_date' => 'string',
        'reopened_date' => 'string',
        'reopened_by' => 'string',
        'skipped_by' => 'string',
        'skipped_date' => 'string',
        'opened_date' => 'string',
        'opened_by' => 'string',
        'edit_page_version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pay_cycle_id' => null,
        'is_manual' => null,
        'pay_cycle_name' => null,
        'pay_schedule_list_value_id' => null,
        'external_pay_schedule_id' => null,
        'pay_schedule_name' => null,
        'pay_date' => 'date',
        'pay_period_start_date' => 'date',
        'pay_period_end_date' => 'date',
        'employee_count' => null,
        'pay_cycle_status' => null,
        'external_pay_cycle_id' => null,
        'transfer_amount' => null,
        'reminders' => null,
        'timeline' => null,
        'approved_date' => null,
        'approved_by' => null,
        'paid_by' => null,
        'paid_date' => null,
        'reopened_date' => null,
        'reopened_by' => null,
        'skipped_by' => null,
        'skipped_date' => null,
        'opened_date' => null,
        'opened_by' => null,
        'edit_page_version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pay_cycle_id' => false,
        'is_manual' => false,
        'pay_cycle_name' => true,
        'pay_schedule_list_value_id' => true,
        'external_pay_schedule_id' => true,
        'pay_schedule_name' => true,
        'pay_date' => false,
        'pay_period_start_date' => false,
        'pay_period_end_date' => false,
        'employee_count' => true,
        'pay_cycle_status' => false,
        'external_pay_cycle_id' => false,
        'transfer_amount' => true,
        'reminders' => true,
        'timeline' => true,
        'approved_date' => true,
        'approved_by' => true,
        'paid_by' => true,
        'paid_date' => true,
        'reopened_date' => true,
        'reopened_by' => true,
        'skipped_by' => true,
        'skipped_date' => true,
        'opened_date' => true,
        'opened_by' => true,
        'edit_page_version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_cycle_id' => 'payCycleId',
        'is_manual' => 'isManual',
        'pay_cycle_name' => 'payCycleName',
        'pay_schedule_list_value_id' => 'payScheduleListValueId',
        'external_pay_schedule_id' => 'externalPayScheduleId',
        'pay_schedule_name' => 'payScheduleName',
        'pay_date' => 'payDate',
        'pay_period_start_date' => 'payPeriodStartDate',
        'pay_period_end_date' => 'payPeriodEndDate',
        'employee_count' => 'employeeCount',
        'pay_cycle_status' => 'payCycleStatus',
        'external_pay_cycle_id' => 'externalPayCycleId',
        'transfer_amount' => 'transferAmount',
        'reminders' => 'reminders',
        'timeline' => 'timeline',
        'approved_date' => 'approvedDate',
        'approved_by' => 'approvedBy',
        'paid_by' => 'paidBy',
        'paid_date' => 'paidDate',
        'reopened_date' => 'reopenedDate',
        'reopened_by' => 'reopenedBy',
        'skipped_by' => 'skippedBy',
        'skipped_date' => 'skippedDate',
        'opened_date' => 'openedDate',
        'opened_by' => 'openedBy',
        'edit_page_version' => 'editPageVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_cycle_id' => 'setPayCycleId',
        'is_manual' => 'setIsManual',
        'pay_cycle_name' => 'setPayCycleName',
        'pay_schedule_list_value_id' => 'setPayScheduleListValueId',
        'external_pay_schedule_id' => 'setExternalPayScheduleId',
        'pay_schedule_name' => 'setPayScheduleName',
        'pay_date' => 'setPayDate',
        'pay_period_start_date' => 'setPayPeriodStartDate',
        'pay_period_end_date' => 'setPayPeriodEndDate',
        'employee_count' => 'setEmployeeCount',
        'pay_cycle_status' => 'setPayCycleStatus',
        'external_pay_cycle_id' => 'setExternalPayCycleId',
        'transfer_amount' => 'setTransferAmount',
        'reminders' => 'setReminders',
        'timeline' => 'setTimeline',
        'approved_date' => 'setApprovedDate',
        'approved_by' => 'setApprovedBy',
        'paid_by' => 'setPaidBy',
        'paid_date' => 'setPaidDate',
        'reopened_date' => 'setReopenedDate',
        'reopened_by' => 'setReopenedBy',
        'skipped_by' => 'setSkippedBy',
        'skipped_date' => 'setSkippedDate',
        'opened_date' => 'setOpenedDate',
        'opened_by' => 'setOpenedBy',
        'edit_page_version' => 'setEditPageVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_cycle_id' => 'getPayCycleId',
        'is_manual' => 'getIsManual',
        'pay_cycle_name' => 'getPayCycleName',
        'pay_schedule_list_value_id' => 'getPayScheduleListValueId',
        'external_pay_schedule_id' => 'getExternalPayScheduleId',
        'pay_schedule_name' => 'getPayScheduleName',
        'pay_date' => 'getPayDate',
        'pay_period_start_date' => 'getPayPeriodStartDate',
        'pay_period_end_date' => 'getPayPeriodEndDate',
        'employee_count' => 'getEmployeeCount',
        'pay_cycle_status' => 'getPayCycleStatus',
        'external_pay_cycle_id' => 'getExternalPayCycleId',
        'transfer_amount' => 'getTransferAmount',
        'reminders' => 'getReminders',
        'timeline' => 'getTimeline',
        'approved_date' => 'getApprovedDate',
        'approved_by' => 'getApprovedBy',
        'paid_by' => 'getPaidBy',
        'paid_date' => 'getPaidDate',
        'reopened_date' => 'getReopenedDate',
        'reopened_by' => 'getReopenedBy',
        'skipped_by' => 'getSkippedBy',
        'skipped_date' => 'getSkippedDate',
        'opened_date' => 'getOpenedDate',
        'opened_by' => 'getOpenedBy',
        'edit_page_version' => 'getEditPageVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pay_cycle_id', $data ?? [], null);
        $this->setIfExists('is_manual', $data ?? [], null);
        $this->setIfExists('pay_cycle_name', $data ?? [], null);
        $this->setIfExists('pay_schedule_list_value_id', $data ?? [], null);
        $this->setIfExists('external_pay_schedule_id', $data ?? [], null);
        $this->setIfExists('pay_schedule_name', $data ?? [], null);
        $this->setIfExists('pay_date', $data ?? [], null);
        $this->setIfExists('pay_period_start_date', $data ?? [], null);
        $this->setIfExists('pay_period_end_date', $data ?? [], null);
        $this->setIfExists('employee_count', $data ?? [], null);
        $this->setIfExists('pay_cycle_status', $data ?? [], null);
        $this->setIfExists('external_pay_cycle_id', $data ?? [], null);
        $this->setIfExists('transfer_amount', $data ?? [], null);
        $this->setIfExists('reminders', $data ?? [], null);
        $this->setIfExists('timeline', $data ?? [], null);
        $this->setIfExists('approved_date', $data ?? [], null);
        $this->setIfExists('approved_by', $data ?? [], null);
        $this->setIfExists('paid_by', $data ?? [], null);
        $this->setIfExists('paid_date', $data ?? [], null);
        $this->setIfExists('reopened_date', $data ?? [], null);
        $this->setIfExists('reopened_by', $data ?? [], null);
        $this->setIfExists('skipped_by', $data ?? [], null);
        $this->setIfExists('skipped_date', $data ?? [], null);
        $this->setIfExists('opened_date', $data ?? [], null);
        $this->setIfExists('opened_by', $data ?? [], null);
        $this->setIfExists('edit_page_version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pay_cycle_id'] === null) {
            $invalidProperties[] = "'pay_cycle_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_cycle_id
     *
     * @return int
     */
    public function getPayCycleId()
    {
        return $this->container['pay_cycle_id'];
    }

    /**
     * Sets pay_cycle_id
     *
     * @param int $pay_cycle_id Pay Cycle ID
     *
     * @return self
     */
    public function setPayCycleId($pay_cycle_id)
    {
        if (is_null($pay_cycle_id)) {
            throw new \InvalidArgumentException('non-nullable pay_cycle_id cannot be null');
        }
        $this->container['pay_cycle_id'] = $pay_cycle_id;

        return $this;
    }

    /**
     * Gets is_manual
     *
     * @return bool|null
     */
    public function getIsManual()
    {
        return $this->container['is_manual'];
    }

    /**
     * Sets is_manual
     *
     * @param bool|null $is_manual Is Manual
     *
     * @return self
     */
    public function setIsManual($is_manual)
    {
        if (is_null($is_manual)) {
            throw new \InvalidArgumentException('non-nullable is_manual cannot be null');
        }
        $this->container['is_manual'] = $is_manual;

        return $this;
    }

    /**
     * Gets pay_cycle_name
     *
     * @return string|null
     */
    public function getPayCycleName()
    {
        return $this->container['pay_cycle_name'];
    }

    /**
     * Sets pay_cycle_name
     *
     * @param string|null $pay_cycle_name Pay Cycle Name
     *
     * @return self
     */
    public function setPayCycleName($pay_cycle_name)
    {
        if (is_null($pay_cycle_name)) {
            array_push($this->openAPINullablesSetToNull, 'pay_cycle_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_cycle_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_cycle_name'] = $pay_cycle_name;

        return $this;
    }

    /**
     * Gets pay_schedule_list_value_id
     *
     * @return int|null
     */
    public function getPayScheduleListValueId()
    {
        return $this->container['pay_schedule_list_value_id'];
    }

    /**
     * Sets pay_schedule_list_value_id
     *
     * @param int|null $pay_schedule_list_value_id Pay Schedule List Value ID
     *
     * @return self
     */
    public function setPayScheduleListValueId($pay_schedule_list_value_id)
    {
        if (is_null($pay_schedule_list_value_id)) {
            array_push($this->openAPINullablesSetToNull, 'pay_schedule_list_value_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_schedule_list_value_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_schedule_list_value_id'] = $pay_schedule_list_value_id;

        return $this;
    }

    /**
     * Gets external_pay_schedule_id
     *
     * @return int|null
     */
    public function getExternalPayScheduleId()
    {
        return $this->container['external_pay_schedule_id'];
    }

    /**
     * Sets external_pay_schedule_id
     *
     * @param int|null $external_pay_schedule_id External Pay Schedule ID
     *
     * @return self
     */
    public function setExternalPayScheduleId($external_pay_schedule_id)
    {
        if (is_null($external_pay_schedule_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_pay_schedule_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_pay_schedule_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_pay_schedule_id'] = $external_pay_schedule_id;

        return $this;
    }

    /**
     * Gets pay_schedule_name
     *
     * @return string|null
     */
    public function getPayScheduleName()
    {
        return $this->container['pay_schedule_name'];
    }

    /**
     * Sets pay_schedule_name
     *
     * @param string|null $pay_schedule_name Pay Schedule Name
     *
     * @return self
     */
    public function setPayScheduleName($pay_schedule_name)
    {
        if (is_null($pay_schedule_name)) {
            array_push($this->openAPINullablesSetToNull, 'pay_schedule_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_schedule_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_schedule_name'] = $pay_schedule_name;

        return $this;
    }

    /**
     * Gets pay_date
     *
     * @return \DateTime|null
     */
    public function getPayDate()
    {
        return $this->container['pay_date'];
    }

    /**
     * Sets pay_date
     *
     * @param \DateTime|null $pay_date Pay Date
     *
     * @return self
     */
    public function setPayDate($pay_date)
    {
        if (is_null($pay_date)) {
            throw new \InvalidArgumentException('non-nullable pay_date cannot be null');
        }
        $this->container['pay_date'] = $pay_date;

        return $this;
    }

    /**
     * Gets pay_period_start_date
     *
     * @return \DateTime|null
     */
    public function getPayPeriodStartDate()
    {
        return $this->container['pay_period_start_date'];
    }

    /**
     * Sets pay_period_start_date
     *
     * @param \DateTime|null $pay_period_start_date Pay Period Start Date
     *
     * @return self
     */
    public function setPayPeriodStartDate($pay_period_start_date)
    {
        if (is_null($pay_period_start_date)) {
            throw new \InvalidArgumentException('non-nullable pay_period_start_date cannot be null');
        }
        $this->container['pay_period_start_date'] = $pay_period_start_date;

        return $this;
    }

    /**
     * Gets pay_period_end_date
     *
     * @return \DateTime|null
     */
    public function getPayPeriodEndDate()
    {
        return $this->container['pay_period_end_date'];
    }

    /**
     * Sets pay_period_end_date
     *
     * @param \DateTime|null $pay_period_end_date Pay Period End Date
     *
     * @return self
     */
    public function setPayPeriodEndDate($pay_period_end_date)
    {
        if (is_null($pay_period_end_date)) {
            throw new \InvalidArgumentException('non-nullable pay_period_end_date cannot be null');
        }
        $this->container['pay_period_end_date'] = $pay_period_end_date;

        return $this;
    }

    /**
     * Gets employee_count
     *
     * @return int|null
     */
    public function getEmployeeCount()
    {
        return $this->container['employee_count'];
    }

    /**
     * Sets employee_count
     *
     * @param int|null $employee_count Employee Count
     *
     * @return self
     */
    public function setEmployeeCount($employee_count)
    {
        if (is_null($employee_count)) {
            array_push($this->openAPINullablesSetToNull, 'employee_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_count'] = $employee_count;

        return $this;
    }

    /**
     * Gets pay_cycle_status
     *
     * @return string|null
     */
    public function getPayCycleStatus()
    {
        return $this->container['pay_cycle_status'];
    }

    /**
     * Sets pay_cycle_status
     *
     * @param string|null $pay_cycle_status Pay Cycle Status
     *
     * @return self
     */
    public function setPayCycleStatus($pay_cycle_status)
    {
        if (is_null($pay_cycle_status)) {
            throw new \InvalidArgumentException('non-nullable pay_cycle_status cannot be null');
        }
        $this->container['pay_cycle_status'] = $pay_cycle_status;

        return $this;
    }

    /**
     * Gets external_pay_cycle_id
     *
     * @return int|null
     */
    public function getExternalPayCycleId()
    {
        return $this->container['external_pay_cycle_id'];
    }

    /**
     * Sets external_pay_cycle_id
     *
     * @param int|null $external_pay_cycle_id External Pay Cycle Type
     *
     * @return self
     */
    public function setExternalPayCycleId($external_pay_cycle_id)
    {
        if (is_null($external_pay_cycle_id)) {
            throw new \InvalidArgumentException('non-nullable external_pay_cycle_id cannot be null');
        }
        $this->container['external_pay_cycle_id'] = $external_pay_cycle_id;

        return $this;
    }

    /**
     * Gets transfer_amount
     *
     * @return float|null
     */
    public function getTransferAmount()
    {
        return $this->container['transfer_amount'];
    }

    /**
     * Sets transfer_amount
     *
     * @param float|null $transfer_amount Transfer Amount
     *
     * @return self
     */
    public function setTransferAmount($transfer_amount)
    {
        if (is_null($transfer_amount)) {
            array_push($this->openAPINullablesSetToNull, 'transfer_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transfer_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['transfer_amount'] = $transfer_amount;

        return $this;
    }

    /**
     * Gets reminders
     *
     * @return string[]|null
     */
    public function getReminders()
    {
        return $this->container['reminders'];
    }

    /**
     * Sets reminders
     *
     * @param string[]|null $reminders Reminders
     *
     * @return self
     */
    public function setReminders($reminders)
    {
        if (is_null($reminders)) {
            array_push($this->openAPINullablesSetToNull, 'reminders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reminders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reminders'] = $reminders;

        return $this;
    }

    /**
     * Gets timeline
     *
     * @return string[]|null
     */
    public function getTimeline()
    {
        return $this->container['timeline'];
    }

    /**
     * Sets timeline
     *
     * @param string[]|null $timeline Timeline
     *
     * @return self
     */
    public function setTimeline($timeline)
    {
        if (is_null($timeline)) {
            array_push($this->openAPINullablesSetToNull, 'timeline');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timeline', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timeline'] = $timeline;

        return $this;
    }

    /**
     * Gets approved_date
     *
     * @return string|null
     */
    public function getApprovedDate()
    {
        return $this->container['approved_date'];
    }

    /**
     * Sets approved_date
     *
     * @param string|null $approved_date Approved Date
     *
     * @return self
     */
    public function setApprovedDate($approved_date)
    {
        if (is_null($approved_date)) {
            array_push($this->openAPINullablesSetToNull, 'approved_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approved_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approved_date'] = $approved_date;

        return $this;
    }

    /**
     * Gets approved_by
     *
     * @return string|null
     */
    public function getApprovedBy()
    {
        return $this->container['approved_by'];
    }

    /**
     * Sets approved_by
     *
     * @param string|null $approved_by Approved By
     *
     * @return self
     */
    public function setApprovedBy($approved_by)
    {
        if (is_null($approved_by)) {
            array_push($this->openAPINullablesSetToNull, 'approved_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approved_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approved_by'] = $approved_by;

        return $this;
    }

    /**
     * Gets paid_by
     *
     * @return string|null
     */
    public function getPaidBy()
    {
        return $this->container['paid_by'];
    }

    /**
     * Sets paid_by
     *
     * @param string|null $paid_by Paid Date
     *
     * @return self
     */
    public function setPaidBy($paid_by)
    {
        if (is_null($paid_by)) {
            array_push($this->openAPINullablesSetToNull, 'paid_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paid_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paid_by'] = $paid_by;

        return $this;
    }

    /**
     * Gets paid_date
     *
     * @return string|null
     */
    public function getPaidDate()
    {
        return $this->container['paid_date'];
    }

    /**
     * Sets paid_date
     *
     * @param string|null $paid_date Paid By
     *
     * @return self
     */
    public function setPaidDate($paid_date)
    {
        if (is_null($paid_date)) {
            array_push($this->openAPINullablesSetToNull, 'paid_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('paid_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['paid_date'] = $paid_date;

        return $this;
    }

    /**
     * Gets reopened_date
     *
     * @return string|null
     */
    public function getReopenedDate()
    {
        return $this->container['reopened_date'];
    }

    /**
     * Sets reopened_date
     *
     * @param string|null $reopened_date Reopened Date
     *
     * @return self
     */
    public function setReopenedDate($reopened_date)
    {
        if (is_null($reopened_date)) {
            array_push($this->openAPINullablesSetToNull, 'reopened_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reopened_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reopened_date'] = $reopened_date;

        return $this;
    }

    /**
     * Gets reopened_by
     *
     * @return string|null
     */
    public function getReopenedBy()
    {
        return $this->container['reopened_by'];
    }

    /**
     * Sets reopened_by
     *
     * @param string|null $reopened_by Reopened By
     *
     * @return self
     */
    public function setReopenedBy($reopened_by)
    {
        if (is_null($reopened_by)) {
            array_push($this->openAPINullablesSetToNull, 'reopened_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reopened_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reopened_by'] = $reopened_by;

        return $this;
    }

    /**
     * Gets skipped_by
     *
     * @return string|null
     */
    public function getSkippedBy()
    {
        return $this->container['skipped_by'];
    }

    /**
     * Sets skipped_by
     *
     * @param string|null $skipped_by Skipped By
     *
     * @return self
     */
    public function setSkippedBy($skipped_by)
    {
        if (is_null($skipped_by)) {
            array_push($this->openAPINullablesSetToNull, 'skipped_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skipped_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skipped_by'] = $skipped_by;

        return $this;
    }

    /**
     * Gets skipped_date
     *
     * @return string|null
     */
    public function getSkippedDate()
    {
        return $this->container['skipped_date'];
    }

    /**
     * Sets skipped_date
     *
     * @param string|null $skipped_date Skipped Date
     *
     * @return self
     */
    public function setSkippedDate($skipped_date)
    {
        if (is_null($skipped_date)) {
            array_push($this->openAPINullablesSetToNull, 'skipped_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skipped_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skipped_date'] = $skipped_date;

        return $this;
    }

    /**
     * Gets opened_date
     *
     * @return string|null
     */
    public function getOpenedDate()
    {
        return $this->container['opened_date'];
    }

    /**
     * Sets opened_date
     *
     * @param string|null $opened_date Opened Date
     *
     * @return self
     */
    public function setOpenedDate($opened_date)
    {
        if (is_null($opened_date)) {
            array_push($this->openAPINullablesSetToNull, 'opened_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opened_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['opened_date'] = $opened_date;

        return $this;
    }

    /**
     * Gets opened_by
     *
     * @return string|null
     */
    public function getOpenedBy()
    {
        return $this->container['opened_by'];
    }

    /**
     * Sets opened_by
     *
     * @param string|null $opened_by Opened By
     *
     * @return self
     */
    public function setOpenedBy($opened_by)
    {
        if (is_null($opened_by)) {
            array_push($this->openAPINullablesSetToNull, 'opened_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('opened_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['opened_by'] = $opened_by;

        return $this;
    }

    /**
     * Gets edit_page_version
     *
     * @return int|null
     */
    public function getEditPageVersion()
    {
        return $this->container['edit_page_version'];
    }

    /**
     * Sets edit_page_version
     *
     * @param int|null $edit_page_version Edit Page Version
     *
     * @return self
     */
    public function setEditPageVersion($edit_page_version)
    {
        if (is_null($edit_page_version)) {
            throw new \InvalidArgumentException('non-nullable edit_page_version cannot be null');
        }
        $this->container['edit_page_version'] = $edit_page_version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


