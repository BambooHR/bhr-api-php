<?php
/**
 * EmailTemplateDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmailTemplateDataObject Class Doc Comment
 *
 * @category Class
 * @description Records an Ats Email Template
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailTemplateDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailTemplateDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'subject' => 'string',
        'message' => 'string',
        'wysiwyg_version' => 'string',
        'expanded_message' => 'string',
        'collapsed_message' => 'string',
        'sort_order' => 'int',
        'files' => 'object[]',
        'add_files' => 'object[]',
        'delete_files' => 'object[]',
        'editor' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'subject' => null,
        'message' => null,
        'wysiwyg_version' => null,
        'expanded_message' => null,
        'collapsed_message' => null,
        'sort_order' => null,
        'files' => null,
        'add_files' => null,
        'delete_files' => null,
        'editor' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'subject' => false,
        'message' => false,
        'wysiwyg_version' => false,
        'expanded_message' => false,
        'collapsed_message' => false,
        'sort_order' => false,
        'files' => false,
        'add_files' => false,
        'delete_files' => false,
        'editor' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'subject' => 'subject',
        'message' => 'message',
        'wysiwyg_version' => 'wysiwygVersion',
        'expanded_message' => 'expandedMessage',
        'collapsed_message' => 'collapsedMessage',
        'sort_order' => 'sortOrder',
        'files' => 'files',
        'add_files' => 'addFiles',
        'delete_files' => 'deleteFiles',
        'editor' => 'editor',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'subject' => 'setSubject',
        'message' => 'setMessage',
        'wysiwyg_version' => 'setWysiwygVersion',
        'expanded_message' => 'setExpandedMessage',
        'collapsed_message' => 'setCollapsedMessage',
        'sort_order' => 'setSortOrder',
        'files' => 'setFiles',
        'add_files' => 'setAddFiles',
        'delete_files' => 'setDeleteFiles',
        'editor' => 'setEditor',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'subject' => 'getSubject',
        'message' => 'getMessage',
        'wysiwyg_version' => 'getWysiwygVersion',
        'expanded_message' => 'getExpandedMessage',
        'collapsed_message' => 'getCollapsedMessage',
        'sort_order' => 'getSortOrder',
        'files' => 'getFiles',
        'add_files' => 'getAddFiles',
        'delete_files' => 'getDeleteFiles',
        'editor' => 'getEditor',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_APPLICANT = 'applicant';
    public const TYPE_OFFER = 'offer';
    public const TYPE_APPLICATION_CONFIRMATION = 'application_confirmation';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_APPLICANT,
            self::TYPE_OFFER,
            self::TYPE_APPLICATION_CONFIRMATION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('wysiwyg_version', $data ?? [], null);
        $this->setIfExists('expanded_message', $data ?? [], null);
        $this->setIfExists('collapsed_message', $data ?? [], null);
        $this->setIfExists('sort_order', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('add_files', $data ?? [], null);
        $this->setIfExists('delete_files', $data ?? [], null);
        $this->setIfExists('editor', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID of the email template
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the email template
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Subject of the email template
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message Message content of the email template
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets wysiwyg_version
     *
     * @return string|null
     */
    public function getWysiwygVersion()
    {
        return $this->container['wysiwyg_version'];
    }

    /**
     * Sets wysiwyg_version
     *
     * @param string|null $wysiwyg_version WYSIWYG version
     *
     * @return self
     */
    public function setWysiwygVersion($wysiwyg_version)
    {
        if (is_null($wysiwyg_version)) {
            throw new \InvalidArgumentException('non-nullable wysiwyg_version cannot be null');
        }
        $this->container['wysiwyg_version'] = $wysiwyg_version;

        return $this;
    }

    /**
     * Gets expanded_message
     *
     * @return string|null
     */
    public function getExpandedMessage()
    {
        return $this->container['expanded_message'];
    }

    /**
     * Sets expanded_message
     *
     * @param string|null $expanded_message Expanded message content
     *
     * @return self
     */
    public function setExpandedMessage($expanded_message)
    {
        if (is_null($expanded_message)) {
            throw new \InvalidArgumentException('non-nullable expanded_message cannot be null');
        }
        $this->container['expanded_message'] = $expanded_message;

        return $this;
    }

    /**
     * Gets collapsed_message
     *
     * @return string|null
     */
    public function getCollapsedMessage()
    {
        return $this->container['collapsed_message'];
    }

    /**
     * Sets collapsed_message
     *
     * @param string|null $collapsed_message Collapsed message content
     *
     * @return self
     */
    public function setCollapsedMessage($collapsed_message)
    {
        if (is_null($collapsed_message)) {
            throw new \InvalidArgumentException('non-nullable collapsed_message cannot be null');
        }
        $this->container['collapsed_message'] = $collapsed_message;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int|null $sort_order Sort order of the email template
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        if (is_null($sort_order)) {
            throw new \InvalidArgumentException('non-nullable sort_order cannot be null');
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets files
     *
     * @return object[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param object[]|null $files Attached files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets add_files
     *
     * @return object[]|null
     */
    public function getAddFiles()
    {
        return $this->container['add_files'];
    }

    /**
     * Sets add_files
     *
     * @param object[]|null $add_files Files to be added
     *
     * @return self
     */
    public function setAddFiles($add_files)
    {
        if (is_null($add_files)) {
            throw new \InvalidArgumentException('non-nullable add_files cannot be null');
        }
        $this->container['add_files'] = $add_files;

        return $this;
    }

    /**
     * Gets delete_files
     *
     * @return object[]|null
     */
    public function getDeleteFiles()
    {
        return $this->container['delete_files'];
    }

    /**
     * Sets delete_files
     *
     * @param object[]|null $delete_files Files to be deleted
     *
     * @return self
     */
    public function setDeleteFiles($delete_files)
    {
        if (is_null($delete_files)) {
            throw new \InvalidArgumentException('non-nullable delete_files cannot be null');
        }
        $this->container['delete_files'] = $delete_files;

        return $this;
    }

    /**
     * Gets editor
     *
     * @return string|null
     */
    public function getEditor()
    {
        return $this->container['editor'];
    }

    /**
     * Sets editor
     *
     * @param string|null $editor Editor of the email template
     *
     * @return self
     */
    public function setEditor($editor)
    {
        if (is_null($editor)) {
            throw new \InvalidArgumentException('non-nullable editor cannot be null');
        }
        $this->container['editor'] = $editor;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of the email template
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


