<?php
/**
 * EmployeeBenefitDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeBenefitDataObject Class Doc Comment
 *
 * @category Class
 * @description Data object representing an employee benefit enrollment
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeBenefitDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeBenefitDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'field_id' => 'int',
        'benefit_plan_id' => 'int',
        'employee_id' => 'int',
        'benefit_group_id' => 'int',
        'eligibility_date' => '\DateTime',
        'use_auto_eligibility' => 'string',
        'status' => 'string',
        'benefit_plan_coverage_id' => 'int',
        'eligible' => 'string',
        'enrolled_date' => '\DateTime',
        'effective_date' => '\DateTime',
        'end_ymd' => '\DateTime',
        'employee_pays' => 'float',
        'employee_pays_symbol' => 'string',
        'employee_percent_deduction_type' => 'string',
        'employee_cap' => 'float',
        'employee_cap_type' => 'string',
        'employee_annual_max' => 'float',
        'employee_monthly_max' => 'float',
        'company_pays' => 'float',
        'company_pays_symbol' => 'string',
        'company_percent_deduction_type' => 'string',
        'company_cap' => 'float',
        'company_annual_max' => 'float',
        'currency_code' => 'string',
        'cost_frequency' => 'string',
        'plan_ended' => 'bool',
        'update_date' => '\DateTime',
        'update_user_id' => 'int',
        'deduction_start_date' => '\DateTime',
        'deduction_end_date' => '\DateTime',
        'frequency_at_effective_date' => 'int',
        'coverage_description' => 'string',
        'benefit_employee_window_submission_id' => 'string',
        'coverage_amount_wrapper' => 'object',
        'created_at_ymdt' => '\DateTime',
        'ended_at_ymdt' => '\DateTime',
        'employee_new_benefit_id' => 'string',
        'employee_benefit_history_item_id' => 'string',
        'use_auto_termination' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'field_id' => null,
        'benefit_plan_id' => null,
        'employee_id' => null,
        'benefit_group_id' => null,
        'eligibility_date' => 'date',
        'use_auto_eligibility' => null,
        'status' => null,
        'benefit_plan_coverage_id' => null,
        'eligible' => null,
        'enrolled_date' => 'date',
        'effective_date' => 'date',
        'end_ymd' => 'date',
        'employee_pays' => 'float',
        'employee_pays_symbol' => null,
        'employee_percent_deduction_type' => null,
        'employee_cap' => 'float',
        'employee_cap_type' => null,
        'employee_annual_max' => 'float',
        'employee_monthly_max' => 'float',
        'company_pays' => 'float',
        'company_pays_symbol' => null,
        'company_percent_deduction_type' => null,
        'company_cap' => 'float',
        'company_annual_max' => 'float',
        'currency_code' => null,
        'cost_frequency' => null,
        'plan_ended' => null,
        'update_date' => 'date',
        'update_user_id' => null,
        'deduction_start_date' => 'date',
        'deduction_end_date' => 'date',
        'frequency_at_effective_date' => null,
        'coverage_description' => null,
        'benefit_employee_window_submission_id' => null,
        'coverage_amount_wrapper' => null,
        'created_at_ymdt' => 'date-time',
        'ended_at_ymdt' => 'date-time',
        'employee_new_benefit_id' => null,
        'employee_benefit_history_item_id' => null,
        'use_auto_termination' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'field_id' => false,
        'benefit_plan_id' => false,
        'employee_id' => false,
        'benefit_group_id' => false,
        'eligibility_date' => false,
        'use_auto_eligibility' => false,
        'status' => false,
        'benefit_plan_coverage_id' => false,
        'eligible' => false,
        'enrolled_date' => false,
        'effective_date' => false,
        'end_ymd' => false,
        'employee_pays' => false,
        'employee_pays_symbol' => false,
        'employee_percent_deduction_type' => false,
        'employee_cap' => false,
        'employee_cap_type' => false,
        'employee_annual_max' => false,
        'employee_monthly_max' => false,
        'company_pays' => false,
        'company_pays_symbol' => false,
        'company_percent_deduction_type' => false,
        'company_cap' => false,
        'company_annual_max' => false,
        'currency_code' => false,
        'cost_frequency' => false,
        'plan_ended' => false,
        'update_date' => false,
        'update_user_id' => false,
        'deduction_start_date' => false,
        'deduction_end_date' => false,
        'frequency_at_effective_date' => false,
        'coverage_description' => false,
        'benefit_employee_window_submission_id' => false,
        'coverage_amount_wrapper' => true,
        'created_at_ymdt' => false,
        'ended_at_ymdt' => false,
        'employee_new_benefit_id' => false,
        'employee_benefit_history_item_id' => false,
        'use_auto_termination' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'field_id' => 'fieldId',
        'benefit_plan_id' => 'benefitPlanId',
        'employee_id' => 'employeeId',
        'benefit_group_id' => 'benefitGroupId',
        'eligibility_date' => 'eligibilityDate',
        'use_auto_eligibility' => 'useAutoEligibility',
        'status' => 'status',
        'benefit_plan_coverage_id' => 'benefitPlanCoverageId',
        'eligible' => 'eligible',
        'enrolled_date' => 'enrolledDate',
        'effective_date' => 'effectiveDate',
        'end_ymd' => 'endYmd',
        'employee_pays' => 'employeePays',
        'employee_pays_symbol' => 'employeePaysSymbol',
        'employee_percent_deduction_type' => 'employeePercentDeductionType',
        'employee_cap' => 'employeeCap',
        'employee_cap_type' => 'employeeCapType',
        'employee_annual_max' => 'employeeAnnualMax',
        'employee_monthly_max' => 'employeeMonthlyMax',
        'company_pays' => 'companyPays',
        'company_pays_symbol' => 'companyPaysSymbol',
        'company_percent_deduction_type' => 'companyPercentDeductionType',
        'company_cap' => 'companyCap',
        'company_annual_max' => 'companyAnnualMax',
        'currency_code' => 'currencyCode',
        'cost_frequency' => 'costFrequency',
        'plan_ended' => 'planEnded',
        'update_date' => 'updateDate',
        'update_user_id' => 'updateUserId',
        'deduction_start_date' => 'deductionStartDate',
        'deduction_end_date' => 'deductionEndDate',
        'frequency_at_effective_date' => 'frequencyAtEffectiveDate',
        'coverage_description' => 'coverageDescription',
        'benefit_employee_window_submission_id' => 'benefitEmployeeWindowSubmissionId',
        'coverage_amount_wrapper' => 'coverageAmountWrapper',
        'created_at_ymdt' => 'createdAtYmdt',
        'ended_at_ymdt' => 'endedAtYmdt',
        'employee_new_benefit_id' => 'employeeNewBenefitId',
        'employee_benefit_history_item_id' => 'employeeBenefitHistoryItemId',
        'use_auto_termination' => 'useAutoTermination'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'field_id' => 'setFieldId',
        'benefit_plan_id' => 'setBenefitPlanId',
        'employee_id' => 'setEmployeeId',
        'benefit_group_id' => 'setBenefitGroupId',
        'eligibility_date' => 'setEligibilityDate',
        'use_auto_eligibility' => 'setUseAutoEligibility',
        'status' => 'setStatus',
        'benefit_plan_coverage_id' => 'setBenefitPlanCoverageId',
        'eligible' => 'setEligible',
        'enrolled_date' => 'setEnrolledDate',
        'effective_date' => 'setEffectiveDate',
        'end_ymd' => 'setEndYmd',
        'employee_pays' => 'setEmployeePays',
        'employee_pays_symbol' => 'setEmployeePaysSymbol',
        'employee_percent_deduction_type' => 'setEmployeePercentDeductionType',
        'employee_cap' => 'setEmployeeCap',
        'employee_cap_type' => 'setEmployeeCapType',
        'employee_annual_max' => 'setEmployeeAnnualMax',
        'employee_monthly_max' => 'setEmployeeMonthlyMax',
        'company_pays' => 'setCompanyPays',
        'company_pays_symbol' => 'setCompanyPaysSymbol',
        'company_percent_deduction_type' => 'setCompanyPercentDeductionType',
        'company_cap' => 'setCompanyCap',
        'company_annual_max' => 'setCompanyAnnualMax',
        'currency_code' => 'setCurrencyCode',
        'cost_frequency' => 'setCostFrequency',
        'plan_ended' => 'setPlanEnded',
        'update_date' => 'setUpdateDate',
        'update_user_id' => 'setUpdateUserId',
        'deduction_start_date' => 'setDeductionStartDate',
        'deduction_end_date' => 'setDeductionEndDate',
        'frequency_at_effective_date' => 'setFrequencyAtEffectiveDate',
        'coverage_description' => 'setCoverageDescription',
        'benefit_employee_window_submission_id' => 'setBenefitEmployeeWindowSubmissionId',
        'coverage_amount_wrapper' => 'setCoverageAmountWrapper',
        'created_at_ymdt' => 'setCreatedAtYmdt',
        'ended_at_ymdt' => 'setEndedAtYmdt',
        'employee_new_benefit_id' => 'setEmployeeNewBenefitId',
        'employee_benefit_history_item_id' => 'setEmployeeBenefitHistoryItemId',
        'use_auto_termination' => 'setUseAutoTermination'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'field_id' => 'getFieldId',
        'benefit_plan_id' => 'getBenefitPlanId',
        'employee_id' => 'getEmployeeId',
        'benefit_group_id' => 'getBenefitGroupId',
        'eligibility_date' => 'getEligibilityDate',
        'use_auto_eligibility' => 'getUseAutoEligibility',
        'status' => 'getStatus',
        'benefit_plan_coverage_id' => 'getBenefitPlanCoverageId',
        'eligible' => 'getEligible',
        'enrolled_date' => 'getEnrolledDate',
        'effective_date' => 'getEffectiveDate',
        'end_ymd' => 'getEndYmd',
        'employee_pays' => 'getEmployeePays',
        'employee_pays_symbol' => 'getEmployeePaysSymbol',
        'employee_percent_deduction_type' => 'getEmployeePercentDeductionType',
        'employee_cap' => 'getEmployeeCap',
        'employee_cap_type' => 'getEmployeeCapType',
        'employee_annual_max' => 'getEmployeeAnnualMax',
        'employee_monthly_max' => 'getEmployeeMonthlyMax',
        'company_pays' => 'getCompanyPays',
        'company_pays_symbol' => 'getCompanyPaysSymbol',
        'company_percent_deduction_type' => 'getCompanyPercentDeductionType',
        'company_cap' => 'getCompanyCap',
        'company_annual_max' => 'getCompanyAnnualMax',
        'currency_code' => 'getCurrencyCode',
        'cost_frequency' => 'getCostFrequency',
        'plan_ended' => 'getPlanEnded',
        'update_date' => 'getUpdateDate',
        'update_user_id' => 'getUpdateUserId',
        'deduction_start_date' => 'getDeductionStartDate',
        'deduction_end_date' => 'getDeductionEndDate',
        'frequency_at_effective_date' => 'getFrequencyAtEffectiveDate',
        'coverage_description' => 'getCoverageDescription',
        'benefit_employee_window_submission_id' => 'getBenefitEmployeeWindowSubmissionId',
        'coverage_amount_wrapper' => 'getCoverageAmountWrapper',
        'created_at_ymdt' => 'getCreatedAtYmdt',
        'ended_at_ymdt' => 'getEndedAtYmdt',
        'employee_new_benefit_id' => 'getEmployeeNewBenefitId',
        'employee_benefit_history_item_id' => 'getEmployeeBenefitHistoryItemId',
        'use_auto_termination' => 'getUseAutoTermination'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('field_id', $data ?? [], null);
        $this->setIfExists('benefit_plan_id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('benefit_group_id', $data ?? [], null);
        $this->setIfExists('eligibility_date', $data ?? [], null);
        $this->setIfExists('use_auto_eligibility', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('benefit_plan_coverage_id', $data ?? [], null);
        $this->setIfExists('eligible', $data ?? [], null);
        $this->setIfExists('enrolled_date', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
        $this->setIfExists('end_ymd', $data ?? [], null);
        $this->setIfExists('employee_pays', $data ?? [], null);
        $this->setIfExists('employee_pays_symbol', $data ?? [], null);
        $this->setIfExists('employee_percent_deduction_type', $data ?? [], null);
        $this->setIfExists('employee_cap', $data ?? [], null);
        $this->setIfExists('employee_cap_type', $data ?? [], null);
        $this->setIfExists('employee_annual_max', $data ?? [], null);
        $this->setIfExists('employee_monthly_max', $data ?? [], null);
        $this->setIfExists('company_pays', $data ?? [], null);
        $this->setIfExists('company_pays_symbol', $data ?? [], null);
        $this->setIfExists('company_percent_deduction_type', $data ?? [], null);
        $this->setIfExists('company_cap', $data ?? [], null);
        $this->setIfExists('company_annual_max', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('cost_frequency', $data ?? [], null);
        $this->setIfExists('plan_ended', $data ?? [], null);
        $this->setIfExists('update_date', $data ?? [], null);
        $this->setIfExists('update_user_id', $data ?? [], null);
        $this->setIfExists('deduction_start_date', $data ?? [], null);
        $this->setIfExists('deduction_end_date', $data ?? [], null);
        $this->setIfExists('frequency_at_effective_date', $data ?? [], null);
        $this->setIfExists('coverage_description', $data ?? [], null);
        $this->setIfExists('benefit_employee_window_submission_id', $data ?? [], null);
        $this->setIfExists('coverage_amount_wrapper', $data ?? [], null);
        $this->setIfExists('created_at_ymdt', $data ?? [], null);
        $this->setIfExists('ended_at_ymdt', $data ?? [], null);
        $this->setIfExists('employee_new_benefit_id', $data ?? [], null);
        $this->setIfExists('employee_benefit_history_item_id', $data ?? [], null);
        $this->setIfExists('use_auto_termination', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique identifier for the employee benefit
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets field_id
     *
     * @return int|null
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param int|null $field_id Field identifier
     *
     * @return self
     */
    public function setFieldId($field_id)
    {
        if (is_null($field_id)) {
            throw new \InvalidArgumentException('non-nullable field_id cannot be null');
        }
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets benefit_plan_id
     *
     * @return int|null
     */
    public function getBenefitPlanId()
    {
        return $this->container['benefit_plan_id'];
    }

    /**
     * Sets benefit_plan_id
     *
     * @param int|null $benefit_plan_id Identifier for the benefit plan
     *
     * @return self
     */
    public function setBenefitPlanId($benefit_plan_id)
    {
        if (is_null($benefit_plan_id)) {
            throw new \InvalidArgumentException('non-nullable benefit_plan_id cannot be null');
        }
        $this->container['benefit_plan_id'] = $benefit_plan_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Identifier for the employee
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets benefit_group_id
     *
     * @return int|null
     */
    public function getBenefitGroupId()
    {
        return $this->container['benefit_group_id'];
    }

    /**
     * Sets benefit_group_id
     *
     * @param int|null $benefit_group_id Identifier for the benefit group
     *
     * @return self
     */
    public function setBenefitGroupId($benefit_group_id)
    {
        if (is_null($benefit_group_id)) {
            throw new \InvalidArgumentException('non-nullable benefit_group_id cannot be null');
        }
        $this->container['benefit_group_id'] = $benefit_group_id;

        return $this;
    }

    /**
     * Gets eligibility_date
     *
     * @return \DateTime|null
     */
    public function getEligibilityDate()
    {
        return $this->container['eligibility_date'];
    }

    /**
     * Sets eligibility_date
     *
     * @param \DateTime|null $eligibility_date Date when the employee is eligible for the benefit
     *
     * @return self
     */
    public function setEligibilityDate($eligibility_date)
    {
        if (is_null($eligibility_date)) {
            throw new \InvalidArgumentException('non-nullable eligibility_date cannot be null');
        }
        $this->container['eligibility_date'] = $eligibility_date;

        return $this;
    }

    /**
     * Gets use_auto_eligibility
     *
     * @return string|null
     */
    public function getUseAutoEligibility()
    {
        return $this->container['use_auto_eligibility'];
    }

    /**
     * Sets use_auto_eligibility
     *
     * @param string|null $use_auto_eligibility Whether to use auto eligibility
     *
     * @return self
     */
    public function setUseAutoEligibility($use_auto_eligibility)
    {
        if (is_null($use_auto_eligibility)) {
            throw new \InvalidArgumentException('non-nullable use_auto_eligibility cannot be null');
        }
        $this->container['use_auto_eligibility'] = $use_auto_eligibility;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Current status of the benefit
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets benefit_plan_coverage_id
     *
     * @return int|null
     */
    public function getBenefitPlanCoverageId()
    {
        return $this->container['benefit_plan_coverage_id'];
    }

    /**
     * Sets benefit_plan_coverage_id
     *
     * @param int|null $benefit_plan_coverage_id Identifier for the benefit plan coverage
     *
     * @return self
     */
    public function setBenefitPlanCoverageId($benefit_plan_coverage_id)
    {
        if (is_null($benefit_plan_coverage_id)) {
            throw new \InvalidArgumentException('non-nullable benefit_plan_coverage_id cannot be null');
        }
        $this->container['benefit_plan_coverage_id'] = $benefit_plan_coverage_id;

        return $this;
    }

    /**
     * Gets eligible
     *
     * @return string|null
     */
    public function getEligible()
    {
        return $this->container['eligible'];
    }

    /**
     * Sets eligible
     *
     * @param string|null $eligible Whether the employee is eligible for the benefit
     *
     * @return self
     */
    public function setEligible($eligible)
    {
        if (is_null($eligible)) {
            throw new \InvalidArgumentException('non-nullable eligible cannot be null');
        }
        $this->container['eligible'] = $eligible;

        return $this;
    }

    /**
     * Gets enrolled_date
     *
     * @return \DateTime|null
     */
    public function getEnrolledDate()
    {
        return $this->container['enrolled_date'];
    }

    /**
     * Sets enrolled_date
     *
     * @param \DateTime|null $enrolled_date Date when the employee was enrolled in the benefit
     *
     * @return self
     */
    public function setEnrolledDate($enrolled_date)
    {
        if (is_null($enrolled_date)) {
            throw new \InvalidArgumentException('non-nullable enrolled_date cannot be null');
        }
        $this->container['enrolled_date'] = $enrolled_date;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime|null $effective_date Date when the benefit becomes effective
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        if (is_null($effective_date)) {
            throw new \InvalidArgumentException('non-nullable effective_date cannot be null');
        }
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets end_ymd
     *
     * @return \DateTime|null
     */
    public function getEndYmd()
    {
        return $this->container['end_ymd'];
    }

    /**
     * Sets end_ymd
     *
     * @param \DateTime|null $end_ymd End date of the benefit in Y-m-d format
     *
     * @return self
     */
    public function setEndYmd($end_ymd)
    {
        if (is_null($end_ymd)) {
            throw new \InvalidArgumentException('non-nullable end_ymd cannot be null');
        }
        $this->container['end_ymd'] = $end_ymd;

        return $this;
    }

    /**
     * Gets employee_pays
     *
     * @return float|null
     */
    public function getEmployeePays()
    {
        return $this->container['employee_pays'];
    }

    /**
     * Sets employee_pays
     *
     * @param float|null $employee_pays Amount the employee pays
     *
     * @return self
     */
    public function setEmployeePays($employee_pays)
    {
        if (is_null($employee_pays)) {
            throw new \InvalidArgumentException('non-nullable employee_pays cannot be null');
        }
        $this->container['employee_pays'] = $employee_pays;

        return $this;
    }

    /**
     * Gets employee_pays_symbol
     *
     * @return string|null
     */
    public function getEmployeePaysSymbol()
    {
        return $this->container['employee_pays_symbol'];
    }

    /**
     * Sets employee_pays_symbol
     *
     * @param string|null $employee_pays_symbol Symbol for employee payment (percentage or flat amount)
     *
     * @return self
     */
    public function setEmployeePaysSymbol($employee_pays_symbol)
    {
        if (is_null($employee_pays_symbol)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_symbol cannot be null');
        }
        $this->container['employee_pays_symbol'] = $employee_pays_symbol;

        return $this;
    }

    /**
     * Gets employee_percent_deduction_type
     *
     * @return string|null
     */
    public function getEmployeePercentDeductionType()
    {
        return $this->container['employee_percent_deduction_type'];
    }

    /**
     * Sets employee_percent_deduction_type
     *
     * @param string|null $employee_percent_deduction_type Type of percentage deduction for employee
     *
     * @return self
     */
    public function setEmployeePercentDeductionType($employee_percent_deduction_type)
    {
        if (is_null($employee_percent_deduction_type)) {
            throw new \InvalidArgumentException('non-nullable employee_percent_deduction_type cannot be null');
        }
        $this->container['employee_percent_deduction_type'] = $employee_percent_deduction_type;

        return $this;
    }

    /**
     * Gets employee_cap
     *
     * @return float|null
     */
    public function getEmployeeCap()
    {
        return $this->container['employee_cap'];
    }

    /**
     * Sets employee_cap
     *
     * @param float|null $employee_cap Maximum cap on employee payment
     *
     * @return self
     */
    public function setEmployeeCap($employee_cap)
    {
        if (is_null($employee_cap)) {
            throw new \InvalidArgumentException('non-nullable employee_cap cannot be null');
        }
        $this->container['employee_cap'] = $employee_cap;

        return $this;
    }

    /**
     * Gets employee_cap_type
     *
     * @return string|null
     */
    public function getEmployeeCapType()
    {
        return $this->container['employee_cap_type'];
    }

    /**
     * Sets employee_cap_type
     *
     * @param string|null $employee_cap_type Type of cap on employee payment
     *
     * @return self
     */
    public function setEmployeeCapType($employee_cap_type)
    {
        if (is_null($employee_cap_type)) {
            throw new \InvalidArgumentException('non-nullable employee_cap_type cannot be null');
        }
        $this->container['employee_cap_type'] = $employee_cap_type;

        return $this;
    }

    /**
     * Gets employee_annual_max
     *
     * @return float|null
     */
    public function getEmployeeAnnualMax()
    {
        return $this->container['employee_annual_max'];
    }

    /**
     * Sets employee_annual_max
     *
     * @param float|null $employee_annual_max Annual maximum for employee payment
     *
     * @return self
     */
    public function setEmployeeAnnualMax($employee_annual_max)
    {
        if (is_null($employee_annual_max)) {
            throw new \InvalidArgumentException('non-nullable employee_annual_max cannot be null');
        }
        $this->container['employee_annual_max'] = $employee_annual_max;

        return $this;
    }

    /**
     * Gets employee_monthly_max
     *
     * @return float|null
     */
    public function getEmployeeMonthlyMax()
    {
        return $this->container['employee_monthly_max'];
    }

    /**
     * Sets employee_monthly_max
     *
     * @param float|null $employee_monthly_max Monthly maximum for employee payment
     *
     * @return self
     */
    public function setEmployeeMonthlyMax($employee_monthly_max)
    {
        if (is_null($employee_monthly_max)) {
            throw new \InvalidArgumentException('non-nullable employee_monthly_max cannot be null');
        }
        $this->container['employee_monthly_max'] = $employee_monthly_max;

        return $this;
    }

    /**
     * Gets company_pays
     *
     * @return float|null
     */
    public function getCompanyPays()
    {
        return $this->container['company_pays'];
    }

    /**
     * Sets company_pays
     *
     * @param float|null $company_pays Amount the company pays
     *
     * @return self
     */
    public function setCompanyPays($company_pays)
    {
        if (is_null($company_pays)) {
            throw new \InvalidArgumentException('non-nullable company_pays cannot be null');
        }
        $this->container['company_pays'] = $company_pays;

        return $this;
    }

    /**
     * Gets company_pays_symbol
     *
     * @return string|null
     */
    public function getCompanyPaysSymbol()
    {
        return $this->container['company_pays_symbol'];
    }

    /**
     * Sets company_pays_symbol
     *
     * @param string|null $company_pays_symbol Symbol for company payment (percentage or flat amount)
     *
     * @return self
     */
    public function setCompanyPaysSymbol($company_pays_symbol)
    {
        if (is_null($company_pays_symbol)) {
            throw new \InvalidArgumentException('non-nullable company_pays_symbol cannot be null');
        }
        $this->container['company_pays_symbol'] = $company_pays_symbol;

        return $this;
    }

    /**
     * Gets company_percent_deduction_type
     *
     * @return string|null
     */
    public function getCompanyPercentDeductionType()
    {
        return $this->container['company_percent_deduction_type'];
    }

    /**
     * Sets company_percent_deduction_type
     *
     * @param string|null $company_percent_deduction_type Type of percentage deduction for company
     *
     * @return self
     */
    public function setCompanyPercentDeductionType($company_percent_deduction_type)
    {
        if (is_null($company_percent_deduction_type)) {
            throw new \InvalidArgumentException('non-nullable company_percent_deduction_type cannot be null');
        }
        $this->container['company_percent_deduction_type'] = $company_percent_deduction_type;

        return $this;
    }

    /**
     * Gets company_cap
     *
     * @return float|null
     */
    public function getCompanyCap()
    {
        return $this->container['company_cap'];
    }

    /**
     * Sets company_cap
     *
     * @param float|null $company_cap Maximum cap on company payment
     *
     * @return self
     */
    public function setCompanyCap($company_cap)
    {
        if (is_null($company_cap)) {
            throw new \InvalidArgumentException('non-nullable company_cap cannot be null');
        }
        $this->container['company_cap'] = $company_cap;

        return $this;
    }

    /**
     * Gets company_annual_max
     *
     * @return float|null
     */
    public function getCompanyAnnualMax()
    {
        return $this->container['company_annual_max'];
    }

    /**
     * Sets company_annual_max
     *
     * @param float|null $company_annual_max Annual maximum for company payment
     *
     * @return self
     */
    public function setCompanyAnnualMax($company_annual_max)
    {
        if (is_null($company_annual_max)) {
            throw new \InvalidArgumentException('non-nullable company_annual_max cannot be null');
        }
        $this->container['company_annual_max'] = $company_annual_max;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Currency code for monetary values
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets cost_frequency
     *
     * @return string|null
     */
    public function getCostFrequency()
    {
        return $this->container['cost_frequency'];
    }

    /**
     * Sets cost_frequency
     *
     * @param string|null $cost_frequency Frequency of cost occurrence
     *
     * @return self
     */
    public function setCostFrequency($cost_frequency)
    {
        if (is_null($cost_frequency)) {
            throw new \InvalidArgumentException('non-nullable cost_frequency cannot be null');
        }
        $this->container['cost_frequency'] = $cost_frequency;

        return $this;
    }

    /**
     * Gets plan_ended
     *
     * @return bool|null
     */
    public function getPlanEnded()
    {
        return $this->container['plan_ended'];
    }

    /**
     * Sets plan_ended
     *
     * @param bool|null $plan_ended Whether the plan has ended
     *
     * @return self
     */
    public function setPlanEnded($plan_ended)
    {
        if (is_null($plan_ended)) {
            throw new \InvalidArgumentException('non-nullable plan_ended cannot be null');
        }
        $this->container['plan_ended'] = $plan_ended;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return \DateTime|null
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param \DateTime|null $update_date Date when the record was last updated
     *
     * @return self
     */
    public function setUpdateDate($update_date)
    {
        if (is_null($update_date)) {
            throw new \InvalidArgumentException('non-nullable update_date cannot be null');
        }
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets update_user_id
     *
     * @return int|null
     */
    public function getUpdateUserId()
    {
        return $this->container['update_user_id'];
    }

    /**
     * Sets update_user_id
     *
     * @param int|null $update_user_id Identifier of the user who updated the record
     *
     * @return self
     */
    public function setUpdateUserId($update_user_id)
    {
        if (is_null($update_user_id)) {
            throw new \InvalidArgumentException('non-nullable update_user_id cannot be null');
        }
        $this->container['update_user_id'] = $update_user_id;

        return $this;
    }

    /**
     * Gets deduction_start_date
     *
     * @return \DateTime|null
     */
    public function getDeductionStartDate()
    {
        return $this->container['deduction_start_date'];
    }

    /**
     * Sets deduction_start_date
     *
     * @param \DateTime|null $deduction_start_date Date when deductions should start
     *
     * @return self
     */
    public function setDeductionStartDate($deduction_start_date)
    {
        if (is_null($deduction_start_date)) {
            throw new \InvalidArgumentException('non-nullable deduction_start_date cannot be null');
        }
        $this->container['deduction_start_date'] = $deduction_start_date;

        return $this;
    }

    /**
     * Gets deduction_end_date
     *
     * @return \DateTime|null
     */
    public function getDeductionEndDate()
    {
        return $this->container['deduction_end_date'];
    }

    /**
     * Sets deduction_end_date
     *
     * @param \DateTime|null $deduction_end_date Date when deductions should end
     *
     * @return self
     */
    public function setDeductionEndDate($deduction_end_date)
    {
        if (is_null($deduction_end_date)) {
            throw new \InvalidArgumentException('non-nullable deduction_end_date cannot be null');
        }
        $this->container['deduction_end_date'] = $deduction_end_date;

        return $this;
    }

    /**
     * Gets frequency_at_effective_date
     *
     * @return int|null
     */
    public function getFrequencyAtEffectiveDate()
    {
        return $this->container['frequency_at_effective_date'];
    }

    /**
     * Sets frequency_at_effective_date
     *
     * @param int|null $frequency_at_effective_date Frequency at the time when the benefit became effective
     *
     * @return self
     */
    public function setFrequencyAtEffectiveDate($frequency_at_effective_date)
    {
        if (is_null($frequency_at_effective_date)) {
            throw new \InvalidArgumentException('non-nullable frequency_at_effective_date cannot be null');
        }
        $this->container['frequency_at_effective_date'] = $frequency_at_effective_date;

        return $this;
    }

    /**
     * Gets coverage_description
     *
     * @return string|null
     */
    public function getCoverageDescription()
    {
        return $this->container['coverage_description'];
    }

    /**
     * Sets coverage_description
     *
     * @param string|null $coverage_description Description of the coverage
     *
     * @return self
     */
    public function setCoverageDescription($coverage_description)
    {
        if (is_null($coverage_description)) {
            throw new \InvalidArgumentException('non-nullable coverage_description cannot be null');
        }
        $this->container['coverage_description'] = $coverage_description;

        return $this;
    }

    /**
     * Gets benefit_employee_window_submission_id
     *
     * @return string|null
     */
    public function getBenefitEmployeeWindowSubmissionId()
    {
        return $this->container['benefit_employee_window_submission_id'];
    }

    /**
     * Sets benefit_employee_window_submission_id
     *
     * @param string|null $benefit_employee_window_submission_id Identifier for benefit window submission
     *
     * @return self
     */
    public function setBenefitEmployeeWindowSubmissionId($benefit_employee_window_submission_id)
    {
        if (is_null($benefit_employee_window_submission_id)) {
            throw new \InvalidArgumentException('non-nullable benefit_employee_window_submission_id cannot be null');
        }
        $this->container['benefit_employee_window_submission_id'] = $benefit_employee_window_submission_id;

        return $this;
    }

    /**
     * Gets coverage_amount_wrapper
     *
     * @return object|null
     */
    public function getCoverageAmountWrapper()
    {
        return $this->container['coverage_amount_wrapper'];
    }

    /**
     * Sets coverage_amount_wrapper
     *
     * @param object|null $coverage_amount_wrapper Wrapper for coverage amounts
     *
     * @return self
     */
    public function setCoverageAmountWrapper($coverage_amount_wrapper)
    {
        if (is_null($coverage_amount_wrapper)) {
            array_push($this->openAPINullablesSetToNull, 'coverage_amount_wrapper');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('coverage_amount_wrapper', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['coverage_amount_wrapper'] = $coverage_amount_wrapper;

        return $this;
    }

    /**
     * Gets created_at_ymdt
     *
     * @return \DateTime|null
     */
    public function getCreatedAtYmdt()
    {
        return $this->container['created_at_ymdt'];
    }

    /**
     * Sets created_at_ymdt
     *
     * @param \DateTime|null $created_at_ymdt Date and time when the benefit was created
     *
     * @return self
     */
    public function setCreatedAtYmdt($created_at_ymdt)
    {
        if (is_null($created_at_ymdt)) {
            throw new \InvalidArgumentException('non-nullable created_at_ymdt cannot be null');
        }
        $this->container['created_at_ymdt'] = $created_at_ymdt;

        return $this;
    }

    /**
     * Gets ended_at_ymdt
     *
     * @return \DateTime|null
     */
    public function getEndedAtYmdt()
    {
        return $this->container['ended_at_ymdt'];
    }

    /**
     * Sets ended_at_ymdt
     *
     * @param \DateTime|null $ended_at_ymdt Date and time when the benefit ended
     *
     * @return self
     */
    public function setEndedAtYmdt($ended_at_ymdt)
    {
        if (is_null($ended_at_ymdt)) {
            throw new \InvalidArgumentException('non-nullable ended_at_ymdt cannot be null');
        }
        $this->container['ended_at_ymdt'] = $ended_at_ymdt;

        return $this;
    }

    /**
     * Gets employee_new_benefit_id
     *
     * @return string|null
     */
    public function getEmployeeNewBenefitId()
    {
        return $this->container['employee_new_benefit_id'];
    }

    /**
     * Sets employee_new_benefit_id
     *
     * @param string|null $employee_new_benefit_id Identifier for new benefit
     *
     * @return self
     */
    public function setEmployeeNewBenefitId($employee_new_benefit_id)
    {
        if (is_null($employee_new_benefit_id)) {
            throw new \InvalidArgumentException('non-nullable employee_new_benefit_id cannot be null');
        }
        $this->container['employee_new_benefit_id'] = $employee_new_benefit_id;

        return $this;
    }

    /**
     * Gets employee_benefit_history_item_id
     *
     * @return string|null
     */
    public function getEmployeeBenefitHistoryItemId()
    {
        return $this->container['employee_benefit_history_item_id'];
    }

    /**
     * Sets employee_benefit_history_item_id
     *
     * @param string|null $employee_benefit_history_item_id Identifier for benefit history item
     *
     * @return self
     */
    public function setEmployeeBenefitHistoryItemId($employee_benefit_history_item_id)
    {
        if (is_null($employee_benefit_history_item_id)) {
            throw new \InvalidArgumentException('non-nullable employee_benefit_history_item_id cannot be null');
        }
        $this->container['employee_benefit_history_item_id'] = $employee_benefit_history_item_id;

        return $this;
    }

    /**
     * Gets use_auto_termination
     *
     * @return string|null
     */
    public function getUseAutoTermination()
    {
        return $this->container['use_auto_termination'];
    }

    /**
     * Sets use_auto_termination
     *
     * @param string|null $use_auto_termination Whether to use auto termination
     *
     * @return self
     */
    public function setUseAutoTermination($use_auto_termination)
    {
        if (is_null($use_auto_termination)) {
            throw new \InvalidArgumentException('non-nullable use_auto_termination cannot be null');
        }
        $this->container['use_auto_termination'] = $use_auto_termination;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


