<?php
/**
 * HoneyPostCommentDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * HoneyPostCommentDataObject Class Doc Comment
 *
 * @category Class
 * @description Comment information
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HoneyPostCommentDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Honey-PostCommentDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'post_id' => 'int',
        'author_employee_id' => 'string',
        'author_member_id' => 'int',
        'author_user_id' => 'int',
        'body' => 'string',
        'created_at' => '\DateTime',
        'deleted' => 'bool',
        'like_count' => 'int',
        'post' => '\MySdk\Model\HoneyPostDataObject',
        'files' => '\MySdk\Model\HoneyPostCommentDataObjectFilesInner[]',
        'liked_at' => '\DateTime',
        'editable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'post_id' => 'int32',
        'author_employee_id' => 'string',
        'author_member_id' => 'int32',
        'author_user_id' => 'int32',
        'body' => 'string',
        'created_at' => 'date-time',
        'deleted' => 'boolean',
        'like_count' => 'int32',
        'post' => null,
        'files' => null,
        'liked_at' => 'date-time',
        'editable' => 'boolean'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'post_id' => false,
        'author_employee_id' => false,
        'author_member_id' => false,
        'author_user_id' => false,
        'body' => false,
        'created_at' => false,
        'deleted' => false,
        'like_count' => false,
        'post' => true,
        'files' => false,
        'liked_at' => true,
        'editable' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'post_id' => 'postId',
        'author_employee_id' => 'authorEmployeeId',
        'author_member_id' => 'authorMemberId',
        'author_user_id' => 'authorUserId',
        'body' => 'body',
        'created_at' => 'createdAt',
        'deleted' => 'deleted',
        'like_count' => 'likeCount',
        'post' => 'post',
        'files' => 'files',
        'liked_at' => 'likedAt',
        'editable' => 'editable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'post_id' => 'setPostId',
        'author_employee_id' => 'setAuthorEmployeeId',
        'author_member_id' => 'setAuthorMemberId',
        'author_user_id' => 'setAuthorUserId',
        'body' => 'setBody',
        'created_at' => 'setCreatedAt',
        'deleted' => 'setDeleted',
        'like_count' => 'setLikeCount',
        'post' => 'setPost',
        'files' => 'setFiles',
        'liked_at' => 'setLikedAt',
        'editable' => 'setEditable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'post_id' => 'getPostId',
        'author_employee_id' => 'getAuthorEmployeeId',
        'author_member_id' => 'getAuthorMemberId',
        'author_user_id' => 'getAuthorUserId',
        'body' => 'getBody',
        'created_at' => 'getCreatedAt',
        'deleted' => 'getDeleted',
        'like_count' => 'getLikeCount',
        'post' => 'getPost',
        'files' => 'getFiles',
        'liked_at' => 'getLikedAt',
        'editable' => 'getEditable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('post_id', $data ?? [], null);
        $this->setIfExists('author_employee_id', $data ?? [], null);
        $this->setIfExists('author_member_id', $data ?? [], null);
        $this->setIfExists('author_user_id', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('like_count', $data ?? [], null);
        $this->setIfExists('post', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('liked_at', $data ?? [], null);
        $this->setIfExists('editable', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Comment ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets post_id
     *
     * @return int|null
     */
    public function getPostId()
    {
        return $this->container['post_id'];
    }

    /**
     * Sets post_id
     *
     * @param int|null $post_id ID of the post
     *
     * @return self
     */
    public function setPostId($post_id)
    {
        if (is_null($post_id)) {
            throw new \InvalidArgumentException('non-nullable post_id cannot be null');
        }
        $this->container['post_id'] = $post_id;

        return $this;
    }

    /**
     * Gets author_employee_id
     *
     * @return string|null
     */
    public function getAuthorEmployeeId()
    {
        return $this->container['author_employee_id'];
    }

    /**
     * Sets author_employee_id
     *
     * @param string|null $author_employee_id Bamboo employee ID of the author
     *
     * @return self
     */
    public function setAuthorEmployeeId($author_employee_id)
    {
        if (is_null($author_employee_id)) {
            throw new \InvalidArgumentException('non-nullable author_employee_id cannot be null');
        }
        $this->container['author_employee_id'] = $author_employee_id;

        return $this;
    }

    /**
     * Gets author_member_id
     *
     * @return int|null
     */
    public function getAuthorMemberId()
    {
        return $this->container['author_member_id'];
    }

    /**
     * Sets author_member_id
     *
     * @param int|null $author_member_id Member ID of the author
     *
     * @return self
     */
    public function setAuthorMemberId($author_member_id)
    {
        if (is_null($author_member_id)) {
            throw new \InvalidArgumentException('non-nullable author_member_id cannot be null');
        }
        $this->container['author_member_id'] = $author_member_id;

        return $this;
    }

    /**
     * Gets author_user_id
     *
     * @return int|null
     */
    public function getAuthorUserId()
    {
        return $this->container['author_user_id'];
    }

    /**
     * Sets author_user_id
     *
     * @param int|null $author_user_id User ID of the author
     *
     * @return self
     */
    public function setAuthorUserId($author_user_id)
    {
        if (is_null($author_user_id)) {
            throw new \InvalidArgumentException('non-nullable author_user_id cannot be null');
        }
        $this->container['author_user_id'] = $author_user_id;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body Comment content
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Creation timestamp
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted Whether the comment is deleted
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets like_count
     *
     * @return int|null
     */
    public function getLikeCount()
    {
        return $this->container['like_count'];
    }

    /**
     * Sets like_count
     *
     * @param int|null $like_count Number of likes
     *
     * @return self
     */
    public function setLikeCount($like_count)
    {
        if (is_null($like_count)) {
            throw new \InvalidArgumentException('non-nullable like_count cannot be null');
        }
        $this->container['like_count'] = $like_count;

        return $this;
    }

    /**
     * Gets post
     *
     * @return \MySdk\Model\HoneyPostDataObject|null
     */
    public function getPost()
    {
        return $this->container['post'];
    }

    /**
     * Sets post
     *
     * @param \MySdk\Model\HoneyPostDataObject|null $post post
     *
     * @return self
     */
    public function setPost($post)
    {
        if (is_null($post)) {
            array_push($this->openAPINullablesSetToNull, 'post');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('post', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['post'] = $post;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \MySdk\Model\HoneyPostCommentDataObjectFilesInner[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \MySdk\Model\HoneyPostCommentDataObjectFilesInner[]|null $files Files attached to the comment
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets liked_at
     *
     * @return \DateTime|null
     */
    public function getLikedAt()
    {
        return $this->container['liked_at'];
    }

    /**
     * Sets liked_at
     *
     * @param \DateTime|null $liked_at When the comment was liked
     *
     * @return self
     */
    public function setLikedAt($liked_at)
    {
        if (is_null($liked_at)) {
            array_push($this->openAPINullablesSetToNull, 'liked_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('liked_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['liked_at'] = $liked_at;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool|null
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool|null $editable Whether the comment can be edited
     *
     * @return self
     */
    public function setEditable($editable)
    {
        if (is_null($editable)) {
            throw new \InvalidArgumentException('non-nullable editable cannot be null');
        }
        $this->container['editable'] = $editable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


