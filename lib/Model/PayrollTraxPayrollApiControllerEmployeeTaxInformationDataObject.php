<?php
/**
 * PayrollTraxPayrollApiControllerEmployeeTaxInformationDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollTraxPayrollApiControllerEmployeeTaxInformationDataObject Class Doc Comment
 *
 * @category Class
 * @description Employee tax information data
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollTraxPayrollApiControllerEmployeeTaxInformationDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payroll.TraxPayrollApiController.EmployeeTaxInformationDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'employee_number' => 'string',
        'filing_status' => 'string',
        'exemptions' => 'int',
        'additional_withholding_type' => 'string',
        'additional_withholding_amount' => 'float',
        'federal_tax_exempt' => 'bool',
        'head_of_household' => 'bool',
        'state_work_in' => 'string',
        'state_filing_status_code' => 'string',
        'state_exemption' => 'int',
        'state_withholding_additional_type' => 'string',
        'state_withholding_additional' => 'float',
        'state_is_exempt' => 'bool',
        'state_is_ui_exempt' => 'bool',
        'state_ui_work_in' => 'string',
        'tax_employee_type_id' => 'int',
        'w2_status' => 'string',
        'w2_status_date' => '\DateTime',
        'work_address_type' => 'string',
        'branch_id_work' => 'int',
        'state_ui_type' => 'string',
        'state_withholding_type' => 'string',
        'federal_tax_document_type' => 'string',
        'two_jobs' => 'bool',
        'other_income' => 'string',
        'dependents_amount' => 'string',
        'deductions' => 'string',
        'federal_fica_is_exempt' => 'bool',
        'federal_futa_is_exempt' => 'bool',
        'federal_er_social_security_is_exempt' => 'bool',
        'employee_tax_state_options' => '\MySdk\Model\PayrollTraxPayrollApiControllerEmployeeTaxInformationDataObjectEmployeeTaxStateOptionsInner[]',
        'employee_tax_state_ui_options' => '\MySdk\Model\PayrollTraxPayrollApiControllerEmployeeTaxInformationDataObjectEmployeeTaxStateUiOptionsInner[]',
        'employee_home_state' => 'string',
        'pay_group_id' => 'int',
        'pay_schedule_id' => 'int',
        'state_for_withholding' => 'string',
        'state_withholding_form_version_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'employee_number' => null,
        'filing_status' => null,
        'exemptions' => null,
        'additional_withholding_type' => null,
        'additional_withholding_amount' => 'float',
        'federal_tax_exempt' => null,
        'head_of_household' => null,
        'state_work_in' => null,
        'state_filing_status_code' => null,
        'state_exemption' => null,
        'state_withholding_additional_type' => null,
        'state_withholding_additional' => 'float',
        'state_is_exempt' => null,
        'state_is_ui_exempt' => null,
        'state_ui_work_in' => null,
        'tax_employee_type_id' => null,
        'w2_status' => null,
        'w2_status_date' => 'date',
        'work_address_type' => null,
        'branch_id_work' => null,
        'state_ui_type' => null,
        'state_withholding_type' => null,
        'federal_tax_document_type' => null,
        'two_jobs' => null,
        'other_income' => null,
        'dependents_amount' => null,
        'deductions' => null,
        'federal_fica_is_exempt' => null,
        'federal_futa_is_exempt' => null,
        'federal_er_social_security_is_exempt' => null,
        'employee_tax_state_options' => null,
        'employee_tax_state_ui_options' => null,
        'employee_home_state' => null,
        'pay_group_id' => null,
        'pay_schedule_id' => null,
        'state_for_withholding' => null,
        'state_withholding_form_version_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'employee_number' => false,
        'filing_status' => true,
        'exemptions' => true,
        'additional_withholding_type' => true,
        'additional_withholding_amount' => true,
        'federal_tax_exempt' => false,
        'head_of_household' => false,
        'state_work_in' => false,
        'state_filing_status_code' => false,
        'state_exemption' => false,
        'state_withholding_additional_type' => false,
        'state_withholding_additional' => false,
        'state_is_exempt' => false,
        'state_is_ui_exempt' => false,
        'state_ui_work_in' => false,
        'tax_employee_type_id' => false,
        'w2_status' => false,
        'w2_status_date' => false,
        'work_address_type' => false,
        'branch_id_work' => false,
        'state_ui_type' => false,
        'state_withholding_type' => false,
        'federal_tax_document_type' => false,
        'two_jobs' => false,
        'other_income' => false,
        'dependents_amount' => false,
        'deductions' => false,
        'federal_fica_is_exempt' => false,
        'federal_futa_is_exempt' => false,
        'federal_er_social_security_is_exempt' => false,
        'employee_tax_state_options' => false,
        'employee_tax_state_ui_options' => false,
        'employee_home_state' => false,
        'pay_group_id' => false,
        'pay_schedule_id' => false,
        'state_for_withholding' => false,
        'state_withholding_form_version_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'employee_number' => 'employeeNumber',
        'filing_status' => 'filingStatus',
        'exemptions' => 'exemptions',
        'additional_withholding_type' => 'additionalWithholdingType',
        'additional_withholding_amount' => 'additionalWithholdingAmount',
        'federal_tax_exempt' => 'federalTaxExempt',
        'head_of_household' => 'headOfHousehold',
        'state_work_in' => 'stateWorkIn',
        'state_filing_status_code' => 'stateFilingStatusCode',
        'state_exemption' => 'stateExemption',
        'state_withholding_additional_type' => 'stateWithholdingAdditionalType',
        'state_withholding_additional' => 'stateWithholdingAdditional',
        'state_is_exempt' => 'stateIsExempt',
        'state_is_ui_exempt' => 'stateIsUiExempt',
        'state_ui_work_in' => 'stateUiWorkIn',
        'tax_employee_type_id' => 'taxEmployeeTypeId',
        'w2_status' => 'w2Status',
        'w2_status_date' => 'w2StatusDate',
        'work_address_type' => 'workAddressType',
        'branch_id_work' => 'branchIdWork',
        'state_ui_type' => 'stateUiType',
        'state_withholding_type' => 'stateWithholdingType',
        'federal_tax_document_type' => 'federalTaxDocumentType',
        'two_jobs' => 'twoJobs',
        'other_income' => 'otherIncome',
        'dependents_amount' => 'dependentsAmount',
        'deductions' => 'deductions',
        'federal_fica_is_exempt' => 'federalFicaIsExempt',
        'federal_futa_is_exempt' => 'federalFutaIsExempt',
        'federal_er_social_security_is_exempt' => 'federalErSocialSecurityIsExempt',
        'employee_tax_state_options' => 'employeeTaxStateOptions',
        'employee_tax_state_ui_options' => 'employeeTaxStateUiOptions',
        'employee_home_state' => 'employeeHomeState',
        'pay_group_id' => 'payGroupId',
        'pay_schedule_id' => 'payScheduleId',
        'state_for_withholding' => 'stateForWithholding',
        'state_withholding_form_version_id' => 'stateWithholdingFormVersionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'employee_number' => 'setEmployeeNumber',
        'filing_status' => 'setFilingStatus',
        'exemptions' => 'setExemptions',
        'additional_withholding_type' => 'setAdditionalWithholdingType',
        'additional_withholding_amount' => 'setAdditionalWithholdingAmount',
        'federal_tax_exempt' => 'setFederalTaxExempt',
        'head_of_household' => 'setHeadOfHousehold',
        'state_work_in' => 'setStateWorkIn',
        'state_filing_status_code' => 'setStateFilingStatusCode',
        'state_exemption' => 'setStateExemption',
        'state_withholding_additional_type' => 'setStateWithholdingAdditionalType',
        'state_withholding_additional' => 'setStateWithholdingAdditional',
        'state_is_exempt' => 'setStateIsExempt',
        'state_is_ui_exempt' => 'setStateIsUiExempt',
        'state_ui_work_in' => 'setStateUiWorkIn',
        'tax_employee_type_id' => 'setTaxEmployeeTypeId',
        'w2_status' => 'setW2Status',
        'w2_status_date' => 'setW2StatusDate',
        'work_address_type' => 'setWorkAddressType',
        'branch_id_work' => 'setBranchIdWork',
        'state_ui_type' => 'setStateUiType',
        'state_withholding_type' => 'setStateWithholdingType',
        'federal_tax_document_type' => 'setFederalTaxDocumentType',
        'two_jobs' => 'setTwoJobs',
        'other_income' => 'setOtherIncome',
        'dependents_amount' => 'setDependentsAmount',
        'deductions' => 'setDeductions',
        'federal_fica_is_exempt' => 'setFederalFicaIsExempt',
        'federal_futa_is_exempt' => 'setFederalFutaIsExempt',
        'federal_er_social_security_is_exempt' => 'setFederalErSocialSecurityIsExempt',
        'employee_tax_state_options' => 'setEmployeeTaxStateOptions',
        'employee_tax_state_ui_options' => 'setEmployeeTaxStateUiOptions',
        'employee_home_state' => 'setEmployeeHomeState',
        'pay_group_id' => 'setPayGroupId',
        'pay_schedule_id' => 'setPayScheduleId',
        'state_for_withholding' => 'setStateForWithholding',
        'state_withholding_form_version_id' => 'setStateWithholdingFormVersionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'employee_number' => 'getEmployeeNumber',
        'filing_status' => 'getFilingStatus',
        'exemptions' => 'getExemptions',
        'additional_withholding_type' => 'getAdditionalWithholdingType',
        'additional_withholding_amount' => 'getAdditionalWithholdingAmount',
        'federal_tax_exempt' => 'getFederalTaxExempt',
        'head_of_household' => 'getHeadOfHousehold',
        'state_work_in' => 'getStateWorkIn',
        'state_filing_status_code' => 'getStateFilingStatusCode',
        'state_exemption' => 'getStateExemption',
        'state_withholding_additional_type' => 'getStateWithholdingAdditionalType',
        'state_withholding_additional' => 'getStateWithholdingAdditional',
        'state_is_exempt' => 'getStateIsExempt',
        'state_is_ui_exempt' => 'getStateIsUiExempt',
        'state_ui_work_in' => 'getStateUiWorkIn',
        'tax_employee_type_id' => 'getTaxEmployeeTypeId',
        'w2_status' => 'getW2Status',
        'w2_status_date' => 'getW2StatusDate',
        'work_address_type' => 'getWorkAddressType',
        'branch_id_work' => 'getBranchIdWork',
        'state_ui_type' => 'getStateUiType',
        'state_withholding_type' => 'getStateWithholdingType',
        'federal_tax_document_type' => 'getFederalTaxDocumentType',
        'two_jobs' => 'getTwoJobs',
        'other_income' => 'getOtherIncome',
        'dependents_amount' => 'getDependentsAmount',
        'deductions' => 'getDeductions',
        'federal_fica_is_exempt' => 'getFederalFicaIsExempt',
        'federal_futa_is_exempt' => 'getFederalFutaIsExempt',
        'federal_er_social_security_is_exempt' => 'getFederalErSocialSecurityIsExempt',
        'employee_tax_state_options' => 'getEmployeeTaxStateOptions',
        'employee_tax_state_ui_options' => 'getEmployeeTaxStateUiOptions',
        'employee_home_state' => 'getEmployeeHomeState',
        'pay_group_id' => 'getPayGroupId',
        'pay_schedule_id' => 'getPayScheduleId',
        'state_for_withholding' => 'getStateForWithholding',
        'state_withholding_form_version_id' => 'getStateWithholdingFormVersionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_number', $data ?? [], null);
        $this->setIfExists('filing_status', $data ?? [], null);
        $this->setIfExists('exemptions', $data ?? [], null);
        $this->setIfExists('additional_withholding_type', $data ?? [], null);
        $this->setIfExists('additional_withholding_amount', $data ?? [], null);
        $this->setIfExists('federal_tax_exempt', $data ?? [], null);
        $this->setIfExists('head_of_household', $data ?? [], null);
        $this->setIfExists('state_work_in', $data ?? [], null);
        $this->setIfExists('state_filing_status_code', $data ?? [], null);
        $this->setIfExists('state_exemption', $data ?? [], null);
        $this->setIfExists('state_withholding_additional_type', $data ?? [], null);
        $this->setIfExists('state_withholding_additional', $data ?? [], null);
        $this->setIfExists('state_is_exempt', $data ?? [], null);
        $this->setIfExists('state_is_ui_exempt', $data ?? [], null);
        $this->setIfExists('state_ui_work_in', $data ?? [], null);
        $this->setIfExists('tax_employee_type_id', $data ?? [], null);
        $this->setIfExists('w2_status', $data ?? [], null);
        $this->setIfExists('w2_status_date', $data ?? [], null);
        $this->setIfExists('work_address_type', $data ?? [], null);
        $this->setIfExists('branch_id_work', $data ?? [], null);
        $this->setIfExists('state_ui_type', $data ?? [], null);
        $this->setIfExists('state_withholding_type', $data ?? [], null);
        $this->setIfExists('federal_tax_document_type', $data ?? [], null);
        $this->setIfExists('two_jobs', $data ?? [], null);
        $this->setIfExists('other_income', $data ?? [], null);
        $this->setIfExists('dependents_amount', $data ?? [], null);
        $this->setIfExists('deductions', $data ?? [], null);
        $this->setIfExists('federal_fica_is_exempt', $data ?? [], null);
        $this->setIfExists('federal_futa_is_exempt', $data ?? [], null);
        $this->setIfExists('federal_er_social_security_is_exempt', $data ?? [], null);
        $this->setIfExists('employee_tax_state_options', $data ?? [], null);
        $this->setIfExists('employee_tax_state_ui_options', $data ?? [], null);
        $this->setIfExists('employee_home_state', $data ?? [], null);
        $this->setIfExists('pay_group_id', $data ?? [], null);
        $this->setIfExists('pay_schedule_id', $data ?? [], null);
        $this->setIfExists('state_for_withholding', $data ?? [], null);
        $this->setIfExists('state_withholding_form_version_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Employee ID
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_number
     *
     * @return string|null
     */
    public function getEmployeeNumber()
    {
        return $this->container['employee_number'];
    }

    /**
     * Sets employee_number
     *
     * @param string|null $employee_number Employee number
     *
     * @return self
     */
    public function setEmployeeNumber($employee_number)
    {
        if (is_null($employee_number)) {
            throw new \InvalidArgumentException('non-nullable employee_number cannot be null');
        }
        $this->container['employee_number'] = $employee_number;

        return $this;
    }

    /**
     * Gets filing_status
     *
     * @return string|null
     */
    public function getFilingStatus()
    {
        return $this->container['filing_status'];
    }

    /**
     * Sets filing_status
     *
     * @param string|null $filing_status Filing status
     *
     * @return self
     */
    public function setFilingStatus($filing_status)
    {
        if (is_null($filing_status)) {
            array_push($this->openAPINullablesSetToNull, 'filing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('filing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['filing_status'] = $filing_status;

        return $this;
    }

    /**
     * Gets exemptions
     *
     * @return int|null
     */
    public function getExemptions()
    {
        return $this->container['exemptions'];
    }

    /**
     * Sets exemptions
     *
     * @param int|null $exemptions Number of exemptions
     *
     * @return self
     */
    public function setExemptions($exemptions)
    {
        if (is_null($exemptions)) {
            array_push($this->openAPINullablesSetToNull, 'exemptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exemptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exemptions'] = $exemptions;

        return $this;
    }

    /**
     * Gets additional_withholding_type
     *
     * @return string|null
     */
    public function getAdditionalWithholdingType()
    {
        return $this->container['additional_withholding_type'];
    }

    /**
     * Sets additional_withholding_type
     *
     * @param string|null $additional_withholding_type Additional withholding type
     *
     * @return self
     */
    public function setAdditionalWithholdingType($additional_withholding_type)
    {
        if (is_null($additional_withholding_type)) {
            array_push($this->openAPINullablesSetToNull, 'additional_withholding_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_withholding_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_withholding_type'] = $additional_withholding_type;

        return $this;
    }

    /**
     * Gets additional_withholding_amount
     *
     * @return float|null
     */
    public function getAdditionalWithholdingAmount()
    {
        return $this->container['additional_withholding_amount'];
    }

    /**
     * Sets additional_withholding_amount
     *
     * @param float|null $additional_withholding_amount Additional withholding amount
     *
     * @return self
     */
    public function setAdditionalWithholdingAmount($additional_withholding_amount)
    {
        if (is_null($additional_withholding_amount)) {
            array_push($this->openAPINullablesSetToNull, 'additional_withholding_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_withholding_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_withholding_amount'] = $additional_withholding_amount;

        return $this;
    }

    /**
     * Gets federal_tax_exempt
     *
     * @return bool|null
     */
    public function getFederalTaxExempt()
    {
        return $this->container['federal_tax_exempt'];
    }

    /**
     * Sets federal_tax_exempt
     *
     * @param bool|null $federal_tax_exempt Whether employee is exempt from federal tax
     *
     * @return self
     */
    public function setFederalTaxExempt($federal_tax_exempt)
    {
        if (is_null($federal_tax_exempt)) {
            throw new \InvalidArgumentException('non-nullable federal_tax_exempt cannot be null');
        }
        $this->container['federal_tax_exempt'] = $federal_tax_exempt;

        return $this;
    }

    /**
     * Gets head_of_household
     *
     * @return bool|null
     */
    public function getHeadOfHousehold()
    {
        return $this->container['head_of_household'];
    }

    /**
     * Sets head_of_household
     *
     * @param bool|null $head_of_household Whether employee is head of household
     *
     * @return self
     */
    public function setHeadOfHousehold($head_of_household)
    {
        if (is_null($head_of_household)) {
            throw new \InvalidArgumentException('non-nullable head_of_household cannot be null');
        }
        $this->container['head_of_household'] = $head_of_household;

        return $this;
    }

    /**
     * Gets state_work_in
     *
     * @return string|null
     */
    public function getStateWorkIn()
    {
        return $this->container['state_work_in'];
    }

    /**
     * Sets state_work_in
     *
     * @param string|null $state_work_in State where employee works (2 characters max)
     *
     * @return self
     */
    public function setStateWorkIn($state_work_in)
    {
        if (is_null($state_work_in)) {
            throw new \InvalidArgumentException('non-nullable state_work_in cannot be null');
        }
        $this->container['state_work_in'] = $state_work_in;

        return $this;
    }

    /**
     * Gets state_filing_status_code
     *
     * @return string|null
     */
    public function getStateFilingStatusCode()
    {
        return $this->container['state_filing_status_code'];
    }

    /**
     * Sets state_filing_status_code
     *
     * @param string|null $state_filing_status_code State filing status code
     *
     * @return self
     */
    public function setStateFilingStatusCode($state_filing_status_code)
    {
        if (is_null($state_filing_status_code)) {
            throw new \InvalidArgumentException('non-nullable state_filing_status_code cannot be null');
        }
        $this->container['state_filing_status_code'] = $state_filing_status_code;

        return $this;
    }

    /**
     * Gets state_exemption
     *
     * @return int|null
     */
    public function getStateExemption()
    {
        return $this->container['state_exemption'];
    }

    /**
     * Sets state_exemption
     *
     * @param int|null $state_exemption State exemption count
     *
     * @return self
     */
    public function setStateExemption($state_exemption)
    {
        if (is_null($state_exemption)) {
            throw new \InvalidArgumentException('non-nullable state_exemption cannot be null');
        }
        $this->container['state_exemption'] = $state_exemption;

        return $this;
    }

    /**
     * Gets state_withholding_additional_type
     *
     * @return string|null
     */
    public function getStateWithholdingAdditionalType()
    {
        return $this->container['state_withholding_additional_type'];
    }

    /**
     * Sets state_withholding_additional_type
     *
     * @param string|null $state_withholding_additional_type State withholding additional type
     *
     * @return self
     */
    public function setStateWithholdingAdditionalType($state_withholding_additional_type)
    {
        if (is_null($state_withholding_additional_type)) {
            throw new \InvalidArgumentException('non-nullable state_withholding_additional_type cannot be null');
        }
        $this->container['state_withholding_additional_type'] = $state_withholding_additional_type;

        return $this;
    }

    /**
     * Gets state_withholding_additional
     *
     * @return float|null
     */
    public function getStateWithholdingAdditional()
    {
        return $this->container['state_withholding_additional'];
    }

    /**
     * Sets state_withholding_additional
     *
     * @param float|null $state_withholding_additional State withholding additional amount
     *
     * @return self
     */
    public function setStateWithholdingAdditional($state_withholding_additional)
    {
        if (is_null($state_withholding_additional)) {
            throw new \InvalidArgumentException('non-nullable state_withholding_additional cannot be null');
        }
        $this->container['state_withholding_additional'] = $state_withholding_additional;

        return $this;
    }

    /**
     * Gets state_is_exempt
     *
     * @return bool|null
     */
    public function getStateIsExempt()
    {
        return $this->container['state_is_exempt'];
    }

    /**
     * Sets state_is_exempt
     *
     * @param bool|null $state_is_exempt Whether employee is exempt from state tax
     *
     * @return self
     */
    public function setStateIsExempt($state_is_exempt)
    {
        if (is_null($state_is_exempt)) {
            throw new \InvalidArgumentException('non-nullable state_is_exempt cannot be null');
        }
        $this->container['state_is_exempt'] = $state_is_exempt;

        return $this;
    }

    /**
     * Gets state_is_ui_exempt
     *
     * @return bool|null
     */
    public function getStateIsUiExempt()
    {
        return $this->container['state_is_ui_exempt'];
    }

    /**
     * Sets state_is_ui_exempt
     *
     * @param bool|null $state_is_ui_exempt Whether employee is exempt from state unemployment insurance
     *
     * @return self
     */
    public function setStateIsUiExempt($state_is_ui_exempt)
    {
        if (is_null($state_is_ui_exempt)) {
            throw new \InvalidArgumentException('non-nullable state_is_ui_exempt cannot be null');
        }
        $this->container['state_is_ui_exempt'] = $state_is_ui_exempt;

        return $this;
    }

    /**
     * Gets state_ui_work_in
     *
     * @return string|null
     */
    public function getStateUiWorkIn()
    {
        return $this->container['state_ui_work_in'];
    }

    /**
     * Sets state_ui_work_in
     *
     * @param string|null $state_ui_work_in State for unemployment insurance (2 characters max)
     *
     * @return self
     */
    public function setStateUiWorkIn($state_ui_work_in)
    {
        if (is_null($state_ui_work_in)) {
            throw new \InvalidArgumentException('non-nullable state_ui_work_in cannot be null');
        }
        $this->container['state_ui_work_in'] = $state_ui_work_in;

        return $this;
    }

    /**
     * Gets tax_employee_type_id
     *
     * @return int|null
     */
    public function getTaxEmployeeTypeId()
    {
        return $this->container['tax_employee_type_id'];
    }

    /**
     * Sets tax_employee_type_id
     *
     * @param int|null $tax_employee_type_id Tax employee type ID
     *
     * @return self
     */
    public function setTaxEmployeeTypeId($tax_employee_type_id)
    {
        if (is_null($tax_employee_type_id)) {
            throw new \InvalidArgumentException('non-nullable tax_employee_type_id cannot be null');
        }
        $this->container['tax_employee_type_id'] = $tax_employee_type_id;

        return $this;
    }

    /**
     * Gets w2_status
     *
     * @return string|null
     */
    public function getW2Status()
    {
        return $this->container['w2_status'];
    }

    /**
     * Sets w2_status
     *
     * @param string|null $w2_status W2 status
     *
     * @return self
     */
    public function setW2Status($w2_status)
    {
        if (is_null($w2_status)) {
            throw new \InvalidArgumentException('non-nullable w2_status cannot be null');
        }
        $this->container['w2_status'] = $w2_status;

        return $this;
    }

    /**
     * Gets w2_status_date
     *
     * @return \DateTime|null
     */
    public function getW2StatusDate()
    {
        return $this->container['w2_status_date'];
    }

    /**
     * Sets w2_status_date
     *
     * @param \DateTime|null $w2_status_date W2 status date
     *
     * @return self
     */
    public function setW2StatusDate($w2_status_date)
    {
        if (is_null($w2_status_date)) {
            throw new \InvalidArgumentException('non-nullable w2_status_date cannot be null');
        }
        $this->container['w2_status_date'] = $w2_status_date;

        return $this;
    }

    /**
     * Gets work_address_type
     *
     * @return string|null
     */
    public function getWorkAddressType()
    {
        return $this->container['work_address_type'];
    }

    /**
     * Sets work_address_type
     *
     * @param string|null $work_address_type Work address type
     *
     * @return self
     */
    public function setWorkAddressType($work_address_type)
    {
        if (is_null($work_address_type)) {
            throw new \InvalidArgumentException('non-nullable work_address_type cannot be null');
        }
        $this->container['work_address_type'] = $work_address_type;

        return $this;
    }

    /**
     * Gets branch_id_work
     *
     * @return int|null
     */
    public function getBranchIdWork()
    {
        return $this->container['branch_id_work'];
    }

    /**
     * Sets branch_id_work
     *
     * @param int|null $branch_id_work Branch ID for work location
     *
     * @return self
     */
    public function setBranchIdWork($branch_id_work)
    {
        if (is_null($branch_id_work)) {
            throw new \InvalidArgumentException('non-nullable branch_id_work cannot be null');
        }
        $this->container['branch_id_work'] = $branch_id_work;

        return $this;
    }

    /**
     * Gets state_ui_type
     *
     * @return string|null
     */
    public function getStateUiType()
    {
        return $this->container['state_ui_type'];
    }

    /**
     * Sets state_ui_type
     *
     * @param string|null $state_ui_type State UI type
     *
     * @return self
     */
    public function setStateUiType($state_ui_type)
    {
        if (is_null($state_ui_type)) {
            throw new \InvalidArgumentException('non-nullable state_ui_type cannot be null');
        }
        $this->container['state_ui_type'] = $state_ui_type;

        return $this;
    }

    /**
     * Gets state_withholding_type
     *
     * @return string|null
     */
    public function getStateWithholdingType()
    {
        return $this->container['state_withholding_type'];
    }

    /**
     * Sets state_withholding_type
     *
     * @param string|null $state_withholding_type State withholding type
     *
     * @return self
     */
    public function setStateWithholdingType($state_withholding_type)
    {
        if (is_null($state_withholding_type)) {
            throw new \InvalidArgumentException('non-nullable state_withholding_type cannot be null');
        }
        $this->container['state_withholding_type'] = $state_withholding_type;

        return $this;
    }

    /**
     * Gets federal_tax_document_type
     *
     * @return string|null
     */
    public function getFederalTaxDocumentType()
    {
        return $this->container['federal_tax_document_type'];
    }

    /**
     * Sets federal_tax_document_type
     *
     * @param string|null $federal_tax_document_type Federal tax document type
     *
     * @return self
     */
    public function setFederalTaxDocumentType($federal_tax_document_type)
    {
        if (is_null($federal_tax_document_type)) {
            throw new \InvalidArgumentException('non-nullable federal_tax_document_type cannot be null');
        }
        $this->container['federal_tax_document_type'] = $federal_tax_document_type;

        return $this;
    }

    /**
     * Gets two_jobs
     *
     * @return bool|null
     */
    public function getTwoJobs()
    {
        return $this->container['two_jobs'];
    }

    /**
     * Sets two_jobs
     *
     * @param bool|null $two_jobs Whether employee has two jobs
     *
     * @return self
     */
    public function setTwoJobs($two_jobs)
    {
        if (is_null($two_jobs)) {
            throw new \InvalidArgumentException('non-nullable two_jobs cannot be null');
        }
        $this->container['two_jobs'] = $two_jobs;

        return $this;
    }

    /**
     * Gets other_income
     *
     * @return string|null
     */
    public function getOtherIncome()
    {
        return $this->container['other_income'];
    }

    /**
     * Sets other_income
     *
     * @param string|null $other_income Other income
     *
     * @return self
     */
    public function setOtherIncome($other_income)
    {
        if (is_null($other_income)) {
            throw new \InvalidArgumentException('non-nullable other_income cannot be null');
        }
        $this->container['other_income'] = $other_income;

        return $this;
    }

    /**
     * Gets dependents_amount
     *
     * @return string|null
     */
    public function getDependentsAmount()
    {
        return $this->container['dependents_amount'];
    }

    /**
     * Sets dependents_amount
     *
     * @param string|null $dependents_amount Dependents amount
     *
     * @return self
     */
    public function setDependentsAmount($dependents_amount)
    {
        if (is_null($dependents_amount)) {
            throw new \InvalidArgumentException('non-nullable dependents_amount cannot be null');
        }
        $this->container['dependents_amount'] = $dependents_amount;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return string|null
     */
    public function getDeductions()
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param string|null $deductions Deductions
     *
     * @return self
     */
    public function setDeductions($deductions)
    {
        if (is_null($deductions)) {
            throw new \InvalidArgumentException('non-nullable deductions cannot be null');
        }
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets federal_fica_is_exempt
     *
     * @return bool|null
     */
    public function getFederalFicaIsExempt()
    {
        return $this->container['federal_fica_is_exempt'];
    }

    /**
     * Sets federal_fica_is_exempt
     *
     * @param bool|null $federal_fica_is_exempt Whether employee is exempt from FICA
     *
     * @return self
     */
    public function setFederalFicaIsExempt($federal_fica_is_exempt)
    {
        if (is_null($federal_fica_is_exempt)) {
            throw new \InvalidArgumentException('non-nullable federal_fica_is_exempt cannot be null');
        }
        $this->container['federal_fica_is_exempt'] = $federal_fica_is_exempt;

        return $this;
    }

    /**
     * Gets federal_futa_is_exempt
     *
     * @return bool|null
     */
    public function getFederalFutaIsExempt()
    {
        return $this->container['federal_futa_is_exempt'];
    }

    /**
     * Sets federal_futa_is_exempt
     *
     * @param bool|null $federal_futa_is_exempt Whether employee is exempt from FUTA
     *
     * @return self
     */
    public function setFederalFutaIsExempt($federal_futa_is_exempt)
    {
        if (is_null($federal_futa_is_exempt)) {
            throw new \InvalidArgumentException('non-nullable federal_futa_is_exempt cannot be null');
        }
        $this->container['federal_futa_is_exempt'] = $federal_futa_is_exempt;

        return $this;
    }

    /**
     * Gets federal_er_social_security_is_exempt
     *
     * @return bool|null
     */
    public function getFederalErSocialSecurityIsExempt()
    {
        return $this->container['federal_er_social_security_is_exempt'];
    }

    /**
     * Sets federal_er_social_security_is_exempt
     *
     * @param bool|null $federal_er_social_security_is_exempt Whether employee is exempt from employer social security
     *
     * @return self
     */
    public function setFederalErSocialSecurityIsExempt($federal_er_social_security_is_exempt)
    {
        if (is_null($federal_er_social_security_is_exempt)) {
            throw new \InvalidArgumentException('non-nullable federal_er_social_security_is_exempt cannot be null');
        }
        $this->container['federal_er_social_security_is_exempt'] = $federal_er_social_security_is_exempt;

        return $this;
    }

    /**
     * Gets employee_tax_state_options
     *
     * @return \MySdk\Model\PayrollTraxPayrollApiControllerEmployeeTaxInformationDataObjectEmployeeTaxStateOptionsInner[]|null
     */
    public function getEmployeeTaxStateOptions()
    {
        return $this->container['employee_tax_state_options'];
    }

    /**
     * Sets employee_tax_state_options
     *
     * @param \MySdk\Model\PayrollTraxPayrollApiControllerEmployeeTaxInformationDataObjectEmployeeTaxStateOptionsInner[]|null $employee_tax_state_options Employee tax state options
     *
     * @return self
     */
    public function setEmployeeTaxStateOptions($employee_tax_state_options)
    {
        if (is_null($employee_tax_state_options)) {
            throw new \InvalidArgumentException('non-nullable employee_tax_state_options cannot be null');
        }
        $this->container['employee_tax_state_options'] = $employee_tax_state_options;

        return $this;
    }

    /**
     * Gets employee_tax_state_ui_options
     *
     * @return \MySdk\Model\PayrollTraxPayrollApiControllerEmployeeTaxInformationDataObjectEmployeeTaxStateUiOptionsInner[]|null
     */
    public function getEmployeeTaxStateUiOptions()
    {
        return $this->container['employee_tax_state_ui_options'];
    }

    /**
     * Sets employee_tax_state_ui_options
     *
     * @param \MySdk\Model\PayrollTraxPayrollApiControllerEmployeeTaxInformationDataObjectEmployeeTaxStateUiOptionsInner[]|null $employee_tax_state_ui_options Employee tax state UI options
     *
     * @return self
     */
    public function setEmployeeTaxStateUiOptions($employee_tax_state_ui_options)
    {
        if (is_null($employee_tax_state_ui_options)) {
            throw new \InvalidArgumentException('non-nullable employee_tax_state_ui_options cannot be null');
        }
        $this->container['employee_tax_state_ui_options'] = $employee_tax_state_ui_options;

        return $this;
    }

    /**
     * Gets employee_home_state
     *
     * @return string|null
     */
    public function getEmployeeHomeState()
    {
        return $this->container['employee_home_state'];
    }

    /**
     * Sets employee_home_state
     *
     * @param string|null $employee_home_state Employee home state
     *
     * @return self
     */
    public function setEmployeeHomeState($employee_home_state)
    {
        if (is_null($employee_home_state)) {
            throw new \InvalidArgumentException('non-nullable employee_home_state cannot be null');
        }
        $this->container['employee_home_state'] = $employee_home_state;

        return $this;
    }

    /**
     * Gets pay_group_id
     *
     * @return int|null
     */
    public function getPayGroupId()
    {
        return $this->container['pay_group_id'];
    }

    /**
     * Sets pay_group_id
     *
     * @param int|null $pay_group_id Pay group ID
     *
     * @return self
     */
    public function setPayGroupId($pay_group_id)
    {
        if (is_null($pay_group_id)) {
            throw new \InvalidArgumentException('non-nullable pay_group_id cannot be null');
        }
        $this->container['pay_group_id'] = $pay_group_id;

        return $this;
    }

    /**
     * Gets pay_schedule_id
     *
     * @return int|null
     */
    public function getPayScheduleId()
    {
        return $this->container['pay_schedule_id'];
    }

    /**
     * Sets pay_schedule_id
     *
     * @param int|null $pay_schedule_id Pay schedule ID
     *
     * @return self
     */
    public function setPayScheduleId($pay_schedule_id)
    {
        if (is_null($pay_schedule_id)) {
            throw new \InvalidArgumentException('non-nullable pay_schedule_id cannot be null');
        }
        $this->container['pay_schedule_id'] = $pay_schedule_id;

        return $this;
    }

    /**
     * Gets state_for_withholding
     *
     * @return string|null
     */
    public function getStateForWithholding()
    {
        return $this->container['state_for_withholding'];
    }

    /**
     * Sets state_for_withholding
     *
     * @param string|null $state_for_withholding State for withholding
     *
     * @return self
     */
    public function setStateForWithholding($state_for_withholding)
    {
        if (is_null($state_for_withholding)) {
            throw new \InvalidArgumentException('non-nullable state_for_withholding cannot be null');
        }
        $this->container['state_for_withholding'] = $state_for_withholding;

        return $this;
    }

    /**
     * Gets state_withholding_form_version_id
     *
     * @return int|null
     */
    public function getStateWithholdingFormVersionId()
    {
        return $this->container['state_withholding_form_version_id'];
    }

    /**
     * Sets state_withholding_form_version_id
     *
     * @param int|null $state_withholding_form_version_id State withholding form version ID
     *
     * @return self
     */
    public function setStateWithholdingFormVersionId($state_withholding_form_version_id)
    {
        if (is_null($state_withholding_form_version_id)) {
            array_push($this->openAPINullablesSetToNull, 'state_withholding_form_version_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_withholding_form_version_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_withholding_form_version_id'] = $state_withholding_form_version_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


