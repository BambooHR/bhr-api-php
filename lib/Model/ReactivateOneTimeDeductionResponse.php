<?php
/**
 * ReactivateOneTimeDeductionResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * ReactivateOneTimeDeductionResponse Class Doc Comment
 *
 * @category Class
 * @description Reactivate one-time deduction response
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReactivateOneTimeDeductionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReactivateOneTimeDeductionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pay_cycle_ts1_deduction_id' => 'int',
        'pay_cycle_id' => 'int',
        'employee_id' => 'int',
        'trans_counter' => 'int',
        'client_deduction_id' => 'int',
        'employee_deduction_id' => 'int',
        'deduction_type_id' => 'int',
        'deduction_name' => 'string',
        'based_on' => 'string',
        'amount_type' => 'string',
        'rate_original' => 'float',
        'rate' => 'float',
        'cap_amount_type' => 'string',
        'cap_amount' => 'float',
        'is_taxable' => 'bool',
        'employer_based_on' => 'string',
        'employer_amount_type' => 'string',
        'employer_rate_original' => 'float',
        'employer_rate' => 'float',
        'employer_cap_amount_type' => 'string',
        'employer_cap_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pay_cycle_ts1_deduction_id' => null,
        'pay_cycle_id' => null,
        'employee_id' => null,
        'trans_counter' => null,
        'client_deduction_id' => null,
        'employee_deduction_id' => null,
        'deduction_type_id' => null,
        'deduction_name' => null,
        'based_on' => null,
        'amount_type' => null,
        'rate_original' => 'float',
        'rate' => 'float',
        'cap_amount_type' => null,
        'cap_amount' => 'float',
        'is_taxable' => null,
        'employer_based_on' => null,
        'employer_amount_type' => null,
        'employer_rate_original' => 'float',
        'employer_rate' => 'float',
        'employer_cap_amount_type' => null,
        'employer_cap_amount' => 'float'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pay_cycle_ts1_deduction_id' => false,
        'pay_cycle_id' => false,
        'employee_id' => false,
        'trans_counter' => false,
        'client_deduction_id' => false,
        'employee_deduction_id' => false,
        'deduction_type_id' => false,
        'deduction_name' => false,
        'based_on' => false,
        'amount_type' => false,
        'rate_original' => false,
        'rate' => false,
        'cap_amount_type' => false,
        'cap_amount' => false,
        'is_taxable' => false,
        'employer_based_on' => false,
        'employer_amount_type' => false,
        'employer_rate_original' => false,
        'employer_rate' => false,
        'employer_cap_amount_type' => false,
        'employer_cap_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_cycle_ts1_deduction_id' => 'payCycleTs1DeductionId',
        'pay_cycle_id' => 'payCycleId',
        'employee_id' => 'employeeId',
        'trans_counter' => 'transCounter',
        'client_deduction_id' => 'clientDeductionId',
        'employee_deduction_id' => 'employeeDeductionId',
        'deduction_type_id' => 'deductionTypeId',
        'deduction_name' => 'deductionName',
        'based_on' => 'basedOn',
        'amount_type' => 'amountType',
        'rate_original' => 'rateOriginal',
        'rate' => 'rate',
        'cap_amount_type' => 'capAmountType',
        'cap_amount' => 'capAmount',
        'is_taxable' => 'isTaxable',
        'employer_based_on' => 'employerBasedOn',
        'employer_amount_type' => 'employerAmountType',
        'employer_rate_original' => 'employerRateOriginal',
        'employer_rate' => 'employerRate',
        'employer_cap_amount_type' => 'employerCapAmountType',
        'employer_cap_amount' => 'employerCapAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_cycle_ts1_deduction_id' => 'setPayCycleTs1DeductionId',
        'pay_cycle_id' => 'setPayCycleId',
        'employee_id' => 'setEmployeeId',
        'trans_counter' => 'setTransCounter',
        'client_deduction_id' => 'setClientDeductionId',
        'employee_deduction_id' => 'setEmployeeDeductionId',
        'deduction_type_id' => 'setDeductionTypeId',
        'deduction_name' => 'setDeductionName',
        'based_on' => 'setBasedOn',
        'amount_type' => 'setAmountType',
        'rate_original' => 'setRateOriginal',
        'rate' => 'setRate',
        'cap_amount_type' => 'setCapAmountType',
        'cap_amount' => 'setCapAmount',
        'is_taxable' => 'setIsTaxable',
        'employer_based_on' => 'setEmployerBasedOn',
        'employer_amount_type' => 'setEmployerAmountType',
        'employer_rate_original' => 'setEmployerRateOriginal',
        'employer_rate' => 'setEmployerRate',
        'employer_cap_amount_type' => 'setEmployerCapAmountType',
        'employer_cap_amount' => 'setEmployerCapAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_cycle_ts1_deduction_id' => 'getPayCycleTs1DeductionId',
        'pay_cycle_id' => 'getPayCycleId',
        'employee_id' => 'getEmployeeId',
        'trans_counter' => 'getTransCounter',
        'client_deduction_id' => 'getClientDeductionId',
        'employee_deduction_id' => 'getEmployeeDeductionId',
        'deduction_type_id' => 'getDeductionTypeId',
        'deduction_name' => 'getDeductionName',
        'based_on' => 'getBasedOn',
        'amount_type' => 'getAmountType',
        'rate_original' => 'getRateOriginal',
        'rate' => 'getRate',
        'cap_amount_type' => 'getCapAmountType',
        'cap_amount' => 'getCapAmount',
        'is_taxable' => 'getIsTaxable',
        'employer_based_on' => 'getEmployerBasedOn',
        'employer_amount_type' => 'getEmployerAmountType',
        'employer_rate_original' => 'getEmployerRateOriginal',
        'employer_rate' => 'getEmployerRate',
        'employer_cap_amount_type' => 'getEmployerCapAmountType',
        'employer_cap_amount' => 'getEmployerCapAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pay_cycle_ts1_deduction_id', $data ?? [], null);
        $this->setIfExists('pay_cycle_id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('trans_counter', $data ?? [], null);
        $this->setIfExists('client_deduction_id', $data ?? [], null);
        $this->setIfExists('employee_deduction_id', $data ?? [], null);
        $this->setIfExists('deduction_type_id', $data ?? [], null);
        $this->setIfExists('deduction_name', $data ?? [], null);
        $this->setIfExists('based_on', $data ?? [], null);
        $this->setIfExists('amount_type', $data ?? [], null);
        $this->setIfExists('rate_original', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('cap_amount_type', $data ?? [], null);
        $this->setIfExists('cap_amount', $data ?? [], null);
        $this->setIfExists('is_taxable', $data ?? [], null);
        $this->setIfExists('employer_based_on', $data ?? [], null);
        $this->setIfExists('employer_amount_type', $data ?? [], null);
        $this->setIfExists('employer_rate_original', $data ?? [], null);
        $this->setIfExists('employer_rate', $data ?? [], null);
        $this->setIfExists('employer_cap_amount_type', $data ?? [], null);
        $this->setIfExists('employer_cap_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_cycle_ts1_deduction_id
     *
     * @return int|null
     */
    public function getPayCycleTs1DeductionId()
    {
        return $this->container['pay_cycle_ts1_deduction_id'];
    }

    /**
     * Sets pay_cycle_ts1_deduction_id
     *
     * @param int|null $pay_cycle_ts1_deduction_id Pay cycle TS1 deduction ID
     *
     * @return self
     */
    public function setPayCycleTs1DeductionId($pay_cycle_ts1_deduction_id)
    {
        if (is_null($pay_cycle_ts1_deduction_id)) {
            throw new \InvalidArgumentException('non-nullable pay_cycle_ts1_deduction_id cannot be null');
        }
        $this->container['pay_cycle_ts1_deduction_id'] = $pay_cycle_ts1_deduction_id;

        return $this;
    }

    /**
     * Gets pay_cycle_id
     *
     * @return int|null
     */
    public function getPayCycleId()
    {
        return $this->container['pay_cycle_id'];
    }

    /**
     * Sets pay_cycle_id
     *
     * @param int|null $pay_cycle_id Pay cycle ID
     *
     * @return self
     */
    public function setPayCycleId($pay_cycle_id)
    {
        if (is_null($pay_cycle_id)) {
            throw new \InvalidArgumentException('non-nullable pay_cycle_id cannot be null');
        }
        $this->container['pay_cycle_id'] = $pay_cycle_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Employee ID
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets trans_counter
     *
     * @return int|null
     */
    public function getTransCounter()
    {
        return $this->container['trans_counter'];
    }

    /**
     * Sets trans_counter
     *
     * @param int|null $trans_counter Transaction counter
     *
     * @return self
     */
    public function setTransCounter($trans_counter)
    {
        if (is_null($trans_counter)) {
            throw new \InvalidArgumentException('non-nullable trans_counter cannot be null');
        }
        $this->container['trans_counter'] = $trans_counter;

        return $this;
    }

    /**
     * Gets client_deduction_id
     *
     * @return int|null
     */
    public function getClientDeductionId()
    {
        return $this->container['client_deduction_id'];
    }

    /**
     * Sets client_deduction_id
     *
     * @param int|null $client_deduction_id Client deduction ID
     *
     * @return self
     */
    public function setClientDeductionId($client_deduction_id)
    {
        if (is_null($client_deduction_id)) {
            throw new \InvalidArgumentException('non-nullable client_deduction_id cannot be null');
        }
        $this->container['client_deduction_id'] = $client_deduction_id;

        return $this;
    }

    /**
     * Gets employee_deduction_id
     *
     * @return int|null
     */
    public function getEmployeeDeductionId()
    {
        return $this->container['employee_deduction_id'];
    }

    /**
     * Sets employee_deduction_id
     *
     * @param int|null $employee_deduction_id Employee deduction ID
     *
     * @return self
     */
    public function setEmployeeDeductionId($employee_deduction_id)
    {
        if (is_null($employee_deduction_id)) {
            throw new \InvalidArgumentException('non-nullable employee_deduction_id cannot be null');
        }
        $this->container['employee_deduction_id'] = $employee_deduction_id;

        return $this;
    }

    /**
     * Gets deduction_type_id
     *
     * @return int|null
     */
    public function getDeductionTypeId()
    {
        return $this->container['deduction_type_id'];
    }

    /**
     * Sets deduction_type_id
     *
     * @param int|null $deduction_type_id Deduction type ID
     *
     * @return self
     */
    public function setDeductionTypeId($deduction_type_id)
    {
        if (is_null($deduction_type_id)) {
            throw new \InvalidArgumentException('non-nullable deduction_type_id cannot be null');
        }
        $this->container['deduction_type_id'] = $deduction_type_id;

        return $this;
    }

    /**
     * Gets deduction_name
     *
     * @return string|null
     */
    public function getDeductionName()
    {
        return $this->container['deduction_name'];
    }

    /**
     * Sets deduction_name
     *
     * @param string|null $deduction_name Deduction name
     *
     * @return self
     */
    public function setDeductionName($deduction_name)
    {
        if (is_null($deduction_name)) {
            throw new \InvalidArgumentException('non-nullable deduction_name cannot be null');
        }
        $this->container['deduction_name'] = $deduction_name;

        return $this;
    }

    /**
     * Gets based_on
     *
     * @return string|null
     */
    public function getBasedOn()
    {
        return $this->container['based_on'];
    }

    /**
     * Sets based_on
     *
     * @param string|null $based_on Based on
     *
     * @return self
     */
    public function setBasedOn($based_on)
    {
        if (is_null($based_on)) {
            throw new \InvalidArgumentException('non-nullable based_on cannot be null');
        }
        $this->container['based_on'] = $based_on;

        return $this;
    }

    /**
     * Gets amount_type
     *
     * @return string|null
     */
    public function getAmountType()
    {
        return $this->container['amount_type'];
    }

    /**
     * Sets amount_type
     *
     * @param string|null $amount_type Amount type
     *
     * @return self
     */
    public function setAmountType($amount_type)
    {
        if (is_null($amount_type)) {
            throw new \InvalidArgumentException('non-nullable amount_type cannot be null');
        }
        $this->container['amount_type'] = $amount_type;

        return $this;
    }

    /**
     * Gets rate_original
     *
     * @return float|null
     */
    public function getRateOriginal()
    {
        return $this->container['rate_original'];
    }

    /**
     * Sets rate_original
     *
     * @param float|null $rate_original Rate original
     *
     * @return self
     */
    public function setRateOriginal($rate_original)
    {
        if (is_null($rate_original)) {
            throw new \InvalidArgumentException('non-nullable rate_original cannot be null');
        }
        $this->container['rate_original'] = $rate_original;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate Rate
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets cap_amount_type
     *
     * @return string|null
     */
    public function getCapAmountType()
    {
        return $this->container['cap_amount_type'];
    }

    /**
     * Sets cap_amount_type
     *
     * @param string|null $cap_amount_type Cap amount type
     *
     * @return self
     */
    public function setCapAmountType($cap_amount_type)
    {
        if (is_null($cap_amount_type)) {
            throw new \InvalidArgumentException('non-nullable cap_amount_type cannot be null');
        }
        $this->container['cap_amount_type'] = $cap_amount_type;

        return $this;
    }

    /**
     * Gets cap_amount
     *
     * @return float|null
     */
    public function getCapAmount()
    {
        return $this->container['cap_amount'];
    }

    /**
     * Sets cap_amount
     *
     * @param float|null $cap_amount Cap amount
     *
     * @return self
     */
    public function setCapAmount($cap_amount)
    {
        if (is_null($cap_amount)) {
            throw new \InvalidArgumentException('non-nullable cap_amount cannot be null');
        }
        $this->container['cap_amount'] = $cap_amount;

        return $this;
    }

    /**
     * Gets is_taxable
     *
     * @return bool|null
     */
    public function getIsTaxable()
    {
        return $this->container['is_taxable'];
    }

    /**
     * Sets is_taxable
     *
     * @param bool|null $is_taxable Is taxable
     *
     * @return self
     */
    public function setIsTaxable($is_taxable)
    {
        if (is_null($is_taxable)) {
            throw new \InvalidArgumentException('non-nullable is_taxable cannot be null');
        }
        $this->container['is_taxable'] = $is_taxable;

        return $this;
    }

    /**
     * Gets employer_based_on
     *
     * @return string|null
     */
    public function getEmployerBasedOn()
    {
        return $this->container['employer_based_on'];
    }

    /**
     * Sets employer_based_on
     *
     * @param string|null $employer_based_on Employer based on
     *
     * @return self
     */
    public function setEmployerBasedOn($employer_based_on)
    {
        if (is_null($employer_based_on)) {
            throw new \InvalidArgumentException('non-nullable employer_based_on cannot be null');
        }
        $this->container['employer_based_on'] = $employer_based_on;

        return $this;
    }

    /**
     * Gets employer_amount_type
     *
     * @return string|null
     */
    public function getEmployerAmountType()
    {
        return $this->container['employer_amount_type'];
    }

    /**
     * Sets employer_amount_type
     *
     * @param string|null $employer_amount_type Employer amount type
     *
     * @return self
     */
    public function setEmployerAmountType($employer_amount_type)
    {
        if (is_null($employer_amount_type)) {
            throw new \InvalidArgumentException('non-nullable employer_amount_type cannot be null');
        }
        $this->container['employer_amount_type'] = $employer_amount_type;

        return $this;
    }

    /**
     * Gets employer_rate_original
     *
     * @return float|null
     */
    public function getEmployerRateOriginal()
    {
        return $this->container['employer_rate_original'];
    }

    /**
     * Sets employer_rate_original
     *
     * @param float|null $employer_rate_original Employer rate original
     *
     * @return self
     */
    public function setEmployerRateOriginal($employer_rate_original)
    {
        if (is_null($employer_rate_original)) {
            throw new \InvalidArgumentException('non-nullable employer_rate_original cannot be null');
        }
        $this->container['employer_rate_original'] = $employer_rate_original;

        return $this;
    }

    /**
     * Gets employer_rate
     *
     * @return float|null
     */
    public function getEmployerRate()
    {
        return $this->container['employer_rate'];
    }

    /**
     * Sets employer_rate
     *
     * @param float|null $employer_rate Employer rate
     *
     * @return self
     */
    public function setEmployerRate($employer_rate)
    {
        if (is_null($employer_rate)) {
            throw new \InvalidArgumentException('non-nullable employer_rate cannot be null');
        }
        $this->container['employer_rate'] = $employer_rate;

        return $this;
    }

    /**
     * Gets employer_cap_amount_type
     *
     * @return string|null
     */
    public function getEmployerCapAmountType()
    {
        return $this->container['employer_cap_amount_type'];
    }

    /**
     * Sets employer_cap_amount_type
     *
     * @param string|null $employer_cap_amount_type Employer cap amount type
     *
     * @return self
     */
    public function setEmployerCapAmountType($employer_cap_amount_type)
    {
        if (is_null($employer_cap_amount_type)) {
            throw new \InvalidArgumentException('non-nullable employer_cap_amount_type cannot be null');
        }
        $this->container['employer_cap_amount_type'] = $employer_cap_amount_type;

        return $this;
    }

    /**
     * Gets employer_cap_amount
     *
     * @return float|null
     */
    public function getEmployerCapAmount()
    {
        return $this->container['employer_cap_amount'];
    }

    /**
     * Sets employer_cap_amount
     *
     * @param float|null $employer_cap_amount Employer cap amount
     *
     * @return self
     */
    public function setEmployerCapAmount($employer_cap_amount)
    {
        if (is_null($employer_cap_amount)) {
            throw new \InvalidArgumentException('non-nullable employer_cap_amount cannot be null');
        }
        $this->container['employer_cap_amount'] = $employer_cap_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


