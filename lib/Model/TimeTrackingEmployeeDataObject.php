<?php
/**
 * TimeTrackingEmployeeDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TimeTrackingEmployeeDataObject Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeTrackingEmployeeDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeTrackingEmployeeDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'enabled' => 'bool',
        'first_name' => 'string',
        'last_name' => 'string',
        'preferred_name' => 'string',
        'display_name' => 'string',
        'is_overtime_exempt' => 'bool',
        'location' => 'string',
        'has_location' => 'bool',
        'has_remote_location' => 'bool',
        'in_overtime_country' => 'bool',
        'overtime_country_iso' => 'string',
        'overtime_state' => 'string',
        'overtime_state_iso' => 'string',
        'can_see_employee' => 'bool',
        'pay_schedule' => 'string',
        'has_pay_schedule' => 'bool',
        'start_date' => 'string',
        'has_past_start_date' => 'bool',
        'has_future_start_date' => 'bool',
        'starts_on_string' => 'string',
        'configuration_id' => 'int',
        'configuration_name' => 'string',
        'custom_overtime_enabled' => 'bool',
        'custom_daily_overtime_threshold' => 'float',
        'custom_daily_double_overtime_threshold' => 'float',
        'custom_weekly_overtime_threshold' => 'float',
        'mobile_enabled' => 'bool',
        'geolocation_enabled' => 'bool',
        'timesheet_type' => 'mixed',
        'work_week_starts_on' => 'mixed',
        'clock_in_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'enabled' => null,
        'first_name' => null,
        'last_name' => null,
        'preferred_name' => null,
        'display_name' => null,
        'is_overtime_exempt' => null,
        'location' => null,
        'has_location' => null,
        'has_remote_location' => null,
        'in_overtime_country' => null,
        'overtime_country_iso' => null,
        'overtime_state' => null,
        'overtime_state_iso' => null,
        'can_see_employee' => null,
        'pay_schedule' => null,
        'has_pay_schedule' => null,
        'start_date' => null,
        'has_past_start_date' => null,
        'has_future_start_date' => null,
        'starts_on_string' => null,
        'configuration_id' => null,
        'configuration_name' => null,
        'custom_overtime_enabled' => null,
        'custom_daily_overtime_threshold' => 'float',
        'custom_daily_double_overtime_threshold' => 'float',
        'custom_weekly_overtime_threshold' => 'float',
        'mobile_enabled' => null,
        'geolocation_enabled' => null,
        'timesheet_type' => null,
        'work_week_starts_on' => null,
        'clock_in_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'enabled' => false,
        'first_name' => false,
        'last_name' => false,
        'preferred_name' => false,
        'display_name' => false,
        'is_overtime_exempt' => false,
        'location' => false,
        'has_location' => false,
        'has_remote_location' => false,
        'in_overtime_country' => false,
        'overtime_country_iso' => false,
        'overtime_state' => false,
        'overtime_state_iso' => false,
        'can_see_employee' => false,
        'pay_schedule' => false,
        'has_pay_schedule' => false,
        'start_date' => false,
        'has_past_start_date' => false,
        'has_future_start_date' => false,
        'starts_on_string' => false,
        'configuration_id' => false,
        'configuration_name' => false,
        'custom_overtime_enabled' => false,
        'custom_daily_overtime_threshold' => true,
        'custom_daily_double_overtime_threshold' => true,
        'custom_weekly_overtime_threshold' => true,
        'mobile_enabled' => false,
        'geolocation_enabled' => false,
        'timesheet_type' => true,
        'work_week_starts_on' => true,
        'clock_in_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'enabled' => 'enabled',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'preferred_name' => 'preferredName',
        'display_name' => 'displayName',
        'is_overtime_exempt' => 'isOvertimeExempt',
        'location' => 'location',
        'has_location' => 'hasLocation',
        'has_remote_location' => 'hasRemoteLocation',
        'in_overtime_country' => 'inOvertimeCountry',
        'overtime_country_iso' => 'overtimeCountryIso',
        'overtime_state' => 'overtimeState',
        'overtime_state_iso' => 'overtimeStateIso',
        'can_see_employee' => 'canSeeEmployee',
        'pay_schedule' => 'paySchedule',
        'has_pay_schedule' => 'hasPaySchedule',
        'start_date' => 'startDate',
        'has_past_start_date' => 'hasPastStartDate',
        'has_future_start_date' => 'hasFutureStartDate',
        'starts_on_string' => 'startsOnString',
        'configuration_id' => 'configurationId',
        'configuration_name' => 'configurationName',
        'custom_overtime_enabled' => 'customOvertimeEnabled',
        'custom_daily_overtime_threshold' => 'customDailyOvertimeThreshold',
        'custom_daily_double_overtime_threshold' => 'customDailyDoubleOvertimeThreshold',
        'custom_weekly_overtime_threshold' => 'customWeeklyOvertimeThreshold',
        'mobile_enabled' => 'mobileEnabled',
        'geolocation_enabled' => 'geolocationEnabled',
        'timesheet_type' => 'timesheetType',
        'work_week_starts_on' => 'workWeekStartsOn',
        'clock_in_id' => 'clockInId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'enabled' => 'setEnabled',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'preferred_name' => 'setPreferredName',
        'display_name' => 'setDisplayName',
        'is_overtime_exempt' => 'setIsOvertimeExempt',
        'location' => 'setLocation',
        'has_location' => 'setHasLocation',
        'has_remote_location' => 'setHasRemoteLocation',
        'in_overtime_country' => 'setInOvertimeCountry',
        'overtime_country_iso' => 'setOvertimeCountryIso',
        'overtime_state' => 'setOvertimeState',
        'overtime_state_iso' => 'setOvertimeStateIso',
        'can_see_employee' => 'setCanSeeEmployee',
        'pay_schedule' => 'setPaySchedule',
        'has_pay_schedule' => 'setHasPaySchedule',
        'start_date' => 'setStartDate',
        'has_past_start_date' => 'setHasPastStartDate',
        'has_future_start_date' => 'setHasFutureStartDate',
        'starts_on_string' => 'setStartsOnString',
        'configuration_id' => 'setConfigurationId',
        'configuration_name' => 'setConfigurationName',
        'custom_overtime_enabled' => 'setCustomOvertimeEnabled',
        'custom_daily_overtime_threshold' => 'setCustomDailyOvertimeThreshold',
        'custom_daily_double_overtime_threshold' => 'setCustomDailyDoubleOvertimeThreshold',
        'custom_weekly_overtime_threshold' => 'setCustomWeeklyOvertimeThreshold',
        'mobile_enabled' => 'setMobileEnabled',
        'geolocation_enabled' => 'setGeolocationEnabled',
        'timesheet_type' => 'setTimesheetType',
        'work_week_starts_on' => 'setWorkWeekStartsOn',
        'clock_in_id' => 'setClockInId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'enabled' => 'getEnabled',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'preferred_name' => 'getPreferredName',
        'display_name' => 'getDisplayName',
        'is_overtime_exempt' => 'getIsOvertimeExempt',
        'location' => 'getLocation',
        'has_location' => 'getHasLocation',
        'has_remote_location' => 'getHasRemoteLocation',
        'in_overtime_country' => 'getInOvertimeCountry',
        'overtime_country_iso' => 'getOvertimeCountryIso',
        'overtime_state' => 'getOvertimeState',
        'overtime_state_iso' => 'getOvertimeStateIso',
        'can_see_employee' => 'getCanSeeEmployee',
        'pay_schedule' => 'getPaySchedule',
        'has_pay_schedule' => 'getHasPaySchedule',
        'start_date' => 'getStartDate',
        'has_past_start_date' => 'getHasPastStartDate',
        'has_future_start_date' => 'getHasFutureStartDate',
        'starts_on_string' => 'getStartsOnString',
        'configuration_id' => 'getConfigurationId',
        'configuration_name' => 'getConfigurationName',
        'custom_overtime_enabled' => 'getCustomOvertimeEnabled',
        'custom_daily_overtime_threshold' => 'getCustomDailyOvertimeThreshold',
        'custom_daily_double_overtime_threshold' => 'getCustomDailyDoubleOvertimeThreshold',
        'custom_weekly_overtime_threshold' => 'getCustomWeeklyOvertimeThreshold',
        'mobile_enabled' => 'getMobileEnabled',
        'geolocation_enabled' => 'getGeolocationEnabled',
        'timesheet_type' => 'getTimesheetType',
        'work_week_starts_on' => 'getWorkWeekStartsOn',
        'clock_in_id' => 'getClockInId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('enabled', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('preferred_name', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('is_overtime_exempt', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('has_location', $data ?? [], null);
        $this->setIfExists('has_remote_location', $data ?? [], null);
        $this->setIfExists('in_overtime_country', $data ?? [], null);
        $this->setIfExists('overtime_country_iso', $data ?? [], null);
        $this->setIfExists('overtime_state', $data ?? [], null);
        $this->setIfExists('overtime_state_iso', $data ?? [], null);
        $this->setIfExists('can_see_employee', $data ?? [], null);
        $this->setIfExists('pay_schedule', $data ?? [], null);
        $this->setIfExists('has_pay_schedule', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('has_past_start_date', $data ?? [], null);
        $this->setIfExists('has_future_start_date', $data ?? [], null);
        $this->setIfExists('starts_on_string', $data ?? [], null);
        $this->setIfExists('configuration_id', $data ?? [], null);
        $this->setIfExists('configuration_name', $data ?? [], null);
        $this->setIfExists('custom_overtime_enabled', $data ?? [], null);
        $this->setIfExists('custom_daily_overtime_threshold', $data ?? [], null);
        $this->setIfExists('custom_daily_double_overtime_threshold', $data ?? [], null);
        $this->setIfExists('custom_weekly_overtime_threshold', $data ?? [], null);
        $this->setIfExists('mobile_enabled', $data ?? [], null);
        $this->setIfExists('geolocation_enabled', $data ?? [], null);
        $this->setIfExists('timesheet_type', $data ?? [], null);
        $this->setIfExists('work_week_starts_on', $data ?? [], null);
        $this->setIfExists('clock_in_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool|null
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool|null $enabled enabled
     *
     * @return self
     */
    public function setEnabled($enabled)
    {
        if (is_null($enabled)) {
            throw new \InvalidArgumentException('non-nullable enabled cannot be null');
        }
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string|null $preferred_name preferred_name
     *
     * @return self
     */
    public function setPreferredName($preferred_name)
    {
        if (is_null($preferred_name)) {
            throw new \InvalidArgumentException('non-nullable preferred_name cannot be null');
        }
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets is_overtime_exempt
     *
     * @return bool|null
     */
    public function getIsOvertimeExempt()
    {
        return $this->container['is_overtime_exempt'];
    }

    /**
     * Sets is_overtime_exempt
     *
     * @param bool|null $is_overtime_exempt is_overtime_exempt
     *
     * @return self
     */
    public function setIsOvertimeExempt($is_overtime_exempt)
    {
        if (is_null($is_overtime_exempt)) {
            throw new \InvalidArgumentException('non-nullable is_overtime_exempt cannot be null');
        }
        $this->container['is_overtime_exempt'] = $is_overtime_exempt;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets has_location
     *
     * @return bool|null
     */
    public function getHasLocation()
    {
        return $this->container['has_location'];
    }

    /**
     * Sets has_location
     *
     * @param bool|null $has_location has_location
     *
     * @return self
     */
    public function setHasLocation($has_location)
    {
        if (is_null($has_location)) {
            throw new \InvalidArgumentException('non-nullable has_location cannot be null');
        }
        $this->container['has_location'] = $has_location;

        return $this;
    }

    /**
     * Gets has_remote_location
     *
     * @return bool|null
     */
    public function getHasRemoteLocation()
    {
        return $this->container['has_remote_location'];
    }

    /**
     * Sets has_remote_location
     *
     * @param bool|null $has_remote_location has_remote_location
     *
     * @return self
     */
    public function setHasRemoteLocation($has_remote_location)
    {
        if (is_null($has_remote_location)) {
            throw new \InvalidArgumentException('non-nullable has_remote_location cannot be null');
        }
        $this->container['has_remote_location'] = $has_remote_location;

        return $this;
    }

    /**
     * Gets in_overtime_country
     *
     * @return bool|null
     */
    public function getInOvertimeCountry()
    {
        return $this->container['in_overtime_country'];
    }

    /**
     * Sets in_overtime_country
     *
     * @param bool|null $in_overtime_country in_overtime_country
     *
     * @return self
     */
    public function setInOvertimeCountry($in_overtime_country)
    {
        if (is_null($in_overtime_country)) {
            throw new \InvalidArgumentException('non-nullable in_overtime_country cannot be null');
        }
        $this->container['in_overtime_country'] = $in_overtime_country;

        return $this;
    }

    /**
     * Gets overtime_country_iso
     *
     * @return string|null
     */
    public function getOvertimeCountryIso()
    {
        return $this->container['overtime_country_iso'];
    }

    /**
     * Sets overtime_country_iso
     *
     * @param string|null $overtime_country_iso overtime_country_iso
     *
     * @return self
     */
    public function setOvertimeCountryIso($overtime_country_iso)
    {
        if (is_null($overtime_country_iso)) {
            throw new \InvalidArgumentException('non-nullable overtime_country_iso cannot be null');
        }
        $this->container['overtime_country_iso'] = $overtime_country_iso;

        return $this;
    }

    /**
     * Gets overtime_state
     *
     * @return string|null
     */
    public function getOvertimeState()
    {
        return $this->container['overtime_state'];
    }

    /**
     * Sets overtime_state
     *
     * @param string|null $overtime_state overtime_state
     *
     * @return self
     */
    public function setOvertimeState($overtime_state)
    {
        if (is_null($overtime_state)) {
            throw new \InvalidArgumentException('non-nullable overtime_state cannot be null');
        }
        $this->container['overtime_state'] = $overtime_state;

        return $this;
    }

    /**
     * Gets overtime_state_iso
     *
     * @return string|null
     */
    public function getOvertimeStateIso()
    {
        return $this->container['overtime_state_iso'];
    }

    /**
     * Sets overtime_state_iso
     *
     * @param string|null $overtime_state_iso overtime_state_iso
     *
     * @return self
     */
    public function setOvertimeStateIso($overtime_state_iso)
    {
        if (is_null($overtime_state_iso)) {
            throw new \InvalidArgumentException('non-nullable overtime_state_iso cannot be null');
        }
        $this->container['overtime_state_iso'] = $overtime_state_iso;

        return $this;
    }

    /**
     * Gets can_see_employee
     *
     * @return bool|null
     */
    public function getCanSeeEmployee()
    {
        return $this->container['can_see_employee'];
    }

    /**
     * Sets can_see_employee
     *
     * @param bool|null $can_see_employee can_see_employee
     *
     * @return self
     */
    public function setCanSeeEmployee($can_see_employee)
    {
        if (is_null($can_see_employee)) {
            throw new \InvalidArgumentException('non-nullable can_see_employee cannot be null');
        }
        $this->container['can_see_employee'] = $can_see_employee;

        return $this;
    }

    /**
     * Gets pay_schedule
     *
     * @return string|null
     */
    public function getPaySchedule()
    {
        return $this->container['pay_schedule'];
    }

    /**
     * Sets pay_schedule
     *
     * @param string|null $pay_schedule pay_schedule
     *
     * @return self
     */
    public function setPaySchedule($pay_schedule)
    {
        if (is_null($pay_schedule)) {
            throw new \InvalidArgumentException('non-nullable pay_schedule cannot be null');
        }
        $this->container['pay_schedule'] = $pay_schedule;

        return $this;
    }

    /**
     * Gets has_pay_schedule
     *
     * @return bool|null
     */
    public function getHasPaySchedule()
    {
        return $this->container['has_pay_schedule'];
    }

    /**
     * Sets has_pay_schedule
     *
     * @param bool|null $has_pay_schedule has_pay_schedule
     *
     * @return self
     */
    public function setHasPaySchedule($has_pay_schedule)
    {
        if (is_null($has_pay_schedule)) {
            throw new \InvalidArgumentException('non-nullable has_pay_schedule cannot be null');
        }
        $this->container['has_pay_schedule'] = $has_pay_schedule;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets has_past_start_date
     *
     * @return bool|null
     */
    public function getHasPastStartDate()
    {
        return $this->container['has_past_start_date'];
    }

    /**
     * Sets has_past_start_date
     *
     * @param bool|null $has_past_start_date has_past_start_date
     *
     * @return self
     */
    public function setHasPastStartDate($has_past_start_date)
    {
        if (is_null($has_past_start_date)) {
            throw new \InvalidArgumentException('non-nullable has_past_start_date cannot be null');
        }
        $this->container['has_past_start_date'] = $has_past_start_date;

        return $this;
    }

    /**
     * Gets has_future_start_date
     *
     * @return bool|null
     */
    public function getHasFutureStartDate()
    {
        return $this->container['has_future_start_date'];
    }

    /**
     * Sets has_future_start_date
     *
     * @param bool|null $has_future_start_date has_future_start_date
     *
     * @return self
     */
    public function setHasFutureStartDate($has_future_start_date)
    {
        if (is_null($has_future_start_date)) {
            throw new \InvalidArgumentException('non-nullable has_future_start_date cannot be null');
        }
        $this->container['has_future_start_date'] = $has_future_start_date;

        return $this;
    }

    /**
     * Gets starts_on_string
     *
     * @return string|null
     */
    public function getStartsOnString()
    {
        return $this->container['starts_on_string'];
    }

    /**
     * Sets starts_on_string
     *
     * @param string|null $starts_on_string starts_on_string
     *
     * @return self
     */
    public function setStartsOnString($starts_on_string)
    {
        if (is_null($starts_on_string)) {
            throw new \InvalidArgumentException('non-nullable starts_on_string cannot be null');
        }
        $this->container['starts_on_string'] = $starts_on_string;

        return $this;
    }

    /**
     * Gets configuration_id
     *
     * @return int|null
     */
    public function getConfigurationId()
    {
        return $this->container['configuration_id'];
    }

    /**
     * Sets configuration_id
     *
     * @param int|null $configuration_id configuration_id
     *
     * @return self
     */
    public function setConfigurationId($configuration_id)
    {
        if (is_null($configuration_id)) {
            throw new \InvalidArgumentException('non-nullable configuration_id cannot be null');
        }
        $this->container['configuration_id'] = $configuration_id;

        return $this;
    }

    /**
     * Gets configuration_name
     *
     * @return string|null
     */
    public function getConfigurationName()
    {
        return $this->container['configuration_name'];
    }

    /**
     * Sets configuration_name
     *
     * @param string|null $configuration_name configuration_name
     *
     * @return self
     */
    public function setConfigurationName($configuration_name)
    {
        if (is_null($configuration_name)) {
            throw new \InvalidArgumentException('non-nullable configuration_name cannot be null');
        }
        $this->container['configuration_name'] = $configuration_name;

        return $this;
    }

    /**
     * Gets custom_overtime_enabled
     *
     * @return bool|null
     */
    public function getCustomOvertimeEnabled()
    {
        return $this->container['custom_overtime_enabled'];
    }

    /**
     * Sets custom_overtime_enabled
     *
     * @param bool|null $custom_overtime_enabled custom_overtime_enabled
     *
     * @return self
     */
    public function setCustomOvertimeEnabled($custom_overtime_enabled)
    {
        if (is_null($custom_overtime_enabled)) {
            throw new \InvalidArgumentException('non-nullable custom_overtime_enabled cannot be null');
        }
        $this->container['custom_overtime_enabled'] = $custom_overtime_enabled;

        return $this;
    }

    /**
     * Gets custom_daily_overtime_threshold
     *
     * @return float|null
     */
    public function getCustomDailyOvertimeThreshold()
    {
        return $this->container['custom_daily_overtime_threshold'];
    }

    /**
     * Sets custom_daily_overtime_threshold
     *
     * @param float|null $custom_daily_overtime_threshold custom_daily_overtime_threshold
     *
     * @return self
     */
    public function setCustomDailyOvertimeThreshold($custom_daily_overtime_threshold)
    {
        if (is_null($custom_daily_overtime_threshold)) {
            array_push($this->openAPINullablesSetToNull, 'custom_daily_overtime_threshold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_daily_overtime_threshold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_daily_overtime_threshold'] = $custom_daily_overtime_threshold;

        return $this;
    }

    /**
     * Gets custom_daily_double_overtime_threshold
     *
     * @return float|null
     */
    public function getCustomDailyDoubleOvertimeThreshold()
    {
        return $this->container['custom_daily_double_overtime_threshold'];
    }

    /**
     * Sets custom_daily_double_overtime_threshold
     *
     * @param float|null $custom_daily_double_overtime_threshold custom_daily_double_overtime_threshold
     *
     * @return self
     */
    public function setCustomDailyDoubleOvertimeThreshold($custom_daily_double_overtime_threshold)
    {
        if (is_null($custom_daily_double_overtime_threshold)) {
            array_push($this->openAPINullablesSetToNull, 'custom_daily_double_overtime_threshold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_daily_double_overtime_threshold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_daily_double_overtime_threshold'] = $custom_daily_double_overtime_threshold;

        return $this;
    }

    /**
     * Gets custom_weekly_overtime_threshold
     *
     * @return float|null
     */
    public function getCustomWeeklyOvertimeThreshold()
    {
        return $this->container['custom_weekly_overtime_threshold'];
    }

    /**
     * Sets custom_weekly_overtime_threshold
     *
     * @param float|null $custom_weekly_overtime_threshold custom_weekly_overtime_threshold
     *
     * @return self
     */
    public function setCustomWeeklyOvertimeThreshold($custom_weekly_overtime_threshold)
    {
        if (is_null($custom_weekly_overtime_threshold)) {
            array_push($this->openAPINullablesSetToNull, 'custom_weekly_overtime_threshold');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_weekly_overtime_threshold', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_weekly_overtime_threshold'] = $custom_weekly_overtime_threshold;

        return $this;
    }

    /**
     * Gets mobile_enabled
     *
     * @return bool|null
     */
    public function getMobileEnabled()
    {
        return $this->container['mobile_enabled'];
    }

    /**
     * Sets mobile_enabled
     *
     * @param bool|null $mobile_enabled mobile_enabled
     *
     * @return self
     */
    public function setMobileEnabled($mobile_enabled)
    {
        if (is_null($mobile_enabled)) {
            throw new \InvalidArgumentException('non-nullable mobile_enabled cannot be null');
        }
        $this->container['mobile_enabled'] = $mobile_enabled;

        return $this;
    }

    /**
     * Gets geolocation_enabled
     *
     * @return bool|null
     */
    public function getGeolocationEnabled()
    {
        return $this->container['geolocation_enabled'];
    }

    /**
     * Sets geolocation_enabled
     *
     * @param bool|null $geolocation_enabled geolocation_enabled
     *
     * @return self
     */
    public function setGeolocationEnabled($geolocation_enabled)
    {
        if (is_null($geolocation_enabled)) {
            throw new \InvalidArgumentException('non-nullable geolocation_enabled cannot be null');
        }
        $this->container['geolocation_enabled'] = $geolocation_enabled;

        return $this;
    }

    /**
     * Gets timesheet_type
     *
     * @return mixed|null
     */
    public function getTimesheetType()
    {
        return $this->container['timesheet_type'];
    }

    /**
     * Sets timesheet_type
     *
     * @param mixed|null $timesheet_type timesheet_type
     *
     * @return self
     */
    public function setTimesheetType($timesheet_type)
    {
        if (is_null($timesheet_type)) {
            array_push($this->openAPINullablesSetToNull, 'timesheet_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timesheet_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timesheet_type'] = $timesheet_type;

        return $this;
    }

    /**
     * Gets work_week_starts_on
     *
     * @return mixed|null
     */
    public function getWorkWeekStartsOn()
    {
        return $this->container['work_week_starts_on'];
    }

    /**
     * Sets work_week_starts_on
     *
     * @param mixed|null $work_week_starts_on work_week_starts_on
     *
     * @return self
     */
    public function setWorkWeekStartsOn($work_week_starts_on)
    {
        if (is_null($work_week_starts_on)) {
            array_push($this->openAPINullablesSetToNull, 'work_week_starts_on');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('work_week_starts_on', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['work_week_starts_on'] = $work_week_starts_on;

        return $this;
    }

    /**
     * Gets clock_in_id
     *
     * @return string|null
     */
    public function getClockInId()
    {
        return $this->container['clock_in_id'];
    }

    /**
     * Sets clock_in_id
     *
     * @param string|null $clock_in_id clock_in_id
     *
     * @return self
     */
    public function setClockInId($clock_in_id)
    {
        if (is_null($clock_in_id)) {
            throw new \InvalidArgumentException('non-nullable clock_in_id cannot be null');
        }
        $this->container['clock_in_id'] = $clock_in_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


