<?php
/**
 * BulkEnrollEligibleEmployeeContract
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * BulkEnrollEligibleEmployeeContract Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BulkEnrollEligibleEmployeeContract implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BulkEnrollEligibleEmployeeContract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'display_name' => 'string',
        'last_name_first_name' => 'string',
        'currently_enrolled_in' => 'string',
        'eligibility_date' => 'string',
        'time_to_eligibility' => '\MySdk\Model\BulkEnrollTimeToEligibilityContract',
        'is_trax_payroll_employee' => 'bool',
        'is_missing_pay_schedule' => 'bool',
        'employment_status_id' => 'int',
        'division_id' => 'int',
        'department_id' => 'int',
        'location_id' => 'int',
        'pay_type' => 'string',
        'job_title_id' => 'int',
        'dependents' => '\MySdk\Model\Dependent[]',
        'is_ben_admin_employee' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'first_name' => null,
        'last_name' => null,
        'display_name' => null,
        'last_name_first_name' => null,
        'currently_enrolled_in' => null,
        'eligibility_date' => null,
        'time_to_eligibility' => null,
        'is_trax_payroll_employee' => null,
        'is_missing_pay_schedule' => null,
        'employment_status_id' => null,
        'division_id' => null,
        'department_id' => null,
        'location_id' => null,
        'pay_type' => null,
        'job_title_id' => null,
        'dependents' => null,
        'is_ben_admin_employee' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'first_name' => false,
        'last_name' => false,
        'display_name' => false,
        'last_name_first_name' => false,
        'currently_enrolled_in' => true,
        'eligibility_date' => true,
        'time_to_eligibility' => false,
        'is_trax_payroll_employee' => false,
        'is_missing_pay_schedule' => false,
        'employment_status_id' => true,
        'division_id' => true,
        'department_id' => true,
        'location_id' => true,
        'pay_type' => true,
        'job_title_id' => true,
        'dependents' => false,
        'is_ben_admin_employee' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'display_name' => 'displayName',
        'last_name_first_name' => 'lastNameFirstName',
        'currently_enrolled_in' => 'currentlyEnrolledIn',
        'eligibility_date' => 'eligibilityDate',
        'time_to_eligibility' => 'timeToEligibility',
        'is_trax_payroll_employee' => 'isTraxPayrollEmployee',
        'is_missing_pay_schedule' => 'isMissingPaySchedule',
        'employment_status_id' => 'employmentStatusId',
        'division_id' => 'divisionId',
        'department_id' => 'departmentId',
        'location_id' => 'locationId',
        'pay_type' => 'payType',
        'job_title_id' => 'jobTitleId',
        'dependents' => 'dependents',
        'is_ben_admin_employee' => 'isBenAdminEmployee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'display_name' => 'setDisplayName',
        'last_name_first_name' => 'setLastNameFirstName',
        'currently_enrolled_in' => 'setCurrentlyEnrolledIn',
        'eligibility_date' => 'setEligibilityDate',
        'time_to_eligibility' => 'setTimeToEligibility',
        'is_trax_payroll_employee' => 'setIsTraxPayrollEmployee',
        'is_missing_pay_schedule' => 'setIsMissingPaySchedule',
        'employment_status_id' => 'setEmploymentStatusId',
        'division_id' => 'setDivisionId',
        'department_id' => 'setDepartmentId',
        'location_id' => 'setLocationId',
        'pay_type' => 'setPayType',
        'job_title_id' => 'setJobTitleId',
        'dependents' => 'setDependents',
        'is_ben_admin_employee' => 'setIsBenAdminEmployee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'display_name' => 'getDisplayName',
        'last_name_first_name' => 'getLastNameFirstName',
        'currently_enrolled_in' => 'getCurrentlyEnrolledIn',
        'eligibility_date' => 'getEligibilityDate',
        'time_to_eligibility' => 'getTimeToEligibility',
        'is_trax_payroll_employee' => 'getIsTraxPayrollEmployee',
        'is_missing_pay_schedule' => 'getIsMissingPaySchedule',
        'employment_status_id' => 'getEmploymentStatusId',
        'division_id' => 'getDivisionId',
        'department_id' => 'getDepartmentId',
        'location_id' => 'getLocationId',
        'pay_type' => 'getPayType',
        'job_title_id' => 'getJobTitleId',
        'dependents' => 'getDependents',
        'is_ben_admin_employee' => 'getIsBenAdminEmployee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('last_name_first_name', $data ?? [], null);
        $this->setIfExists('currently_enrolled_in', $data ?? [], null);
        $this->setIfExists('eligibility_date', $data ?? [], null);
        $this->setIfExists('time_to_eligibility', $data ?? [], null);
        $this->setIfExists('is_trax_payroll_employee', $data ?? [], null);
        $this->setIfExists('is_missing_pay_schedule', $data ?? [], null);
        $this->setIfExists('employment_status_id', $data ?? [], null);
        $this->setIfExists('division_id', $data ?? [], null);
        $this->setIfExists('department_id', $data ?? [], null);
        $this->setIfExists('location_id', $data ?? [], null);
        $this->setIfExists('pay_type', $data ?? [], null);
        $this->setIfExists('job_title_id', $data ?? [], null);
        $this->setIfExists('dependents', $data ?? [], null);
        $this->setIfExists('is_ben_admin_employee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets last_name_first_name
     *
     * @return string|null
     */
    public function getLastNameFirstName()
    {
        return $this->container['last_name_first_name'];
    }

    /**
     * Sets last_name_first_name
     *
     * @param string|null $last_name_first_name last_name_first_name
     *
     * @return self
     */
    public function setLastNameFirstName($last_name_first_name)
    {
        if (is_null($last_name_first_name)) {
            throw new \InvalidArgumentException('non-nullable last_name_first_name cannot be null');
        }
        $this->container['last_name_first_name'] = $last_name_first_name;

        return $this;
    }

    /**
     * Gets currently_enrolled_in
     *
     * @return string|null
     */
    public function getCurrentlyEnrolledIn()
    {
        return $this->container['currently_enrolled_in'];
    }

    /**
     * Sets currently_enrolled_in
     *
     * @param string|null $currently_enrolled_in currently_enrolled_in
     *
     * @return self
     */
    public function setCurrentlyEnrolledIn($currently_enrolled_in)
    {
        if (is_null($currently_enrolled_in)) {
            array_push($this->openAPINullablesSetToNull, 'currently_enrolled_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currently_enrolled_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currently_enrolled_in'] = $currently_enrolled_in;

        return $this;
    }

    /**
     * Gets eligibility_date
     *
     * @return string|null
     */
    public function getEligibilityDate()
    {
        return $this->container['eligibility_date'];
    }

    /**
     * Sets eligibility_date
     *
     * @param string|null $eligibility_date eligibility_date
     *
     * @return self
     */
    public function setEligibilityDate($eligibility_date)
    {
        if (is_null($eligibility_date)) {
            array_push($this->openAPINullablesSetToNull, 'eligibility_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('eligibility_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['eligibility_date'] = $eligibility_date;

        return $this;
    }

    /**
     * Gets time_to_eligibility
     *
     * @return \MySdk\Model\BulkEnrollTimeToEligibilityContract|null
     */
    public function getTimeToEligibility()
    {
        return $this->container['time_to_eligibility'];
    }

    /**
     * Sets time_to_eligibility
     *
     * @param \MySdk\Model\BulkEnrollTimeToEligibilityContract|null $time_to_eligibility time_to_eligibility
     *
     * @return self
     */
    public function setTimeToEligibility($time_to_eligibility)
    {
        if (is_null($time_to_eligibility)) {
            throw new \InvalidArgumentException('non-nullable time_to_eligibility cannot be null');
        }
        $this->container['time_to_eligibility'] = $time_to_eligibility;

        return $this;
    }

    /**
     * Gets is_trax_payroll_employee
     *
     * @return bool|null
     */
    public function getIsTraxPayrollEmployee()
    {
        return $this->container['is_trax_payroll_employee'];
    }

    /**
     * Sets is_trax_payroll_employee
     *
     * @param bool|null $is_trax_payroll_employee is_trax_payroll_employee
     *
     * @return self
     */
    public function setIsTraxPayrollEmployee($is_trax_payroll_employee)
    {
        if (is_null($is_trax_payroll_employee)) {
            throw new \InvalidArgumentException('non-nullable is_trax_payroll_employee cannot be null');
        }
        $this->container['is_trax_payroll_employee'] = $is_trax_payroll_employee;

        return $this;
    }

    /**
     * Gets is_missing_pay_schedule
     *
     * @return bool|null
     */
    public function getIsMissingPaySchedule()
    {
        return $this->container['is_missing_pay_schedule'];
    }

    /**
     * Sets is_missing_pay_schedule
     *
     * @param bool|null $is_missing_pay_schedule is_missing_pay_schedule
     *
     * @return self
     */
    public function setIsMissingPaySchedule($is_missing_pay_schedule)
    {
        if (is_null($is_missing_pay_schedule)) {
            throw new \InvalidArgumentException('non-nullable is_missing_pay_schedule cannot be null');
        }
        $this->container['is_missing_pay_schedule'] = $is_missing_pay_schedule;

        return $this;
    }

    /**
     * Gets employment_status_id
     *
     * @return int|null
     */
    public function getEmploymentStatusId()
    {
        return $this->container['employment_status_id'];
    }

    /**
     * Sets employment_status_id
     *
     * @param int|null $employment_status_id employment_status_id
     *
     * @return self
     */
    public function setEmploymentStatusId($employment_status_id)
    {
        if (is_null($employment_status_id)) {
            array_push($this->openAPINullablesSetToNull, 'employment_status_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employment_status_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employment_status_id'] = $employment_status_id;

        return $this;
    }

    /**
     * Gets division_id
     *
     * @return int|null
     */
    public function getDivisionId()
    {
        return $this->container['division_id'];
    }

    /**
     * Sets division_id
     *
     * @param int|null $division_id division_id
     *
     * @return self
     */
    public function setDivisionId($division_id)
    {
        if (is_null($division_id)) {
            array_push($this->openAPINullablesSetToNull, 'division_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('division_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['division_id'] = $division_id;

        return $this;
    }

    /**
     * Gets department_id
     *
     * @return int|null
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     *
     * @param int|null $department_id department_id
     *
     * @return self
     */
    public function setDepartmentId($department_id)
    {
        if (is_null($department_id)) {
            array_push($this->openAPINullablesSetToNull, 'department_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int|null
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int|null $location_id location_id
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        if (is_null($location_id)) {
            array_push($this->openAPINullablesSetToNull, 'location_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets pay_type
     *
     * @return string|null
     */
    public function getPayType()
    {
        return $this->container['pay_type'];
    }

    /**
     * Sets pay_type
     *
     * @param string|null $pay_type pay_type
     *
     * @return self
     */
    public function setPayType($pay_type)
    {
        if (is_null($pay_type)) {
            array_push($this->openAPINullablesSetToNull, 'pay_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_type'] = $pay_type;

        return $this;
    }

    /**
     * Gets job_title_id
     *
     * @return int|null
     */
    public function getJobTitleId()
    {
        return $this->container['job_title_id'];
    }

    /**
     * Sets job_title_id
     *
     * @param int|null $job_title_id job_title_id
     *
     * @return self
     */
    public function setJobTitleId($job_title_id)
    {
        if (is_null($job_title_id)) {
            array_push($this->openAPINullablesSetToNull, 'job_title_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_title_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_title_id'] = $job_title_id;

        return $this;
    }

    /**
     * Gets dependents
     *
     * @return \MySdk\Model\Dependent[]|null
     */
    public function getDependents()
    {
        return $this->container['dependents'];
    }

    /**
     * Sets dependents
     *
     * @param \MySdk\Model\Dependent[]|null $dependents dependents
     *
     * @return self
     */
    public function setDependents($dependents)
    {
        if (is_null($dependents)) {
            throw new \InvalidArgumentException('non-nullable dependents cannot be null');
        }
        $this->container['dependents'] = $dependents;

        return $this;
    }

    /**
     * Gets is_ben_admin_employee
     *
     * @return bool|null
     */
    public function getIsBenAdminEmployee()
    {
        return $this->container['is_ben_admin_employee'];
    }

    /**
     * Sets is_ben_admin_employee
     *
     * @param bool|null $is_ben_admin_employee is_ben_admin_employee
     *
     * @return self
     */
    public function setIsBenAdminEmployee($is_ben_admin_employee)
    {
        if (is_null($is_ben_admin_employee)) {
            throw new \InvalidArgumentException('non-nullable is_ben_admin_employee cannot be null');
        }
        $this->container['is_ben_admin_employee'] = $is_ben_admin_employee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


