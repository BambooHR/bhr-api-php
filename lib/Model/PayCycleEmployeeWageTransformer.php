<?php
/**
 * PayCycleEmployeeWageTransformer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayCycleEmployeeWageTransformer Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayCycleEmployeeWageTransformer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayCycleEmployeeWageTransformer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'job_id' => 'int',
        'category_id' => 'int',
        'sub_category_id' => 'int',
        'regular' => '\MySdk\Model\PayCycleEmployeeRegularWageDataObjectTransformer',
        'overtime' => '\MySdk\Model\PayCycleEmployeeOvertimeWageDataObjectTransformer',
        'double_time' => '\MySdk\Model\PayCycleEmployeeOtherWageDataObjectTransformer',
        'additional_pay' => '\MySdk\Model\AdditionalPayTransformer[]',
        'time_off' => '\MySdk\Model\PayCycleEmployeeTimeOffUsedTransformer[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'job_id' => null,
        'category_id' => null,
        'sub_category_id' => null,
        'regular' => null,
        'overtime' => null,
        'double_time' => null,
        'additional_pay' => null,
        'time_off' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'job_id' => false,
        'category_id' => false,
        'sub_category_id' => false,
        'regular' => false,
        'overtime' => false,
        'double_time' => false,
        'additional_pay' => false,
        'time_off' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'job_id' => 'jobId',
        'category_id' => 'categoryId',
        'sub_category_id' => 'subCategoryId',
        'regular' => 'regular',
        'overtime' => 'overtime',
        'double_time' => 'doubleTime',
        'additional_pay' => 'additionalPay',
        'time_off' => 'timeOff'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'job_id' => 'setJobId',
        'category_id' => 'setCategoryId',
        'sub_category_id' => 'setSubCategoryId',
        'regular' => 'setRegular',
        'overtime' => 'setOvertime',
        'double_time' => 'setDoubleTime',
        'additional_pay' => 'setAdditionalPay',
        'time_off' => 'setTimeOff'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'job_id' => 'getJobId',
        'category_id' => 'getCategoryId',
        'sub_category_id' => 'getSubCategoryId',
        'regular' => 'getRegular',
        'overtime' => 'getOvertime',
        'double_time' => 'getDoubleTime',
        'additional_pay' => 'getAdditionalPay',
        'time_off' => 'getTimeOff'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('job_id', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('sub_category_id', $data ?? [], null);
        $this->setIfExists('regular', $data ?? [], null);
        $this->setIfExists('overtime', $data ?? [], null);
        $this->setIfExists('double_time', $data ?? [], null);
        $this->setIfExists('additional_pay', $data ?? [], null);
        $this->setIfExists('time_off', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets job_id
     *
     * @return int|null
     */
    public function getJobId()
    {
        return $this->container['job_id'];
    }

    /**
     * Sets job_id
     *
     * @param int|null $job_id transform
     *
     * @return self
     */
    public function setJobId($job_id)
    {
        if (is_null($job_id)) {
            throw new \InvalidArgumentException('non-nullable job_id cannot be null');
        }
        $this->container['job_id'] = $job_id;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id category_id
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            throw new \InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets sub_category_id
     *
     * @return int|null
     */
    public function getSubCategoryId()
    {
        return $this->container['sub_category_id'];
    }

    /**
     * Sets sub_category_id
     *
     * @param int|null $sub_category_id sub_category_id
     *
     * @return self
     */
    public function setSubCategoryId($sub_category_id)
    {
        if (is_null($sub_category_id)) {
            throw new \InvalidArgumentException('non-nullable sub_category_id cannot be null');
        }
        $this->container['sub_category_id'] = $sub_category_id;

        return $this;
    }

    /**
     * Gets regular
     *
     * @return \MySdk\Model\PayCycleEmployeeRegularWageDataObjectTransformer|null
     */
    public function getRegular()
    {
        return $this->container['regular'];
    }

    /**
     * Sets regular
     *
     * @param \MySdk\Model\PayCycleEmployeeRegularWageDataObjectTransformer|null $regular regular
     *
     * @return self
     */
    public function setRegular($regular)
    {
        if (is_null($regular)) {
            throw new \InvalidArgumentException('non-nullable regular cannot be null');
        }
        $this->container['regular'] = $regular;

        return $this;
    }

    /**
     * Gets overtime
     *
     * @return \MySdk\Model\PayCycleEmployeeOvertimeWageDataObjectTransformer|null
     */
    public function getOvertime()
    {
        return $this->container['overtime'];
    }

    /**
     * Sets overtime
     *
     * @param \MySdk\Model\PayCycleEmployeeOvertimeWageDataObjectTransformer|null $overtime overtime
     *
     * @return self
     */
    public function setOvertime($overtime)
    {
        if (is_null($overtime)) {
            throw new \InvalidArgumentException('non-nullable overtime cannot be null');
        }
        $this->container['overtime'] = $overtime;

        return $this;
    }

    /**
     * Gets double_time
     *
     * @return \MySdk\Model\PayCycleEmployeeOtherWageDataObjectTransformer|null
     */
    public function getDoubleTime()
    {
        return $this->container['double_time'];
    }

    /**
     * Sets double_time
     *
     * @param \MySdk\Model\PayCycleEmployeeOtherWageDataObjectTransformer|null $double_time double_time
     *
     * @return self
     */
    public function setDoubleTime($double_time)
    {
        if (is_null($double_time)) {
            throw new \InvalidArgumentException('non-nullable double_time cannot be null');
        }
        $this->container['double_time'] = $double_time;

        return $this;
    }

    /**
     * Gets additional_pay
     *
     * @return \MySdk\Model\AdditionalPayTransformer[]|null
     */
    public function getAdditionalPay()
    {
        return $this->container['additional_pay'];
    }

    /**
     * Sets additional_pay
     *
     * @param \MySdk\Model\AdditionalPayTransformer[]|null $additional_pay transform
     *
     * @return self
     */
    public function setAdditionalPay($additional_pay)
    {
        if (is_null($additional_pay)) {
            throw new \InvalidArgumentException('non-nullable additional_pay cannot be null');
        }
        $this->container['additional_pay'] = $additional_pay;

        return $this;
    }

    /**
     * Gets time_off
     *
     * @return \MySdk\Model\PayCycleEmployeeTimeOffUsedTransformer[]|null
     */
    public function getTimeOff()
    {
        return $this->container['time_off'];
    }

    /**
     * Sets time_off
     *
     * @param \MySdk\Model\PayCycleEmployeeTimeOffUsedTransformer[]|null $time_off transform
     *
     * @return self
     */
    public function setTimeOff($time_off)
    {
        if (is_null($time_off)) {
            throw new \InvalidArgumentException('non-nullable time_off cannot be null');
        }
        $this->container['time_off'] = $time_off;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


