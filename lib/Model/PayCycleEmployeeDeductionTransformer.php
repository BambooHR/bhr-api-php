<?php
/**
 * PayCycleEmployeeDeductionTransformer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayCycleEmployeeDeductionTransformer Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayCycleEmployeeDeductionTransformer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayCycleEmployeeDeductionTransformer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pay_cycle_employee_deduction_id' => 'int',
        'deduction_name' => 'string',
        'employee_deduction_id' => 'int',
        'deduction_type_id' => 'int',
        'deduction_type_name' => 'string',
        'benefit_type_name' => 'string',
        'is_benefit_deduction' => 'bool',
        'company_level_deduction_id' => 'int',
        'disable' => 'bool',
        'company_pays_amount' => 'float',
        'company_pays_amount_original' => 'float',
        'company_pays_amount_type' => 'string',
        'company_pays_amount_type_based_on' => 'string',
        'company_pays_annual_max' => 'float',
        'company_pays_annual_max_current_amount' => 'float',
        'company_pays_cap_amount' => 'float',
        'company_pays_cap_amount_type' => 'string',
        'company_pays_cap_amount_current_amount' => 'float',
        'employee_pays_amount' => 'float',
        'employee_pays_amount_original' => 'float',
        'employee_pays_amount_type' => 'string',
        'employee_pays_amount_type_based_on' => 'string',
        'employee_pays_annual_max' => 'float',
        'employee_pays_annual_max_current_amount' => 'float',
        'employee_pays_cap_amount' => 'float',
        'employee_pays_cap_amount_type' => 'string',
        'employee_pays_cap_amount_current_amount' => 'float',
        'safe_harbor' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pay_cycle_employee_deduction_id' => null,
        'deduction_name' => null,
        'employee_deduction_id' => null,
        'deduction_type_id' => null,
        'deduction_type_name' => null,
        'benefit_type_name' => null,
        'is_benefit_deduction' => null,
        'company_level_deduction_id' => null,
        'disable' => null,
        'company_pays_amount' => null,
        'company_pays_amount_original' => null,
        'company_pays_amount_type' => null,
        'company_pays_amount_type_based_on' => null,
        'company_pays_annual_max' => null,
        'company_pays_annual_max_current_amount' => null,
        'company_pays_cap_amount' => null,
        'company_pays_cap_amount_type' => null,
        'company_pays_cap_amount_current_amount' => null,
        'employee_pays_amount' => null,
        'employee_pays_amount_original' => null,
        'employee_pays_amount_type' => null,
        'employee_pays_amount_type_based_on' => null,
        'employee_pays_annual_max' => null,
        'employee_pays_annual_max_current_amount' => null,
        'employee_pays_cap_amount' => null,
        'employee_pays_cap_amount_type' => null,
        'employee_pays_cap_amount_current_amount' => null,
        'safe_harbor' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pay_cycle_employee_deduction_id' => false,
        'deduction_name' => false,
        'employee_deduction_id' => false,
        'deduction_type_id' => false,
        'deduction_type_name' => false,
        'benefit_type_name' => false,
        'is_benefit_deduction' => false,
        'company_level_deduction_id' => false,
        'disable' => false,
        'company_pays_amount' => false,
        'company_pays_amount_original' => false,
        'company_pays_amount_type' => false,
        'company_pays_amount_type_based_on' => false,
        'company_pays_annual_max' => false,
        'company_pays_annual_max_current_amount' => false,
        'company_pays_cap_amount' => false,
        'company_pays_cap_amount_type' => false,
        'company_pays_cap_amount_current_amount' => false,
        'employee_pays_amount' => false,
        'employee_pays_amount_original' => false,
        'employee_pays_amount_type' => false,
        'employee_pays_amount_type_based_on' => false,
        'employee_pays_annual_max' => false,
        'employee_pays_annual_max_current_amount' => false,
        'employee_pays_cap_amount' => false,
        'employee_pays_cap_amount_type' => false,
        'employee_pays_cap_amount_current_amount' => false,
        'safe_harbor' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_cycle_employee_deduction_id' => 'payCycleEmployeeDeductionId',
        'deduction_name' => 'deductionName',
        'employee_deduction_id' => 'employeeDeductionId',
        'deduction_type_id' => 'deductionTypeId',
        'deduction_type_name' => 'deductionTypeName',
        'benefit_type_name' => 'benefitTypeName',
        'is_benefit_deduction' => 'isBenefitDeduction',
        'company_level_deduction_id' => 'companyLevelDeductionId',
        'disable' => 'disable',
        'company_pays_amount' => 'companyPaysAmount',
        'company_pays_amount_original' => 'companyPaysAmountOriginal',
        'company_pays_amount_type' => 'companyPaysAmountType',
        'company_pays_amount_type_based_on' => 'companyPaysAmountTypeBasedOn',
        'company_pays_annual_max' => 'companyPaysAnnualMax',
        'company_pays_annual_max_current_amount' => 'companyPaysAnnualMaxCurrentAmount',
        'company_pays_cap_amount' => 'companyPaysCapAmount',
        'company_pays_cap_amount_type' => 'companyPaysCapAmountType',
        'company_pays_cap_amount_current_amount' => 'companyPaysCapAmountCurrentAmount',
        'employee_pays_amount' => 'employeePaysAmount',
        'employee_pays_amount_original' => 'employeePaysAmountOriginal',
        'employee_pays_amount_type' => 'employeePaysAmountType',
        'employee_pays_amount_type_based_on' => 'employeePaysAmountTypeBasedOn',
        'employee_pays_annual_max' => 'employeePaysAnnualMax',
        'employee_pays_annual_max_current_amount' => 'employeePaysAnnualMaxCurrentAmount',
        'employee_pays_cap_amount' => 'employeePaysCapAmount',
        'employee_pays_cap_amount_type' => 'employeePaysCapAmountType',
        'employee_pays_cap_amount_current_amount' => 'employeePaysCapAmountCurrentAmount',
        'safe_harbor' => 'safeHarbor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_cycle_employee_deduction_id' => 'setPayCycleEmployeeDeductionId',
        'deduction_name' => 'setDeductionName',
        'employee_deduction_id' => 'setEmployeeDeductionId',
        'deduction_type_id' => 'setDeductionTypeId',
        'deduction_type_name' => 'setDeductionTypeName',
        'benefit_type_name' => 'setBenefitTypeName',
        'is_benefit_deduction' => 'setIsBenefitDeduction',
        'company_level_deduction_id' => 'setCompanyLevelDeductionId',
        'disable' => 'setDisable',
        'company_pays_amount' => 'setCompanyPaysAmount',
        'company_pays_amount_original' => 'setCompanyPaysAmountOriginal',
        'company_pays_amount_type' => 'setCompanyPaysAmountType',
        'company_pays_amount_type_based_on' => 'setCompanyPaysAmountTypeBasedOn',
        'company_pays_annual_max' => 'setCompanyPaysAnnualMax',
        'company_pays_annual_max_current_amount' => 'setCompanyPaysAnnualMaxCurrentAmount',
        'company_pays_cap_amount' => 'setCompanyPaysCapAmount',
        'company_pays_cap_amount_type' => 'setCompanyPaysCapAmountType',
        'company_pays_cap_amount_current_amount' => 'setCompanyPaysCapAmountCurrentAmount',
        'employee_pays_amount' => 'setEmployeePaysAmount',
        'employee_pays_amount_original' => 'setEmployeePaysAmountOriginal',
        'employee_pays_amount_type' => 'setEmployeePaysAmountType',
        'employee_pays_amount_type_based_on' => 'setEmployeePaysAmountTypeBasedOn',
        'employee_pays_annual_max' => 'setEmployeePaysAnnualMax',
        'employee_pays_annual_max_current_amount' => 'setEmployeePaysAnnualMaxCurrentAmount',
        'employee_pays_cap_amount' => 'setEmployeePaysCapAmount',
        'employee_pays_cap_amount_type' => 'setEmployeePaysCapAmountType',
        'employee_pays_cap_amount_current_amount' => 'setEmployeePaysCapAmountCurrentAmount',
        'safe_harbor' => 'setSafeHarbor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_cycle_employee_deduction_id' => 'getPayCycleEmployeeDeductionId',
        'deduction_name' => 'getDeductionName',
        'employee_deduction_id' => 'getEmployeeDeductionId',
        'deduction_type_id' => 'getDeductionTypeId',
        'deduction_type_name' => 'getDeductionTypeName',
        'benefit_type_name' => 'getBenefitTypeName',
        'is_benefit_deduction' => 'getIsBenefitDeduction',
        'company_level_deduction_id' => 'getCompanyLevelDeductionId',
        'disable' => 'getDisable',
        'company_pays_amount' => 'getCompanyPaysAmount',
        'company_pays_amount_original' => 'getCompanyPaysAmountOriginal',
        'company_pays_amount_type' => 'getCompanyPaysAmountType',
        'company_pays_amount_type_based_on' => 'getCompanyPaysAmountTypeBasedOn',
        'company_pays_annual_max' => 'getCompanyPaysAnnualMax',
        'company_pays_annual_max_current_amount' => 'getCompanyPaysAnnualMaxCurrentAmount',
        'company_pays_cap_amount' => 'getCompanyPaysCapAmount',
        'company_pays_cap_amount_type' => 'getCompanyPaysCapAmountType',
        'company_pays_cap_amount_current_amount' => 'getCompanyPaysCapAmountCurrentAmount',
        'employee_pays_amount' => 'getEmployeePaysAmount',
        'employee_pays_amount_original' => 'getEmployeePaysAmountOriginal',
        'employee_pays_amount_type' => 'getEmployeePaysAmountType',
        'employee_pays_amount_type_based_on' => 'getEmployeePaysAmountTypeBasedOn',
        'employee_pays_annual_max' => 'getEmployeePaysAnnualMax',
        'employee_pays_annual_max_current_amount' => 'getEmployeePaysAnnualMaxCurrentAmount',
        'employee_pays_cap_amount' => 'getEmployeePaysCapAmount',
        'employee_pays_cap_amount_type' => 'getEmployeePaysCapAmountType',
        'employee_pays_cap_amount_current_amount' => 'getEmployeePaysCapAmountCurrentAmount',
        'safe_harbor' => 'getSafeHarbor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pay_cycle_employee_deduction_id', $data ?? [], null);
        $this->setIfExists('deduction_name', $data ?? [], null);
        $this->setIfExists('employee_deduction_id', $data ?? [], null);
        $this->setIfExists('deduction_type_id', $data ?? [], null);
        $this->setIfExists('deduction_type_name', $data ?? [], null);
        $this->setIfExists('benefit_type_name', $data ?? [], null);
        $this->setIfExists('is_benefit_deduction', $data ?? [], null);
        $this->setIfExists('company_level_deduction_id', $data ?? [], null);
        $this->setIfExists('disable', $data ?? [], null);
        $this->setIfExists('company_pays_amount', $data ?? [], null);
        $this->setIfExists('company_pays_amount_original', $data ?? [], null);
        $this->setIfExists('company_pays_amount_type', $data ?? [], null);
        $this->setIfExists('company_pays_amount_type_based_on', $data ?? [], null);
        $this->setIfExists('company_pays_annual_max', $data ?? [], null);
        $this->setIfExists('company_pays_annual_max_current_amount', $data ?? [], null);
        $this->setIfExists('company_pays_cap_amount', $data ?? [], null);
        $this->setIfExists('company_pays_cap_amount_type', $data ?? [], null);
        $this->setIfExists('company_pays_cap_amount_current_amount', $data ?? [], null);
        $this->setIfExists('employee_pays_amount', $data ?? [], null);
        $this->setIfExists('employee_pays_amount_original', $data ?? [], null);
        $this->setIfExists('employee_pays_amount_type', $data ?? [], null);
        $this->setIfExists('employee_pays_amount_type_based_on', $data ?? [], null);
        $this->setIfExists('employee_pays_annual_max', $data ?? [], null);
        $this->setIfExists('employee_pays_annual_max_current_amount', $data ?? [], null);
        $this->setIfExists('employee_pays_cap_amount', $data ?? [], null);
        $this->setIfExists('employee_pays_cap_amount_type', $data ?? [], null);
        $this->setIfExists('employee_pays_cap_amount_current_amount', $data ?? [], null);
        $this->setIfExists('safe_harbor', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_cycle_employee_deduction_id
     *
     * @return int|null
     */
    public function getPayCycleEmployeeDeductionId()
    {
        return $this->container['pay_cycle_employee_deduction_id'];
    }

    /**
     * Sets pay_cycle_employee_deduction_id
     *
     * @param int|null $pay_cycle_employee_deduction_id pay_cycle_employee_deduction_id
     *
     * @return self
     */
    public function setPayCycleEmployeeDeductionId($pay_cycle_employee_deduction_id)
    {
        if (is_null($pay_cycle_employee_deduction_id)) {
            throw new \InvalidArgumentException('non-nullable pay_cycle_employee_deduction_id cannot be null');
        }
        $this->container['pay_cycle_employee_deduction_id'] = $pay_cycle_employee_deduction_id;

        return $this;
    }

    /**
     * Gets deduction_name
     *
     * @return string|null
     */
    public function getDeductionName()
    {
        return $this->container['deduction_name'];
    }

    /**
     * Sets deduction_name
     *
     * @param string|null $deduction_name deduction_name
     *
     * @return self
     */
    public function setDeductionName($deduction_name)
    {
        if (is_null($deduction_name)) {
            throw new \InvalidArgumentException('non-nullable deduction_name cannot be null');
        }
        $this->container['deduction_name'] = $deduction_name;

        return $this;
    }

    /**
     * Gets employee_deduction_id
     *
     * @return int|null
     */
    public function getEmployeeDeductionId()
    {
        return $this->container['employee_deduction_id'];
    }

    /**
     * Sets employee_deduction_id
     *
     * @param int|null $employee_deduction_id employee_deduction_id
     *
     * @return self
     */
    public function setEmployeeDeductionId($employee_deduction_id)
    {
        if (is_null($employee_deduction_id)) {
            throw new \InvalidArgumentException('non-nullable employee_deduction_id cannot be null');
        }
        $this->container['employee_deduction_id'] = $employee_deduction_id;

        return $this;
    }

    /**
     * Gets deduction_type_id
     *
     * @return int|null
     */
    public function getDeductionTypeId()
    {
        return $this->container['deduction_type_id'];
    }

    /**
     * Sets deduction_type_id
     *
     * @param int|null $deduction_type_id deduction_type_id
     *
     * @return self
     */
    public function setDeductionTypeId($deduction_type_id)
    {
        if (is_null($deduction_type_id)) {
            throw new \InvalidArgumentException('non-nullable deduction_type_id cannot be null');
        }
        $this->container['deduction_type_id'] = $deduction_type_id;

        return $this;
    }

    /**
     * Gets deduction_type_name
     *
     * @return string|null
     */
    public function getDeductionTypeName()
    {
        return $this->container['deduction_type_name'];
    }

    /**
     * Sets deduction_type_name
     *
     * @param string|null $deduction_type_name deduction_type_name
     *
     * @return self
     */
    public function setDeductionTypeName($deduction_type_name)
    {
        if (is_null($deduction_type_name)) {
            throw new \InvalidArgumentException('non-nullable deduction_type_name cannot be null');
        }
        $this->container['deduction_type_name'] = $deduction_type_name;

        return $this;
    }

    /**
     * Gets benefit_type_name
     *
     * @return string|null
     */
    public function getBenefitTypeName()
    {
        return $this->container['benefit_type_name'];
    }

    /**
     * Sets benefit_type_name
     *
     * @param string|null $benefit_type_name benefit_type_name
     *
     * @return self
     */
    public function setBenefitTypeName($benefit_type_name)
    {
        if (is_null($benefit_type_name)) {
            throw new \InvalidArgumentException('non-nullable benefit_type_name cannot be null');
        }
        $this->container['benefit_type_name'] = $benefit_type_name;

        return $this;
    }

    /**
     * Gets is_benefit_deduction
     *
     * @return bool|null
     */
    public function getIsBenefitDeduction()
    {
        return $this->container['is_benefit_deduction'];
    }

    /**
     * Sets is_benefit_deduction
     *
     * @param bool|null $is_benefit_deduction is_benefit_deduction
     *
     * @return self
     */
    public function setIsBenefitDeduction($is_benefit_deduction)
    {
        if (is_null($is_benefit_deduction)) {
            throw new \InvalidArgumentException('non-nullable is_benefit_deduction cannot be null');
        }
        $this->container['is_benefit_deduction'] = $is_benefit_deduction;

        return $this;
    }

    /**
     * Gets company_level_deduction_id
     *
     * @return int|null
     */
    public function getCompanyLevelDeductionId()
    {
        return $this->container['company_level_deduction_id'];
    }

    /**
     * Sets company_level_deduction_id
     *
     * @param int|null $company_level_deduction_id company_level_deduction_id
     *
     * @return self
     */
    public function setCompanyLevelDeductionId($company_level_deduction_id)
    {
        if (is_null($company_level_deduction_id)) {
            throw new \InvalidArgumentException('non-nullable company_level_deduction_id cannot be null');
        }
        $this->container['company_level_deduction_id'] = $company_level_deduction_id;

        return $this;
    }

    /**
     * Gets disable
     *
     * @return bool|null
     */
    public function getDisable()
    {
        return $this->container['disable'];
    }

    /**
     * Sets disable
     *
     * @param bool|null $disable disable
     *
     * @return self
     */
    public function setDisable($disable)
    {
        if (is_null($disable)) {
            throw new \InvalidArgumentException('non-nullable disable cannot be null');
        }
        $this->container['disable'] = $disable;

        return $this;
    }

    /**
     * Gets company_pays_amount
     *
     * @return float|null
     */
    public function getCompanyPaysAmount()
    {
        return $this->container['company_pays_amount'];
    }

    /**
     * Sets company_pays_amount
     *
     * @param float|null $company_pays_amount company_pays_amount
     *
     * @return self
     */
    public function setCompanyPaysAmount($company_pays_amount)
    {
        if (is_null($company_pays_amount)) {
            throw new \InvalidArgumentException('non-nullable company_pays_amount cannot be null');
        }
        $this->container['company_pays_amount'] = $company_pays_amount;

        return $this;
    }

    /**
     * Gets company_pays_amount_original
     *
     * @return float|null
     */
    public function getCompanyPaysAmountOriginal()
    {
        return $this->container['company_pays_amount_original'];
    }

    /**
     * Sets company_pays_amount_original
     *
     * @param float|null $company_pays_amount_original company_pays_amount_original
     *
     * @return self
     */
    public function setCompanyPaysAmountOriginal($company_pays_amount_original)
    {
        if (is_null($company_pays_amount_original)) {
            throw new \InvalidArgumentException('non-nullable company_pays_amount_original cannot be null');
        }
        $this->container['company_pays_amount_original'] = $company_pays_amount_original;

        return $this;
    }

    /**
     * Gets company_pays_amount_type
     *
     * @return string|null
     */
    public function getCompanyPaysAmountType()
    {
        return $this->container['company_pays_amount_type'];
    }

    /**
     * Sets company_pays_amount_type
     *
     * @param string|null $company_pays_amount_type company_pays_amount_type
     *
     * @return self
     */
    public function setCompanyPaysAmountType($company_pays_amount_type)
    {
        if (is_null($company_pays_amount_type)) {
            throw new \InvalidArgumentException('non-nullable company_pays_amount_type cannot be null');
        }
        $this->container['company_pays_amount_type'] = $company_pays_amount_type;

        return $this;
    }

    /**
     * Gets company_pays_amount_type_based_on
     *
     * @return string|null
     */
    public function getCompanyPaysAmountTypeBasedOn()
    {
        return $this->container['company_pays_amount_type_based_on'];
    }

    /**
     * Sets company_pays_amount_type_based_on
     *
     * @param string|null $company_pays_amount_type_based_on company_pays_amount_type_based_on
     *
     * @return self
     */
    public function setCompanyPaysAmountTypeBasedOn($company_pays_amount_type_based_on)
    {
        if (is_null($company_pays_amount_type_based_on)) {
            throw new \InvalidArgumentException('non-nullable company_pays_amount_type_based_on cannot be null');
        }
        $this->container['company_pays_amount_type_based_on'] = $company_pays_amount_type_based_on;

        return $this;
    }

    /**
     * Gets company_pays_annual_max
     *
     * @return float|null
     */
    public function getCompanyPaysAnnualMax()
    {
        return $this->container['company_pays_annual_max'];
    }

    /**
     * Sets company_pays_annual_max
     *
     * @param float|null $company_pays_annual_max company_pays_annual_max
     *
     * @return self
     */
    public function setCompanyPaysAnnualMax($company_pays_annual_max)
    {
        if (is_null($company_pays_annual_max)) {
            throw new \InvalidArgumentException('non-nullable company_pays_annual_max cannot be null');
        }
        $this->container['company_pays_annual_max'] = $company_pays_annual_max;

        return $this;
    }

    /**
     * Gets company_pays_annual_max_current_amount
     *
     * @return float|null
     */
    public function getCompanyPaysAnnualMaxCurrentAmount()
    {
        return $this->container['company_pays_annual_max_current_amount'];
    }

    /**
     * Sets company_pays_annual_max_current_amount
     *
     * @param float|null $company_pays_annual_max_current_amount company_pays_annual_max_current_amount
     *
     * @return self
     */
    public function setCompanyPaysAnnualMaxCurrentAmount($company_pays_annual_max_current_amount)
    {
        if (is_null($company_pays_annual_max_current_amount)) {
            throw new \InvalidArgumentException('non-nullable company_pays_annual_max_current_amount cannot be null');
        }
        $this->container['company_pays_annual_max_current_amount'] = $company_pays_annual_max_current_amount;

        return $this;
    }

    /**
     * Gets company_pays_cap_amount
     *
     * @return float|null
     */
    public function getCompanyPaysCapAmount()
    {
        return $this->container['company_pays_cap_amount'];
    }

    /**
     * Sets company_pays_cap_amount
     *
     * @param float|null $company_pays_cap_amount company_pays_cap_amount
     *
     * @return self
     */
    public function setCompanyPaysCapAmount($company_pays_cap_amount)
    {
        if (is_null($company_pays_cap_amount)) {
            throw new \InvalidArgumentException('non-nullable company_pays_cap_amount cannot be null');
        }
        $this->container['company_pays_cap_amount'] = $company_pays_cap_amount;

        return $this;
    }

    /**
     * Gets company_pays_cap_amount_type
     *
     * @return string|null
     */
    public function getCompanyPaysCapAmountType()
    {
        return $this->container['company_pays_cap_amount_type'];
    }

    /**
     * Sets company_pays_cap_amount_type
     *
     * @param string|null $company_pays_cap_amount_type company_pays_cap_amount_type
     *
     * @return self
     */
    public function setCompanyPaysCapAmountType($company_pays_cap_amount_type)
    {
        if (is_null($company_pays_cap_amount_type)) {
            throw new \InvalidArgumentException('non-nullable company_pays_cap_amount_type cannot be null');
        }
        $this->container['company_pays_cap_amount_type'] = $company_pays_cap_amount_type;

        return $this;
    }

    /**
     * Gets company_pays_cap_amount_current_amount
     *
     * @return float|null
     */
    public function getCompanyPaysCapAmountCurrentAmount()
    {
        return $this->container['company_pays_cap_amount_current_amount'];
    }

    /**
     * Sets company_pays_cap_amount_current_amount
     *
     * @param float|null $company_pays_cap_amount_current_amount company_pays_cap_amount_current_amount
     *
     * @return self
     */
    public function setCompanyPaysCapAmountCurrentAmount($company_pays_cap_amount_current_amount)
    {
        if (is_null($company_pays_cap_amount_current_amount)) {
            throw new \InvalidArgumentException('non-nullable company_pays_cap_amount_current_amount cannot be null');
        }
        $this->container['company_pays_cap_amount_current_amount'] = $company_pays_cap_amount_current_amount;

        return $this;
    }

    /**
     * Gets employee_pays_amount
     *
     * @return float|null
     */
    public function getEmployeePaysAmount()
    {
        return $this->container['employee_pays_amount'];
    }

    /**
     * Sets employee_pays_amount
     *
     * @param float|null $employee_pays_amount employee_pays_amount
     *
     * @return self
     */
    public function setEmployeePaysAmount($employee_pays_amount)
    {
        if (is_null($employee_pays_amount)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_amount cannot be null');
        }
        $this->container['employee_pays_amount'] = $employee_pays_amount;

        return $this;
    }

    /**
     * Gets employee_pays_amount_original
     *
     * @return float|null
     */
    public function getEmployeePaysAmountOriginal()
    {
        return $this->container['employee_pays_amount_original'];
    }

    /**
     * Sets employee_pays_amount_original
     *
     * @param float|null $employee_pays_amount_original employee_pays_amount_original
     *
     * @return self
     */
    public function setEmployeePaysAmountOriginal($employee_pays_amount_original)
    {
        if (is_null($employee_pays_amount_original)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_amount_original cannot be null');
        }
        $this->container['employee_pays_amount_original'] = $employee_pays_amount_original;

        return $this;
    }

    /**
     * Gets employee_pays_amount_type
     *
     * @return string|null
     */
    public function getEmployeePaysAmountType()
    {
        return $this->container['employee_pays_amount_type'];
    }

    /**
     * Sets employee_pays_amount_type
     *
     * @param string|null $employee_pays_amount_type employee_pays_amount_type
     *
     * @return self
     */
    public function setEmployeePaysAmountType($employee_pays_amount_type)
    {
        if (is_null($employee_pays_amount_type)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_amount_type cannot be null');
        }
        $this->container['employee_pays_amount_type'] = $employee_pays_amount_type;

        return $this;
    }

    /**
     * Gets employee_pays_amount_type_based_on
     *
     * @return string|null
     */
    public function getEmployeePaysAmountTypeBasedOn()
    {
        return $this->container['employee_pays_amount_type_based_on'];
    }

    /**
     * Sets employee_pays_amount_type_based_on
     *
     * @param string|null $employee_pays_amount_type_based_on employee_pays_amount_type_based_on
     *
     * @return self
     */
    public function setEmployeePaysAmountTypeBasedOn($employee_pays_amount_type_based_on)
    {
        if (is_null($employee_pays_amount_type_based_on)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_amount_type_based_on cannot be null');
        }
        $this->container['employee_pays_amount_type_based_on'] = $employee_pays_amount_type_based_on;

        return $this;
    }

    /**
     * Gets employee_pays_annual_max
     *
     * @return float|null
     */
    public function getEmployeePaysAnnualMax()
    {
        return $this->container['employee_pays_annual_max'];
    }

    /**
     * Sets employee_pays_annual_max
     *
     * @param float|null $employee_pays_annual_max employee_pays_annual_max
     *
     * @return self
     */
    public function setEmployeePaysAnnualMax($employee_pays_annual_max)
    {
        if (is_null($employee_pays_annual_max)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_annual_max cannot be null');
        }
        $this->container['employee_pays_annual_max'] = $employee_pays_annual_max;

        return $this;
    }

    /**
     * Gets employee_pays_annual_max_current_amount
     *
     * @return float|null
     */
    public function getEmployeePaysAnnualMaxCurrentAmount()
    {
        return $this->container['employee_pays_annual_max_current_amount'];
    }

    /**
     * Sets employee_pays_annual_max_current_amount
     *
     * @param float|null $employee_pays_annual_max_current_amount employee_pays_annual_max_current_amount
     *
     * @return self
     */
    public function setEmployeePaysAnnualMaxCurrentAmount($employee_pays_annual_max_current_amount)
    {
        if (is_null($employee_pays_annual_max_current_amount)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_annual_max_current_amount cannot be null');
        }
        $this->container['employee_pays_annual_max_current_amount'] = $employee_pays_annual_max_current_amount;

        return $this;
    }

    /**
     * Gets employee_pays_cap_amount
     *
     * @return float|null
     */
    public function getEmployeePaysCapAmount()
    {
        return $this->container['employee_pays_cap_amount'];
    }

    /**
     * Sets employee_pays_cap_amount
     *
     * @param float|null $employee_pays_cap_amount employee_pays_cap_amount
     *
     * @return self
     */
    public function setEmployeePaysCapAmount($employee_pays_cap_amount)
    {
        if (is_null($employee_pays_cap_amount)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_cap_amount cannot be null');
        }
        $this->container['employee_pays_cap_amount'] = $employee_pays_cap_amount;

        return $this;
    }

    /**
     * Gets employee_pays_cap_amount_type
     *
     * @return string|null
     */
    public function getEmployeePaysCapAmountType()
    {
        return $this->container['employee_pays_cap_amount_type'];
    }

    /**
     * Sets employee_pays_cap_amount_type
     *
     * @param string|null $employee_pays_cap_amount_type employee_pays_cap_amount_type
     *
     * @return self
     */
    public function setEmployeePaysCapAmountType($employee_pays_cap_amount_type)
    {
        if (is_null($employee_pays_cap_amount_type)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_cap_amount_type cannot be null');
        }
        $this->container['employee_pays_cap_amount_type'] = $employee_pays_cap_amount_type;

        return $this;
    }

    /**
     * Gets employee_pays_cap_amount_current_amount
     *
     * @return float|null
     */
    public function getEmployeePaysCapAmountCurrentAmount()
    {
        return $this->container['employee_pays_cap_amount_current_amount'];
    }

    /**
     * Sets employee_pays_cap_amount_current_amount
     *
     * @param float|null $employee_pays_cap_amount_current_amount employee_pays_cap_amount_current_amount
     *
     * @return self
     */
    public function setEmployeePaysCapAmountCurrentAmount($employee_pays_cap_amount_current_amount)
    {
        if (is_null($employee_pays_cap_amount_current_amount)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_cap_amount_current_amount cannot be null');
        }
        $this->container['employee_pays_cap_amount_current_amount'] = $employee_pays_cap_amount_current_amount;

        return $this;
    }

    /**
     * Gets safe_harbor
     *
     * @return bool|null
     */
    public function getSafeHarbor()
    {
        return $this->container['safe_harbor'];
    }

    /**
     * Sets safe_harbor
     *
     * @param bool|null $safe_harbor safe_harbor
     *
     * @return self
     */
    public function setSafeHarbor($safe_harbor)
    {
        if (is_null($safe_harbor)) {
            throw new \InvalidArgumentException('non-nullable safe_harbor cannot be null');
        }
        $this->container['safe_harbor'] = $safe_harbor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


