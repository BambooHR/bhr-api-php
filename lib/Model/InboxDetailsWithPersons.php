<?php
/**
 * InboxDetailsWithPersons
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * InboxDetailsWithPersons Class Doc Comment
 *
 * @category Class
 * @description Inbox details with persons
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InboxDetailsWithPersons implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InboxDetailsWithPersons';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'employee_id' => 'int',
        'request_user_id' => 'int',
        'details' => '\MySdk\Model\InboxDetailsWithPersonsDetailsInner[]',
        'created' => '\DateTime',
        'status' => '\MySdk\Model\InboxDetailsWithPersonsStatus',
        'type' => '\MySdk\Model\InboxDetailsWithPersonsType',
        'comments' => '\MySdk\Model\InboxDetailsWithPersonsCommentsInner[]',
        'files' => '\MySdk\Model\InboxDetailsWithPersonsFilesInner[]',
        'approver_counts' => '\MySdk\Model\InboxDetailsWithPersonsApproverCounts',
        'approver_employee_id' => 'int',
        'permissions' => 'array<string,bool>',
        'persons' => '\MySdk\Model\InboxDetailsWithPersonsPersonsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'employee_id' => null,
        'request_user_id' => null,
        'details' => null,
        'created' => 'date-time',
        'status' => null,
        'type' => null,
        'comments' => null,
        'files' => null,
        'approver_counts' => null,
        'approver_employee_id' => null,
        'permissions' => null,
        'persons' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'employee_id' => false,
        'request_user_id' => false,
        'details' => false,
        'created' => false,
        'status' => false,
        'type' => false,
        'comments' => false,
        'files' => false,
        'approver_counts' => false,
        'approver_employee_id' => true,
        'permissions' => false,
        'persons' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_id' => 'employeeId',
        'request_user_id' => 'requestUserId',
        'details' => 'details',
        'created' => 'created',
        'status' => 'status',
        'type' => 'type',
        'comments' => 'comments',
        'files' => 'files',
        'approver_counts' => 'approverCounts',
        'approver_employee_id' => 'approverEmployeeId',
        'permissions' => 'permissions',
        'persons' => 'persons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'request_user_id' => 'setRequestUserId',
        'details' => 'setDetails',
        'created' => 'setCreated',
        'status' => 'setStatus',
        'type' => 'setType',
        'comments' => 'setComments',
        'files' => 'setFiles',
        'approver_counts' => 'setApproverCounts',
        'approver_employee_id' => 'setApproverEmployeeId',
        'permissions' => 'setPermissions',
        'persons' => 'setPersons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'request_user_id' => 'getRequestUserId',
        'details' => 'getDetails',
        'created' => 'getCreated',
        'status' => 'getStatus',
        'type' => 'getType',
        'comments' => 'getComments',
        'files' => 'getFiles',
        'approver_counts' => 'getApproverCounts',
        'approver_employee_id' => 'getApproverEmployeeId',
        'permissions' => 'getPermissions',
        'persons' => 'getPersons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('request_user_id', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('approver_counts', $data ?? [], null);
        $this->setIfExists('approver_employee_id', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('persons', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets request_user_id
     *
     * @return int|null
     */
    public function getRequestUserId()
    {
        return $this->container['request_user_id'];
    }

    /**
     * Sets request_user_id
     *
     * @param int|null $request_user_id request_user_id
     *
     * @return self
     */
    public function setRequestUserId($request_user_id)
    {
        if (is_null($request_user_id)) {
            throw new \InvalidArgumentException('non-nullable request_user_id cannot be null');
        }
        $this->container['request_user_id'] = $request_user_id;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \MySdk\Model\InboxDetailsWithPersonsDetailsInner[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \MySdk\Model\InboxDetailsWithPersonsDetailsInner[]|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MySdk\Model\InboxDetailsWithPersonsStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MySdk\Model\InboxDetailsWithPersonsStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \MySdk\Model\InboxDetailsWithPersonsType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \MySdk\Model\InboxDetailsWithPersonsType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \MySdk\Model\InboxDetailsWithPersonsCommentsInner[]|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \MySdk\Model\InboxDetailsWithPersonsCommentsInner[]|null $comments comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \MySdk\Model\InboxDetailsWithPersonsFilesInner[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \MySdk\Model\InboxDetailsWithPersonsFilesInner[]|null $files files
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets approver_counts
     *
     * @return \MySdk\Model\InboxDetailsWithPersonsApproverCounts|null
     */
    public function getApproverCounts()
    {
        return $this->container['approver_counts'];
    }

    /**
     * Sets approver_counts
     *
     * @param \MySdk\Model\InboxDetailsWithPersonsApproverCounts|null $approver_counts approver_counts
     *
     * @return self
     */
    public function setApproverCounts($approver_counts)
    {
        if (is_null($approver_counts)) {
            throw new \InvalidArgumentException('non-nullable approver_counts cannot be null');
        }
        $this->container['approver_counts'] = $approver_counts;

        return $this;
    }

    /**
     * Gets approver_employee_id
     *
     * @return int|null
     */
    public function getApproverEmployeeId()
    {
        return $this->container['approver_employee_id'];
    }

    /**
     * Sets approver_employee_id
     *
     * @param int|null $approver_employee_id approver_employee_id
     *
     * @return self
     */
    public function setApproverEmployeeId($approver_employee_id)
    {
        if (is_null($approver_employee_id)) {
            array_push($this->openAPINullablesSetToNull, 'approver_employee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approver_employee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approver_employee_id'] = $approver_employee_id;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return array<string,bool>|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param array<string,bool>|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        if (is_null($permissions)) {
            throw new \InvalidArgumentException('non-nullable permissions cannot be null');
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets persons
     *
     * @return \MySdk\Model\InboxDetailsWithPersonsPersonsInner[]|null
     */
    public function getPersons()
    {
        return $this->container['persons'];
    }

    /**
     * Sets persons
     *
     * @param \MySdk\Model\InboxDetailsWithPersonsPersonsInner[]|null $persons persons
     *
     * @return self
     */
    public function setPersons($persons)
    {
        if (is_null($persons)) {
            throw new \InvalidArgumentException('non-nullable persons cannot be null');
        }
        $this->container['persons'] = $persons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


