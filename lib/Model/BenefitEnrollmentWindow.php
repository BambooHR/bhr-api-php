<?php
/**
 * BenefitEnrollmentWindow
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * BenefitEnrollmentWindow Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BenefitEnrollmentWindow implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BenefitEnrollmentWindow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'state' => 'string',
        'type' => 'string',
        'start_date' => 'string',
        'end_date' => 'string',
        'benefit_effective_date' => 'string',
        'employees_completed_self_enrollment_count' => 'int',
        'employees_pending_approval' => 'int[]',
        'employee_ids' => 'string[]',
        'benefit_plan_ids' => 'string[]',
        'qualifying_life_event_subtype_id' => 'string',
        'plan_year_id' => 'string',
        'date_of_event' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'state' => null,
        'type' => null,
        'start_date' => null,
        'end_date' => null,
        'benefit_effective_date' => null,
        'employees_completed_self_enrollment_count' => null,
        'employees_pending_approval' => null,
        'employee_ids' => null,
        'benefit_plan_ids' => null,
        'qualifying_life_event_subtype_id' => null,
        'plan_year_id' => null,
        'date_of_event' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'state' => false,
        'type' => false,
        'start_date' => false,
        'end_date' => false,
        'benefit_effective_date' => true,
        'employees_completed_self_enrollment_count' => false,
        'employees_pending_approval' => false,
        'employee_ids' => false,
        'benefit_plan_ids' => false,
        'qualifying_life_event_subtype_id' => false,
        'plan_year_id' => false,
        'date_of_event' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'state' => 'state',
        'type' => 'type',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'benefit_effective_date' => 'benefitEffectiveDate',
        'employees_completed_self_enrollment_count' => 'employeesCompletedSelfEnrollmentCount',
        'employees_pending_approval' => 'employeesPendingApproval',
        'employee_ids' => 'employeeIds',
        'benefit_plan_ids' => 'benefitPlanIds',
        'qualifying_life_event_subtype_id' => 'qualifyingLifeEventSubtypeId',
        'plan_year_id' => 'planYearId',
        'date_of_event' => 'dateOfEvent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'state' => 'setState',
        'type' => 'setType',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'benefit_effective_date' => 'setBenefitEffectiveDate',
        'employees_completed_self_enrollment_count' => 'setEmployeesCompletedSelfEnrollmentCount',
        'employees_pending_approval' => 'setEmployeesPendingApproval',
        'employee_ids' => 'setEmployeeIds',
        'benefit_plan_ids' => 'setBenefitPlanIds',
        'qualifying_life_event_subtype_id' => 'setQualifyingLifeEventSubtypeId',
        'plan_year_id' => 'setPlanYearId',
        'date_of_event' => 'setDateOfEvent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'state' => 'getState',
        'type' => 'getType',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'benefit_effective_date' => 'getBenefitEffectiveDate',
        'employees_completed_self_enrollment_count' => 'getEmployeesCompletedSelfEnrollmentCount',
        'employees_pending_approval' => 'getEmployeesPendingApproval',
        'employee_ids' => 'getEmployeeIds',
        'benefit_plan_ids' => 'getBenefitPlanIds',
        'qualifying_life_event_subtype_id' => 'getQualifyingLifeEventSubtypeId',
        'plan_year_id' => 'getPlanYearId',
        'date_of_event' => 'getDateOfEvent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('benefit_effective_date', $data ?? [], null);
        $this->setIfExists('employees_completed_self_enrollment_count', $data ?? [], null);
        $this->setIfExists('employees_pending_approval', $data ?? [], null);
        $this->setIfExists('employee_ids', $data ?? [], null);
        $this->setIfExists('benefit_plan_ids', $data ?? [], null);
        $this->setIfExists('qualifying_life_event_subtype_id', $data ?? [], null);
        $this->setIfExists('plan_year_id', $data ?? [], null);
        $this->setIfExists('date_of_event', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets benefit_effective_date
     *
     * @return string|null
     */
    public function getBenefitEffectiveDate()
    {
        return $this->container['benefit_effective_date'];
    }

    /**
     * Sets benefit_effective_date
     *
     * @param string|null $benefit_effective_date benefit_effective_date
     *
     * @return self
     */
    public function setBenefitEffectiveDate($benefit_effective_date)
    {
        if (is_null($benefit_effective_date)) {
            array_push($this->openAPINullablesSetToNull, 'benefit_effective_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('benefit_effective_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['benefit_effective_date'] = $benefit_effective_date;

        return $this;
    }

    /**
     * Gets employees_completed_self_enrollment_count
     *
     * @return int|null
     */
    public function getEmployeesCompletedSelfEnrollmentCount()
    {
        return $this->container['employees_completed_self_enrollment_count'];
    }

    /**
     * Sets employees_completed_self_enrollment_count
     *
     * @param int|null $employees_completed_self_enrollment_count employees_completed_self_enrollment_count
     *
     * @return self
     */
    public function setEmployeesCompletedSelfEnrollmentCount($employees_completed_self_enrollment_count)
    {
        if (is_null($employees_completed_self_enrollment_count)) {
            throw new \InvalidArgumentException('non-nullable employees_completed_self_enrollment_count cannot be null');
        }
        $this->container['employees_completed_self_enrollment_count'] = $employees_completed_self_enrollment_count;

        return $this;
    }

    /**
     * Gets employees_pending_approval
     *
     * @return int[]|null
     */
    public function getEmployeesPendingApproval()
    {
        return $this->container['employees_pending_approval'];
    }

    /**
     * Sets employees_pending_approval
     *
     * @param int[]|null $employees_pending_approval employees_pending_approval
     *
     * @return self
     */
    public function setEmployeesPendingApproval($employees_pending_approval)
    {
        if (is_null($employees_pending_approval)) {
            throw new \InvalidArgumentException('non-nullable employees_pending_approval cannot be null');
        }
        $this->container['employees_pending_approval'] = $employees_pending_approval;

        return $this;
    }

    /**
     * Gets employee_ids
     *
     * @return string[]|null
     */
    public function getEmployeeIds()
    {
        return $this->container['employee_ids'];
    }

    /**
     * Sets employee_ids
     *
     * @param string[]|null $employee_ids employee_ids
     *
     * @return self
     */
    public function setEmployeeIds($employee_ids)
    {
        if (is_null($employee_ids)) {
            throw new \InvalidArgumentException('non-nullable employee_ids cannot be null');
        }
        $this->container['employee_ids'] = $employee_ids;

        return $this;
    }

    /**
     * Gets benefit_plan_ids
     *
     * @return string[]|null
     */
    public function getBenefitPlanIds()
    {
        return $this->container['benefit_plan_ids'];
    }

    /**
     * Sets benefit_plan_ids
     *
     * @param string[]|null $benefit_plan_ids benefit_plan_ids
     *
     * @return self
     */
    public function setBenefitPlanIds($benefit_plan_ids)
    {
        if (is_null($benefit_plan_ids)) {
            throw new \InvalidArgumentException('non-nullable benefit_plan_ids cannot be null');
        }
        $this->container['benefit_plan_ids'] = $benefit_plan_ids;

        return $this;
    }

    /**
     * Gets qualifying_life_event_subtype_id
     *
     * @return string|null
     */
    public function getQualifyingLifeEventSubtypeId()
    {
        return $this->container['qualifying_life_event_subtype_id'];
    }

    /**
     * Sets qualifying_life_event_subtype_id
     *
     * @param string|null $qualifying_life_event_subtype_id qualifying_life_event_subtype_id
     *
     * @return self
     */
    public function setQualifyingLifeEventSubtypeId($qualifying_life_event_subtype_id)
    {
        if (is_null($qualifying_life_event_subtype_id)) {
            throw new \InvalidArgumentException('non-nullable qualifying_life_event_subtype_id cannot be null');
        }
        $this->container['qualifying_life_event_subtype_id'] = $qualifying_life_event_subtype_id;

        return $this;
    }

    /**
     * Gets plan_year_id
     *
     * @return string|null
     */
    public function getPlanYearId()
    {
        return $this->container['plan_year_id'];
    }

    /**
     * Sets plan_year_id
     *
     * @param string|null $plan_year_id plan_year_id
     *
     * @return self
     */
    public function setPlanYearId($plan_year_id)
    {
        if (is_null($plan_year_id)) {
            throw new \InvalidArgumentException('non-nullable plan_year_id cannot be null');
        }
        $this->container['plan_year_id'] = $plan_year_id;

        return $this;
    }

    /**
     * Gets date_of_event
     *
     * @return string|null
     */
    public function getDateOfEvent()
    {
        return $this->container['date_of_event'];
    }

    /**
     * Sets date_of_event
     *
     * @param string|null $date_of_event date_of_event
     *
     * @return self
     */
    public function setDateOfEvent($date_of_event)
    {
        if (is_null($date_of_event)) {
            throw new \InvalidArgumentException('non-nullable date_of_event cannot be null');
        }
        $this->container['date_of_event'] = $date_of_event;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


