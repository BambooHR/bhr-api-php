<?php
/**
 * HistoryTableDataTransformer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * HistoryTableDataTransformer Class Doc Comment
 *
 * @category Class
 * @description Transforms a HistoryTableData object into an array
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HistoryTableDataTransformer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HistoryTableDataTransformer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'time_off_type_id' => 'string',
        'type' => 'string',
        'types' => 'string[]',
        'total' => 'float',
        'year' => 'string',
        'can_edit_pto' => 'bool',
        'can_edit_used_items' => 'bool',
        'all_entries_are_unlimited' => 'bool',
        'sort_column' => 'float',
        'sort_dir' => 'float',
        'cur_page_id' => 'float',
        'history' => '\MySdk\Model\TimeOffHistoryItemsTransformer[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'time_off_type_id' => null,
        'type' => null,
        'types' => null,
        'total' => null,
        'year' => null,
        'can_edit_pto' => null,
        'can_edit_used_items' => null,
        'all_entries_are_unlimited' => null,
        'sort_column' => null,
        'sort_dir' => null,
        'cur_page_id' => null,
        'history' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'time_off_type_id' => false,
        'type' => false,
        'types' => false,
        'total' => false,
        'year' => false,
        'can_edit_pto' => false,
        'can_edit_used_items' => false,
        'all_entries_are_unlimited' => false,
        'sort_column' => false,
        'sort_dir' => false,
        'cur_page_id' => false,
        'history' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'time_off_type_id' => 'timeOffTypeId',
        'type' => 'type',
        'types' => 'types',
        'total' => 'total',
        'year' => 'year',
        'can_edit_pto' => 'canEditPto',
        'can_edit_used_items' => 'canEditUsedItems',
        'all_entries_are_unlimited' => 'allEntriesAreUnlimited',
        'sort_column' => 'sortColumn',
        'sort_dir' => 'sortDir',
        'cur_page_id' => 'curPageId',
        'history' => 'history'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'time_off_type_id' => 'setTimeOffTypeId',
        'type' => 'setType',
        'types' => 'setTypes',
        'total' => 'setTotal',
        'year' => 'setYear',
        'can_edit_pto' => 'setCanEditPto',
        'can_edit_used_items' => 'setCanEditUsedItems',
        'all_entries_are_unlimited' => 'setAllEntriesAreUnlimited',
        'sort_column' => 'setSortColumn',
        'sort_dir' => 'setSortDir',
        'cur_page_id' => 'setCurPageId',
        'history' => 'setHistory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'time_off_type_id' => 'getTimeOffTypeId',
        'type' => 'getType',
        'types' => 'getTypes',
        'total' => 'getTotal',
        'year' => 'getYear',
        'can_edit_pto' => 'getCanEditPto',
        'can_edit_used_items' => 'getCanEditUsedItems',
        'all_entries_are_unlimited' => 'getAllEntriesAreUnlimited',
        'sort_column' => 'getSortColumn',
        'sort_dir' => 'getSortDir',
        'cur_page_id' => 'getCurPageId',
        'history' => 'getHistory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('time_off_type_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('types', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('year', $data ?? [], null);
        $this->setIfExists('can_edit_pto', $data ?? [], null);
        $this->setIfExists('can_edit_used_items', $data ?? [], null);
        $this->setIfExists('all_entries_are_unlimited', $data ?? [], null);
        $this->setIfExists('sort_column', $data ?? [], null);
        $this->setIfExists('sort_dir', $data ?? [], null);
        $this->setIfExists('cur_page_id', $data ?? [], null);
        $this->setIfExists('history', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets time_off_type_id
     *
     * @return string|null
     */
    public function getTimeOffTypeId()
    {
        return $this->container['time_off_type_id'];
    }

    /**
     * Sets time_off_type_id
     *
     * @param string|null $time_off_type_id time_off_type_id
     *
     * @return self
     */
    public function setTimeOffTypeId($time_off_type_id)
    {
        if (is_null($time_off_type_id)) {
            throw new \InvalidArgumentException('non-nullable time_off_type_id cannot be null');
        }
        $this->container['time_off_type_id'] = $time_off_type_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string[]|null
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[]|null $types types
     *
     * @return self
     */
    public function setTypes($types)
    {
        if (is_null($types)) {
            throw new \InvalidArgumentException('non-nullable types cannot be null');
        }
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets year
     *
     * @return string|null
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param string|null $year year
     *
     * @return self
     */
    public function setYear($year)
    {
        if (is_null($year)) {
            throw new \InvalidArgumentException('non-nullable year cannot be null');
        }
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets can_edit_pto
     *
     * @return bool|null
     */
    public function getCanEditPto()
    {
        return $this->container['can_edit_pto'];
    }

    /**
     * Sets can_edit_pto
     *
     * @param bool|null $can_edit_pto can_edit_pto
     *
     * @return self
     */
    public function setCanEditPto($can_edit_pto)
    {
        if (is_null($can_edit_pto)) {
            throw new \InvalidArgumentException('non-nullable can_edit_pto cannot be null');
        }
        $this->container['can_edit_pto'] = $can_edit_pto;

        return $this;
    }

    /**
     * Gets can_edit_used_items
     *
     * @return bool|null
     */
    public function getCanEditUsedItems()
    {
        return $this->container['can_edit_used_items'];
    }

    /**
     * Sets can_edit_used_items
     *
     * @param bool|null $can_edit_used_items can_edit_used_items
     *
     * @return self
     */
    public function setCanEditUsedItems($can_edit_used_items)
    {
        if (is_null($can_edit_used_items)) {
            throw new \InvalidArgumentException('non-nullable can_edit_used_items cannot be null');
        }
        $this->container['can_edit_used_items'] = $can_edit_used_items;

        return $this;
    }

    /**
     * Gets all_entries_are_unlimited
     *
     * @return bool|null
     */
    public function getAllEntriesAreUnlimited()
    {
        return $this->container['all_entries_are_unlimited'];
    }

    /**
     * Sets all_entries_are_unlimited
     *
     * @param bool|null $all_entries_are_unlimited all_entries_are_unlimited
     *
     * @return self
     */
    public function setAllEntriesAreUnlimited($all_entries_are_unlimited)
    {
        if (is_null($all_entries_are_unlimited)) {
            throw new \InvalidArgumentException('non-nullable all_entries_are_unlimited cannot be null');
        }
        $this->container['all_entries_are_unlimited'] = $all_entries_are_unlimited;

        return $this;
    }

    /**
     * Gets sort_column
     *
     * @return float|null
     */
    public function getSortColumn()
    {
        return $this->container['sort_column'];
    }

    /**
     * Sets sort_column
     *
     * @param float|null $sort_column sort_column
     *
     * @return self
     */
    public function setSortColumn($sort_column)
    {
        if (is_null($sort_column)) {
            throw new \InvalidArgumentException('non-nullable sort_column cannot be null');
        }
        $this->container['sort_column'] = $sort_column;

        return $this;
    }

    /**
     * Gets sort_dir
     *
     * @return float|null
     */
    public function getSortDir()
    {
        return $this->container['sort_dir'];
    }

    /**
     * Sets sort_dir
     *
     * @param float|null $sort_dir sort_dir
     *
     * @return self
     */
    public function setSortDir($sort_dir)
    {
        if (is_null($sort_dir)) {
            throw new \InvalidArgumentException('non-nullable sort_dir cannot be null');
        }
        $this->container['sort_dir'] = $sort_dir;

        return $this;
    }

    /**
     * Gets cur_page_id
     *
     * @return float|null
     */
    public function getCurPageId()
    {
        return $this->container['cur_page_id'];
    }

    /**
     * Sets cur_page_id
     *
     * @param float|null $cur_page_id cur_page_id
     *
     * @return self
     */
    public function setCurPageId($cur_page_id)
    {
        if (is_null($cur_page_id)) {
            throw new \InvalidArgumentException('non-nullable cur_page_id cannot be null');
        }
        $this->container['cur_page_id'] = $cur_page_id;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \MySdk\Model\TimeOffHistoryItemsTransformer[]|null
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \MySdk\Model\TimeOffHistoryItemsTransformer[]|null $history history
     *
     * @return self
     */
    public function setHistory($history)
    {
        if (is_null($history)) {
            throw new \InvalidArgumentException('non-nullable history cannot be null');
        }
        $this->container['history'] = $history;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


