<?php
/**
 * TimeOffHistoryItemsTransformer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TimeOffHistoryItemsTransformer Class Doc Comment
 *
 * @category Class
 * @description Transforms a HistoryTableItemCollection into an array
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeOffHistoryItemsTransformer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeOffHistoryItemsTransformer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'event_type' => 'string',
        'date' => 'string',
        'amount' => 'float',
        'balance' => 'float',
        'note' => 'string',
        'start_ymd' => 'string',
        'end_ymd' => 'string',
        'time_off_request_id' => 'string',
        'hours_worked' => 'float',
        'override_user' => '\MySdk\Model\TimeOffHistoryItemsTransformerOverrideUser',
        'sort_value' => 'float',
        'source' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'event_type' => null,
        'date' => null,
        'amount' => null,
        'balance' => null,
        'note' => null,
        'start_ymd' => null,
        'end_ymd' => null,
        'time_off_request_id' => null,
        'hours_worked' => null,
        'override_user' => null,
        'sort_value' => null,
        'source' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'event_type' => false,
        'date' => false,
        'amount' => false,
        'balance' => false,
        'note' => false,
        'start_ymd' => false,
        'end_ymd' => false,
        'time_off_request_id' => false,
        'hours_worked' => false,
        'override_user' => false,
        'sort_value' => false,
        'source' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'event_type' => 'eventType',
        'date' => 'date',
        'amount' => 'amount',
        'balance' => 'balance',
        'note' => 'note',
        'start_ymd' => 'startYmd',
        'end_ymd' => 'endYmd',
        'time_off_request_id' => 'timeOffRequestId',
        'hours_worked' => 'hoursWorked',
        'override_user' => 'overrideUser',
        'sort_value' => 'sortValue',
        'source' => 'source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'event_type' => 'setEventType',
        'date' => 'setDate',
        'amount' => 'setAmount',
        'balance' => 'setBalance',
        'note' => 'setNote',
        'start_ymd' => 'setStartYmd',
        'end_ymd' => 'setEndYmd',
        'time_off_request_id' => 'setTimeOffRequestId',
        'hours_worked' => 'setHoursWorked',
        'override_user' => 'setOverrideUser',
        'sort_value' => 'setSortValue',
        'source' => 'setSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'event_type' => 'getEventType',
        'date' => 'getDate',
        'amount' => 'getAmount',
        'balance' => 'getBalance',
        'note' => 'getNote',
        'start_ymd' => 'getStartYmd',
        'end_ymd' => 'getEndYmd',
        'time_off_request_id' => 'getTimeOffRequestId',
        'hours_worked' => 'getHoursWorked',
        'override_user' => 'getOverrideUser',
        'sort_value' => 'getSortValue',
        'source' => 'getSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('event_type', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('start_ymd', $data ?? [], null);
        $this->setIfExists('end_ymd', $data ?? [], null);
        $this->setIfExists('time_off_request_id', $data ?? [], null);
        $this->setIfExists('hours_worked', $data ?? [], null);
        $this->setIfExists('override_user', $data ?? [], null);
        $this->setIfExists('sort_value', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string|null
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string|null $event_type event_type
     *
     * @return self
     */
    public function setEventType($event_type)
    {
        if (is_null($event_type)) {
            throw new \InvalidArgumentException('non-nullable event_type cannot be null');
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets start_ymd
     *
     * @return string|null
     */
    public function getStartYmd()
    {
        return $this->container['start_ymd'];
    }

    /**
     * Sets start_ymd
     *
     * @param string|null $start_ymd start_ymd
     *
     * @return self
     */
    public function setStartYmd($start_ymd)
    {
        if (is_null($start_ymd)) {
            throw new \InvalidArgumentException('non-nullable start_ymd cannot be null');
        }
        $this->container['start_ymd'] = $start_ymd;

        return $this;
    }

    /**
     * Gets end_ymd
     *
     * @return string|null
     */
    public function getEndYmd()
    {
        return $this->container['end_ymd'];
    }

    /**
     * Sets end_ymd
     *
     * @param string|null $end_ymd end_ymd
     *
     * @return self
     */
    public function setEndYmd($end_ymd)
    {
        if (is_null($end_ymd)) {
            throw new \InvalidArgumentException('non-nullable end_ymd cannot be null');
        }
        $this->container['end_ymd'] = $end_ymd;

        return $this;
    }

    /**
     * Gets time_off_request_id
     *
     * @return string|null
     */
    public function getTimeOffRequestId()
    {
        return $this->container['time_off_request_id'];
    }

    /**
     * Sets time_off_request_id
     *
     * @param string|null $time_off_request_id time_off_request_id
     *
     * @return self
     */
    public function setTimeOffRequestId($time_off_request_id)
    {
        if (is_null($time_off_request_id)) {
            throw new \InvalidArgumentException('non-nullable time_off_request_id cannot be null');
        }
        $this->container['time_off_request_id'] = $time_off_request_id;

        return $this;
    }

    /**
     * Gets hours_worked
     *
     * @return float|null
     */
    public function getHoursWorked()
    {
        return $this->container['hours_worked'];
    }

    /**
     * Sets hours_worked
     *
     * @param float|null $hours_worked hours_worked
     *
     * @return self
     */
    public function setHoursWorked($hours_worked)
    {
        if (is_null($hours_worked)) {
            throw new \InvalidArgumentException('non-nullable hours_worked cannot be null');
        }
        $this->container['hours_worked'] = $hours_worked;

        return $this;
    }

    /**
     * Gets override_user
     *
     * @return \MySdk\Model\TimeOffHistoryItemsTransformerOverrideUser|null
     */
    public function getOverrideUser()
    {
        return $this->container['override_user'];
    }

    /**
     * Sets override_user
     *
     * @param \MySdk\Model\TimeOffHistoryItemsTransformerOverrideUser|null $override_user override_user
     *
     * @return self
     */
    public function setOverrideUser($override_user)
    {
        if (is_null($override_user)) {
            throw new \InvalidArgumentException('non-nullable override_user cannot be null');
        }
        $this->container['override_user'] = $override_user;

        return $this;
    }

    /**
     * Gets sort_value
     *
     * @return float|null
     */
    public function getSortValue()
    {
        return $this->container['sort_value'];
    }

    /**
     * Sets sort_value
     *
     * @param float|null $sort_value sort_value
     *
     * @return self
     */
    public function setSortValue($sort_value)
    {
        if (is_null($sort_value)) {
            throw new \InvalidArgumentException('non-nullable sort_value cannot be null');
        }
        $this->container['sort_value'] = $sort_value;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


