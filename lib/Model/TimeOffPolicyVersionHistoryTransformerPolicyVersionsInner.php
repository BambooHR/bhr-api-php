<?php
/**
 * TimeOffPolicyVersionHistoryTransformerPolicyVersionsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TimeOffPolicyVersionHistoryTransformerPolicyVersionsInner Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeOffPolicyVersionHistoryTransformerPolicyVersionsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeOffPolicyVersionHistoryTransformer_policyVersions_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'version' => 'string',
        'effective_ymd' => 'string',
        'status' => 'string',
        'name' => 'string',
        'time_off_category_id' => 'string',
        'type' => 'string',
        'carryover_modifier' => 'string',
        'carryover_expiration_modifier' => 'string',
        'field_id' => 'string',
        'updated_by' => 'string',
        'updated_at' => 'string',
        'created_by' => 'string',
        'created_at' => 'string',
        'accrual_options' => '\MySdk\Model\TimeOffPolicyAccrualOptionsTransformer',
        'milestones' => '\MySdk\Model\TimeOffPolicyMilestonesTransformer[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'version' => null,
        'effective_ymd' => null,
        'status' => null,
        'name' => null,
        'time_off_category_id' => null,
        'type' => null,
        'carryover_modifier' => null,
        'carryover_expiration_modifier' => null,
        'field_id' => null,
        'updated_by' => null,
        'updated_at' => null,
        'created_by' => null,
        'created_at' => null,
        'accrual_options' => null,
        'milestones' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'version' => false,
        'effective_ymd' => false,
        'status' => false,
        'name' => false,
        'time_off_category_id' => false,
        'type' => false,
        'carryover_modifier' => false,
        'carryover_expiration_modifier' => false,
        'field_id' => false,
        'updated_by' => false,
        'updated_at' => false,
        'created_by' => false,
        'created_at' => false,
        'accrual_options' => false,
        'milestones' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'version' => 'version',
        'effective_ymd' => 'effectiveYmd',
        'status' => 'status',
        'name' => 'name',
        'time_off_category_id' => 'timeOffCategoryId',
        'type' => 'type',
        'carryover_modifier' => 'carryoverModifier',
        'carryover_expiration_modifier' => 'carryoverExpirationModifier',
        'field_id' => 'fieldId',
        'updated_by' => 'updatedBy',
        'updated_at' => 'updatedAt',
        'created_by' => 'createdBy',
        'created_at' => 'createdAt',
        'accrual_options' => 'accrualOptions',
        'milestones' => 'milestones'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'version' => 'setVersion',
        'effective_ymd' => 'setEffectiveYmd',
        'status' => 'setStatus',
        'name' => 'setName',
        'time_off_category_id' => 'setTimeOffCategoryId',
        'type' => 'setType',
        'carryover_modifier' => 'setCarryoverModifier',
        'carryover_expiration_modifier' => 'setCarryoverExpirationModifier',
        'field_id' => 'setFieldId',
        'updated_by' => 'setUpdatedBy',
        'updated_at' => 'setUpdatedAt',
        'created_by' => 'setCreatedBy',
        'created_at' => 'setCreatedAt',
        'accrual_options' => 'setAccrualOptions',
        'milestones' => 'setMilestones'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'version' => 'getVersion',
        'effective_ymd' => 'getEffectiveYmd',
        'status' => 'getStatus',
        'name' => 'getName',
        'time_off_category_id' => 'getTimeOffCategoryId',
        'type' => 'getType',
        'carryover_modifier' => 'getCarryoverModifier',
        'carryover_expiration_modifier' => 'getCarryoverExpirationModifier',
        'field_id' => 'getFieldId',
        'updated_by' => 'getUpdatedBy',
        'updated_at' => 'getUpdatedAt',
        'created_by' => 'getCreatedBy',
        'created_at' => 'getCreatedAt',
        'accrual_options' => 'getAccrualOptions',
        'milestones' => 'getMilestones'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('effective_ymd', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('time_off_category_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('carryover_modifier', $data ?? [], null);
        $this->setIfExists('carryover_expiration_modifier', $data ?? [], null);
        $this->setIfExists('field_id', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('accrual_options', $data ?? [], null);
        $this->setIfExists('milestones', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets effective_ymd
     *
     * @return string|null
     */
    public function getEffectiveYmd()
    {
        return $this->container['effective_ymd'];
    }

    /**
     * Sets effective_ymd
     *
     * @param string|null $effective_ymd effective_ymd
     *
     * @return self
     */
    public function setEffectiveYmd($effective_ymd)
    {
        if (is_null($effective_ymd)) {
            throw new \InvalidArgumentException('non-nullable effective_ymd cannot be null');
        }
        $this->container['effective_ymd'] = $effective_ymd;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets time_off_category_id
     *
     * @return string|null
     */
    public function getTimeOffCategoryId()
    {
        return $this->container['time_off_category_id'];
    }

    /**
     * Sets time_off_category_id
     *
     * @param string|null $time_off_category_id time_off_category_id
     *
     * @return self
     */
    public function setTimeOffCategoryId($time_off_category_id)
    {
        if (is_null($time_off_category_id)) {
            throw new \InvalidArgumentException('non-nullable time_off_category_id cannot be null');
        }
        $this->container['time_off_category_id'] = $time_off_category_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets carryover_modifier
     *
     * @return string|null
     */
    public function getCarryoverModifier()
    {
        return $this->container['carryover_modifier'];
    }

    /**
     * Sets carryover_modifier
     *
     * @param string|null $carryover_modifier carryover_modifier
     *
     * @return self
     */
    public function setCarryoverModifier($carryover_modifier)
    {
        if (is_null($carryover_modifier)) {
            throw new \InvalidArgumentException('non-nullable carryover_modifier cannot be null');
        }
        $this->container['carryover_modifier'] = $carryover_modifier;

        return $this;
    }

    /**
     * Gets carryover_expiration_modifier
     *
     * @return string|null
     */
    public function getCarryoverExpirationModifier()
    {
        return $this->container['carryover_expiration_modifier'];
    }

    /**
     * Sets carryover_expiration_modifier
     *
     * @param string|null $carryover_expiration_modifier carryover_expiration_modifier
     *
     * @return self
     */
    public function setCarryoverExpirationModifier($carryover_expiration_modifier)
    {
        if (is_null($carryover_expiration_modifier)) {
            throw new \InvalidArgumentException('non-nullable carryover_expiration_modifier cannot be null');
        }
        $this->container['carryover_expiration_modifier'] = $carryover_expiration_modifier;

        return $this;
    }

    /**
     * Gets field_id
     *
     * @return string|null
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param string|null $field_id field_id
     *
     * @return self
     */
    public function setFieldId($field_id)
    {
        if (is_null($field_id)) {
            throw new \InvalidArgumentException('non-nullable field_id cannot be null');
        }
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets accrual_options
     *
     * @return \MySdk\Model\TimeOffPolicyAccrualOptionsTransformer|null
     */
    public function getAccrualOptions()
    {
        return $this->container['accrual_options'];
    }

    /**
     * Sets accrual_options
     *
     * @param \MySdk\Model\TimeOffPolicyAccrualOptionsTransformer|null $accrual_options accrual_options
     *
     * @return self
     */
    public function setAccrualOptions($accrual_options)
    {
        if (is_null($accrual_options)) {
            throw new \InvalidArgumentException('non-nullable accrual_options cannot be null');
        }
        $this->container['accrual_options'] = $accrual_options;

        return $this;
    }

    /**
     * Gets milestones
     *
     * @return \MySdk\Model\TimeOffPolicyMilestonesTransformer[]|null
     */
    public function getMilestones()
    {
        return $this->container['milestones'];
    }

    /**
     * Sets milestones
     *
     * @param \MySdk\Model\TimeOffPolicyMilestonesTransformer[]|null $milestones milestones
     *
     * @return self
     */
    public function setMilestones($milestones)
    {
        if (is_null($milestones)) {
            throw new \InvalidArgumentException('non-nullable milestones cannot be null');
        }
        $this->container['milestones'] = $milestones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


