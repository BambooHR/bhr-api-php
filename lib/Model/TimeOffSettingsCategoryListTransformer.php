<?php
/**
 * TimeOffSettingsCategoryListTransformer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TimeOffSettingsCategoryListTransformer Class Doc Comment
 *
 * @category Class
 * @description Time Off Categories with their policies and settings
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeOffSettingsCategoryListTransformer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeOffSettingsCategoryListTransformer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'categories' => '\MySdk\Model\TimeOffSettingsCategoryListTransformerCategoriesInner[]',
        'policies' => '\MySdk\Model\TimeOffSettingsCategoryListTransformerPoliciesInner[]',
        'assignable_user_groups' => '\MySdk\Model\WebhookSubErrorPropertyPostFieldsInner[]',
        'payroll_information' => '\MySdk\Model\TimeOffSettingsCategoryListTransformerPayrollInformation',
        'show_welcome_message' => 'bool',
        'can_assign_policies' => 'bool',
        'can_manage_admin' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'categories' => null,
        'policies' => null,
        'assignable_user_groups' => null,
        'payroll_information' => null,
        'show_welcome_message' => null,
        'can_assign_policies' => null,
        'can_manage_admin' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'categories' => false,
        'policies' => false,
        'assignable_user_groups' => false,
        'payroll_information' => false,
        'show_welcome_message' => false,
        'can_assign_policies' => false,
        'can_manage_admin' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'categories' => 'categories',
        'policies' => 'policies',
        'assignable_user_groups' => 'assignableUserGroups',
        'payroll_information' => 'payrollInformation',
        'show_welcome_message' => 'showWelcomeMessage',
        'can_assign_policies' => 'canAssignPolicies',
        'can_manage_admin' => 'canManageAdmin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'categories' => 'setCategories',
        'policies' => 'setPolicies',
        'assignable_user_groups' => 'setAssignableUserGroups',
        'payroll_information' => 'setPayrollInformation',
        'show_welcome_message' => 'setShowWelcomeMessage',
        'can_assign_policies' => 'setCanAssignPolicies',
        'can_manage_admin' => 'setCanManageAdmin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'categories' => 'getCategories',
        'policies' => 'getPolicies',
        'assignable_user_groups' => 'getAssignableUserGroups',
        'payroll_information' => 'getPayrollInformation',
        'show_welcome_message' => 'getShowWelcomeMessage',
        'can_assign_policies' => 'getCanAssignPolicies',
        'can_manage_admin' => 'getCanManageAdmin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('policies', $data ?? [], null);
        $this->setIfExists('assignable_user_groups', $data ?? [], null);
        $this->setIfExists('payroll_information', $data ?? [], null);
        $this->setIfExists('show_welcome_message', $data ?? [], null);
        $this->setIfExists('can_assign_policies', $data ?? [], null);
        $this->setIfExists('can_manage_admin', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets categories
     *
     * @return \MySdk\Model\TimeOffSettingsCategoryListTransformerCategoriesInner[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \MySdk\Model\TimeOffSettingsCategoryListTransformerCategoriesInner[]|null $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets policies
     *
     * @return \MySdk\Model\TimeOffSettingsCategoryListTransformerPoliciesInner[]|null
     */
    public function getPolicies()
    {
        return $this->container['policies'];
    }

    /**
     * Sets policies
     *
     * @param \MySdk\Model\TimeOffSettingsCategoryListTransformerPoliciesInner[]|null $policies List of time off policies
     *
     * @return self
     */
    public function setPolicies($policies)
    {
        if (is_null($policies)) {
            throw new \InvalidArgumentException('non-nullable policies cannot be null');
        }
        $this->container['policies'] = $policies;

        return $this;
    }

    /**
     * Gets assignable_user_groups
     *
     * @return \MySdk\Model\WebhookSubErrorPropertyPostFieldsInner[]|null
     */
    public function getAssignableUserGroups()
    {
        return $this->container['assignable_user_groups'];
    }

    /**
     * Sets assignable_user_groups
     *
     * @param \MySdk\Model\WebhookSubErrorPropertyPostFieldsInner[]|null $assignable_user_groups List of user groups that can be assigned
     *
     * @return self
     */
    public function setAssignableUserGroups($assignable_user_groups)
    {
        if (is_null($assignable_user_groups)) {
            throw new \InvalidArgumentException('non-nullable assignable_user_groups cannot be null');
        }
        $this->container['assignable_user_groups'] = $assignable_user_groups;

        return $this;
    }

    /**
     * Gets payroll_information
     *
     * @return \MySdk\Model\TimeOffSettingsCategoryListTransformerPayrollInformation|null
     */
    public function getPayrollInformation()
    {
        return $this->container['payroll_information'];
    }

    /**
     * Sets payroll_information
     *
     * @param \MySdk\Model\TimeOffSettingsCategoryListTransformerPayrollInformation|null $payroll_information payroll_information
     *
     * @return self
     */
    public function setPayrollInformation($payroll_information)
    {
        if (is_null($payroll_information)) {
            throw new \InvalidArgumentException('non-nullable payroll_information cannot be null');
        }
        $this->container['payroll_information'] = $payroll_information;

        return $this;
    }

    /**
     * Gets show_welcome_message
     *
     * @return bool|null
     */
    public function getShowWelcomeMessage()
    {
        return $this->container['show_welcome_message'];
    }

    /**
     * Sets show_welcome_message
     *
     * @param bool|null $show_welcome_message show_welcome_message
     *
     * @return self
     */
    public function setShowWelcomeMessage($show_welcome_message)
    {
        if (is_null($show_welcome_message)) {
            throw new \InvalidArgumentException('non-nullable show_welcome_message cannot be null');
        }
        $this->container['show_welcome_message'] = $show_welcome_message;

        return $this;
    }

    /**
     * Gets can_assign_policies
     *
     * @return bool|null
     */
    public function getCanAssignPolicies()
    {
        return $this->container['can_assign_policies'];
    }

    /**
     * Sets can_assign_policies
     *
     * @param bool|null $can_assign_policies can_assign_policies
     *
     * @return self
     */
    public function setCanAssignPolicies($can_assign_policies)
    {
        if (is_null($can_assign_policies)) {
            throw new \InvalidArgumentException('non-nullable can_assign_policies cannot be null');
        }
        $this->container['can_assign_policies'] = $can_assign_policies;

        return $this;
    }

    /**
     * Gets can_manage_admin
     *
     * @return bool|null
     */
    public function getCanManageAdmin()
    {
        return $this->container['can_manage_admin'];
    }

    /**
     * Sets can_manage_admin
     *
     * @param bool|null $can_manage_admin can_manage_admin
     *
     * @return self
     */
    public function setCanManageAdmin($can_manage_admin)
    {
        if (is_null($can_manage_admin)) {
            throw new \InvalidArgumentException('non-nullable can_manage_admin cannot be null');
        }
        $this->container['can_manage_admin'] = $can_manage_admin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


