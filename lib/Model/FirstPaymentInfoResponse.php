<?php
/**
 * FirstPaymentInfoResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * FirstPaymentInfoResponse Class Doc Comment
 *
 * @category Class
 * @description Schema for initial payment setup data, including payment method, hosted page signature, opportunity, company, and account summary.
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FirstPaymentInfoResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FirstPaymentInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_payment_info_set' => 'bool',
        'payment_method_last_four' => 'string',
        'payment_method_type' => 'string',
        'payment_method_sub_type' => 'string',
        'hosted_page' => 'object',
        'products' => 'object[]',
        'services' => 'object[]',
        'promos_and_discounts' => 'object[]',
        'company_name' => 'string',
        'can_add_ach' => 'bool',
        'can_add_bank_account' => 'bool',
        'company_tax_id' => 'string',
        'is_company_tax_id_opt_out' => 'bool',
        'is_company_domestic' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_payment_info_set' => null,
        'payment_method_last_four' => null,
        'payment_method_type' => null,
        'payment_method_sub_type' => null,
        'hosted_page' => null,
        'products' => null,
        'services' => null,
        'promos_and_discounts' => null,
        'company_name' => null,
        'can_add_ach' => null,
        'can_add_bank_account' => null,
        'company_tax_id' => null,
        'is_company_tax_id_opt_out' => null,
        'is_company_domestic' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_payment_info_set' => false,
        'payment_method_last_four' => false,
        'payment_method_type' => false,
        'payment_method_sub_type' => false,
        'hosted_page' => false,
        'products' => false,
        'services' => false,
        'promos_and_discounts' => false,
        'company_name' => false,
        'can_add_ach' => false,
        'can_add_bank_account' => false,
        'company_tax_id' => true,
        'is_company_tax_id_opt_out' => true,
        'is_company_domestic' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_payment_info_set' => 'isPaymentInfoSet',
        'payment_method_last_four' => 'paymentMethodLastFour',
        'payment_method_type' => 'paymentMethodType',
        'payment_method_sub_type' => 'paymentMethodSubType',
        'hosted_page' => 'hostedPage',
        'products' => 'products',
        'services' => 'services',
        'promos_and_discounts' => 'promosAndDiscounts',
        'company_name' => 'companyName',
        'can_add_ach' => 'canAddAch',
        'can_add_bank_account' => 'canAddBankAccount',
        'company_tax_id' => 'companyTaxId',
        'is_company_tax_id_opt_out' => 'isCompanyTaxIdOptOut',
        'is_company_domestic' => 'isCompanyDomestic'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_payment_info_set' => 'setIsPaymentInfoSet',
        'payment_method_last_four' => 'setPaymentMethodLastFour',
        'payment_method_type' => 'setPaymentMethodType',
        'payment_method_sub_type' => 'setPaymentMethodSubType',
        'hosted_page' => 'setHostedPage',
        'products' => 'setProducts',
        'services' => 'setServices',
        'promos_and_discounts' => 'setPromosAndDiscounts',
        'company_name' => 'setCompanyName',
        'can_add_ach' => 'setCanAddAch',
        'can_add_bank_account' => 'setCanAddBankAccount',
        'company_tax_id' => 'setCompanyTaxId',
        'is_company_tax_id_opt_out' => 'setIsCompanyTaxIdOptOut',
        'is_company_domestic' => 'setIsCompanyDomestic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_payment_info_set' => 'getIsPaymentInfoSet',
        'payment_method_last_four' => 'getPaymentMethodLastFour',
        'payment_method_type' => 'getPaymentMethodType',
        'payment_method_sub_type' => 'getPaymentMethodSubType',
        'hosted_page' => 'getHostedPage',
        'products' => 'getProducts',
        'services' => 'getServices',
        'promos_and_discounts' => 'getPromosAndDiscounts',
        'company_name' => 'getCompanyName',
        'can_add_ach' => 'getCanAddAch',
        'can_add_bank_account' => 'getCanAddBankAccount',
        'company_tax_id' => 'getCompanyTaxId',
        'is_company_tax_id_opt_out' => 'getIsCompanyTaxIdOptOut',
        'is_company_domestic' => 'getIsCompanyDomestic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('is_payment_info_set', $data ?? [], null);
        $this->setIfExists('payment_method_last_four', $data ?? [], null);
        $this->setIfExists('payment_method_type', $data ?? [], null);
        $this->setIfExists('payment_method_sub_type', $data ?? [], null);
        $this->setIfExists('hosted_page', $data ?? [], null);
        $this->setIfExists('products', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('promos_and_discounts', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('can_add_ach', $data ?? [], null);
        $this->setIfExists('can_add_bank_account', $data ?? [], null);
        $this->setIfExists('company_tax_id', $data ?? [], null);
        $this->setIfExists('is_company_tax_id_opt_out', $data ?? [], null);
        $this->setIfExists('is_company_domestic', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_payment_info_set
     *
     * @return bool|null
     */
    public function getIsPaymentInfoSet()
    {
        return $this->container['is_payment_info_set'];
    }

    /**
     * Sets is_payment_info_set
     *
     * @param bool|null $is_payment_info_set is_payment_info_set
     *
     * @return self
     */
    public function setIsPaymentInfoSet($is_payment_info_set)
    {
        if (is_null($is_payment_info_set)) {
            throw new \InvalidArgumentException('non-nullable is_payment_info_set cannot be null');
        }
        $this->container['is_payment_info_set'] = $is_payment_info_set;

        return $this;
    }

    /**
     * Gets payment_method_last_four
     *
     * @return string|null
     */
    public function getPaymentMethodLastFour()
    {
        return $this->container['payment_method_last_four'];
    }

    /**
     * Sets payment_method_last_four
     *
     * @param string|null $payment_method_last_four payment_method_last_four
     *
     * @return self
     */
    public function setPaymentMethodLastFour($payment_method_last_four)
    {
        if (is_null($payment_method_last_four)) {
            throw new \InvalidArgumentException('non-nullable payment_method_last_four cannot be null');
        }
        $this->container['payment_method_last_four'] = $payment_method_last_four;

        return $this;
    }

    /**
     * Gets payment_method_type
     *
     * @return string|null
     */
    public function getPaymentMethodType()
    {
        return $this->container['payment_method_type'];
    }

    /**
     * Sets payment_method_type
     *
     * @param string|null $payment_method_type payment_method_type
     *
     * @return self
     */
    public function setPaymentMethodType($payment_method_type)
    {
        if (is_null($payment_method_type)) {
            throw new \InvalidArgumentException('non-nullable payment_method_type cannot be null');
        }
        $this->container['payment_method_type'] = $payment_method_type;

        return $this;
    }

    /**
     * Gets payment_method_sub_type
     *
     * @return string|null
     */
    public function getPaymentMethodSubType()
    {
        return $this->container['payment_method_sub_type'];
    }

    /**
     * Sets payment_method_sub_type
     *
     * @param string|null $payment_method_sub_type payment_method_sub_type
     *
     * @return self
     */
    public function setPaymentMethodSubType($payment_method_sub_type)
    {
        if (is_null($payment_method_sub_type)) {
            throw new \InvalidArgumentException('non-nullable payment_method_sub_type cannot be null');
        }
        $this->container['payment_method_sub_type'] = $payment_method_sub_type;

        return $this;
    }

    /**
     * Gets hosted_page
     *
     * @return object|null
     */
    public function getHostedPage()
    {
        return $this->container['hosted_page'];
    }

    /**
     * Sets hosted_page
     *
     * @param object|null $hosted_page hosted_page
     *
     * @return self
     */
    public function setHostedPage($hosted_page)
    {
        if (is_null($hosted_page)) {
            throw new \InvalidArgumentException('non-nullable hosted_page cannot be null');
        }
        $this->container['hosted_page'] = $hosted_page;

        return $this;
    }

    /**
     * Gets products
     *
     * @return object[]|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param object[]|null $products products
     *
     * @return self
     */
    public function setProducts($products)
    {
        if (is_null($products)) {
            throw new \InvalidArgumentException('non-nullable products cannot be null');
        }
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets services
     *
     * @return object[]|null
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param object[]|null $services services
     *
     * @return self
     */
    public function setServices($services)
    {
        if (is_null($services)) {
            throw new \InvalidArgumentException('non-nullable services cannot be null');
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets promos_and_discounts
     *
     * @return object[]|null
     */
    public function getPromosAndDiscounts()
    {
        return $this->container['promos_and_discounts'];
    }

    /**
     * Sets promos_and_discounts
     *
     * @param object[]|null $promos_and_discounts promos_and_discounts
     *
     * @return self
     */
    public function setPromosAndDiscounts($promos_and_discounts)
    {
        if (is_null($promos_and_discounts)) {
            throw new \InvalidArgumentException('non-nullable promos_and_discounts cannot be null');
        }
        $this->container['promos_and_discounts'] = $promos_and_discounts;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets can_add_ach
     *
     * @return bool|null
     */
    public function getCanAddAch()
    {
        return $this->container['can_add_ach'];
    }

    /**
     * Sets can_add_ach
     *
     * @param bool|null $can_add_ach can_add_ach
     *
     * @return self
     */
    public function setCanAddAch($can_add_ach)
    {
        if (is_null($can_add_ach)) {
            throw new \InvalidArgumentException('non-nullable can_add_ach cannot be null');
        }
        $this->container['can_add_ach'] = $can_add_ach;

        return $this;
    }

    /**
     * Gets can_add_bank_account
     *
     * @return bool|null
     */
    public function getCanAddBankAccount()
    {
        return $this->container['can_add_bank_account'];
    }

    /**
     * Sets can_add_bank_account
     *
     * @param bool|null $can_add_bank_account can_add_bank_account
     *
     * @return self
     */
    public function setCanAddBankAccount($can_add_bank_account)
    {
        if (is_null($can_add_bank_account)) {
            throw new \InvalidArgumentException('non-nullable can_add_bank_account cannot be null');
        }
        $this->container['can_add_bank_account'] = $can_add_bank_account;

        return $this;
    }

    /**
     * Gets company_tax_id
     *
     * @return string|null
     */
    public function getCompanyTaxId()
    {
        return $this->container['company_tax_id'];
    }

    /**
     * Sets company_tax_id
     *
     * @param string|null $company_tax_id company_tax_id
     *
     * @return self
     */
    public function setCompanyTaxId($company_tax_id)
    {
        if (is_null($company_tax_id)) {
            array_push($this->openAPINullablesSetToNull, 'company_tax_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_tax_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_tax_id'] = $company_tax_id;

        return $this;
    }

    /**
     * Gets is_company_tax_id_opt_out
     *
     * @return bool|null
     */
    public function getIsCompanyTaxIdOptOut()
    {
        return $this->container['is_company_tax_id_opt_out'];
    }

    /**
     * Sets is_company_tax_id_opt_out
     *
     * @param bool|null $is_company_tax_id_opt_out is_company_tax_id_opt_out
     *
     * @return self
     */
    public function setIsCompanyTaxIdOptOut($is_company_tax_id_opt_out)
    {
        if (is_null($is_company_tax_id_opt_out)) {
            array_push($this->openAPINullablesSetToNull, 'is_company_tax_id_opt_out');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_company_tax_id_opt_out', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_company_tax_id_opt_out'] = $is_company_tax_id_opt_out;

        return $this;
    }

    /**
     * Gets is_company_domestic
     *
     * @return bool|null
     */
    public function getIsCompanyDomestic()
    {
        return $this->container['is_company_domestic'];
    }

    /**
     * Sets is_company_domestic
     *
     * @param bool|null $is_company_domestic is_company_domestic
     *
     * @return self
     */
    public function setIsCompanyDomestic($is_company_domestic)
    {
        if (is_null($is_company_domestic)) {
            array_push($this->openAPINullablesSetToNull, 'is_company_domestic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_company_domestic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_company_domestic'] = $is_company_domestic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


