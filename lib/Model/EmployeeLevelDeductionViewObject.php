<?php
/**
 * EmployeeLevelDeductionViewObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeLevelDeductionViewObject Class Doc Comment
 *
 * @category Class
 * @description Schema for the Employee Level Deduction View Object
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeLevelDeductionViewObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeLevelDeductionViewObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_deduction_id' => 'int',
        'deduction_name' => 'string',
        'deduction_type_id' => 'int',
        'deduction_type_translated' => 'int',
        'start_date' => '\DateTime',
        'start_date_formatted' => 'string',
        'end_date' => '\DateTime',
        'end_date_formatted' => 'string',
        'amount' => 'float',
        'amount_formatted' => 'string',
        'amount_type' => 'string',
        'percent_type' => 'string',
        'cap_amount' => 'float',
        'cap_amount_type' => 'float',
        'cap_amount_formatted' => 'string',
        'annual_max' => 'float',
        'annual_max_formatted' => 'string',
        'deduction_payee_id' => 'int',
        'case_number' => 'string',
        'case_description' => 'string',
        'can_be_collected_by_trax' => 'bool',
        'case_participant_id' => 'string',
        'company_deduction_id' => 'int',
        'global_payee_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_deduction_id' => 'int64',
        'deduction_name' => null,
        'deduction_type_id' => 'int64',
        'deduction_type_translated' => 'int64',
        'start_date' => 'date',
        'start_date_formatted' => null,
        'end_date' => 'date',
        'end_date_formatted' => null,
        'amount' => 'float',
        'amount_formatted' => null,
        'amount_type' => null,
        'percent_type' => null,
        'cap_amount' => 'float',
        'cap_amount_type' => 'float',
        'cap_amount_formatted' => null,
        'annual_max' => 'float',
        'annual_max_formatted' => null,
        'deduction_payee_id' => 'int64',
        'case_number' => null,
        'case_description' => null,
        'can_be_collected_by_trax' => null,
        'case_participant_id' => null,
        'company_deduction_id' => 'int64',
        'global_payee_id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_deduction_id' => false,
        'deduction_name' => false,
        'deduction_type_id' => false,
        'deduction_type_translated' => false,
        'start_date' => false,
        'start_date_formatted' => false,
        'end_date' => false,
        'end_date_formatted' => false,
        'amount' => false,
        'amount_formatted' => false,
        'amount_type' => false,
        'percent_type' => false,
        'cap_amount' => false,
        'cap_amount_type' => false,
        'cap_amount_formatted' => false,
        'annual_max' => false,
        'annual_max_formatted' => false,
        'deduction_payee_id' => false,
        'case_number' => false,
        'case_description' => false,
        'can_be_collected_by_trax' => false,
        'case_participant_id' => false,
        'company_deduction_id' => true,
        'global_payee_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_deduction_id' => 'employeeDeductionId',
        'deduction_name' => 'deductionName',
        'deduction_type_id' => 'deductionTypeId',
        'deduction_type_translated' => 'deductionTypeTranslated',
        'start_date' => 'startDate',
        'start_date_formatted' => 'startDateFormatted',
        'end_date' => 'endDate',
        'end_date_formatted' => 'endDateFormatted',
        'amount' => 'amount',
        'amount_formatted' => 'amountFormatted',
        'amount_type' => 'amountType',
        'percent_type' => 'percentType',
        'cap_amount' => 'capAmount',
        'cap_amount_type' => 'capAmountType',
        'cap_amount_formatted' => 'capAmountFormatted',
        'annual_max' => 'annualMax',
        'annual_max_formatted' => 'annualMaxFormatted',
        'deduction_payee_id' => 'deductionPayeeId',
        'case_number' => 'caseNumber',
        'case_description' => 'caseDescription',
        'can_be_collected_by_trax' => 'canBeCollectedByTrax',
        'case_participant_id' => 'caseParticipantId',
        'company_deduction_id' => 'companyDeductionId',
        'global_payee_id' => 'globalPayeeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_deduction_id' => 'setEmployeeDeductionId',
        'deduction_name' => 'setDeductionName',
        'deduction_type_id' => 'setDeductionTypeId',
        'deduction_type_translated' => 'setDeductionTypeTranslated',
        'start_date' => 'setStartDate',
        'start_date_formatted' => 'setStartDateFormatted',
        'end_date' => 'setEndDate',
        'end_date_formatted' => 'setEndDateFormatted',
        'amount' => 'setAmount',
        'amount_formatted' => 'setAmountFormatted',
        'amount_type' => 'setAmountType',
        'percent_type' => 'setPercentType',
        'cap_amount' => 'setCapAmount',
        'cap_amount_type' => 'setCapAmountType',
        'cap_amount_formatted' => 'setCapAmountFormatted',
        'annual_max' => 'setAnnualMax',
        'annual_max_formatted' => 'setAnnualMaxFormatted',
        'deduction_payee_id' => 'setDeductionPayeeId',
        'case_number' => 'setCaseNumber',
        'case_description' => 'setCaseDescription',
        'can_be_collected_by_trax' => 'setCanBeCollectedByTrax',
        'case_participant_id' => 'setCaseParticipantId',
        'company_deduction_id' => 'setCompanyDeductionId',
        'global_payee_id' => 'setGlobalPayeeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_deduction_id' => 'getEmployeeDeductionId',
        'deduction_name' => 'getDeductionName',
        'deduction_type_id' => 'getDeductionTypeId',
        'deduction_type_translated' => 'getDeductionTypeTranslated',
        'start_date' => 'getStartDate',
        'start_date_formatted' => 'getStartDateFormatted',
        'end_date' => 'getEndDate',
        'end_date_formatted' => 'getEndDateFormatted',
        'amount' => 'getAmount',
        'amount_formatted' => 'getAmountFormatted',
        'amount_type' => 'getAmountType',
        'percent_type' => 'getPercentType',
        'cap_amount' => 'getCapAmount',
        'cap_amount_type' => 'getCapAmountType',
        'cap_amount_formatted' => 'getCapAmountFormatted',
        'annual_max' => 'getAnnualMax',
        'annual_max_formatted' => 'getAnnualMaxFormatted',
        'deduction_payee_id' => 'getDeductionPayeeId',
        'case_number' => 'getCaseNumber',
        'case_description' => 'getCaseDescription',
        'can_be_collected_by_trax' => 'getCanBeCollectedByTrax',
        'case_participant_id' => 'getCaseParticipantId',
        'company_deduction_id' => 'getCompanyDeductionId',
        'global_payee_id' => 'getGlobalPayeeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_deduction_id', $data ?? [], null);
        $this->setIfExists('deduction_name', $data ?? [], null);
        $this->setIfExists('deduction_type_id', $data ?? [], null);
        $this->setIfExists('deduction_type_translated', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('start_date_formatted', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('end_date_formatted', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_formatted', $data ?? [], null);
        $this->setIfExists('amount_type', $data ?? [], null);
        $this->setIfExists('percent_type', $data ?? [], null);
        $this->setIfExists('cap_amount', $data ?? [], null);
        $this->setIfExists('cap_amount_type', $data ?? [], null);
        $this->setIfExists('cap_amount_formatted', $data ?? [], null);
        $this->setIfExists('annual_max', $data ?? [], null);
        $this->setIfExists('annual_max_formatted', $data ?? [], null);
        $this->setIfExists('deduction_payee_id', $data ?? [], null);
        $this->setIfExists('case_number', $data ?? [], null);
        $this->setIfExists('case_description', $data ?? [], null);
        $this->setIfExists('can_be_collected_by_trax', $data ?? [], null);
        $this->setIfExists('case_participant_id', $data ?? [], null);
        $this->setIfExists('company_deduction_id', $data ?? [], null);
        $this->setIfExists('global_payee_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_deduction_id
     *
     * @return int|null
     */
    public function getEmployeeDeductionId()
    {
        return $this->container['employee_deduction_id'];
    }

    /**
     * Sets employee_deduction_id
     *
     * @param int|null $employee_deduction_id The unique identifier of the employee deduction
     *
     * @return self
     */
    public function setEmployeeDeductionId($employee_deduction_id)
    {
        if (is_null($employee_deduction_id)) {
            throw new \InvalidArgumentException('non-nullable employee_deduction_id cannot be null');
        }
        $this->container['employee_deduction_id'] = $employee_deduction_id;

        return $this;
    }

    /**
     * Gets deduction_name
     *
     * @return string|null
     */
    public function getDeductionName()
    {
        return $this->container['deduction_name'];
    }

    /**
     * Sets deduction_name
     *
     * @param string|null $deduction_name The name of the deduction
     *
     * @return self
     */
    public function setDeductionName($deduction_name)
    {
        if (is_null($deduction_name)) {
            throw new \InvalidArgumentException('non-nullable deduction_name cannot be null');
        }
        $this->container['deduction_name'] = $deduction_name;

        return $this;
    }

    /**
     * Gets deduction_type_id
     *
     * @return int|null
     */
    public function getDeductionTypeId()
    {
        return $this->container['deduction_type_id'];
    }

    /**
     * Sets deduction_type_id
     *
     * @param int|null $deduction_type_id The type ID of the deduction
     *
     * @return self
     */
    public function setDeductionTypeId($deduction_type_id)
    {
        if (is_null($deduction_type_id)) {
            throw new \InvalidArgumentException('non-nullable deduction_type_id cannot be null');
        }
        $this->container['deduction_type_id'] = $deduction_type_id;

        return $this;
    }

    /**
     * Gets deduction_type_translated
     *
     * @return int|null
     */
    public function getDeductionTypeTranslated()
    {
        return $this->container['deduction_type_translated'];
    }

    /**
     * Sets deduction_type_translated
     *
     * @param int|null $deduction_type_translated The translated type ID of the deduction
     *
     * @return self
     */
    public function setDeductionTypeTranslated($deduction_type_translated)
    {
        if (is_null($deduction_type_translated)) {
            throw new \InvalidArgumentException('non-nullable deduction_type_translated cannot be null');
        }
        $this->container['deduction_type_translated'] = $deduction_type_translated;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date The start date of the deduction
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_date_formatted
     *
     * @return string|null
     */
    public function getStartDateFormatted()
    {
        return $this->container['start_date_formatted'];
    }

    /**
     * Sets start_date_formatted
     *
     * @param string|null $start_date_formatted The formatted start date of the deduction
     *
     * @return self
     */
    public function setStartDateFormatted($start_date_formatted)
    {
        if (is_null($start_date_formatted)) {
            throw new \InvalidArgumentException('non-nullable start_date_formatted cannot be null');
        }
        $this->container['start_date_formatted'] = $start_date_formatted;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date The end date of the deduction
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets end_date_formatted
     *
     * @return string|null
     */
    public function getEndDateFormatted()
    {
        return $this->container['end_date_formatted'];
    }

    /**
     * Sets end_date_formatted
     *
     * @param string|null $end_date_formatted The formatted end date of the deduction
     *
     * @return self
     */
    public function setEndDateFormatted($end_date_formatted)
    {
        if (is_null($end_date_formatted)) {
            throw new \InvalidArgumentException('non-nullable end_date_formatted cannot be null');
        }
        $this->container['end_date_formatted'] = $end_date_formatted;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The amount of the deduction
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_formatted
     *
     * @return string|null
     */
    public function getAmountFormatted()
    {
        return $this->container['amount_formatted'];
    }

    /**
     * Sets amount_formatted
     *
     * @param string|null $amount_formatted The formatted amount of the deduction
     *
     * @return self
     */
    public function setAmountFormatted($amount_formatted)
    {
        if (is_null($amount_formatted)) {
            throw new \InvalidArgumentException('non-nullable amount_formatted cannot be null');
        }
        $this->container['amount_formatted'] = $amount_formatted;

        return $this;
    }

    /**
     * Gets amount_type
     *
     * @return string|null
     */
    public function getAmountType()
    {
        return $this->container['amount_type'];
    }

    /**
     * Sets amount_type
     *
     * @param string|null $amount_type The type of the amount
     *
     * @return self
     */
    public function setAmountType($amount_type)
    {
        if (is_null($amount_type)) {
            throw new \InvalidArgumentException('non-nullable amount_type cannot be null');
        }
        $this->container['amount_type'] = $amount_type;

        return $this;
    }

    /**
     * Gets percent_type
     *
     * @return string|null
     */
    public function getPercentType()
    {
        return $this->container['percent_type'];
    }

    /**
     * Sets percent_type
     *
     * @param string|null $percent_type The type of the percentage
     *
     * @return self
     */
    public function setPercentType($percent_type)
    {
        if (is_null($percent_type)) {
            throw new \InvalidArgumentException('non-nullable percent_type cannot be null');
        }
        $this->container['percent_type'] = $percent_type;

        return $this;
    }

    /**
     * Gets cap_amount
     *
     * @return float|null
     */
    public function getCapAmount()
    {
        return $this->container['cap_amount'];
    }

    /**
     * Sets cap_amount
     *
     * @param float|null $cap_amount The cap amount of the deduction
     *
     * @return self
     */
    public function setCapAmount($cap_amount)
    {
        if (is_null($cap_amount)) {
            throw new \InvalidArgumentException('non-nullable cap_amount cannot be null');
        }
        $this->container['cap_amount'] = $cap_amount;

        return $this;
    }

    /**
     * Gets cap_amount_type
     *
     * @return float|null
     */
    public function getCapAmountType()
    {
        return $this->container['cap_amount_type'];
    }

    /**
     * Sets cap_amount_type
     *
     * @param float|null $cap_amount_type The type of the cap amount
     *
     * @return self
     */
    public function setCapAmountType($cap_amount_type)
    {
        if (is_null($cap_amount_type)) {
            throw new \InvalidArgumentException('non-nullable cap_amount_type cannot be null');
        }
        $this->container['cap_amount_type'] = $cap_amount_type;

        return $this;
    }

    /**
     * Gets cap_amount_formatted
     *
     * @return string|null
     */
    public function getCapAmountFormatted()
    {
        return $this->container['cap_amount_formatted'];
    }

    /**
     * Sets cap_amount_formatted
     *
     * @param string|null $cap_amount_formatted The formatted cap amount of the deduction
     *
     * @return self
     */
    public function setCapAmountFormatted($cap_amount_formatted)
    {
        if (is_null($cap_amount_formatted)) {
            throw new \InvalidArgumentException('non-nullable cap_amount_formatted cannot be null');
        }
        $this->container['cap_amount_formatted'] = $cap_amount_formatted;

        return $this;
    }

    /**
     * Gets annual_max
     *
     * @return float|null
     */
    public function getAnnualMax()
    {
        return $this->container['annual_max'];
    }

    /**
     * Sets annual_max
     *
     * @param float|null $annual_max The annual maximum of the deduction
     *
     * @return self
     */
    public function setAnnualMax($annual_max)
    {
        if (is_null($annual_max)) {
            throw new \InvalidArgumentException('non-nullable annual_max cannot be null');
        }
        $this->container['annual_max'] = $annual_max;

        return $this;
    }

    /**
     * Gets annual_max_formatted
     *
     * @return string|null
     */
    public function getAnnualMaxFormatted()
    {
        return $this->container['annual_max_formatted'];
    }

    /**
     * Sets annual_max_formatted
     *
     * @param string|null $annual_max_formatted The formatted annual maximum of the deduction
     *
     * @return self
     */
    public function setAnnualMaxFormatted($annual_max_formatted)
    {
        if (is_null($annual_max_formatted)) {
            throw new \InvalidArgumentException('non-nullable annual_max_formatted cannot be null');
        }
        $this->container['annual_max_formatted'] = $annual_max_formatted;

        return $this;
    }

    /**
     * Gets deduction_payee_id
     *
     * @return int|null
     */
    public function getDeductionPayeeId()
    {
        return $this->container['deduction_payee_id'];
    }

    /**
     * Sets deduction_payee_id
     *
     * @param int|null $deduction_payee_id The ID of the deduction payee
     *
     * @return self
     */
    public function setDeductionPayeeId($deduction_payee_id)
    {
        if (is_null($deduction_payee_id)) {
            throw new \InvalidArgumentException('non-nullable deduction_payee_id cannot be null');
        }
        $this->container['deduction_payee_id'] = $deduction_payee_id;

        return $this;
    }

    /**
     * Gets case_number
     *
     * @return string|null
     */
    public function getCaseNumber()
    {
        return $this->container['case_number'];
    }

    /**
     * Sets case_number
     *
     * @param string|null $case_number The case number associated with the deduction
     *
     * @return self
     */
    public function setCaseNumber($case_number)
    {
        if (is_null($case_number)) {
            throw new \InvalidArgumentException('non-nullable case_number cannot be null');
        }
        $this->container['case_number'] = $case_number;

        return $this;
    }

    /**
     * Gets case_description
     *
     * @return string|null
     */
    public function getCaseDescription()
    {
        return $this->container['case_description'];
    }

    /**
     * Sets case_description
     *
     * @param string|null $case_description The description of the case associated with the deduction
     *
     * @return self
     */
    public function setCaseDescription($case_description)
    {
        if (is_null($case_description)) {
            throw new \InvalidArgumentException('non-nullable case_description cannot be null');
        }
        $this->container['case_description'] = $case_description;

        return $this;
    }

    /**
     * Gets can_be_collected_by_trax
     *
     * @return bool|null
     */
    public function getCanBeCollectedByTrax()
    {
        return $this->container['can_be_collected_by_trax'];
    }

    /**
     * Sets can_be_collected_by_trax
     *
     * @param bool|null $can_be_collected_by_trax Indicates if the deduction can be collected by Trax
     *
     * @return self
     */
    public function setCanBeCollectedByTrax($can_be_collected_by_trax)
    {
        if (is_null($can_be_collected_by_trax)) {
            throw new \InvalidArgumentException('non-nullable can_be_collected_by_trax cannot be null');
        }
        $this->container['can_be_collected_by_trax'] = $can_be_collected_by_trax;

        return $this;
    }

    /**
     * Gets case_participant_id
     *
     * @return string|null
     */
    public function getCaseParticipantId()
    {
        return $this->container['case_participant_id'];
    }

    /**
     * Sets case_participant_id
     *
     * @param string|null $case_participant_id The participant ID of the case
     *
     * @return self
     */
    public function setCaseParticipantId($case_participant_id)
    {
        if (is_null($case_participant_id)) {
            throw new \InvalidArgumentException('non-nullable case_participant_id cannot be null');
        }
        $this->container['case_participant_id'] = $case_participant_id;

        return $this;
    }

    /**
     * Gets company_deduction_id
     *
     * @return int|null
     */
    public function getCompanyDeductionId()
    {
        return $this->container['company_deduction_id'];
    }

    /**
     * Sets company_deduction_id
     *
     * @param int|null $company_deduction_id The company deduction ID, if applicable
     *
     * @return self
     */
    public function setCompanyDeductionId($company_deduction_id)
    {
        if (is_null($company_deduction_id)) {
            array_push($this->openAPINullablesSetToNull, 'company_deduction_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_deduction_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_deduction_id'] = $company_deduction_id;

        return $this;
    }

    /**
     * Gets global_payee_id
     *
     * @return int|null
     */
    public function getGlobalPayeeId()
    {
        return $this->container['global_payee_id'];
    }

    /**
     * Sets global_payee_id
     *
     * @param int|null $global_payee_id The global payee ID, if applicable
     *
     * @return self
     */
    public function setGlobalPayeeId($global_payee_id)
    {
        if (is_null($global_payee_id)) {
            array_push($this->openAPINullablesSetToNull, 'global_payee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('global_payee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['global_payee_id'] = $global_payee_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


