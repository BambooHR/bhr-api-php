<?php
/**
 * NewEligibilityGroup
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * NewEligibilityGroup Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NewEligibilityGroup implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NewEligibilityGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'time_to_eligibility' => '\MySdk\Model\TimeToEligibility',
        'loss_of_eligibility' => '\MySdk\Model\EligibilityRule',
        'filters' => '\MySdk\Model\Filters',
        'specific_employee_ids' => 'int[]',
        'coverage_costs' => '\MySdk\Model\CoverageCost[]',
        'calculator_settings' => 'mixed[]',
        'class' => '\MySdk\Model\BenefitClass'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'time_to_eligibility' => null,
        'loss_of_eligibility' => null,
        'filters' => null,
        'specific_employee_ids' => null,
        'coverage_costs' => null,
        'calculator_settings' => null,
        'class' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'time_to_eligibility' => false,
        'loss_of_eligibility' => false,
        'filters' => false,
        'specific_employee_ids' => false,
        'coverage_costs' => false,
        'calculator_settings' => true,
        'class' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time_to_eligibility' => 'timeToEligibility',
        'loss_of_eligibility' => 'lossOfEligibility',
        'filters' => 'filters',
        'specific_employee_ids' => 'specificEmployeeIds',
        'coverage_costs' => 'coverageCosts',
        'calculator_settings' => 'calculatorSettings',
        'class' => 'class'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time_to_eligibility' => 'setTimeToEligibility',
        'loss_of_eligibility' => 'setLossOfEligibility',
        'filters' => 'setFilters',
        'specific_employee_ids' => 'setSpecificEmployeeIds',
        'coverage_costs' => 'setCoverageCosts',
        'calculator_settings' => 'setCalculatorSettings',
        'class' => 'setClass'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time_to_eligibility' => 'getTimeToEligibility',
        'loss_of_eligibility' => 'getLossOfEligibility',
        'filters' => 'getFilters',
        'specific_employee_ids' => 'getSpecificEmployeeIds',
        'coverage_costs' => 'getCoverageCosts',
        'calculator_settings' => 'getCalculatorSettings',
        'class' => 'getClass'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('time_to_eligibility', $data ?? [], null);
        $this->setIfExists('loss_of_eligibility', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('specific_employee_ids', $data ?? [], null);
        $this->setIfExists('coverage_costs', $data ?? [], null);
        $this->setIfExists('calculator_settings', $data ?? [], null);
        $this->setIfExists('class', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time_to_eligibility
     *
     * @return \MySdk\Model\TimeToEligibility|null
     */
    public function getTimeToEligibility()
    {
        return $this->container['time_to_eligibility'];
    }

    /**
     * Sets time_to_eligibility
     *
     * @param \MySdk\Model\TimeToEligibility|null $time_to_eligibility time_to_eligibility
     *
     * @return self
     */
    public function setTimeToEligibility($time_to_eligibility)
    {
        if (is_null($time_to_eligibility)) {
            throw new \InvalidArgumentException('non-nullable time_to_eligibility cannot be null');
        }
        $this->container['time_to_eligibility'] = $time_to_eligibility;

        return $this;
    }

    /**
     * Gets loss_of_eligibility
     *
     * @return \MySdk\Model\EligibilityRule|null
     */
    public function getLossOfEligibility()
    {
        return $this->container['loss_of_eligibility'];
    }

    /**
     * Sets loss_of_eligibility
     *
     * @param \MySdk\Model\EligibilityRule|null $loss_of_eligibility loss_of_eligibility
     *
     * @return self
     */
    public function setLossOfEligibility($loss_of_eligibility)
    {
        if (is_null($loss_of_eligibility)) {
            throw new \InvalidArgumentException('non-nullable loss_of_eligibility cannot be null');
        }
        $this->container['loss_of_eligibility'] = $loss_of_eligibility;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \MySdk\Model\Filters|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \MySdk\Model\Filters|null $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {
        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets specific_employee_ids
     *
     * @return int[]|null
     */
    public function getSpecificEmployeeIds()
    {
        return $this->container['specific_employee_ids'];
    }

    /**
     * Sets specific_employee_ids
     *
     * @param int[]|null $specific_employee_ids specific_employee_ids
     *
     * @return self
     */
    public function setSpecificEmployeeIds($specific_employee_ids)
    {
        if (is_null($specific_employee_ids)) {
            throw new \InvalidArgumentException('non-nullable specific_employee_ids cannot be null');
        }
        $this->container['specific_employee_ids'] = $specific_employee_ids;

        return $this;
    }

    /**
     * Gets coverage_costs
     *
     * @return \MySdk\Model\CoverageCost[]|null
     */
    public function getCoverageCosts()
    {
        return $this->container['coverage_costs'];
    }

    /**
     * Sets coverage_costs
     *
     * @param \MySdk\Model\CoverageCost[]|null $coverage_costs coverage_costs
     *
     * @return self
     */
    public function setCoverageCosts($coverage_costs)
    {
        if (is_null($coverage_costs)) {
            throw new \InvalidArgumentException('non-nullable coverage_costs cannot be null');
        }
        $this->container['coverage_costs'] = $coverage_costs;

        return $this;
    }

    /**
     * Gets calculator_settings
     *
     * @return mixed[]|null
     */
    public function getCalculatorSettings()
    {
        return $this->container['calculator_settings'];
    }

    /**
     * Sets calculator_settings
     *
     * @param mixed[]|null $calculator_settings calculator_settings
     *
     * @return self
     */
    public function setCalculatorSettings($calculator_settings)
    {
        if (is_null($calculator_settings)) {
            array_push($this->openAPINullablesSetToNull, 'calculator_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('calculator_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['calculator_settings'] = $calculator_settings;

        return $this;
    }

    /**
     * Gets class
     *
     * @return \MySdk\Model\BenefitClass|null
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param \MySdk\Model\BenefitClass|null $class class
     *
     * @return self
     */
    public function setClass($class)
    {
        if (is_null($class)) {
            throw new \InvalidArgumentException('non-nullable class cannot be null');
        }
        $this->container['class'] = $class;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


