<?php
/**
 * PlanTypeData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PlanTypeData Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PlanTypeData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PlanTypeData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_variable' => 'bool',
        'deduction_type_id' => 'string',
        'reportable_on_w2' => 'bool',
        'aca' => '\MySdk\Model\Aca',
        'safe_harbor' => 'bool',
        'reimbursement' => '\MySdk\Model\Reimbursement',
        'deduction_date_rule' => '\MySdk\Model\DeductionDateRule',
        'deduction_frequencies' => '\MySdk\Model\DeductionFrequency[]',
        'coverage_levels' => '\MySdk\Model\CoverageLevels',
        'auto_enroll_setting' => 'string',
        'auto_enroll_default_employee_contribution_amount' => 'float',
        'carrier_id' => 'string',
        'plan_category_data_options' => 'object',
        'required_plan_ids' => 'string[]',
        'rate_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_variable' => null,
        'deduction_type_id' => null,
        'reportable_on_w2' => null,
        'aca' => null,
        'safe_harbor' => null,
        'reimbursement' => null,
        'deduction_date_rule' => null,
        'deduction_frequencies' => null,
        'coverage_levels' => null,
        'auto_enroll_setting' => null,
        'auto_enroll_default_employee_contribution_amount' => 'float',
        'carrier_id' => null,
        'plan_category_data_options' => null,
        'required_plan_ids' => null,
        'rate_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_variable' => true,
        'deduction_type_id' => true,
        'reportable_on_w2' => true,
        'aca' => false,
        'safe_harbor' => true,
        'reimbursement' => false,
        'deduction_date_rule' => true,
        'deduction_frequencies' => false,
        'coverage_levels' => true,
        'auto_enroll_setting' => true,
        'auto_enroll_default_employee_contribution_amount' => true,
        'carrier_id' => true,
        'plan_category_data_options' => false,
        'required_plan_ids' => true,
        'rate_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_variable' => 'isVariable',
        'deduction_type_id' => 'deductionTypeId',
        'reportable_on_w2' => 'reportableOnW2',
        'aca' => 'aca',
        'safe_harbor' => 'safeHarbor',
        'reimbursement' => 'reimbursement',
        'deduction_date_rule' => 'deductionDateRule',
        'deduction_frequencies' => 'deductionFrequencies',
        'coverage_levels' => 'coverageLevels',
        'auto_enroll_setting' => 'autoEnrollSetting',
        'auto_enroll_default_employee_contribution_amount' => 'autoEnrollDefaultEmployeeContributionAmount',
        'carrier_id' => 'carrierId',
        'plan_category_data_options' => 'planCategoryDataOptions',
        'required_plan_ids' => 'requiredPlanIds',
        'rate_type' => 'rateType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_variable' => 'setIsVariable',
        'deduction_type_id' => 'setDeductionTypeId',
        'reportable_on_w2' => 'setReportableOnW2',
        'aca' => 'setAca',
        'safe_harbor' => 'setSafeHarbor',
        'reimbursement' => 'setReimbursement',
        'deduction_date_rule' => 'setDeductionDateRule',
        'deduction_frequencies' => 'setDeductionFrequencies',
        'coverage_levels' => 'setCoverageLevels',
        'auto_enroll_setting' => 'setAutoEnrollSetting',
        'auto_enroll_default_employee_contribution_amount' => 'setAutoEnrollDefaultEmployeeContributionAmount',
        'carrier_id' => 'setCarrierId',
        'plan_category_data_options' => 'setPlanCategoryDataOptions',
        'required_plan_ids' => 'setRequiredPlanIds',
        'rate_type' => 'setRateType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_variable' => 'getIsVariable',
        'deduction_type_id' => 'getDeductionTypeId',
        'reportable_on_w2' => 'getReportableOnW2',
        'aca' => 'getAca',
        'safe_harbor' => 'getSafeHarbor',
        'reimbursement' => 'getReimbursement',
        'deduction_date_rule' => 'getDeductionDateRule',
        'deduction_frequencies' => 'getDeductionFrequencies',
        'coverage_levels' => 'getCoverageLevels',
        'auto_enroll_setting' => 'getAutoEnrollSetting',
        'auto_enroll_default_employee_contribution_amount' => 'getAutoEnrollDefaultEmployeeContributionAmount',
        'carrier_id' => 'getCarrierId',
        'plan_category_data_options' => 'getPlanCategoryDataOptions',
        'required_plan_ids' => 'getRequiredPlanIds',
        'rate_type' => 'getRateType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('is_variable', $data ?? [], null);
        $this->setIfExists('deduction_type_id', $data ?? [], null);
        $this->setIfExists('reportable_on_w2', $data ?? [], null);
        $this->setIfExists('aca', $data ?? [], null);
        $this->setIfExists('safe_harbor', $data ?? [], null);
        $this->setIfExists('reimbursement', $data ?? [], null);
        $this->setIfExists('deduction_date_rule', $data ?? [], null);
        $this->setIfExists('deduction_frequencies', $data ?? [], null);
        $this->setIfExists('coverage_levels', $data ?? [], null);
        $this->setIfExists('auto_enroll_setting', $data ?? [], null);
        $this->setIfExists('auto_enroll_default_employee_contribution_amount', $data ?? [], null);
        $this->setIfExists('carrier_id', $data ?? [], null);
        $this->setIfExists('plan_category_data_options', $data ?? [], null);
        $this->setIfExists('required_plan_ids', $data ?? [], null);
        $this->setIfExists('rate_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_variable
     *
     * @return bool|null
     */
    public function getIsVariable()
    {
        return $this->container['is_variable'];
    }

    /**
     * Sets is_variable
     *
     * @param bool|null $is_variable is_variable
     *
     * @return self
     */
    public function setIsVariable($is_variable)
    {
        if (is_null($is_variable)) {
            array_push($this->openAPINullablesSetToNull, 'is_variable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_variable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_variable'] = $is_variable;

        return $this;
    }

    /**
     * Gets deduction_type_id
     *
     * @return string|null
     */
    public function getDeductionTypeId()
    {
        return $this->container['deduction_type_id'];
    }

    /**
     * Sets deduction_type_id
     *
     * @param string|null $deduction_type_id deduction_type_id
     *
     * @return self
     */
    public function setDeductionTypeId($deduction_type_id)
    {
        if (is_null($deduction_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'deduction_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deduction_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deduction_type_id'] = $deduction_type_id;

        return $this;
    }

    /**
     * Gets reportable_on_w2
     *
     * @return bool|null
     */
    public function getReportableOnW2()
    {
        return $this->container['reportable_on_w2'];
    }

    /**
     * Sets reportable_on_w2
     *
     * @param bool|null $reportable_on_w2 reportable_on_w2
     *
     * @return self
     */
    public function setReportableOnW2($reportable_on_w2)
    {
        if (is_null($reportable_on_w2)) {
            array_push($this->openAPINullablesSetToNull, 'reportable_on_w2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reportable_on_w2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reportable_on_w2'] = $reportable_on_w2;

        return $this;
    }

    /**
     * Gets aca
     *
     * @return \MySdk\Model\Aca|null
     */
    public function getAca()
    {
        return $this->container['aca'];
    }

    /**
     * Sets aca
     *
     * @param \MySdk\Model\Aca|null $aca aca
     *
     * @return self
     */
    public function setAca($aca)
    {
        if (is_null($aca)) {
            throw new \InvalidArgumentException('non-nullable aca cannot be null');
        }
        $this->container['aca'] = $aca;

        return $this;
    }

    /**
     * Gets safe_harbor
     *
     * @return bool|null
     */
    public function getSafeHarbor()
    {
        return $this->container['safe_harbor'];
    }

    /**
     * Sets safe_harbor
     *
     * @param bool|null $safe_harbor safe_harbor
     *
     * @return self
     */
    public function setSafeHarbor($safe_harbor)
    {
        if (is_null($safe_harbor)) {
            array_push($this->openAPINullablesSetToNull, 'safe_harbor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('safe_harbor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['safe_harbor'] = $safe_harbor;

        return $this;
    }

    /**
     * Gets reimbursement
     *
     * @return \MySdk\Model\Reimbursement|null
     */
    public function getReimbursement()
    {
        return $this->container['reimbursement'];
    }

    /**
     * Sets reimbursement
     *
     * @param \MySdk\Model\Reimbursement|null $reimbursement reimbursement
     *
     * @return self
     */
    public function setReimbursement($reimbursement)
    {
        if (is_null($reimbursement)) {
            throw new \InvalidArgumentException('non-nullable reimbursement cannot be null');
        }
        $this->container['reimbursement'] = $reimbursement;

        return $this;
    }

    /**
     * Gets deduction_date_rule
     *
     * @return \MySdk\Model\DeductionDateRule|null
     */
    public function getDeductionDateRule()
    {
        return $this->container['deduction_date_rule'];
    }

    /**
     * Sets deduction_date_rule
     *
     * @param \MySdk\Model\DeductionDateRule|null $deduction_date_rule deduction_date_rule
     *
     * @return self
     */
    public function setDeductionDateRule($deduction_date_rule)
    {
        if (is_null($deduction_date_rule)) {
            array_push($this->openAPINullablesSetToNull, 'deduction_date_rule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deduction_date_rule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deduction_date_rule'] = $deduction_date_rule;

        return $this;
    }

    /**
     * Gets deduction_frequencies
     *
     * @return \MySdk\Model\DeductionFrequency[]|null
     */
    public function getDeductionFrequencies()
    {
        return $this->container['deduction_frequencies'];
    }

    /**
     * Sets deduction_frequencies
     *
     * @param \MySdk\Model\DeductionFrequency[]|null $deduction_frequencies deduction_frequencies
     *
     * @return self
     */
    public function setDeductionFrequencies($deduction_frequencies)
    {
        if (is_null($deduction_frequencies)) {
            throw new \InvalidArgumentException('non-nullable deduction_frequencies cannot be null');
        }
        $this->container['deduction_frequencies'] = $deduction_frequencies;

        return $this;
    }

    /**
     * Gets coverage_levels
     *
     * @return \MySdk\Model\CoverageLevels|null
     */
    public function getCoverageLevels()
    {
        return $this->container['coverage_levels'];
    }

    /**
     * Sets coverage_levels
     *
     * @param \MySdk\Model\CoverageLevels|null $coverage_levels coverage_levels
     *
     * @return self
     */
    public function setCoverageLevels($coverage_levels)
    {
        if (is_null($coverage_levels)) {
            array_push($this->openAPINullablesSetToNull, 'coverage_levels');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('coverage_levels', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['coverage_levels'] = $coverage_levels;

        return $this;
    }

    /**
     * Gets auto_enroll_setting
     *
     * @return string|null
     */
    public function getAutoEnrollSetting()
    {
        return $this->container['auto_enroll_setting'];
    }

    /**
     * Sets auto_enroll_setting
     *
     * @param string|null $auto_enroll_setting auto_enroll_setting
     *
     * @return self
     */
    public function setAutoEnrollSetting($auto_enroll_setting)
    {
        if (is_null($auto_enroll_setting)) {
            array_push($this->openAPINullablesSetToNull, 'auto_enroll_setting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_enroll_setting', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_enroll_setting'] = $auto_enroll_setting;

        return $this;
    }

    /**
     * Gets auto_enroll_default_employee_contribution_amount
     *
     * @return float|null
     */
    public function getAutoEnrollDefaultEmployeeContributionAmount()
    {
        return $this->container['auto_enroll_default_employee_contribution_amount'];
    }

    /**
     * Sets auto_enroll_default_employee_contribution_amount
     *
     * @param float|null $auto_enroll_default_employee_contribution_amount auto_enroll_default_employee_contribution_amount
     *
     * @return self
     */
    public function setAutoEnrollDefaultEmployeeContributionAmount($auto_enroll_default_employee_contribution_amount)
    {
        if (is_null($auto_enroll_default_employee_contribution_amount)) {
            array_push($this->openAPINullablesSetToNull, 'auto_enroll_default_employee_contribution_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_enroll_default_employee_contribution_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_enroll_default_employee_contribution_amount'] = $auto_enroll_default_employee_contribution_amount;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return string|null
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string|null $carrier_id carrier_id
     *
     * @return self
     */
    public function setCarrierId($carrier_id)
    {
        if (is_null($carrier_id)) {
            array_push($this->openAPINullablesSetToNull, 'carrier_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('carrier_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets plan_category_data_options
     *
     * @return object|null
     */
    public function getPlanCategoryDataOptions()
    {
        return $this->container['plan_category_data_options'];
    }

    /**
     * Sets plan_category_data_options
     *
     * @param object|null $plan_category_data_options plan_category_data_options
     *
     * @return self
     */
    public function setPlanCategoryDataOptions($plan_category_data_options)
    {
        if (is_null($plan_category_data_options)) {
            throw new \InvalidArgumentException('non-nullable plan_category_data_options cannot be null');
        }
        $this->container['plan_category_data_options'] = $plan_category_data_options;

        return $this;
    }

    /**
     * Gets required_plan_ids
     *
     * @return string[]|null
     */
    public function getRequiredPlanIds()
    {
        return $this->container['required_plan_ids'];
    }

    /**
     * Sets required_plan_ids
     *
     * @param string[]|null $required_plan_ids required_plan_ids
     *
     * @return self
     */
    public function setRequiredPlanIds($required_plan_ids)
    {
        if (is_null($required_plan_ids)) {
            array_push($this->openAPINullablesSetToNull, 'required_plan_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('required_plan_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['required_plan_ids'] = $required_plan_ids;

        return $this;
    }

    /**
     * Gets rate_type
     *
     * @return string|null
     */
    public function getRateType()
    {
        return $this->container['rate_type'];
    }

    /**
     * Sets rate_type
     *
     * @param string|null $rate_type rate_type
     *
     * @return self
     */
    public function setRateType($rate_type)
    {
        if (is_null($rate_type)) {
            array_push($this->openAPINullablesSetToNull, 'rate_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rate_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rate_type'] = $rate_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


