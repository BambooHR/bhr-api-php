<?php
/**
 * GetApplicationDetails200Response
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * GetApplicationDetails200Response Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetApplicationDetails200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'get_application_details_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'applied_date' => '\DateTime',
        'status' => '\MySdk\Model\GetApplicationDetails200ResponseStatus',
        'rating' => 'int',
        'education' => 'object',
        'resume_file_id' => 'int',
        'cover_letter_file_id' => 'int',
        'moved_to' => 'object[]',
        'moved_from' => 'object[]',
        'also_considered_for_count' => 'int',
        'duplicate_application_count' => 'int',
        'referred_by' => 'string',
        'desired_salary' => 'string',
        'comment_count' => 'int',
        'email_count' => 'int',
        'event_count' => 'int',
        'questions_and_answers' => '\MySdk\Model\GetApplicationDetails200ResponseQuestionsAndAnswersInner[]',
        'application_references' => 'object[]',
        'applicant' => '\MySdk\Model\GetApplicationDetails200ResponseApplicant',
        'job' => '\MySdk\Model\GetApplicationDetails200ResponseJob'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'applied_date' => 'date-time',
        'status' => null,
        'rating' => null,
        'education' => null,
        'resume_file_id' => null,
        'cover_letter_file_id' => null,
        'moved_to' => null,
        'moved_from' => null,
        'also_considered_for_count' => null,
        'duplicate_application_count' => null,
        'referred_by' => null,
        'desired_salary' => null,
        'comment_count' => null,
        'email_count' => null,
        'event_count' => null,
        'questions_and_answers' => null,
        'application_references' => null,
        'applicant' => null,
        'job' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'applied_date' => false,
        'status' => false,
        'rating' => true,
        'education' => false,
        'resume_file_id' => true,
        'cover_letter_file_id' => true,
        'moved_to' => false,
        'moved_from' => false,
        'also_considered_for_count' => false,
        'duplicate_application_count' => false,
        'referred_by' => true,
        'desired_salary' => true,
        'comment_count' => false,
        'email_count' => false,
        'event_count' => false,
        'questions_and_answers' => false,
        'application_references' => false,
        'applicant' => false,
        'job' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'applied_date' => 'appliedDate',
        'status' => 'status',
        'rating' => 'rating',
        'education' => 'education',
        'resume_file_id' => 'resumeFileId',
        'cover_letter_file_id' => 'coverLetterFileId',
        'moved_to' => 'movedTo',
        'moved_from' => 'movedFrom',
        'also_considered_for_count' => 'alsoConsideredForCount',
        'duplicate_application_count' => 'duplicateApplicationCount',
        'referred_by' => 'referredBy',
        'desired_salary' => 'desiredSalary',
        'comment_count' => 'commentCount',
        'email_count' => 'emailCount',
        'event_count' => 'eventCount',
        'questions_and_answers' => 'questionsAndAnswers',
        'application_references' => 'applicationReferences',
        'applicant' => 'applicant',
        'job' => 'job'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'applied_date' => 'setAppliedDate',
        'status' => 'setStatus',
        'rating' => 'setRating',
        'education' => 'setEducation',
        'resume_file_id' => 'setResumeFileId',
        'cover_letter_file_id' => 'setCoverLetterFileId',
        'moved_to' => 'setMovedTo',
        'moved_from' => 'setMovedFrom',
        'also_considered_for_count' => 'setAlsoConsideredForCount',
        'duplicate_application_count' => 'setDuplicateApplicationCount',
        'referred_by' => 'setReferredBy',
        'desired_salary' => 'setDesiredSalary',
        'comment_count' => 'setCommentCount',
        'email_count' => 'setEmailCount',
        'event_count' => 'setEventCount',
        'questions_and_answers' => 'setQuestionsAndAnswers',
        'application_references' => 'setApplicationReferences',
        'applicant' => 'setApplicant',
        'job' => 'setJob'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'applied_date' => 'getAppliedDate',
        'status' => 'getStatus',
        'rating' => 'getRating',
        'education' => 'getEducation',
        'resume_file_id' => 'getResumeFileId',
        'cover_letter_file_id' => 'getCoverLetterFileId',
        'moved_to' => 'getMovedTo',
        'moved_from' => 'getMovedFrom',
        'also_considered_for_count' => 'getAlsoConsideredForCount',
        'duplicate_application_count' => 'getDuplicateApplicationCount',
        'referred_by' => 'getReferredBy',
        'desired_salary' => 'getDesiredSalary',
        'comment_count' => 'getCommentCount',
        'email_count' => 'getEmailCount',
        'event_count' => 'getEventCount',
        'questions_and_answers' => 'getQuestionsAndAnswers',
        'application_references' => 'getApplicationReferences',
        'applicant' => 'getApplicant',
        'job' => 'getJob'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('applied_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('rating', $data ?? [], null);
        $this->setIfExists('education', $data ?? [], null);
        $this->setIfExists('resume_file_id', $data ?? [], null);
        $this->setIfExists('cover_letter_file_id', $data ?? [], null);
        $this->setIfExists('moved_to', $data ?? [], null);
        $this->setIfExists('moved_from', $data ?? [], null);
        $this->setIfExists('also_considered_for_count', $data ?? [], null);
        $this->setIfExists('duplicate_application_count', $data ?? [], null);
        $this->setIfExists('referred_by', $data ?? [], null);
        $this->setIfExists('desired_salary', $data ?? [], null);
        $this->setIfExists('comment_count', $data ?? [], null);
        $this->setIfExists('email_count', $data ?? [], null);
        $this->setIfExists('event_count', $data ?? [], null);
        $this->setIfExists('questions_and_answers', $data ?? [], null);
        $this->setIfExists('application_references', $data ?? [], null);
        $this->setIfExists('applicant', $data ?? [], null);
        $this->setIfExists('job', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Application ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets applied_date
     *
     * @return \DateTime|null
     */
    public function getAppliedDate()
    {
        return $this->container['applied_date'];
    }

    /**
     * Sets applied_date
     *
     * @param \DateTime|null $applied_date Date when the application was submitted
     *
     * @return self
     */
    public function setAppliedDate($applied_date)
    {
        if (is_null($applied_date)) {
            throw new \InvalidArgumentException('non-nullable applied_date cannot be null');
        }
        $this->container['applied_date'] = $applied_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MySdk\Model\GetApplicationDetails200ResponseStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MySdk\Model\GetApplicationDetails200ResponseStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return int|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param int|null $rating Applicant rating
     *
     * @return self
     */
    public function setRating($rating)
    {
        if (is_null($rating)) {
            array_push($this->openAPINullablesSetToNull, 'rating');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rating', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets education
     *
     * @return object|null
     */
    public function getEducation()
    {
        return $this->container['education'];
    }

    /**
     * Sets education
     *
     * @param object|null $education Applicant education information
     *
     * @return self
     */
    public function setEducation($education)
    {
        if (is_null($education)) {
            throw new \InvalidArgumentException('non-nullable education cannot be null');
        }
        $this->container['education'] = $education;

        return $this;
    }

    /**
     * Gets resume_file_id
     *
     * @return int|null
     */
    public function getResumeFileId()
    {
        return $this->container['resume_file_id'];
    }

    /**
     * Sets resume_file_id
     *
     * @param int|null $resume_file_id ID of the resume file
     *
     * @return self
     */
    public function setResumeFileId($resume_file_id)
    {
        if (is_null($resume_file_id)) {
            array_push($this->openAPINullablesSetToNull, 'resume_file_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resume_file_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resume_file_id'] = $resume_file_id;

        return $this;
    }

    /**
     * Gets cover_letter_file_id
     *
     * @return int|null
     */
    public function getCoverLetterFileId()
    {
        return $this->container['cover_letter_file_id'];
    }

    /**
     * Sets cover_letter_file_id
     *
     * @param int|null $cover_letter_file_id ID of the cover letter file
     *
     * @return self
     */
    public function setCoverLetterFileId($cover_letter_file_id)
    {
        if (is_null($cover_letter_file_id)) {
            array_push($this->openAPINullablesSetToNull, 'cover_letter_file_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cover_letter_file_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cover_letter_file_id'] = $cover_letter_file_id;

        return $this;
    }

    /**
     * Gets moved_to
     *
     * @return object[]|null
     */
    public function getMovedTo()
    {
        return $this->container['moved_to'];
    }

    /**
     * Sets moved_to
     *
     * @param object[]|null $moved_to Positions the applicant was moved to
     *
     * @return self
     */
    public function setMovedTo($moved_to)
    {
        if (is_null($moved_to)) {
            throw new \InvalidArgumentException('non-nullable moved_to cannot be null');
        }
        $this->container['moved_to'] = $moved_to;

        return $this;
    }

    /**
     * Gets moved_from
     *
     * @return object[]|null
     */
    public function getMovedFrom()
    {
        return $this->container['moved_from'];
    }

    /**
     * Sets moved_from
     *
     * @param object[]|null $moved_from Positions the applicant was moved from
     *
     * @return self
     */
    public function setMovedFrom($moved_from)
    {
        if (is_null($moved_from)) {
            throw new \InvalidArgumentException('non-nullable moved_from cannot be null');
        }
        $this->container['moved_from'] = $moved_from;

        return $this;
    }

    /**
     * Gets also_considered_for_count
     *
     * @return int|null
     */
    public function getAlsoConsideredForCount()
    {
        return $this->container['also_considered_for_count'];
    }

    /**
     * Sets also_considered_for_count
     *
     * @param int|null $also_considered_for_count Count of other positions this applicant is being considered for
     *
     * @return self
     */
    public function setAlsoConsideredForCount($also_considered_for_count)
    {
        if (is_null($also_considered_for_count)) {
            throw new \InvalidArgumentException('non-nullable also_considered_for_count cannot be null');
        }
        $this->container['also_considered_for_count'] = $also_considered_for_count;

        return $this;
    }

    /**
     * Gets duplicate_application_count
     *
     * @return int|null
     */
    public function getDuplicateApplicationCount()
    {
        return $this->container['duplicate_application_count'];
    }

    /**
     * Sets duplicate_application_count
     *
     * @param int|null $duplicate_application_count Count of duplicate applications
     *
     * @return self
     */
    public function setDuplicateApplicationCount($duplicate_application_count)
    {
        if (is_null($duplicate_application_count)) {
            throw new \InvalidArgumentException('non-nullable duplicate_application_count cannot be null');
        }
        $this->container['duplicate_application_count'] = $duplicate_application_count;

        return $this;
    }

    /**
     * Gets referred_by
     *
     * @return string|null
     */
    public function getReferredBy()
    {
        return $this->container['referred_by'];
    }

    /**
     * Sets referred_by
     *
     * @param string|null $referred_by Who referred this applicant
     *
     * @return self
     */
    public function setReferredBy($referred_by)
    {
        if (is_null($referred_by)) {
            array_push($this->openAPINullablesSetToNull, 'referred_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referred_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referred_by'] = $referred_by;

        return $this;
    }

    /**
     * Gets desired_salary
     *
     * @return string|null
     */
    public function getDesiredSalary()
    {
        return $this->container['desired_salary'];
    }

    /**
     * Sets desired_salary
     *
     * @param string|null $desired_salary Applicant's desired salary
     *
     * @return self
     */
    public function setDesiredSalary($desired_salary)
    {
        if (is_null($desired_salary)) {
            array_push($this->openAPINullablesSetToNull, 'desired_salary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('desired_salary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['desired_salary'] = $desired_salary;

        return $this;
    }

    /**
     * Gets comment_count
     *
     * @return int|null
     */
    public function getCommentCount()
    {
        return $this->container['comment_count'];
    }

    /**
     * Sets comment_count
     *
     * @param int|null $comment_count Number of comments on this application
     *
     * @return self
     */
    public function setCommentCount($comment_count)
    {
        if (is_null($comment_count)) {
            throw new \InvalidArgumentException('non-nullable comment_count cannot be null');
        }
        $this->container['comment_count'] = $comment_count;

        return $this;
    }

    /**
     * Gets email_count
     *
     * @return int|null
     */
    public function getEmailCount()
    {
        return $this->container['email_count'];
    }

    /**
     * Sets email_count
     *
     * @param int|null $email_count Number of emails for this application
     *
     * @return self
     */
    public function setEmailCount($email_count)
    {
        if (is_null($email_count)) {
            throw new \InvalidArgumentException('non-nullable email_count cannot be null');
        }
        $this->container['email_count'] = $email_count;

        return $this;
    }

    /**
     * Gets event_count
     *
     * @return int|null
     */
    public function getEventCount()
    {
        return $this->container['event_count'];
    }

    /**
     * Sets event_count
     *
     * @param int|null $event_count Number of events for this application
     *
     * @return self
     */
    public function setEventCount($event_count)
    {
        if (is_null($event_count)) {
            throw new \InvalidArgumentException('non-nullable event_count cannot be null');
        }
        $this->container['event_count'] = $event_count;

        return $this;
    }

    /**
     * Gets questions_and_answers
     *
     * @return \MySdk\Model\GetApplicationDetails200ResponseQuestionsAndAnswersInner[]|null
     */
    public function getQuestionsAndAnswers()
    {
        return $this->container['questions_and_answers'];
    }

    /**
     * Sets questions_and_answers
     *
     * @param \MySdk\Model\GetApplicationDetails200ResponseQuestionsAndAnswersInner[]|null $questions_and_answers Custom questions and answers
     *
     * @return self
     */
    public function setQuestionsAndAnswers($questions_and_answers)
    {
        if (is_null($questions_and_answers)) {
            throw new \InvalidArgumentException('non-nullable questions_and_answers cannot be null');
        }
        $this->container['questions_and_answers'] = $questions_and_answers;

        return $this;
    }

    /**
     * Gets application_references
     *
     * @return object[]|null
     */
    public function getApplicationReferences()
    {
        return $this->container['application_references'];
    }

    /**
     * Sets application_references
     *
     * @param object[]|null $application_references Application references
     *
     * @return self
     */
    public function setApplicationReferences($application_references)
    {
        if (is_null($application_references)) {
            throw new \InvalidArgumentException('non-nullable application_references cannot be null');
        }
        $this->container['application_references'] = $application_references;

        return $this;
    }

    /**
     * Gets applicant
     *
     * @return \MySdk\Model\GetApplicationDetails200ResponseApplicant|null
     */
    public function getApplicant()
    {
        return $this->container['applicant'];
    }

    /**
     * Sets applicant
     *
     * @param \MySdk\Model\GetApplicationDetails200ResponseApplicant|null $applicant applicant
     *
     * @return self
     */
    public function setApplicant($applicant)
    {
        if (is_null($applicant)) {
            throw new \InvalidArgumentException('non-nullable applicant cannot be null');
        }
        $this->container['applicant'] = $applicant;

        return $this;
    }

    /**
     * Gets job
     *
     * @return \MySdk\Model\GetApplicationDetails200ResponseJob|null
     */
    public function getJob()
    {
        return $this->container['job'];
    }

    /**
     * Sets job
     *
     * @param \MySdk\Model\GetApplicationDetails200ResponseJob|null $job job
     *
     * @return self
     */
    public function setJob($job)
    {
        if (is_null($job)) {
            throw new \InvalidArgumentException('non-nullable job cannot be null');
        }
        $this->container['job'] = $job;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


