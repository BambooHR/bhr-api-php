<?php
/**
 * PayrollExtraPayControllerParsedExtraPayItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollExtraPayControllerParsedExtraPayItem Class Doc Comment
 *
 * @category Class
 * @description Represents a parsed extra pay item from a file upload
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollExtraPayControllerParsedExtraPayItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payroll.ExtraPayController.ParsedExtraPayItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount_error_code' => 'string',
        'amount_user_input' => 'string',
        'employee_error_code' => 'string',
        'employee_id' => 'int',
        'employee_number_user_input' => 'string',
        'pay_type_error_code' => 'string',
        'pay_type_id' => 'int',
        'pay_type_user_input' => 'string',
        'is_valid' => 'bool',
        'is_valid_amount' => 'bool',
        'is_valid_employee' => 'bool',
        'is_valid_pay_type' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount_error_code' => null,
        'amount_user_input' => null,
        'employee_error_code' => null,
        'employee_id' => null,
        'employee_number_user_input' => null,
        'pay_type_error_code' => null,
        'pay_type_id' => null,
        'pay_type_user_input' => null,
        'is_valid' => null,
        'is_valid_amount' => null,
        'is_valid_employee' => null,
        'is_valid_pay_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount_error_code' => true,
        'amount_user_input' => false,
        'employee_error_code' => true,
        'employee_id' => true,
        'employee_number_user_input' => false,
        'pay_type_error_code' => true,
        'pay_type_id' => false,
        'pay_type_user_input' => false,
        'is_valid' => false,
        'is_valid_amount' => false,
        'is_valid_employee' => false,
        'is_valid_pay_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_error_code' => 'amountErrorCode',
        'amount_user_input' => 'amountUserInput',
        'employee_error_code' => 'employeeErrorCode',
        'employee_id' => 'employeeId',
        'employee_number_user_input' => 'employeeNumberUserInput',
        'pay_type_error_code' => 'payTypeErrorCode',
        'pay_type_id' => 'payTypeId',
        'pay_type_user_input' => 'payTypeUserInput',
        'is_valid' => 'isValid',
        'is_valid_amount' => 'isValidAmount',
        'is_valid_employee' => 'isValidEmployee',
        'is_valid_pay_type' => 'isValidPayType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_error_code' => 'setAmountErrorCode',
        'amount_user_input' => 'setAmountUserInput',
        'employee_error_code' => 'setEmployeeErrorCode',
        'employee_id' => 'setEmployeeId',
        'employee_number_user_input' => 'setEmployeeNumberUserInput',
        'pay_type_error_code' => 'setPayTypeErrorCode',
        'pay_type_id' => 'setPayTypeId',
        'pay_type_user_input' => 'setPayTypeUserInput',
        'is_valid' => 'setIsValid',
        'is_valid_amount' => 'setIsValidAmount',
        'is_valid_employee' => 'setIsValidEmployee',
        'is_valid_pay_type' => 'setIsValidPayType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_error_code' => 'getAmountErrorCode',
        'amount_user_input' => 'getAmountUserInput',
        'employee_error_code' => 'getEmployeeErrorCode',
        'employee_id' => 'getEmployeeId',
        'employee_number_user_input' => 'getEmployeeNumberUserInput',
        'pay_type_error_code' => 'getPayTypeErrorCode',
        'pay_type_id' => 'getPayTypeId',
        'pay_type_user_input' => 'getPayTypeUserInput',
        'is_valid' => 'getIsValid',
        'is_valid_amount' => 'getIsValidAmount',
        'is_valid_employee' => 'getIsValidEmployee',
        'is_valid_pay_type' => 'getIsValidPayType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount_error_code', $data ?? [], null);
        $this->setIfExists('amount_user_input', $data ?? [], null);
        $this->setIfExists('employee_error_code', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_number_user_input', $data ?? [], null);
        $this->setIfExists('pay_type_error_code', $data ?? [], null);
        $this->setIfExists('pay_type_id', $data ?? [], null);
        $this->setIfExists('pay_type_user_input', $data ?? [], null);
        $this->setIfExists('is_valid', $data ?? [], null);
        $this->setIfExists('is_valid_amount', $data ?? [], null);
        $this->setIfExists('is_valid_employee', $data ?? [], null);
        $this->setIfExists('is_valid_pay_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_error_code
     *
     * @return string|null
     */
    public function getAmountErrorCode()
    {
        return $this->container['amount_error_code'];
    }

    /**
     * Sets amount_error_code
     *
     * @param string|null $amount_error_code Error code related to the amount field, null if no error
     *
     * @return self
     */
    public function setAmountErrorCode($amount_error_code)
    {
        if (is_null($amount_error_code)) {
            array_push($this->openAPINullablesSetToNull, 'amount_error_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_error_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_error_code'] = $amount_error_code;

        return $this;
    }

    /**
     * Gets amount_user_input
     *
     * @return string|null
     */
    public function getAmountUserInput()
    {
        return $this->container['amount_user_input'];
    }

    /**
     * Sets amount_user_input
     *
     * @param string|null $amount_user_input The amount value provided by the user
     *
     * @return self
     */
    public function setAmountUserInput($amount_user_input)
    {
        if (is_null($amount_user_input)) {
            throw new \InvalidArgumentException('non-nullable amount_user_input cannot be null');
        }
        $this->container['amount_user_input'] = $amount_user_input;

        return $this;
    }

    /**
     * Gets employee_error_code
     *
     * @return string|null
     */
    public function getEmployeeErrorCode()
    {
        return $this->container['employee_error_code'];
    }

    /**
     * Sets employee_error_code
     *
     * @param string|null $employee_error_code Error code related to the employee field, null if no error
     *
     * @return self
     */
    public function setEmployeeErrorCode($employee_error_code)
    {
        if (is_null($employee_error_code)) {
            array_push($this->openAPINullablesSetToNull, 'employee_error_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_error_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_error_code'] = $employee_error_code;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Employee ID if found
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            array_push($this->openAPINullablesSetToNull, 'employee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_number_user_input
     *
     * @return string|null
     */
    public function getEmployeeNumberUserInput()
    {
        return $this->container['employee_number_user_input'];
    }

    /**
     * Sets employee_number_user_input
     *
     * @param string|null $employee_number_user_input The employee number provided by the user
     *
     * @return self
     */
    public function setEmployeeNumberUserInput($employee_number_user_input)
    {
        if (is_null($employee_number_user_input)) {
            throw new \InvalidArgumentException('non-nullable employee_number_user_input cannot be null');
        }
        $this->container['employee_number_user_input'] = $employee_number_user_input;

        return $this;
    }

    /**
     * Gets pay_type_error_code
     *
     * @return string|null
     */
    public function getPayTypeErrorCode()
    {
        return $this->container['pay_type_error_code'];
    }

    /**
     * Sets pay_type_error_code
     *
     * @param string|null $pay_type_error_code Error code related to the pay type field, null if no error
     *
     * @return self
     */
    public function setPayTypeErrorCode($pay_type_error_code)
    {
        if (is_null($pay_type_error_code)) {
            array_push($this->openAPINullablesSetToNull, 'pay_type_error_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_type_error_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_type_error_code'] = $pay_type_error_code;

        return $this;
    }

    /**
     * Gets pay_type_id
     *
     * @return int|null
     */
    public function getPayTypeId()
    {
        return $this->container['pay_type_id'];
    }

    /**
     * Sets pay_type_id
     *
     * @param int|null $pay_type_id ID of the pay type
     *
     * @return self
     */
    public function setPayTypeId($pay_type_id)
    {
        if (is_null($pay_type_id)) {
            throw new \InvalidArgumentException('non-nullable pay_type_id cannot be null');
        }
        $this->container['pay_type_id'] = $pay_type_id;

        return $this;
    }

    /**
     * Gets pay_type_user_input
     *
     * @return string|null
     */
    public function getPayTypeUserInput()
    {
        return $this->container['pay_type_user_input'];
    }

    /**
     * Sets pay_type_user_input
     *
     * @param string|null $pay_type_user_input The pay type name provided by the user
     *
     * @return self
     */
    public function setPayTypeUserInput($pay_type_user_input)
    {
        if (is_null($pay_type_user_input)) {
            throw new \InvalidArgumentException('non-nullable pay_type_user_input cannot be null');
        }
        $this->container['pay_type_user_input'] = $pay_type_user_input;

        return $this;
    }

    /**
     * Gets is_valid
     *
     * @return bool|null
     */
    public function getIsValid()
    {
        return $this->container['is_valid'];
    }

    /**
     * Sets is_valid
     *
     * @param bool|null $is_valid Whether the extra pay data is valid
     *
     * @return self
     */
    public function setIsValid($is_valid)
    {
        if (is_null($is_valid)) {
            throw new \InvalidArgumentException('non-nullable is_valid cannot be null');
        }
        $this->container['is_valid'] = $is_valid;

        return $this;
    }

    /**
     * Gets is_valid_amount
     *
     * @return bool|null
     */
    public function getIsValidAmount()
    {
        return $this->container['is_valid_amount'];
    }

    /**
     * Sets is_valid_amount
     *
     * @param bool|null $is_valid_amount Whether the amount is valid
     *
     * @return self
     */
    public function setIsValidAmount($is_valid_amount)
    {
        if (is_null($is_valid_amount)) {
            throw new \InvalidArgumentException('non-nullable is_valid_amount cannot be null');
        }
        $this->container['is_valid_amount'] = $is_valid_amount;

        return $this;
    }

    /**
     * Gets is_valid_employee
     *
     * @return bool|null
     */
    public function getIsValidEmployee()
    {
        return $this->container['is_valid_employee'];
    }

    /**
     * Sets is_valid_employee
     *
     * @param bool|null $is_valid_employee Whether the employee is valid
     *
     * @return self
     */
    public function setIsValidEmployee($is_valid_employee)
    {
        if (is_null($is_valid_employee)) {
            throw new \InvalidArgumentException('non-nullable is_valid_employee cannot be null');
        }
        $this->container['is_valid_employee'] = $is_valid_employee;

        return $this;
    }

    /**
     * Gets is_valid_pay_type
     *
     * @return bool|null
     */
    public function getIsValidPayType()
    {
        return $this->container['is_valid_pay_type'];
    }

    /**
     * Sets is_valid_pay_type
     *
     * @param bool|null $is_valid_pay_type Whether the pay type is valid
     *
     * @return self
     */
    public function setIsValidPayType($is_valid_pay_type)
    {
        if (is_null($is_valid_pay_type)) {
            throw new \InvalidArgumentException('non-nullable is_valid_pay_type cannot be null');
        }
        $this->container['is_valid_pay_type'] = $is_valid_pay_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


