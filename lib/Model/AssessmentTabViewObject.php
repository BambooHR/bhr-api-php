<?php
/**
 * AssessmentTabViewObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * AssessmentTabViewObject Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AssessmentTabViewObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AssessmentTabViewObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_admin' => 'bool',
        'is_manager' => 'bool',
        'is_self_assessment' => 'bool',
        'can_see_checkbox' => 'bool',
        'employee' => 'object',
        'manager' => 'object',
        'review_period_id' => 'int',
        'previous_period_id' => 'int',
        'assessment_note' => 'object',
        'contains_misalignment' => 'bool',
        'assessments' => 'object[]',
        'days_till_published' => 'int',
        'end_date_for_review_period' => 'string',
        'assessment_start_date' => 'string',
        'is_files_enabled' => 'bool',
        'is_files_required' => 'bool',
        'is_skippable' => 'bool',
        'impromptu_assessment_can_be_created' => 'bool',
        'impromptu_review_cycles' => 'object[]',
        'can_be_cancelled' => 'bool',
        'use_default_questions' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_admin' => null,
        'is_manager' => null,
        'is_self_assessment' => null,
        'can_see_checkbox' => null,
        'employee' => null,
        'manager' => null,
        'review_period_id' => null,
        'previous_period_id' => null,
        'assessment_note' => null,
        'contains_misalignment' => null,
        'assessments' => null,
        'days_till_published' => null,
        'end_date_for_review_period' => null,
        'assessment_start_date' => null,
        'is_files_enabled' => null,
        'is_files_required' => null,
        'is_skippable' => null,
        'impromptu_assessment_can_be_created' => null,
        'impromptu_review_cycles' => null,
        'can_be_cancelled' => null,
        'use_default_questions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_admin' => false,
        'is_manager' => false,
        'is_self_assessment' => false,
        'can_see_checkbox' => false,
        'employee' => false,
        'manager' => false,
        'review_period_id' => false,
        'previous_period_id' => false,
        'assessment_note' => false,
        'contains_misalignment' => false,
        'assessments' => false,
        'days_till_published' => false,
        'end_date_for_review_period' => false,
        'assessment_start_date' => false,
        'is_files_enabled' => false,
        'is_files_required' => false,
        'is_skippable' => false,
        'impromptu_assessment_can_be_created' => false,
        'impromptu_review_cycles' => false,
        'can_be_cancelled' => false,
        'use_default_questions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_admin' => 'isAdmin',
        'is_manager' => 'isManager',
        'is_self_assessment' => 'isSelfAssessment',
        'can_see_checkbox' => 'canSeeCheckbox',
        'employee' => 'employee',
        'manager' => 'manager',
        'review_period_id' => 'reviewPeriodId',
        'previous_period_id' => 'previousPeriodId',
        'assessment_note' => 'assessmentNote',
        'contains_misalignment' => 'containsMisalignment',
        'assessments' => 'assessments',
        'days_till_published' => 'daysTillPublished',
        'end_date_for_review_period' => 'endDateForReviewPeriod',
        'assessment_start_date' => 'assessmentStartDate',
        'is_files_enabled' => 'isFilesEnabled',
        'is_files_required' => 'isFilesRequired',
        'is_skippable' => 'isSkippable',
        'impromptu_assessment_can_be_created' => 'impromptuAssessmentCanBeCreated',
        'impromptu_review_cycles' => 'impromptuReviewCycles',
        'can_be_cancelled' => 'canBeCancelled',
        'use_default_questions' => 'useDefaultQuestions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_admin' => 'setIsAdmin',
        'is_manager' => 'setIsManager',
        'is_self_assessment' => 'setIsSelfAssessment',
        'can_see_checkbox' => 'setCanSeeCheckbox',
        'employee' => 'setEmployee',
        'manager' => 'setManager',
        'review_period_id' => 'setReviewPeriodId',
        'previous_period_id' => 'setPreviousPeriodId',
        'assessment_note' => 'setAssessmentNote',
        'contains_misalignment' => 'setContainsMisalignment',
        'assessments' => 'setAssessments',
        'days_till_published' => 'setDaysTillPublished',
        'end_date_for_review_period' => 'setEndDateForReviewPeriod',
        'assessment_start_date' => 'setAssessmentStartDate',
        'is_files_enabled' => 'setIsFilesEnabled',
        'is_files_required' => 'setIsFilesRequired',
        'is_skippable' => 'setIsSkippable',
        'impromptu_assessment_can_be_created' => 'setImpromptuAssessmentCanBeCreated',
        'impromptu_review_cycles' => 'setImpromptuReviewCycles',
        'can_be_cancelled' => 'setCanBeCancelled',
        'use_default_questions' => 'setUseDefaultQuestions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_admin' => 'getIsAdmin',
        'is_manager' => 'getIsManager',
        'is_self_assessment' => 'getIsSelfAssessment',
        'can_see_checkbox' => 'getCanSeeCheckbox',
        'employee' => 'getEmployee',
        'manager' => 'getManager',
        'review_period_id' => 'getReviewPeriodId',
        'previous_period_id' => 'getPreviousPeriodId',
        'assessment_note' => 'getAssessmentNote',
        'contains_misalignment' => 'getContainsMisalignment',
        'assessments' => 'getAssessments',
        'days_till_published' => 'getDaysTillPublished',
        'end_date_for_review_period' => 'getEndDateForReviewPeriod',
        'assessment_start_date' => 'getAssessmentStartDate',
        'is_files_enabled' => 'getIsFilesEnabled',
        'is_files_required' => 'getIsFilesRequired',
        'is_skippable' => 'getIsSkippable',
        'impromptu_assessment_can_be_created' => 'getImpromptuAssessmentCanBeCreated',
        'impromptu_review_cycles' => 'getImpromptuReviewCycles',
        'can_be_cancelled' => 'getCanBeCancelled',
        'use_default_questions' => 'getUseDefaultQuestions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('is_admin', $data ?? [], null);
        $this->setIfExists('is_manager', $data ?? [], null);
        $this->setIfExists('is_self_assessment', $data ?? [], null);
        $this->setIfExists('can_see_checkbox', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('manager', $data ?? [], null);
        $this->setIfExists('review_period_id', $data ?? [], null);
        $this->setIfExists('previous_period_id', $data ?? [], null);
        $this->setIfExists('assessment_note', $data ?? [], null);
        $this->setIfExists('contains_misalignment', $data ?? [], null);
        $this->setIfExists('assessments', $data ?? [], null);
        $this->setIfExists('days_till_published', $data ?? [], null);
        $this->setIfExists('end_date_for_review_period', $data ?? [], null);
        $this->setIfExists('assessment_start_date', $data ?? [], null);
        $this->setIfExists('is_files_enabled', $data ?? [], null);
        $this->setIfExists('is_files_required', $data ?? [], null);
        $this->setIfExists('is_skippable', $data ?? [], null);
        $this->setIfExists('impromptu_assessment_can_be_created', $data ?? [], null);
        $this->setIfExists('impromptu_review_cycles', $data ?? [], null);
        $this->setIfExists('can_be_cancelled', $data ?? [], null);
        $this->setIfExists('use_default_questions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_admin
     *
     * @return bool|null
     */
    public function getIsAdmin()
    {
        return $this->container['is_admin'];
    }

    /**
     * Sets is_admin
     *
     * @param bool|null $is_admin Whether the current user is an admin
     *
     * @return self
     */
    public function setIsAdmin($is_admin)
    {
        if (is_null($is_admin)) {
            throw new \InvalidArgumentException('non-nullable is_admin cannot be null');
        }
        $this->container['is_admin'] = $is_admin;

        return $this;
    }

    /**
     * Gets is_manager
     *
     * @return bool|null
     */
    public function getIsManager()
    {
        return $this->container['is_manager'];
    }

    /**
     * Sets is_manager
     *
     * @param bool|null $is_manager Whether the current user is a manager
     *
     * @return self
     */
    public function setIsManager($is_manager)
    {
        if (is_null($is_manager)) {
            throw new \InvalidArgumentException('non-nullable is_manager cannot be null');
        }
        $this->container['is_manager'] = $is_manager;

        return $this;
    }

    /**
     * Gets is_self_assessment
     *
     * @return bool|null
     */
    public function getIsSelfAssessment()
    {
        return $this->container['is_self_assessment'];
    }

    /**
     * Sets is_self_assessment
     *
     * @param bool|null $is_self_assessment Whether this is a self assessment
     *
     * @return self
     */
    public function setIsSelfAssessment($is_self_assessment)
    {
        if (is_null($is_self_assessment)) {
            throw new \InvalidArgumentException('non-nullable is_self_assessment cannot be null');
        }
        $this->container['is_self_assessment'] = $is_self_assessment;

        return $this;
    }

    /**
     * Gets can_see_checkbox
     *
     * @return bool|null
     */
    public function getCanSeeCheckbox()
    {
        return $this->container['can_see_checkbox'];
    }

    /**
     * Sets can_see_checkbox
     *
     * @param bool|null $can_see_checkbox Whether the current user can see the checkbox
     *
     * @return self
     */
    public function setCanSeeCheckbox($can_see_checkbox)
    {
        if (is_null($can_see_checkbox)) {
            throw new \InvalidArgumentException('non-nullable can_see_checkbox cannot be null');
        }
        $this->container['can_see_checkbox'] = $can_see_checkbox;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return object|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param object|null $employee Employee information including fullName and firstName
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        if (is_null($employee)) {
            throw new \InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets manager
     *
     * @return object|null
     */
    public function getManager()
    {
        return $this->container['manager'];
    }

    /**
     * Sets manager
     *
     * @param object|null $manager Manager information including fullName and firstName
     *
     * @return self
     */
    public function setManager($manager)
    {
        if (is_null($manager)) {
            throw new \InvalidArgumentException('non-nullable manager cannot be null');
        }
        $this->container['manager'] = $manager;

        return $this;
    }

    /**
     * Gets review_period_id
     *
     * @return int|null
     */
    public function getReviewPeriodId()
    {
        return $this->container['review_period_id'];
    }

    /**
     * Sets review_period_id
     *
     * @param int|null $review_period_id ID of the review period
     *
     * @return self
     */
    public function setReviewPeriodId($review_period_id)
    {
        if (is_null($review_period_id)) {
            throw new \InvalidArgumentException('non-nullable review_period_id cannot be null');
        }
        $this->container['review_period_id'] = $review_period_id;

        return $this;
    }

    /**
     * Gets previous_period_id
     *
     * @return int|null
     */
    public function getPreviousPeriodId()
    {
        return $this->container['previous_period_id'];
    }

    /**
     * Sets previous_period_id
     *
     * @param int|null $previous_period_id ID of the previous review period
     *
     * @return self
     */
    public function setPreviousPeriodId($previous_period_id)
    {
        if (is_null($previous_period_id)) {
            throw new \InvalidArgumentException('non-nullable previous_period_id cannot be null');
        }
        $this->container['previous_period_id'] = $previous_period_id;

        return $this;
    }

    /**
     * Gets assessment_note
     *
     * @return object|null
     */
    public function getAssessmentNote()
    {
        return $this->container['assessment_note'];
    }

    /**
     * Sets assessment_note
     *
     * @param object|null $assessment_note Assessment note
     *
     * @return self
     */
    public function setAssessmentNote($assessment_note)
    {
        if (is_null($assessment_note)) {
            throw new \InvalidArgumentException('non-nullable assessment_note cannot be null');
        }
        $this->container['assessment_note'] = $assessment_note;

        return $this;
    }

    /**
     * Gets contains_misalignment
     *
     * @return bool|null
     */
    public function getContainsMisalignment()
    {
        return $this->container['contains_misalignment'];
    }

    /**
     * Sets contains_misalignment
     *
     * @param bool|null $contains_misalignment Whether the assessment contains misalignment
     *
     * @return self
     */
    public function setContainsMisalignment($contains_misalignment)
    {
        if (is_null($contains_misalignment)) {
            throw new \InvalidArgumentException('non-nullable contains_misalignment cannot be null');
        }
        $this->container['contains_misalignment'] = $contains_misalignment;

        return $this;
    }

    /**
     * Gets assessments
     *
     * @return object[]|null
     */
    public function getAssessments()
    {
        return $this->container['assessments'];
    }

    /**
     * Sets assessments
     *
     * @param object[]|null $assessments List of assessments
     *
     * @return self
     */
    public function setAssessments($assessments)
    {
        if (is_null($assessments)) {
            throw new \InvalidArgumentException('non-nullable assessments cannot be null');
        }
        $this->container['assessments'] = $assessments;

        return $this;
    }

    /**
     * Gets days_till_published
     *
     * @return int|null
     */
    public function getDaysTillPublished()
    {
        return $this->container['days_till_published'];
    }

    /**
     * Sets days_till_published
     *
     * @param int|null $days_till_published Days until the assessment is published
     *
     * @return self
     */
    public function setDaysTillPublished($days_till_published)
    {
        if (is_null($days_till_published)) {
            throw new \InvalidArgumentException('non-nullable days_till_published cannot be null');
        }
        $this->container['days_till_published'] = $days_till_published;

        return $this;
    }

    /**
     * Gets end_date_for_review_period
     *
     * @return string|null
     */
    public function getEndDateForReviewPeriod()
    {
        return $this->container['end_date_for_review_period'];
    }

    /**
     * Sets end_date_for_review_period
     *
     * @param string|null $end_date_for_review_period End date for the review period
     *
     * @return self
     */
    public function setEndDateForReviewPeriod($end_date_for_review_period)
    {
        if (is_null($end_date_for_review_period)) {
            throw new \InvalidArgumentException('non-nullable end_date_for_review_period cannot be null');
        }
        $this->container['end_date_for_review_period'] = $end_date_for_review_period;

        return $this;
    }

    /**
     * Gets assessment_start_date
     *
     * @return string|null
     */
    public function getAssessmentStartDate()
    {
        return $this->container['assessment_start_date'];
    }

    /**
     * Sets assessment_start_date
     *
     * @param string|null $assessment_start_date Start date for the assessment
     *
     * @return self
     */
    public function setAssessmentStartDate($assessment_start_date)
    {
        if (is_null($assessment_start_date)) {
            throw new \InvalidArgumentException('non-nullable assessment_start_date cannot be null');
        }
        $this->container['assessment_start_date'] = $assessment_start_date;

        return $this;
    }

    /**
     * Gets is_files_enabled
     *
     * @return bool|null
     */
    public function getIsFilesEnabled()
    {
        return $this->container['is_files_enabled'];
    }

    /**
     * Sets is_files_enabled
     *
     * @param bool|null $is_files_enabled Whether files are enabled for the assessment
     *
     * @return self
     */
    public function setIsFilesEnabled($is_files_enabled)
    {
        if (is_null($is_files_enabled)) {
            throw new \InvalidArgumentException('non-nullable is_files_enabled cannot be null');
        }
        $this->container['is_files_enabled'] = $is_files_enabled;

        return $this;
    }

    /**
     * Gets is_files_required
     *
     * @return bool|null
     */
    public function getIsFilesRequired()
    {
        return $this->container['is_files_required'];
    }

    /**
     * Sets is_files_required
     *
     * @param bool|null $is_files_required Whether files are required for the assessment
     *
     * @return self
     */
    public function setIsFilesRequired($is_files_required)
    {
        if (is_null($is_files_required)) {
            throw new \InvalidArgumentException('non-nullable is_files_required cannot be null');
        }
        $this->container['is_files_required'] = $is_files_required;

        return $this;
    }

    /**
     * Gets is_skippable
     *
     * @return bool|null
     */
    public function getIsSkippable()
    {
        return $this->container['is_skippable'];
    }

    /**
     * Sets is_skippable
     *
     * @param bool|null $is_skippable Whether the assessment is skippable
     *
     * @return self
     */
    public function setIsSkippable($is_skippable)
    {
        if (is_null($is_skippable)) {
            throw new \InvalidArgumentException('non-nullable is_skippable cannot be null');
        }
        $this->container['is_skippable'] = $is_skippable;

        return $this;
    }

    /**
     * Gets impromptu_assessment_can_be_created
     *
     * @return bool|null
     */
    public function getImpromptuAssessmentCanBeCreated()
    {
        return $this->container['impromptu_assessment_can_be_created'];
    }

    /**
     * Sets impromptu_assessment_can_be_created
     *
     * @param bool|null $impromptu_assessment_can_be_created Whether an impromptu assessment can be created
     *
     * @return self
     */
    public function setImpromptuAssessmentCanBeCreated($impromptu_assessment_can_be_created)
    {
        if (is_null($impromptu_assessment_can_be_created)) {
            throw new \InvalidArgumentException('non-nullable impromptu_assessment_can_be_created cannot be null');
        }
        $this->container['impromptu_assessment_can_be_created'] = $impromptu_assessment_can_be_created;

        return $this;
    }

    /**
     * Gets impromptu_review_cycles
     *
     * @return object[]|null
     */
    public function getImpromptuReviewCycles()
    {
        return $this->container['impromptu_review_cycles'];
    }

    /**
     * Sets impromptu_review_cycles
     *
     * @param object[]|null $impromptu_review_cycles List of impromptu review cycles
     *
     * @return self
     */
    public function setImpromptuReviewCycles($impromptu_review_cycles)
    {
        if (is_null($impromptu_review_cycles)) {
            throw new \InvalidArgumentException('non-nullable impromptu_review_cycles cannot be null');
        }
        $this->container['impromptu_review_cycles'] = $impromptu_review_cycles;

        return $this;
    }

    /**
     * Gets can_be_cancelled
     *
     * @return bool|null
     */
    public function getCanBeCancelled()
    {
        return $this->container['can_be_cancelled'];
    }

    /**
     * Sets can_be_cancelled
     *
     * @param bool|null $can_be_cancelled Whether the assessment can be cancelled
     *
     * @return self
     */
    public function setCanBeCancelled($can_be_cancelled)
    {
        if (is_null($can_be_cancelled)) {
            throw new \InvalidArgumentException('non-nullable can_be_cancelled cannot be null');
        }
        $this->container['can_be_cancelled'] = $can_be_cancelled;

        return $this;
    }

    /**
     * Gets use_default_questions
     *
     * @return bool|null
     */
    public function getUseDefaultQuestions()
    {
        return $this->container['use_default_questions'];
    }

    /**
     * Sets use_default_questions
     *
     * @param bool|null $use_default_questions Whether to use default questions
     *
     * @return self
     */
    public function setUseDefaultQuestions($use_default_questions)
    {
        if (is_null($use_default_questions)) {
            throw new \InvalidArgumentException('non-nullable use_default_questions cannot be null');
        }
        $this->container['use_default_questions'] = $use_default_questions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


