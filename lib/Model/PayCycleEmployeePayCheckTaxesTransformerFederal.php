<?php
/**
 * PayCycleEmployeePayCheckTaxesTransformerFederal
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayCycleEmployeePayCheckTaxesTransformerFederal Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayCycleEmployeePayCheckTaxesTransformerFederal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayCycleEmployeePayCheckTaxesTransformer_federal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bhr_is_exempt' => 'bool',
        'trax_is_exempt' => 'bool',
        'exemptions' => 'int',
        'fica_is_exempt' => 'bool',
        'futa_is_exempt' => 'bool',
        'additional_withholding_type' => 'string',
        'additional_withholding_amount' => 'float',
        'filing_status' => 'string',
        'two_jobs' => 'bool',
        'dependents_amount' => 'float',
        'other_income' => 'float',
        'deductions' => 'float',
        'federal_tax_document_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bhr_is_exempt' => null,
        'trax_is_exempt' => null,
        'exemptions' => null,
        'fica_is_exempt' => null,
        'futa_is_exempt' => null,
        'additional_withholding_type' => null,
        'additional_withholding_amount' => 'float',
        'filing_status' => null,
        'two_jobs' => null,
        'dependents_amount' => 'float',
        'other_income' => 'float',
        'deductions' => 'float',
        'federal_tax_document_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bhr_is_exempt' => true,
        'trax_is_exempt' => true,
        'exemptions' => true,
        'fica_is_exempt' => true,
        'futa_is_exempt' => true,
        'additional_withholding_type' => true,
        'additional_withholding_amount' => true,
        'filing_status' => true,
        'two_jobs' => true,
        'dependents_amount' => true,
        'other_income' => true,
        'deductions' => true,
        'federal_tax_document_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bhr_is_exempt' => 'bhrIsExempt',
        'trax_is_exempt' => 'traxIsExempt',
        'exemptions' => 'exemptions',
        'fica_is_exempt' => 'ficaIsExempt',
        'futa_is_exempt' => 'futaIsExempt',
        'additional_withholding_type' => 'additionalWithholdingType',
        'additional_withholding_amount' => 'additionalWithholdingAmount',
        'filing_status' => 'filingStatus',
        'two_jobs' => 'twoJobs',
        'dependents_amount' => 'dependentsAmount',
        'other_income' => 'otherIncome',
        'deductions' => 'deductions',
        'federal_tax_document_type' => 'federalTaxDocumentType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bhr_is_exempt' => 'setBhrIsExempt',
        'trax_is_exempt' => 'setTraxIsExempt',
        'exemptions' => 'setExemptions',
        'fica_is_exempt' => 'setFicaIsExempt',
        'futa_is_exempt' => 'setFutaIsExempt',
        'additional_withholding_type' => 'setAdditionalWithholdingType',
        'additional_withholding_amount' => 'setAdditionalWithholdingAmount',
        'filing_status' => 'setFilingStatus',
        'two_jobs' => 'setTwoJobs',
        'dependents_amount' => 'setDependentsAmount',
        'other_income' => 'setOtherIncome',
        'deductions' => 'setDeductions',
        'federal_tax_document_type' => 'setFederalTaxDocumentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bhr_is_exempt' => 'getBhrIsExempt',
        'trax_is_exempt' => 'getTraxIsExempt',
        'exemptions' => 'getExemptions',
        'fica_is_exempt' => 'getFicaIsExempt',
        'futa_is_exempt' => 'getFutaIsExempt',
        'additional_withholding_type' => 'getAdditionalWithholdingType',
        'additional_withholding_amount' => 'getAdditionalWithholdingAmount',
        'filing_status' => 'getFilingStatus',
        'two_jobs' => 'getTwoJobs',
        'dependents_amount' => 'getDependentsAmount',
        'other_income' => 'getOtherIncome',
        'deductions' => 'getDeductions',
        'federal_tax_document_type' => 'getFederalTaxDocumentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('bhr_is_exempt', $data ?? [], null);
        $this->setIfExists('trax_is_exempt', $data ?? [], null);
        $this->setIfExists('exemptions', $data ?? [], null);
        $this->setIfExists('fica_is_exempt', $data ?? [], null);
        $this->setIfExists('futa_is_exempt', $data ?? [], null);
        $this->setIfExists('additional_withholding_type', $data ?? [], null);
        $this->setIfExists('additional_withholding_amount', $data ?? [], null);
        $this->setIfExists('filing_status', $data ?? [], null);
        $this->setIfExists('two_jobs', $data ?? [], null);
        $this->setIfExists('dependents_amount', $data ?? [], null);
        $this->setIfExists('other_income', $data ?? [], null);
        $this->setIfExists('deductions', $data ?? [], null);
        $this->setIfExists('federal_tax_document_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bhr_is_exempt
     *
     * @return bool|null
     */
    public function getBhrIsExempt()
    {
        return $this->container['bhr_is_exempt'];
    }

    /**
     * Sets bhr_is_exempt
     *
     * @param bool|null $bhr_is_exempt bhr_is_exempt
     *
     * @return self
     */
    public function setBhrIsExempt($bhr_is_exempt)
    {
        if (is_null($bhr_is_exempt)) {
            array_push($this->openAPINullablesSetToNull, 'bhr_is_exempt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bhr_is_exempt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bhr_is_exempt'] = $bhr_is_exempt;

        return $this;
    }

    /**
     * Gets trax_is_exempt
     *
     * @return bool|null
     */
    public function getTraxIsExempt()
    {
        return $this->container['trax_is_exempt'];
    }

    /**
     * Sets trax_is_exempt
     *
     * @param bool|null $trax_is_exempt trax_is_exempt
     *
     * @return self
     */
    public function setTraxIsExempt($trax_is_exempt)
    {
        if (is_null($trax_is_exempt)) {
            array_push($this->openAPINullablesSetToNull, 'trax_is_exempt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trax_is_exempt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trax_is_exempt'] = $trax_is_exempt;

        return $this;
    }

    /**
     * Gets exemptions
     *
     * @return int|null
     */
    public function getExemptions()
    {
        return $this->container['exemptions'];
    }

    /**
     * Sets exemptions
     *
     * @param int|null $exemptions exemptions
     *
     * @return self
     */
    public function setExemptions($exemptions)
    {
        if (is_null($exemptions)) {
            array_push($this->openAPINullablesSetToNull, 'exemptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exemptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['exemptions'] = $exemptions;

        return $this;
    }

    /**
     * Gets fica_is_exempt
     *
     * @return bool|null
     */
    public function getFicaIsExempt()
    {
        return $this->container['fica_is_exempt'];
    }

    /**
     * Sets fica_is_exempt
     *
     * @param bool|null $fica_is_exempt fica_is_exempt
     *
     * @return self
     */
    public function setFicaIsExempt($fica_is_exempt)
    {
        if (is_null($fica_is_exempt)) {
            array_push($this->openAPINullablesSetToNull, 'fica_is_exempt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fica_is_exempt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fica_is_exempt'] = $fica_is_exempt;

        return $this;
    }

    /**
     * Gets futa_is_exempt
     *
     * @return bool|null
     */
    public function getFutaIsExempt()
    {
        return $this->container['futa_is_exempt'];
    }

    /**
     * Sets futa_is_exempt
     *
     * @param bool|null $futa_is_exempt futa_is_exempt
     *
     * @return self
     */
    public function setFutaIsExempt($futa_is_exempt)
    {
        if (is_null($futa_is_exempt)) {
            array_push($this->openAPINullablesSetToNull, 'futa_is_exempt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('futa_is_exempt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['futa_is_exempt'] = $futa_is_exempt;

        return $this;
    }

    /**
     * Gets additional_withholding_type
     *
     * @return string|null
     */
    public function getAdditionalWithholdingType()
    {
        return $this->container['additional_withholding_type'];
    }

    /**
     * Sets additional_withholding_type
     *
     * @param string|null $additional_withholding_type additional_withholding_type
     *
     * @return self
     */
    public function setAdditionalWithholdingType($additional_withholding_type)
    {
        if (is_null($additional_withholding_type)) {
            array_push($this->openAPINullablesSetToNull, 'additional_withholding_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_withholding_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_withholding_type'] = $additional_withholding_type;

        return $this;
    }

    /**
     * Gets additional_withholding_amount
     *
     * @return float|null
     */
    public function getAdditionalWithholdingAmount()
    {
        return $this->container['additional_withholding_amount'];
    }

    /**
     * Sets additional_withholding_amount
     *
     * @param float|null $additional_withholding_amount additional_withholding_amount
     *
     * @return self
     */
    public function setAdditionalWithholdingAmount($additional_withholding_amount)
    {
        if (is_null($additional_withholding_amount)) {
            array_push($this->openAPINullablesSetToNull, 'additional_withholding_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_withholding_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_withholding_amount'] = $additional_withholding_amount;

        return $this;
    }

    /**
     * Gets filing_status
     *
     * @return string|null
     */
    public function getFilingStatus()
    {
        return $this->container['filing_status'];
    }

    /**
     * Sets filing_status
     *
     * @param string|null $filing_status filing_status
     *
     * @return self
     */
    public function setFilingStatus($filing_status)
    {
        if (is_null($filing_status)) {
            array_push($this->openAPINullablesSetToNull, 'filing_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('filing_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['filing_status'] = $filing_status;

        return $this;
    }

    /**
     * Gets two_jobs
     *
     * @return bool|null
     */
    public function getTwoJobs()
    {
        return $this->container['two_jobs'];
    }

    /**
     * Sets two_jobs
     *
     * @param bool|null $two_jobs two_jobs
     *
     * @return self
     */
    public function setTwoJobs($two_jobs)
    {
        if (is_null($two_jobs)) {
            array_push($this->openAPINullablesSetToNull, 'two_jobs');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('two_jobs', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['two_jobs'] = $two_jobs;

        return $this;
    }

    /**
     * Gets dependents_amount
     *
     * @return float|null
     */
    public function getDependentsAmount()
    {
        return $this->container['dependents_amount'];
    }

    /**
     * Sets dependents_amount
     *
     * @param float|null $dependents_amount dependents_amount
     *
     * @return self
     */
    public function setDependentsAmount($dependents_amount)
    {
        if (is_null($dependents_amount)) {
            array_push($this->openAPINullablesSetToNull, 'dependents_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dependents_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dependents_amount'] = $dependents_amount;

        return $this;
    }

    /**
     * Gets other_income
     *
     * @return float|null
     */
    public function getOtherIncome()
    {
        return $this->container['other_income'];
    }

    /**
     * Sets other_income
     *
     * @param float|null $other_income other_income
     *
     * @return self
     */
    public function setOtherIncome($other_income)
    {
        if (is_null($other_income)) {
            array_push($this->openAPINullablesSetToNull, 'other_income');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_income', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_income'] = $other_income;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return float|null
     */
    public function getDeductions()
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param float|null $deductions deductions
     *
     * @return self
     */
    public function setDeductions($deductions)
    {
        if (is_null($deductions)) {
            array_push($this->openAPINullablesSetToNull, 'deductions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deductions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets federal_tax_document_type
     *
     * @return string|null
     */
    public function getFederalTaxDocumentType()
    {
        return $this->container['federal_tax_document_type'];
    }

    /**
     * Sets federal_tax_document_type
     *
     * @param string|null $federal_tax_document_type federal_tax_document_type
     *
     * @return self
     */
    public function setFederalTaxDocumentType($federal_tax_document_type)
    {
        if (is_null($federal_tax_document_type)) {
            array_push($this->openAPINullablesSetToNull, 'federal_tax_document_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('federal_tax_document_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['federal_tax_document_type'] = $federal_tax_document_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


