<?php
/**
 * DeductionSyncListPageViewObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * DeductionSyncListPageViewObject Class Doc Comment
 *
 * @category Class
 * @description Deduction Sync List Page View Object
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeductionSyncListPageViewObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeductionSyncListPageViewObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'trax_cld_id' => 'int',
        'trax_client_id' => 'int',
        'trax_cld_start_date' => 'string',
        'trax_cld_end_date' => 'string',
        'deduction_name' => 'string',
        'deduction_type_id' => 'int',
        'use_safe_harbor' => 'bool',
        'employees' => '\MySdk\Model\DeductionSyncListPageEmployeeViewObject[]',
        'allowable_types' => '\MySdk\Model\DeductionSyncListPageAllowableTypeViewObject[]',
        'created' => 'bool',
        'show_on_table' => 'bool',
        'post_processing_postable' => 'bool',
        'allowable_loan_numbers' => '\MySdk\Model\DeductionSyncListPageAllowableLoanNumberViewObject[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'trax_cld_id' => null,
        'trax_client_id' => null,
        'trax_cld_start_date' => null,
        'trax_cld_end_date' => null,
        'deduction_name' => null,
        'deduction_type_id' => null,
        'use_safe_harbor' => null,
        'employees' => null,
        'allowable_types' => null,
        'created' => null,
        'show_on_table' => null,
        'post_processing_postable' => null,
        'allowable_loan_numbers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'trax_cld_id' => false,
        'trax_client_id' => false,
        'trax_cld_start_date' => false,
        'trax_cld_end_date' => false,
        'deduction_name' => false,
        'deduction_type_id' => false,
        'use_safe_harbor' => false,
        'employees' => false,
        'allowable_types' => false,
        'created' => false,
        'show_on_table' => false,
        'post_processing_postable' => false,
        'allowable_loan_numbers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trax_cld_id' => 'traxCldId',
        'trax_client_id' => 'traxClientId',
        'trax_cld_start_date' => 'traxCldStartDate',
        'trax_cld_end_date' => 'traxCldEndDate',
        'deduction_name' => 'deductionName',
        'deduction_type_id' => 'deductionTypeId',
        'use_safe_harbor' => 'useSafeHarbor',
        'employees' => 'employees',
        'allowable_types' => 'allowableTypes',
        'created' => 'created',
        'show_on_table' => 'showOnTable',
        'post_processing_postable' => 'postProcessingPostable',
        'allowable_loan_numbers' => 'allowableLoanNumbers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trax_cld_id' => 'setTraxCldId',
        'trax_client_id' => 'setTraxClientId',
        'trax_cld_start_date' => 'setTraxCldStartDate',
        'trax_cld_end_date' => 'setTraxCldEndDate',
        'deduction_name' => 'setDeductionName',
        'deduction_type_id' => 'setDeductionTypeId',
        'use_safe_harbor' => 'setUseSafeHarbor',
        'employees' => 'setEmployees',
        'allowable_types' => 'setAllowableTypes',
        'created' => 'setCreated',
        'show_on_table' => 'setShowOnTable',
        'post_processing_postable' => 'setPostProcessingPostable',
        'allowable_loan_numbers' => 'setAllowableLoanNumbers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trax_cld_id' => 'getTraxCldId',
        'trax_client_id' => 'getTraxClientId',
        'trax_cld_start_date' => 'getTraxCldStartDate',
        'trax_cld_end_date' => 'getTraxCldEndDate',
        'deduction_name' => 'getDeductionName',
        'deduction_type_id' => 'getDeductionTypeId',
        'use_safe_harbor' => 'getUseSafeHarbor',
        'employees' => 'getEmployees',
        'allowable_types' => 'getAllowableTypes',
        'created' => 'getCreated',
        'show_on_table' => 'getShowOnTable',
        'post_processing_postable' => 'getPostProcessingPostable',
        'allowable_loan_numbers' => 'getAllowableLoanNumbers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('trax_cld_id', $data ?? [], null);
        $this->setIfExists('trax_client_id', $data ?? [], null);
        $this->setIfExists('trax_cld_start_date', $data ?? [], null);
        $this->setIfExists('trax_cld_end_date', $data ?? [], null);
        $this->setIfExists('deduction_name', $data ?? [], null);
        $this->setIfExists('deduction_type_id', $data ?? [], null);
        $this->setIfExists('use_safe_harbor', $data ?? [], null);
        $this->setIfExists('employees', $data ?? [], null);
        $this->setIfExists('allowable_types', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('show_on_table', $data ?? [], null);
        $this->setIfExists('post_processing_postable', $data ?? [], null);
        $this->setIfExists('allowable_loan_numbers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trax_cld_id
     *
     * @return int|null
     */
    public function getTraxCldId()
    {
        return $this->container['trax_cld_id'];
    }

    /**
     * Sets trax_cld_id
     *
     * @param int|null $trax_cld_id Trax Cld ID
     *
     * @return self
     */
    public function setTraxCldId($trax_cld_id)
    {
        if (is_null($trax_cld_id)) {
            throw new \InvalidArgumentException('non-nullable trax_cld_id cannot be null');
        }
        $this->container['trax_cld_id'] = $trax_cld_id;

        return $this;
    }

    /**
     * Gets trax_client_id
     *
     * @return int|null
     */
    public function getTraxClientId()
    {
        return $this->container['trax_client_id'];
    }

    /**
     * Sets trax_client_id
     *
     * @param int|null $trax_client_id Trax Client ID
     *
     * @return self
     */
    public function setTraxClientId($trax_client_id)
    {
        if (is_null($trax_client_id)) {
            throw new \InvalidArgumentException('non-nullable trax_client_id cannot be null');
        }
        $this->container['trax_client_id'] = $trax_client_id;

        return $this;
    }

    /**
     * Gets trax_cld_start_date
     *
     * @return string|null
     */
    public function getTraxCldStartDate()
    {
        return $this->container['trax_cld_start_date'];
    }

    /**
     * Sets trax_cld_start_date
     *
     * @param string|null $trax_cld_start_date Trax Cld Start Date
     *
     * @return self
     */
    public function setTraxCldStartDate($trax_cld_start_date)
    {
        if (is_null($trax_cld_start_date)) {
            throw new \InvalidArgumentException('non-nullable trax_cld_start_date cannot be null');
        }
        $this->container['trax_cld_start_date'] = $trax_cld_start_date;

        return $this;
    }

    /**
     * Gets trax_cld_end_date
     *
     * @return string|null
     */
    public function getTraxCldEndDate()
    {
        return $this->container['trax_cld_end_date'];
    }

    /**
     * Sets trax_cld_end_date
     *
     * @param string|null $trax_cld_end_date Trax Cld End Date
     *
     * @return self
     */
    public function setTraxCldEndDate($trax_cld_end_date)
    {
        if (is_null($trax_cld_end_date)) {
            throw new \InvalidArgumentException('non-nullable trax_cld_end_date cannot be null');
        }
        $this->container['trax_cld_end_date'] = $trax_cld_end_date;

        return $this;
    }

    /**
     * Gets deduction_name
     *
     * @return string|null
     */
    public function getDeductionName()
    {
        return $this->container['deduction_name'];
    }

    /**
     * Sets deduction_name
     *
     * @param string|null $deduction_name Deduction Name
     *
     * @return self
     */
    public function setDeductionName($deduction_name)
    {
        if (is_null($deduction_name)) {
            throw new \InvalidArgumentException('non-nullable deduction_name cannot be null');
        }
        $this->container['deduction_name'] = $deduction_name;

        return $this;
    }

    /**
     * Gets deduction_type_id
     *
     * @return int|null
     */
    public function getDeductionTypeId()
    {
        return $this->container['deduction_type_id'];
    }

    /**
     * Sets deduction_type_id
     *
     * @param int|null $deduction_type_id Deduction Type ID
     *
     * @return self
     */
    public function setDeductionTypeId($deduction_type_id)
    {
        if (is_null($deduction_type_id)) {
            throw new \InvalidArgumentException('non-nullable deduction_type_id cannot be null');
        }
        $this->container['deduction_type_id'] = $deduction_type_id;

        return $this;
    }

    /**
     * Gets use_safe_harbor
     *
     * @return bool|null
     */
    public function getUseSafeHarbor()
    {
        return $this->container['use_safe_harbor'];
    }

    /**
     * Sets use_safe_harbor
     *
     * @param bool|null $use_safe_harbor Use Safe Harbor
     *
     * @return self
     */
    public function setUseSafeHarbor($use_safe_harbor)
    {
        if (is_null($use_safe_harbor)) {
            throw new \InvalidArgumentException('non-nullable use_safe_harbor cannot be null');
        }
        $this->container['use_safe_harbor'] = $use_safe_harbor;

        return $this;
    }

    /**
     * Gets employees
     *
     * @return \MySdk\Model\DeductionSyncListPageEmployeeViewObject[]|null
     */
    public function getEmployees()
    {
        return $this->container['employees'];
    }

    /**
     * Sets employees
     *
     * @param \MySdk\Model\DeductionSyncListPageEmployeeViewObject[]|null $employees Employees
     *
     * @return self
     */
    public function setEmployees($employees)
    {
        if (is_null($employees)) {
            throw new \InvalidArgumentException('non-nullable employees cannot be null');
        }
        $this->container['employees'] = $employees;

        return $this;
    }

    /**
     * Gets allowable_types
     *
     * @return \MySdk\Model\DeductionSyncListPageAllowableTypeViewObject[]|null
     */
    public function getAllowableTypes()
    {
        return $this->container['allowable_types'];
    }

    /**
     * Sets allowable_types
     *
     * @param \MySdk\Model\DeductionSyncListPageAllowableTypeViewObject[]|null $allowable_types Allowable Types
     *
     * @return self
     */
    public function setAllowableTypes($allowable_types)
    {
        if (is_null($allowable_types)) {
            throw new \InvalidArgumentException('non-nullable allowable_types cannot be null');
        }
        $this->container['allowable_types'] = $allowable_types;

        return $this;
    }

    /**
     * Gets created
     *
     * @return bool|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param bool|null $created Created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets show_on_table
     *
     * @return bool|null
     */
    public function getShowOnTable()
    {
        return $this->container['show_on_table'];
    }

    /**
     * Sets show_on_table
     *
     * @param bool|null $show_on_table Show On Table
     *
     * @return self
     */
    public function setShowOnTable($show_on_table)
    {
        if (is_null($show_on_table)) {
            throw new \InvalidArgumentException('non-nullable show_on_table cannot be null');
        }
        $this->container['show_on_table'] = $show_on_table;

        return $this;
    }

    /**
     * Gets post_processing_postable
     *
     * @return bool|null
     */
    public function getPostProcessingPostable()
    {
        return $this->container['post_processing_postable'];
    }

    /**
     * Sets post_processing_postable
     *
     * @param bool|null $post_processing_postable Post Processing Postable
     *
     * @return self
     */
    public function setPostProcessingPostable($post_processing_postable)
    {
        if (is_null($post_processing_postable)) {
            throw new \InvalidArgumentException('non-nullable post_processing_postable cannot be null');
        }
        $this->container['post_processing_postable'] = $post_processing_postable;

        return $this;
    }

    /**
     * Gets allowable_loan_numbers
     *
     * @return \MySdk\Model\DeductionSyncListPageAllowableLoanNumberViewObject[]|null
     */
    public function getAllowableLoanNumbers()
    {
        return $this->container['allowable_loan_numbers'];
    }

    /**
     * Sets allowable_loan_numbers
     *
     * @param \MySdk\Model\DeductionSyncListPageAllowableLoanNumberViewObject[]|null $allowable_loan_numbers Allowable Loan Numbers
     *
     * @return self
     */
    public function setAllowableLoanNumbers($allowable_loan_numbers)
    {
        if (is_null($allowable_loan_numbers)) {
            throw new \InvalidArgumentException('non-nullable allowable_loan_numbers cannot be null');
        }
        $this->container['allowable_loan_numbers'] = $allowable_loan_numbers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


