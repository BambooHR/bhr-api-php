<?php
/**
 * HoneyPostDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * HoneyPostDataObject Class Doc Comment
 *
 * @category Class
 * @description Post information
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HoneyPostDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Honey-PostDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'uuid' => 'string',
        'title' => 'string',
        'body' => 'string',
        'body_parsed' => 'string',
        'summary' => 'string',
        'created_at' => '\MySdk\Model\HoneyPollDataObjectCreatedAt',
        'publish_at' => '\MySdk\Model\HoneyPostDataObjectPublishAt',
        'status' => 'string',
        'confirmations_enabled' => 'bool',
        'like_count' => 'int',
        'comment_count' => 'int',
        'view_count' => 'int',
        'confirmation_count' => 'int',
        'confirmation_member_count' => 'int',
        'liked' => 'bool',
        'saved' => 'bool',
        'pinned' => 'bool',
        'user_unpinned' => 'bool',
        'muted' => 'bool',
        'viewed' => 'bool',
        'confirmable' => 'bool',
        'confirmed' => 'bool',
        'announced' => 'bool',
        'announced_at' => '\MySdk\Model\HoneyPostDataObjectAnnouncedAt',
        'editable' => 'bool',
        'author_id' => 'int',
        'author_employee_id' => 'string',
        'groups' => '\MySdk\Model\HoneyGroupDataObject[]',
        'group_ids' => 'int[]',
        'topic_ids' => 'int[]',
        'components' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'uuid' => 'string',
        'title' => 'string',
        'body' => 'string',
        'body_parsed' => 'string',
        'summary' => 'string',
        'created_at' => null,
        'publish_at' => null,
        'status' => 'string',
        'confirmations_enabled' => 'boolean',
        'like_count' => 'int32',
        'comment_count' => 'int32',
        'view_count' => 'int32',
        'confirmation_count' => 'int32',
        'confirmation_member_count' => 'int32',
        'liked' => 'boolean',
        'saved' => 'boolean',
        'pinned' => 'boolean',
        'user_unpinned' => 'boolean',
        'muted' => 'boolean',
        'viewed' => 'boolean',
        'confirmable' => 'boolean',
        'confirmed' => 'boolean',
        'announced' => 'boolean',
        'announced_at' => null,
        'editable' => 'boolean',
        'author_id' => 'int32',
        'author_employee_id' => 'string',
        'groups' => null,
        'group_ids' => 'int32',
        'topic_ids' => 'int32',
        'components' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'uuid' => false,
        'title' => false,
        'body' => false,
        'body_parsed' => false,
        'summary' => false,
        'created_at' => false,
        'publish_at' => false,
        'status' => false,
        'confirmations_enabled' => false,
        'like_count' => false,
        'comment_count' => false,
        'view_count' => true,
        'confirmation_count' => false,
        'confirmation_member_count' => false,
        'liked' => false,
        'saved' => false,
        'pinned' => false,
        'user_unpinned' => false,
        'muted' => false,
        'viewed' => false,
        'confirmable' => false,
        'confirmed' => false,
        'announced' => false,
        'announced_at' => false,
        'editable' => false,
        'author_id' => false,
        'author_employee_id' => false,
        'groups' => false,
        'group_ids' => false,
        'topic_ids' => false,
        'components' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'title' => 'title',
        'body' => 'body',
        'body_parsed' => 'bodyParsed',
        'summary' => 'summary',
        'created_at' => 'createdAt',
        'publish_at' => 'publishAt',
        'status' => 'status',
        'confirmations_enabled' => 'confirmationsEnabled',
        'like_count' => 'likeCount',
        'comment_count' => 'commentCount',
        'view_count' => 'viewCount',
        'confirmation_count' => 'confirmationCount',
        'confirmation_member_count' => 'confirmationMemberCount',
        'liked' => 'liked',
        'saved' => 'saved',
        'pinned' => 'pinned',
        'user_unpinned' => 'userUnpinned',
        'muted' => 'muted',
        'viewed' => 'viewed',
        'confirmable' => 'confirmable',
        'confirmed' => 'confirmed',
        'announced' => 'announced',
        'announced_at' => 'announcedAt',
        'editable' => 'editable',
        'author_id' => 'authorId',
        'author_employee_id' => 'authorEmployeeId',
        'groups' => 'groups',
        'group_ids' => 'groupIds',
        'topic_ids' => 'topicIds',
        'components' => 'components'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'title' => 'setTitle',
        'body' => 'setBody',
        'body_parsed' => 'setBodyParsed',
        'summary' => 'setSummary',
        'created_at' => 'setCreatedAt',
        'publish_at' => 'setPublishAt',
        'status' => 'setStatus',
        'confirmations_enabled' => 'setConfirmationsEnabled',
        'like_count' => 'setLikeCount',
        'comment_count' => 'setCommentCount',
        'view_count' => 'setViewCount',
        'confirmation_count' => 'setConfirmationCount',
        'confirmation_member_count' => 'setConfirmationMemberCount',
        'liked' => 'setLiked',
        'saved' => 'setSaved',
        'pinned' => 'setPinned',
        'user_unpinned' => 'setUserUnpinned',
        'muted' => 'setMuted',
        'viewed' => 'setViewed',
        'confirmable' => 'setConfirmable',
        'confirmed' => 'setConfirmed',
        'announced' => 'setAnnounced',
        'announced_at' => 'setAnnouncedAt',
        'editable' => 'setEditable',
        'author_id' => 'setAuthorId',
        'author_employee_id' => 'setAuthorEmployeeId',
        'groups' => 'setGroups',
        'group_ids' => 'setGroupIds',
        'topic_ids' => 'setTopicIds',
        'components' => 'setComponents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'title' => 'getTitle',
        'body' => 'getBody',
        'body_parsed' => 'getBodyParsed',
        'summary' => 'getSummary',
        'created_at' => 'getCreatedAt',
        'publish_at' => 'getPublishAt',
        'status' => 'getStatus',
        'confirmations_enabled' => 'getConfirmationsEnabled',
        'like_count' => 'getLikeCount',
        'comment_count' => 'getCommentCount',
        'view_count' => 'getViewCount',
        'confirmation_count' => 'getConfirmationCount',
        'confirmation_member_count' => 'getConfirmationMemberCount',
        'liked' => 'getLiked',
        'saved' => 'getSaved',
        'pinned' => 'getPinned',
        'user_unpinned' => 'getUserUnpinned',
        'muted' => 'getMuted',
        'viewed' => 'getViewed',
        'confirmable' => 'getConfirmable',
        'confirmed' => 'getConfirmed',
        'announced' => 'getAnnounced',
        'announced_at' => 'getAnnouncedAt',
        'editable' => 'getEditable',
        'author_id' => 'getAuthorId',
        'author_employee_id' => 'getAuthorEmployeeId',
        'groups' => 'getGroups',
        'group_ids' => 'getGroupIds',
        'topic_ids' => 'getTopicIds',
        'components' => 'getComponents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('body_parsed', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('publish_at', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('confirmations_enabled', $data ?? [], null);
        $this->setIfExists('like_count', $data ?? [], null);
        $this->setIfExists('comment_count', $data ?? [], null);
        $this->setIfExists('view_count', $data ?? [], null);
        $this->setIfExists('confirmation_count', $data ?? [], null);
        $this->setIfExists('confirmation_member_count', $data ?? [], null);
        $this->setIfExists('liked', $data ?? [], null);
        $this->setIfExists('saved', $data ?? [], null);
        $this->setIfExists('pinned', $data ?? [], null);
        $this->setIfExists('user_unpinned', $data ?? [], null);
        $this->setIfExists('muted', $data ?? [], null);
        $this->setIfExists('viewed', $data ?? [], null);
        $this->setIfExists('confirmable', $data ?? [], null);
        $this->setIfExists('confirmed', $data ?? [], null);
        $this->setIfExists('announced', $data ?? [], null);
        $this->setIfExists('announced_at', $data ?? [], null);
        $this->setIfExists('editable', $data ?? [], null);
        $this->setIfExists('author_id', $data ?? [], null);
        $this->setIfExists('author_employee_id', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('group_ids', $data ?? [], null);
        $this->setIfExists('topic_ids', $data ?? [], null);
        $this->setIfExists('components', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Post ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid Unique identifier for the post
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            throw new \InvalidArgumentException('non-nullable uuid cannot be null');
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Post title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body Post content
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            throw new \InvalidArgumentException('non-nullable body cannot be null');
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets body_parsed
     *
     * @return string|null
     */
    public function getBodyParsed()
    {
        return $this->container['body_parsed'];
    }

    /**
     * Sets body_parsed
     *
     * @param string|null $body_parsed Parsed post content
     *
     * @return self
     */
    public function setBodyParsed($body_parsed)
    {
        if (is_null($body_parsed)) {
            throw new \InvalidArgumentException('non-nullable body_parsed cannot be null');
        }
        $this->container['body_parsed'] = $body_parsed;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary Post summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            throw new \InvalidArgumentException('non-nullable summary cannot be null');
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \MySdk\Model\HoneyPollDataObjectCreatedAt|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \MySdk\Model\HoneyPollDataObjectCreatedAt|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets publish_at
     *
     * @return \MySdk\Model\HoneyPostDataObjectPublishAt|null
     */
    public function getPublishAt()
    {
        return $this->container['publish_at'];
    }

    /**
     * Sets publish_at
     *
     * @param \MySdk\Model\HoneyPostDataObjectPublishAt|null $publish_at publish_at
     *
     * @return self
     */
    public function setPublishAt($publish_at)
    {
        if (is_null($publish_at)) {
            throw new \InvalidArgumentException('non-nullable publish_at cannot be null');
        }
        $this->container['publish_at'] = $publish_at;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Post status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets confirmations_enabled
     *
     * @return bool|null
     */
    public function getConfirmationsEnabled()
    {
        return $this->container['confirmations_enabled'];
    }

    /**
     * Sets confirmations_enabled
     *
     * @param bool|null $confirmations_enabled Whether confirmations are enabled
     *
     * @return self
     */
    public function setConfirmationsEnabled($confirmations_enabled)
    {
        if (is_null($confirmations_enabled)) {
            throw new \InvalidArgumentException('non-nullable confirmations_enabled cannot be null');
        }
        $this->container['confirmations_enabled'] = $confirmations_enabled;

        return $this;
    }

    /**
     * Gets like_count
     *
     * @return int|null
     */
    public function getLikeCount()
    {
        return $this->container['like_count'];
    }

    /**
     * Sets like_count
     *
     * @param int|null $like_count Number of likes
     *
     * @return self
     */
    public function setLikeCount($like_count)
    {
        if (is_null($like_count)) {
            throw new \InvalidArgumentException('non-nullable like_count cannot be null');
        }
        $this->container['like_count'] = $like_count;

        return $this;
    }

    /**
     * Gets comment_count
     *
     * @return int|null
     */
    public function getCommentCount()
    {
        return $this->container['comment_count'];
    }

    /**
     * Sets comment_count
     *
     * @param int|null $comment_count Number of comments
     *
     * @return self
     */
    public function setCommentCount($comment_count)
    {
        if (is_null($comment_count)) {
            throw new \InvalidArgumentException('non-nullable comment_count cannot be null');
        }
        $this->container['comment_count'] = $comment_count;

        return $this;
    }

    /**
     * Gets view_count
     *
     * @return int|null
     */
    public function getViewCount()
    {
        return $this->container['view_count'];
    }

    /**
     * Sets view_count
     *
     * @param int|null $view_count Number of views
     *
     * @return self
     */
    public function setViewCount($view_count)
    {
        if (is_null($view_count)) {
            array_push($this->openAPINullablesSetToNull, 'view_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('view_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['view_count'] = $view_count;

        return $this;
    }

    /**
     * Gets confirmation_count
     *
     * @return int|null
     */
    public function getConfirmationCount()
    {
        return $this->container['confirmation_count'];
    }

    /**
     * Sets confirmation_count
     *
     * @param int|null $confirmation_count Number of confirmations
     *
     * @return self
     */
    public function setConfirmationCount($confirmation_count)
    {
        if (is_null($confirmation_count)) {
            throw new \InvalidArgumentException('non-nullable confirmation_count cannot be null');
        }
        $this->container['confirmation_count'] = $confirmation_count;

        return $this;
    }

    /**
     * Gets confirmation_member_count
     *
     * @return int|null
     */
    public function getConfirmationMemberCount()
    {
        return $this->container['confirmation_member_count'];
    }

    /**
     * Sets confirmation_member_count
     *
     * @param int|null $confirmation_member_count Number of members who confirmed
     *
     * @return self
     */
    public function setConfirmationMemberCount($confirmation_member_count)
    {
        if (is_null($confirmation_member_count)) {
            throw new \InvalidArgumentException('non-nullable confirmation_member_count cannot be null');
        }
        $this->container['confirmation_member_count'] = $confirmation_member_count;

        return $this;
    }

    /**
     * Gets liked
     *
     * @return bool|null
     */
    public function getLiked()
    {
        return $this->container['liked'];
    }

    /**
     * Sets liked
     *
     * @param bool|null $liked Whether the post is liked by current user
     *
     * @return self
     */
    public function setLiked($liked)
    {
        if (is_null($liked)) {
            throw new \InvalidArgumentException('non-nullable liked cannot be null');
        }
        $this->container['liked'] = $liked;

        return $this;
    }

    /**
     * Gets saved
     *
     * @return bool|null
     */
    public function getSaved()
    {
        return $this->container['saved'];
    }

    /**
     * Sets saved
     *
     * @param bool|null $saved Whether the post is saved by current user
     *
     * @return self
     */
    public function setSaved($saved)
    {
        if (is_null($saved)) {
            throw new \InvalidArgumentException('non-nullable saved cannot be null');
        }
        $this->container['saved'] = $saved;

        return $this;
    }

    /**
     * Gets pinned
     *
     * @return bool|null
     */
    public function getPinned()
    {
        return $this->container['pinned'];
    }

    /**
     * Sets pinned
     *
     * @param bool|null $pinned Whether the post is pinned
     *
     * @return self
     */
    public function setPinned($pinned)
    {
        if (is_null($pinned)) {
            throw new \InvalidArgumentException('non-nullable pinned cannot be null');
        }
        $this->container['pinned'] = $pinned;

        return $this;
    }

    /**
     * Gets user_unpinned
     *
     * @return bool|null
     */
    public function getUserUnpinned()
    {
        return $this->container['user_unpinned'];
    }

    /**
     * Sets user_unpinned
     *
     * @param bool|null $user_unpinned Whether the post is unpinned by user
     *
     * @return self
     */
    public function setUserUnpinned($user_unpinned)
    {
        if (is_null($user_unpinned)) {
            throw new \InvalidArgumentException('non-nullable user_unpinned cannot be null');
        }
        $this->container['user_unpinned'] = $user_unpinned;

        return $this;
    }

    /**
     * Gets muted
     *
     * @return bool|null
     */
    public function getMuted()
    {
        return $this->container['muted'];
    }

    /**
     * Sets muted
     *
     * @param bool|null $muted Whether the post is muted
     *
     * @return self
     */
    public function setMuted($muted)
    {
        if (is_null($muted)) {
            throw new \InvalidArgumentException('non-nullable muted cannot be null');
        }
        $this->container['muted'] = $muted;

        return $this;
    }

    /**
     * Gets viewed
     *
     * @return bool|null
     */
    public function getViewed()
    {
        return $this->container['viewed'];
    }

    /**
     * Sets viewed
     *
     * @param bool|null $viewed Whether the post is viewed
     *
     * @return self
     */
    public function setViewed($viewed)
    {
        if (is_null($viewed)) {
            throw new \InvalidArgumentException('non-nullable viewed cannot be null');
        }
        $this->container['viewed'] = $viewed;

        return $this;
    }

    /**
     * Gets confirmable
     *
     * @return bool|null
     */
    public function getConfirmable()
    {
        return $this->container['confirmable'];
    }

    /**
     * Sets confirmable
     *
     * @param bool|null $confirmable Whether the post can be confirmed
     *
     * @return self
     */
    public function setConfirmable($confirmable)
    {
        if (is_null($confirmable)) {
            throw new \InvalidArgumentException('non-nullable confirmable cannot be null');
        }
        $this->container['confirmable'] = $confirmable;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return bool|null
     */
    public function getConfirmed()
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param bool|null $confirmed Whether the post is confirmed
     *
     * @return self
     */
    public function setConfirmed($confirmed)
    {
        if (is_null($confirmed)) {
            throw new \InvalidArgumentException('non-nullable confirmed cannot be null');
        }
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets announced
     *
     * @return bool|null
     */
    public function getAnnounced()
    {
        return $this->container['announced'];
    }

    /**
     * Sets announced
     *
     * @param bool|null $announced Whether the post is announced
     *
     * @return self
     */
    public function setAnnounced($announced)
    {
        if (is_null($announced)) {
            throw new \InvalidArgumentException('non-nullable announced cannot be null');
        }
        $this->container['announced'] = $announced;

        return $this;
    }

    /**
     * Gets announced_at
     *
     * @return \MySdk\Model\HoneyPostDataObjectAnnouncedAt|null
     */
    public function getAnnouncedAt()
    {
        return $this->container['announced_at'];
    }

    /**
     * Sets announced_at
     *
     * @param \MySdk\Model\HoneyPostDataObjectAnnouncedAt|null $announced_at announced_at
     *
     * @return self
     */
    public function setAnnouncedAt($announced_at)
    {
        if (is_null($announced_at)) {
            throw new \InvalidArgumentException('non-nullable announced_at cannot be null');
        }
        $this->container['announced_at'] = $announced_at;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool|null
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool|null $editable Whether the post can be edited
     *
     * @return self
     */
    public function setEditable($editable)
    {
        if (is_null($editable)) {
            throw new \InvalidArgumentException('non-nullable editable cannot be null');
        }
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets author_id
     *
     * @return int|null
     */
    public function getAuthorId()
    {
        return $this->container['author_id'];
    }

    /**
     * Sets author_id
     *
     * @param int|null $author_id ID of the author
     *
     * @return self
     */
    public function setAuthorId($author_id)
    {
        if (is_null($author_id)) {
            throw new \InvalidArgumentException('non-nullable author_id cannot be null');
        }
        $this->container['author_id'] = $author_id;

        return $this;
    }

    /**
     * Gets author_employee_id
     *
     * @return string|null
     */
    public function getAuthorEmployeeId()
    {
        return $this->container['author_employee_id'];
    }

    /**
     * Sets author_employee_id
     *
     * @param string|null $author_employee_id Employee ID of the author
     *
     * @return self
     */
    public function setAuthorEmployeeId($author_employee_id)
    {
        if (is_null($author_employee_id)) {
            throw new \InvalidArgumentException('non-nullable author_employee_id cannot be null');
        }
        $this->container['author_employee_id'] = $author_employee_id;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \MySdk\Model\HoneyGroupDataObject[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \MySdk\Model\HoneyGroupDataObject[]|null $groups Groups associated with the post
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets group_ids
     *
     * @return int[]|null
     */
    public function getGroupIds()
    {
        return $this->container['group_ids'];
    }

    /**
     * Sets group_ids
     *
     * @param int[]|null $group_ids IDs of groups associated with the post
     *
     * @return self
     */
    public function setGroupIds($group_ids)
    {
        if (is_null($group_ids)) {
            throw new \InvalidArgumentException('non-nullable group_ids cannot be null');
        }
        $this->container['group_ids'] = $group_ids;

        return $this;
    }

    /**
     * Gets topic_ids
     *
     * @return int[]|null
     */
    public function getTopicIds()
    {
        return $this->container['topic_ids'];
    }

    /**
     * Sets topic_ids
     *
     * @param int[]|null $topic_ids IDs of topics associated with the post
     *
     * @return self
     */
    public function setTopicIds($topic_ids)
    {
        if (is_null($topic_ids)) {
            throw new \InvalidArgumentException('non-nullable topic_ids cannot be null');
        }
        $this->container['topic_ids'] = $topic_ids;

        return $this;
    }

    /**
     * Gets components
     *
     * @return object[]|null
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param object[]|null $components Components of the post
     *
     * @return self
     */
    public function setComponents($components)
    {
        if (is_null($components)) {
            throw new \InvalidArgumentException('non-nullable components cannot be null');
        }
        $this->container['components'] = $components;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


