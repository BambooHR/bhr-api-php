<?php
/**
 * BenefitPlanView
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * BenefitPlanView Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BenefitPlanView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BenefitPlanView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'plan_name' => 'string',
        'scheduled_changes' => 'string',
        'is_draft' => 'bool',
        'active' => 'bool',
        'is_restorable' => 'bool',
        'type' => 'string',
        'eligible' => '\MySdk\Model\BenefitPlanEligibleGroups[]',
        'status' => '\MySdk\Model\BenefitPlanEnrollmentStatuses',
        'is_end_date_required' => 'bool',
        'has_had_enrollments' => 'bool',
        'coverages' => '\MySdk\Model\BenefitPlanCoverageCoverage[]',
        'start_date' => 'string',
        'end_date' => 'string',
        'missing_plan_details' => 'bool',
        'active_future_plan_year_ids' => 'string[]',
        'carrier' => 'string',
        'plan_category_data_options' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'plan_name' => null,
        'scheduled_changes' => null,
        'is_draft' => null,
        'active' => null,
        'is_restorable' => null,
        'type' => null,
        'eligible' => null,
        'status' => null,
        'is_end_date_required' => null,
        'has_had_enrollments' => null,
        'coverages' => null,
        'start_date' => null,
        'end_date' => null,
        'missing_plan_details' => null,
        'active_future_plan_year_ids' => null,
        'carrier' => null,
        'plan_category_data_options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'plan_name' => false,
        'scheduled_changes' => false,
        'is_draft' => false,
        'active' => false,
        'is_restorable' => false,
        'type' => false,
        'eligible' => false,
        'status' => false,
        'is_end_date_required' => false,
        'has_had_enrollments' => false,
        'coverages' => false,
        'start_date' => true,
        'end_date' => true,
        'missing_plan_details' => false,
        'active_future_plan_year_ids' => false,
        'carrier' => false,
        'plan_category_data_options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'plan_name' => 'planName',
        'scheduled_changes' => 'scheduledChanges',
        'is_draft' => 'isDraft',
        'active' => 'active',
        'is_restorable' => 'isRestorable',
        'type' => 'type',
        'eligible' => 'eligible',
        'status' => 'status',
        'is_end_date_required' => 'isEndDateRequired',
        'has_had_enrollments' => 'hasHadEnrollments',
        'coverages' => 'coverages',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'missing_plan_details' => 'missingPlanDetails',
        'active_future_plan_year_ids' => 'activeFuturePlanYearIds',
        'carrier' => 'carrier',
        'plan_category_data_options' => 'planCategoryDataOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'plan_name' => 'setPlanName',
        'scheduled_changes' => 'setScheduledChanges',
        'is_draft' => 'setIsDraft',
        'active' => 'setActive',
        'is_restorable' => 'setIsRestorable',
        'type' => 'setType',
        'eligible' => 'setEligible',
        'status' => 'setStatus',
        'is_end_date_required' => 'setIsEndDateRequired',
        'has_had_enrollments' => 'setHasHadEnrollments',
        'coverages' => 'setCoverages',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'missing_plan_details' => 'setMissingPlanDetails',
        'active_future_plan_year_ids' => 'setActiveFuturePlanYearIds',
        'carrier' => 'setCarrier',
        'plan_category_data_options' => 'setPlanCategoryDataOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'plan_name' => 'getPlanName',
        'scheduled_changes' => 'getScheduledChanges',
        'is_draft' => 'getIsDraft',
        'active' => 'getActive',
        'is_restorable' => 'getIsRestorable',
        'type' => 'getType',
        'eligible' => 'getEligible',
        'status' => 'getStatus',
        'is_end_date_required' => 'getIsEndDateRequired',
        'has_had_enrollments' => 'getHasHadEnrollments',
        'coverages' => 'getCoverages',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'missing_plan_details' => 'getMissingPlanDetails',
        'active_future_plan_year_ids' => 'getActiveFuturePlanYearIds',
        'carrier' => 'getCarrier',
        'plan_category_data_options' => 'getPlanCategoryDataOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('plan_name', $data ?? [], null);
        $this->setIfExists('scheduled_changes', $data ?? [], null);
        $this->setIfExists('is_draft', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('is_restorable', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('eligible', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('is_end_date_required', $data ?? [], null);
        $this->setIfExists('has_had_enrollments', $data ?? [], null);
        $this->setIfExists('coverages', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('missing_plan_details', $data ?? [], null);
        $this->setIfExists('active_future_plan_year_ids', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('plan_category_data_options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets plan_name
     *
     * @return string|null
     */
    public function getPlanName()
    {
        return $this->container['plan_name'];
    }

    /**
     * Sets plan_name
     *
     * @param string|null $plan_name plan_name
     *
     * @return self
     */
    public function setPlanName($plan_name)
    {
        if (is_null($plan_name)) {
            throw new \InvalidArgumentException('non-nullable plan_name cannot be null');
        }
        $this->container['plan_name'] = $plan_name;

        return $this;
    }

    /**
     * Gets scheduled_changes
     *
     * @return string|null
     */
    public function getScheduledChanges()
    {
        return $this->container['scheduled_changes'];
    }

    /**
     * Sets scheduled_changes
     *
     * @param string|null $scheduled_changes scheduled_changes
     *
     * @return self
     */
    public function setScheduledChanges($scheduled_changes)
    {
        if (is_null($scheduled_changes)) {
            throw new \InvalidArgumentException('non-nullable scheduled_changes cannot be null');
        }
        $this->container['scheduled_changes'] = $scheduled_changes;

        return $this;
    }

    /**
     * Gets is_draft
     *
     * @return bool|null
     */
    public function getIsDraft()
    {
        return $this->container['is_draft'];
    }

    /**
     * Sets is_draft
     *
     * @param bool|null $is_draft is_draft
     *
     * @return self
     */
    public function setIsDraft($is_draft)
    {
        if (is_null($is_draft)) {
            throw new \InvalidArgumentException('non-nullable is_draft cannot be null');
        }
        $this->container['is_draft'] = $is_draft;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets is_restorable
     *
     * @return bool|null
     */
    public function getIsRestorable()
    {
        return $this->container['is_restorable'];
    }

    /**
     * Sets is_restorable
     *
     * @param bool|null $is_restorable is_restorable
     *
     * @return self
     */
    public function setIsRestorable($is_restorable)
    {
        if (is_null($is_restorable)) {
            throw new \InvalidArgumentException('non-nullable is_restorable cannot be null');
        }
        $this->container['is_restorable'] = $is_restorable;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets eligible
     *
     * @return \MySdk\Model\BenefitPlanEligibleGroups[]|null
     */
    public function getEligible()
    {
        return $this->container['eligible'];
    }

    /**
     * Sets eligible
     *
     * @param \MySdk\Model\BenefitPlanEligibleGroups[]|null $eligible eligible
     *
     * @return self
     */
    public function setEligible($eligible)
    {
        if (is_null($eligible)) {
            throw new \InvalidArgumentException('non-nullable eligible cannot be null');
        }
        $this->container['eligible'] = $eligible;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MySdk\Model\BenefitPlanEnrollmentStatuses|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MySdk\Model\BenefitPlanEnrollmentStatuses|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_end_date_required
     *
     * @return bool|null
     */
    public function getIsEndDateRequired()
    {
        return $this->container['is_end_date_required'];
    }

    /**
     * Sets is_end_date_required
     *
     * @param bool|null $is_end_date_required is_end_date_required
     *
     * @return self
     */
    public function setIsEndDateRequired($is_end_date_required)
    {
        if (is_null($is_end_date_required)) {
            throw new \InvalidArgumentException('non-nullable is_end_date_required cannot be null');
        }
        $this->container['is_end_date_required'] = $is_end_date_required;

        return $this;
    }

    /**
     * Gets has_had_enrollments
     *
     * @return bool|null
     */
    public function getHasHadEnrollments()
    {
        return $this->container['has_had_enrollments'];
    }

    /**
     * Sets has_had_enrollments
     *
     * @param bool|null $has_had_enrollments has_had_enrollments
     *
     * @return self
     */
    public function setHasHadEnrollments($has_had_enrollments)
    {
        if (is_null($has_had_enrollments)) {
            throw new \InvalidArgumentException('non-nullable has_had_enrollments cannot be null');
        }
        $this->container['has_had_enrollments'] = $has_had_enrollments;

        return $this;
    }

    /**
     * Gets coverages
     *
     * @return \MySdk\Model\BenefitPlanCoverageCoverage[]|null
     */
    public function getCoverages()
    {
        return $this->container['coverages'];
    }

    /**
     * Sets coverages
     *
     * @param \MySdk\Model\BenefitPlanCoverageCoverage[]|null $coverages coverages
     *
     * @return self
     */
    public function setCoverages($coverages)
    {
        if (is_null($coverages)) {
            throw new \InvalidArgumentException('non-nullable coverages cannot be null');
        }
        $this->container['coverages'] = $coverages;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            array_push($this->openAPINullablesSetToNull, 'start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets missing_plan_details
     *
     * @return bool|null
     */
    public function getMissingPlanDetails()
    {
        return $this->container['missing_plan_details'];
    }

    /**
     * Sets missing_plan_details
     *
     * @param bool|null $missing_plan_details missing_plan_details
     *
     * @return self
     */
    public function setMissingPlanDetails($missing_plan_details)
    {
        if (is_null($missing_plan_details)) {
            throw new \InvalidArgumentException('non-nullable missing_plan_details cannot be null');
        }
        $this->container['missing_plan_details'] = $missing_plan_details;

        return $this;
    }

    /**
     * Gets active_future_plan_year_ids
     *
     * @return string[]|null
     */
    public function getActiveFuturePlanYearIds()
    {
        return $this->container['active_future_plan_year_ids'];
    }

    /**
     * Sets active_future_plan_year_ids
     *
     * @param string[]|null $active_future_plan_year_ids active_future_plan_year_ids
     *
     * @return self
     */
    public function setActiveFuturePlanYearIds($active_future_plan_year_ids)
    {
        if (is_null($active_future_plan_year_ids)) {
            throw new \InvalidArgumentException('non-nullable active_future_plan_year_ids cannot be null');
        }
        $this->container['active_future_plan_year_ids'] = $active_future_plan_year_ids;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {
        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets plan_category_data_options
     *
     * @return object|null
     */
    public function getPlanCategoryDataOptions()
    {
        return $this->container['plan_category_data_options'];
    }

    /**
     * Sets plan_category_data_options
     *
     * @param object|null $plan_category_data_options plan_category_data_options
     *
     * @return self
     */
    public function setPlanCategoryDataOptions($plan_category_data_options)
    {
        if (is_null($plan_category_data_options)) {
            throw new \InvalidArgumentException('non-nullable plan_category_data_options cannot be null');
        }
        $this->container['plan_category_data_options'] = $plan_category_data_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


