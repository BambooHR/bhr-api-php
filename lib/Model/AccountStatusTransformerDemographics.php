<?php
/**
 * AccountStatusTransformerDemographics
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * AccountStatusTransformerDemographics Class Doc Comment
 *
 * @category Class
 * @description Employee demographics.
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountStatusTransformerDemographics implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountStatusTransformer_demographics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_employees' => 'mixed',
        'missing_addresses' => 'mixed',
        'missing_ssns' => 'mixed',
        'missing_birthdates' => 'mixed',
        'missing_genders' => 'mixed',
        'missing_job_locations' => 'mixed',
        'missing_job_records' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_employees' => null,
        'missing_addresses' => null,
        'missing_ssns' => null,
        'missing_birthdates' => null,
        'missing_genders' => null,
        'missing_job_locations' => null,
        'missing_job_records' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'total_employees' => true,
        'missing_addresses' => true,
        'missing_ssns' => true,
        'missing_birthdates' => true,
        'missing_genders' => true,
        'missing_job_locations' => true,
        'missing_job_records' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_employees' => 'totalEmployees',
        'missing_addresses' => 'missingAddresses',
        'missing_ssns' => 'missingSsns',
        'missing_birthdates' => 'missingBirthdates',
        'missing_genders' => 'missingGenders',
        'missing_job_locations' => 'missingJobLocations',
        'missing_job_records' => 'missingJobRecords'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_employees' => 'setTotalEmployees',
        'missing_addresses' => 'setMissingAddresses',
        'missing_ssns' => 'setMissingSsns',
        'missing_birthdates' => 'setMissingBirthdates',
        'missing_genders' => 'setMissingGenders',
        'missing_job_locations' => 'setMissingJobLocations',
        'missing_job_records' => 'setMissingJobRecords'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_employees' => 'getTotalEmployees',
        'missing_addresses' => 'getMissingAddresses',
        'missing_ssns' => 'getMissingSsns',
        'missing_birthdates' => 'getMissingBirthdates',
        'missing_genders' => 'getMissingGenders',
        'missing_job_locations' => 'getMissingJobLocations',
        'missing_job_records' => 'getMissingJobRecords'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('total_employees', $data ?? [], null);
        $this->setIfExists('missing_addresses', $data ?? [], null);
        $this->setIfExists('missing_ssns', $data ?? [], null);
        $this->setIfExists('missing_birthdates', $data ?? [], null);
        $this->setIfExists('missing_genders', $data ?? [], null);
        $this->setIfExists('missing_job_locations', $data ?? [], null);
        $this->setIfExists('missing_job_records', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_employees
     *
     * @return mixed|null
     */
    public function getTotalEmployees()
    {
        return $this->container['total_employees'];
    }

    /**
     * Sets total_employees
     *
     * @param mixed|null $total_employees Total employees.
     *
     * @return self
     */
    public function setTotalEmployees($total_employees)
    {
        if (is_null($total_employees)) {
            array_push($this->openAPINullablesSetToNull, 'total_employees');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_employees', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_employees'] = $total_employees;

        return $this;
    }

    /**
     * Gets missing_addresses
     *
     * @return mixed|null
     */
    public function getMissingAddresses()
    {
        return $this->container['missing_addresses'];
    }

    /**
     * Sets missing_addresses
     *
     * @param mixed|null $missing_addresses Employees missing addresses.
     *
     * @return self
     */
    public function setMissingAddresses($missing_addresses)
    {
        if (is_null($missing_addresses)) {
            array_push($this->openAPINullablesSetToNull, 'missing_addresses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('missing_addresses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['missing_addresses'] = $missing_addresses;

        return $this;
    }

    /**
     * Gets missing_ssns
     *
     * @return mixed|null
     */
    public function getMissingSsns()
    {
        return $this->container['missing_ssns'];
    }

    /**
     * Sets missing_ssns
     *
     * @param mixed|null $missing_ssns Employees missing SSNs.
     *
     * @return self
     */
    public function setMissingSsns($missing_ssns)
    {
        if (is_null($missing_ssns)) {
            array_push($this->openAPINullablesSetToNull, 'missing_ssns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('missing_ssns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['missing_ssns'] = $missing_ssns;

        return $this;
    }

    /**
     * Gets missing_birthdates
     *
     * @return mixed|null
     */
    public function getMissingBirthdates()
    {
        return $this->container['missing_birthdates'];
    }

    /**
     * Sets missing_birthdates
     *
     * @param mixed|null $missing_birthdates Employees missing birthdates.
     *
     * @return self
     */
    public function setMissingBirthdates($missing_birthdates)
    {
        if (is_null($missing_birthdates)) {
            array_push($this->openAPINullablesSetToNull, 'missing_birthdates');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('missing_birthdates', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['missing_birthdates'] = $missing_birthdates;

        return $this;
    }

    /**
     * Gets missing_genders
     *
     * @return mixed|null
     */
    public function getMissingGenders()
    {
        return $this->container['missing_genders'];
    }

    /**
     * Sets missing_genders
     *
     * @param mixed|null $missing_genders Employees missing genders.
     *
     * @return self
     */
    public function setMissingGenders($missing_genders)
    {
        if (is_null($missing_genders)) {
            array_push($this->openAPINullablesSetToNull, 'missing_genders');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('missing_genders', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['missing_genders'] = $missing_genders;

        return $this;
    }

    /**
     * Gets missing_job_locations
     *
     * @return mixed|null
     */
    public function getMissingJobLocations()
    {
        return $this->container['missing_job_locations'];
    }

    /**
     * Sets missing_job_locations
     *
     * @param mixed|null $missing_job_locations Employees missing job locations.
     *
     * @return self
     */
    public function setMissingJobLocations($missing_job_locations)
    {
        if (is_null($missing_job_locations)) {
            array_push($this->openAPINullablesSetToNull, 'missing_job_locations');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('missing_job_locations', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['missing_job_locations'] = $missing_job_locations;

        return $this;
    }

    /**
     * Gets missing_job_records
     *
     * @return mixed|null
     */
    public function getMissingJobRecords()
    {
        return $this->container['missing_job_records'];
    }

    /**
     * Sets missing_job_records
     *
     * @param mixed|null $missing_job_records Employees missing job records.
     *
     * @return self
     */
    public function setMissingJobRecords($missing_job_records)
    {
        if (is_null($missing_job_records)) {
            array_push($this->openAPINullablesSetToNull, 'missing_job_records');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('missing_job_records', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['missing_job_records'] = $missing_job_records;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


