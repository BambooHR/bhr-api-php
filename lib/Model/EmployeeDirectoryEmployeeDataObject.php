<?php
/**
 * EmployeeDirectoryEmployeeDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeDirectoryEmployeeDataObject Class Doc Comment
 *
 * @category Class
 * @description Schema for Employee Directory Employee Data
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeDirectoryEmployeeDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeDirectoryEmployeeDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'first_name' => 'string',
        'last_name' => 'string',
        'pref_name' => 'string',
        'job_title' => 'string',
        'department' => 'string',
        'direct_reports' => 'int[]',
        'division' => 'string',
        'email' => 'string',
        'location' => 'string',
        'img_url' => 'string',
        'reports_to' => 'string',
        'work_phone' => 'string',
        'ext' => 'string',
        'personal_phone' => 'string',
        'id' => 'int',
        'linked_in_url' => 'string',
        'twitter_url' => 'string',
        'facebook_url' => 'string',
        'instagram_url' => 'string',
        'time_off' => 'string',
        'time_off_icon' => 'string',
        'skype' => 'string',
        'pinterest' => 'string',
        'pronouns' => 'string',
        'can_upload_photo' => 'bool',
        'photo_uploaded' => 'bool',
        'timezone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'first_name' => null,
        'last_name' => null,
        'pref_name' => null,
        'job_title' => null,
        'department' => null,
        'direct_reports' => null,
        'division' => null,
        'email' => null,
        'location' => null,
        'img_url' => null,
        'reports_to' => null,
        'work_phone' => null,
        'ext' => null,
        'personal_phone' => null,
        'id' => null,
        'linked_in_url' => null,
        'twitter_url' => null,
        'facebook_url' => null,
        'instagram_url' => null,
        'time_off' => null,
        'time_off_icon' => null,
        'skype' => null,
        'pinterest' => null,
        'pronouns' => null,
        'can_upload_photo' => null,
        'photo_uploaded' => null,
        'timezone' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'first_name' => false,
        'last_name' => false,
        'pref_name' => false,
        'job_title' => true,
        'department' => true,
        'direct_reports' => false,
        'division' => true,
        'email' => true,
        'location' => true,
        'img_url' => true,
        'reports_to' => true,
        'work_phone' => true,
        'ext' => true,
        'personal_phone' => true,
        'id' => false,
        'linked_in_url' => true,
        'twitter_url' => true,
        'facebook_url' => true,
        'instagram_url' => true,
        'time_off' => true,
        'time_off_icon' => true,
        'skype' => true,
        'pinterest' => true,
        'pronouns' => true,
        'can_upload_photo' => true,
        'photo_uploaded' => true,
        'timezone' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'pref_name' => 'prefName',
        'job_title' => 'jobTitle',
        'department' => 'department',
        'direct_reports' => 'directReports',
        'division' => 'division',
        'email' => 'email',
        'location' => 'location',
        'img_url' => 'imgUrl',
        'reports_to' => 'reportsTo',
        'work_phone' => 'workPhone',
        'ext' => 'ext',
        'personal_phone' => 'personalPhone',
        'id' => 'id',
        'linked_in_url' => 'linkedInUrl',
        'twitter_url' => 'twitterUrl',
        'facebook_url' => 'facebookUrl',
        'instagram_url' => 'instagramUrl',
        'time_off' => 'timeOff',
        'time_off_icon' => 'timeOffIcon',
        'skype' => 'skype',
        'pinterest' => 'pinterest',
        'pronouns' => 'pronouns',
        'can_upload_photo' => 'canUploadPhoto',
        'photo_uploaded' => 'photoUploaded',
        'timezone' => 'timezone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'pref_name' => 'setPrefName',
        'job_title' => 'setJobTitle',
        'department' => 'setDepartment',
        'direct_reports' => 'setDirectReports',
        'division' => 'setDivision',
        'email' => 'setEmail',
        'location' => 'setLocation',
        'img_url' => 'setImgUrl',
        'reports_to' => 'setReportsTo',
        'work_phone' => 'setWorkPhone',
        'ext' => 'setExt',
        'personal_phone' => 'setPersonalPhone',
        'id' => 'setId',
        'linked_in_url' => 'setLinkedInUrl',
        'twitter_url' => 'setTwitterUrl',
        'facebook_url' => 'setFacebookUrl',
        'instagram_url' => 'setInstagramUrl',
        'time_off' => 'setTimeOff',
        'time_off_icon' => 'setTimeOffIcon',
        'skype' => 'setSkype',
        'pinterest' => 'setPinterest',
        'pronouns' => 'setPronouns',
        'can_upload_photo' => 'setCanUploadPhoto',
        'photo_uploaded' => 'setPhotoUploaded',
        'timezone' => 'setTimezone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'pref_name' => 'getPrefName',
        'job_title' => 'getJobTitle',
        'department' => 'getDepartment',
        'direct_reports' => 'getDirectReports',
        'division' => 'getDivision',
        'email' => 'getEmail',
        'location' => 'getLocation',
        'img_url' => 'getImgUrl',
        'reports_to' => 'getReportsTo',
        'work_phone' => 'getWorkPhone',
        'ext' => 'getExt',
        'personal_phone' => 'getPersonalPhone',
        'id' => 'getId',
        'linked_in_url' => 'getLinkedInUrl',
        'twitter_url' => 'getTwitterUrl',
        'facebook_url' => 'getFacebookUrl',
        'instagram_url' => 'getInstagramUrl',
        'time_off' => 'getTimeOff',
        'time_off_icon' => 'getTimeOffIcon',
        'skype' => 'getSkype',
        'pinterest' => 'getPinterest',
        'pronouns' => 'getPronouns',
        'can_upload_photo' => 'getCanUploadPhoto',
        'photo_uploaded' => 'getPhotoUploaded',
        'timezone' => 'getTimezone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('pref_name', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('direct_reports', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('img_url', $data ?? [], null);
        $this->setIfExists('reports_to', $data ?? [], null);
        $this->setIfExists('work_phone', $data ?? [], null);
        $this->setIfExists('ext', $data ?? [], null);
        $this->setIfExists('personal_phone', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('linked_in_url', $data ?? [], null);
        $this->setIfExists('twitter_url', $data ?? [], null);
        $this->setIfExists('facebook_url', $data ?? [], null);
        $this->setIfExists('instagram_url', $data ?? [], null);
        $this->setIfExists('time_off', $data ?? [], null);
        $this->setIfExists('time_off_icon', $data ?? [], null);
        $this->setIfExists('skype', $data ?? [], null);
        $this->setIfExists('pinterest', $data ?? [], null);
        $this->setIfExists('pronouns', $data ?? [], null);
        $this->setIfExists('can_upload_photo', $data ?? [], null);
        $this->setIfExists('photo_uploaded', $data ?? [], null);
        $this->setIfExists('timezone', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Employee first name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Employee last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets pref_name
     *
     * @return string|null
     */
    public function getPrefName()
    {
        return $this->container['pref_name'];
    }

    /**
     * Sets pref_name
     *
     * @param string|null $pref_name Employee preferred name
     *
     * @return self
     */
    public function setPrefName($pref_name)
    {
        if (is_null($pref_name)) {
            throw new \InvalidArgumentException('non-nullable pref_name cannot be null');
        }
        $this->container['pref_name'] = $pref_name;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Employee job title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            array_push($this->openAPINullablesSetToNull, 'job_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Employee department
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets direct_reports
     *
     * @return int[]|null
     */
    public function getDirectReports()
    {
        return $this->container['direct_reports'];
    }

    /**
     * Sets direct_reports
     *
     * @param int[]|null $direct_reports Employee direct reports
     *
     * @return self
     */
    public function setDirectReports($direct_reports)
    {
        if (is_null($direct_reports)) {
            throw new \InvalidArgumentException('non-nullable direct_reports cannot be null');
        }
        $this->container['direct_reports'] = $direct_reports;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division Employee division
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            array_push($this->openAPINullablesSetToNull, 'division');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('division', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Employee email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Employee location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets img_url
     *
     * @return string|null
     */
    public function getImgUrl()
    {
        return $this->container['img_url'];
    }

    /**
     * Sets img_url
     *
     * @param string|null $img_url Employee img url
     *
     * @return self
     */
    public function setImgUrl($img_url)
    {
        if (is_null($img_url)) {
            array_push($this->openAPINullablesSetToNull, 'img_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('img_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['img_url'] = $img_url;

        return $this;
    }

    /**
     * Gets reports_to
     *
     * @return string|null
     */
    public function getReportsTo()
    {
        return $this->container['reports_to'];
    }

    /**
     * Sets reports_to
     *
     * @param string|null $reports_to Employee reports to name
     *
     * @return self
     */
    public function setReportsTo($reports_to)
    {
        if (is_null($reports_to)) {
            array_push($this->openAPINullablesSetToNull, 'reports_to');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reports_to', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reports_to'] = $reports_to;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string|null
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string|null $work_phone Employee work phone
     *
     * @return self
     */
    public function setWorkPhone($work_phone)
    {
        if (is_null($work_phone)) {
            array_push($this->openAPINullablesSetToNull, 'work_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('work_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets ext
     *
     * @return string|null
     */
    public function getExt()
    {
        return $this->container['ext'];
    }

    /**
     * Sets ext
     *
     * @param string|null $ext Employee work phone extension
     *
     * @return self
     */
    public function setExt($ext)
    {
        if (is_null($ext)) {
            array_push($this->openAPINullablesSetToNull, 'ext');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ext', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ext'] = $ext;

        return $this;
    }

    /**
     * Gets personal_phone
     *
     * @return string|null
     */
    public function getPersonalPhone()
    {
        return $this->container['personal_phone'];
    }

    /**
     * Sets personal_phone
     *
     * @param string|null $personal_phone Employee personal phone
     *
     * @return self
     */
    public function setPersonalPhone($personal_phone)
    {
        if (is_null($personal_phone)) {
            array_push($this->openAPINullablesSetToNull, 'personal_phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('personal_phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['personal_phone'] = $personal_phone;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Employee id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets linked_in_url
     *
     * @return string|null
     */
    public function getLinkedInUrl()
    {
        return $this->container['linked_in_url'];
    }

    /**
     * Sets linked_in_url
     *
     * @param string|null $linked_in_url Employee linkedin url
     *
     * @return self
     */
    public function setLinkedInUrl($linked_in_url)
    {
        if (is_null($linked_in_url)) {
            array_push($this->openAPINullablesSetToNull, 'linked_in_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('linked_in_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['linked_in_url'] = $linked_in_url;

        return $this;
    }

    /**
     * Gets twitter_url
     *
     * @return string|null
     */
    public function getTwitterUrl()
    {
        return $this->container['twitter_url'];
    }

    /**
     * Sets twitter_url
     *
     * @param string|null $twitter_url Employee twitter url
     *
     * @return self
     */
    public function setTwitterUrl($twitter_url)
    {
        if (is_null($twitter_url)) {
            array_push($this->openAPINullablesSetToNull, 'twitter_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('twitter_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['twitter_url'] = $twitter_url;

        return $this;
    }

    /**
     * Gets facebook_url
     *
     * @return string|null
     */
    public function getFacebookUrl()
    {
        return $this->container['facebook_url'];
    }

    /**
     * Sets facebook_url
     *
     * @param string|null $facebook_url Employee facebook url
     *
     * @return self
     */
    public function setFacebookUrl($facebook_url)
    {
        if (is_null($facebook_url)) {
            array_push($this->openAPINullablesSetToNull, 'facebook_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('facebook_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['facebook_url'] = $facebook_url;

        return $this;
    }

    /**
     * Gets instagram_url
     *
     * @return string|null
     */
    public function getInstagramUrl()
    {
        return $this->container['instagram_url'];
    }

    /**
     * Sets instagram_url
     *
     * @param string|null $instagram_url Employee instagram url
     *
     * @return self
     */
    public function setInstagramUrl($instagram_url)
    {
        if (is_null($instagram_url)) {
            array_push($this->openAPINullablesSetToNull, 'instagram_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('instagram_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['instagram_url'] = $instagram_url;

        return $this;
    }

    /**
     * Gets time_off
     *
     * @return string|null
     */
    public function getTimeOff()
    {
        return $this->container['time_off'];
    }

    /**
     * Sets time_off
     *
     * @param string|null $time_off Employee time off
     *
     * @return self
     */
    public function setTimeOff($time_off)
    {
        if (is_null($time_off)) {
            array_push($this->openAPINullablesSetToNull, 'time_off');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_off', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_off'] = $time_off;

        return $this;
    }

    /**
     * Gets time_off_icon
     *
     * @return string|null
     */
    public function getTimeOffIcon()
    {
        return $this->container['time_off_icon'];
    }

    /**
     * Sets time_off_icon
     *
     * @param string|null $time_off_icon Employee time off icon
     *
     * @return self
     */
    public function setTimeOffIcon($time_off_icon)
    {
        if (is_null($time_off_icon)) {
            array_push($this->openAPINullablesSetToNull, 'time_off_icon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_off_icon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_off_icon'] = $time_off_icon;

        return $this;
    }

    /**
     * Gets skype
     *
     * @return string|null
     */
    public function getSkype()
    {
        return $this->container['skype'];
    }

    /**
     * Sets skype
     *
     * @param string|null $skype Employee skype name
     *
     * @return self
     */
    public function setSkype($skype)
    {
        if (is_null($skype)) {
            array_push($this->openAPINullablesSetToNull, 'skype');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skype', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skype'] = $skype;

        return $this;
    }

    /**
     * Gets pinterest
     *
     * @return string|null
     */
    public function getPinterest()
    {
        return $this->container['pinterest'];
    }

    /**
     * Sets pinterest
     *
     * @param string|null $pinterest Employee pinterest url
     *
     * @return self
     */
    public function setPinterest($pinterest)
    {
        if (is_null($pinterest)) {
            array_push($this->openAPINullablesSetToNull, 'pinterest');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pinterest', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pinterest'] = $pinterest;

        return $this;
    }

    /**
     * Gets pronouns
     *
     * @return string|null
     */
    public function getPronouns()
    {
        return $this->container['pronouns'];
    }

    /**
     * Sets pronouns
     *
     * @param string|null $pronouns Employee pronouns
     *
     * @return self
     */
    public function setPronouns($pronouns)
    {
        if (is_null($pronouns)) {
            array_push($this->openAPINullablesSetToNull, 'pronouns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pronouns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pronouns'] = $pronouns;

        return $this;
    }

    /**
     * Gets can_upload_photo
     *
     * @return bool|null
     */
    public function getCanUploadPhoto()
    {
        return $this->container['can_upload_photo'];
    }

    /**
     * Sets can_upload_photo
     *
     * @param bool|null $can_upload_photo Employee can upload photo
     *
     * @return self
     */
    public function setCanUploadPhoto($can_upload_photo)
    {
        if (is_null($can_upload_photo)) {
            array_push($this->openAPINullablesSetToNull, 'can_upload_photo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('can_upload_photo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['can_upload_photo'] = $can_upload_photo;

        return $this;
    }

    /**
     * Gets photo_uploaded
     *
     * @return bool|null
     */
    public function getPhotoUploaded()
    {
        return $this->container['photo_uploaded'];
    }

    /**
     * Sets photo_uploaded
     *
     * @param bool|null $photo_uploaded Employee photo uploaded
     *
     * @return self
     */
    public function setPhotoUploaded($photo_uploaded)
    {
        if (is_null($photo_uploaded)) {
            array_push($this->openAPINullablesSetToNull, 'photo_uploaded');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photo_uploaded', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photo_uploaded'] = $photo_uploaded;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Employee timezone
     *
     * @return self
     */
    public function setTimezone($timezone)
    {
        if (is_null($timezone)) {
            array_push($this->openAPINullablesSetToNull, 'timezone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timezone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timezone'] = $timezone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


