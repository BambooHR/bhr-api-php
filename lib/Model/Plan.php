<?php
/**
 * Plan
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * Plan Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Plan implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Plan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'summary' => 'string',
        'description' => 'string',
        'coverage_ids' => 'string[]',
        'deductible_ids' => 'string[]',
        'max_out_of_pocket_ids' => 'string[]',
        'co_insurance' => 'float',
        'effective_date' => 'string',
        'plan_type_id' => 'int',
        'benefit_type' => 'string',
        'auto_enroll_setting' => 'string',
        'auto_enroll_default_employee_contribution_amount' => 'float',
        'is_variable' => 'bool',
        'required_plan_ids' => 'string[]',
        'plan_category_data_options' => 'object',
        'is_safe_harbor' => 'bool',
        'plan_files' => '\MySdk\Model\BenefitPlanFileViewObject[]',
        'additional_plan_urls' => '\MySdk\Model\NamedPlanUrl[]',
        'legal_text' => '\MySdk\Model\LegalText',
        'rate_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'summary' => null,
        'description' => null,
        'coverage_ids' => null,
        'deductible_ids' => null,
        'max_out_of_pocket_ids' => null,
        'co_insurance' => 'float',
        'effective_date' => null,
        'plan_type_id' => null,
        'benefit_type' => null,
        'auto_enroll_setting' => null,
        'auto_enroll_default_employee_contribution_amount' => 'float',
        'is_variable' => null,
        'required_plan_ids' => null,
        'plan_category_data_options' => null,
        'is_safe_harbor' => null,
        'plan_files' => null,
        'additional_plan_urls' => null,
        'legal_text' => null,
        'rate_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'summary' => true,
        'description' => true,
        'coverage_ids' => false,
        'deductible_ids' => false,
        'max_out_of_pocket_ids' => false,
        'co_insurance' => false,
        'effective_date' => true,
        'plan_type_id' => false,
        'benefit_type' => false,
        'auto_enroll_setting' => true,
        'auto_enroll_default_employee_contribution_amount' => true,
        'is_variable' => true,
        'required_plan_ids' => false,
        'plan_category_data_options' => false,
        'is_safe_harbor' => false,
        'plan_files' => false,
        'additional_plan_urls' => false,
        'legal_text' => false,
        'rate_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'summary' => 'summary',
        'description' => 'description',
        'coverage_ids' => 'coverageIds',
        'deductible_ids' => 'deductibleIds',
        'max_out_of_pocket_ids' => 'maxOutOfPocketIds',
        'co_insurance' => 'coInsurance',
        'effective_date' => 'effectiveDate',
        'plan_type_id' => 'planTypeId',
        'benefit_type' => 'benefitType',
        'auto_enroll_setting' => 'autoEnrollSetting',
        'auto_enroll_default_employee_contribution_amount' => 'autoEnrollDefaultEmployeeContributionAmount',
        'is_variable' => 'isVariable',
        'required_plan_ids' => 'requiredPlanIds',
        'plan_category_data_options' => 'planCategoryDataOptions',
        'is_safe_harbor' => 'isSafeHarbor',
        'plan_files' => 'planFiles',
        'additional_plan_urls' => 'additionalPlanUrls',
        'legal_text' => 'legalText',
        'rate_type' => 'rateType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'summary' => 'setSummary',
        'description' => 'setDescription',
        'coverage_ids' => 'setCoverageIds',
        'deductible_ids' => 'setDeductibleIds',
        'max_out_of_pocket_ids' => 'setMaxOutOfPocketIds',
        'co_insurance' => 'setCoInsurance',
        'effective_date' => 'setEffectiveDate',
        'plan_type_id' => 'setPlanTypeId',
        'benefit_type' => 'setBenefitType',
        'auto_enroll_setting' => 'setAutoEnrollSetting',
        'auto_enroll_default_employee_contribution_amount' => 'setAutoEnrollDefaultEmployeeContributionAmount',
        'is_variable' => 'setIsVariable',
        'required_plan_ids' => 'setRequiredPlanIds',
        'plan_category_data_options' => 'setPlanCategoryDataOptions',
        'is_safe_harbor' => 'setIsSafeHarbor',
        'plan_files' => 'setPlanFiles',
        'additional_plan_urls' => 'setAdditionalPlanUrls',
        'legal_text' => 'setLegalText',
        'rate_type' => 'setRateType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'summary' => 'getSummary',
        'description' => 'getDescription',
        'coverage_ids' => 'getCoverageIds',
        'deductible_ids' => 'getDeductibleIds',
        'max_out_of_pocket_ids' => 'getMaxOutOfPocketIds',
        'co_insurance' => 'getCoInsurance',
        'effective_date' => 'getEffectiveDate',
        'plan_type_id' => 'getPlanTypeId',
        'benefit_type' => 'getBenefitType',
        'auto_enroll_setting' => 'getAutoEnrollSetting',
        'auto_enroll_default_employee_contribution_amount' => 'getAutoEnrollDefaultEmployeeContributionAmount',
        'is_variable' => 'getIsVariable',
        'required_plan_ids' => 'getRequiredPlanIds',
        'plan_category_data_options' => 'getPlanCategoryDataOptions',
        'is_safe_harbor' => 'getIsSafeHarbor',
        'plan_files' => 'getPlanFiles',
        'additional_plan_urls' => 'getAdditionalPlanUrls',
        'legal_text' => 'getLegalText',
        'rate_type' => 'getRateType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('coverage_ids', $data ?? [], null);
        $this->setIfExists('deductible_ids', $data ?? [], null);
        $this->setIfExists('max_out_of_pocket_ids', $data ?? [], null);
        $this->setIfExists('co_insurance', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
        $this->setIfExists('plan_type_id', $data ?? [], null);
        $this->setIfExists('benefit_type', $data ?? [], null);
        $this->setIfExists('auto_enroll_setting', $data ?? [], null);
        $this->setIfExists('auto_enroll_default_employee_contribution_amount', $data ?? [], null);
        $this->setIfExists('is_variable', $data ?? [], null);
        $this->setIfExists('required_plan_ids', $data ?? [], null);
        $this->setIfExists('plan_category_data_options', $data ?? [], null);
        $this->setIfExists('is_safe_harbor', $data ?? [], null);
        $this->setIfExists('plan_files', $data ?? [], null);
        $this->setIfExists('additional_plan_urls', $data ?? [], null);
        $this->setIfExists('legal_text', $data ?? [], null);
        $this->setIfExists('rate_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            array_push($this->openAPINullablesSetToNull, 'summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets coverage_ids
     *
     * @return string[]|null
     */
    public function getCoverageIds()
    {
        return $this->container['coverage_ids'];
    }

    /**
     * Sets coverage_ids
     *
     * @param string[]|null $coverage_ids coverage_ids
     *
     * @return self
     */
    public function setCoverageIds($coverage_ids)
    {
        if (is_null($coverage_ids)) {
            throw new \InvalidArgumentException('non-nullable coverage_ids cannot be null');
        }
        $this->container['coverage_ids'] = $coverage_ids;

        return $this;
    }

    /**
     * Gets deductible_ids
     *
     * @return string[]|null
     */
    public function getDeductibleIds()
    {
        return $this->container['deductible_ids'];
    }

    /**
     * Sets deductible_ids
     *
     * @param string[]|null $deductible_ids deductible_ids
     *
     * @return self
     */
    public function setDeductibleIds($deductible_ids)
    {
        if (is_null($deductible_ids)) {
            throw new \InvalidArgumentException('non-nullable deductible_ids cannot be null');
        }
        $this->container['deductible_ids'] = $deductible_ids;

        return $this;
    }

    /**
     * Gets max_out_of_pocket_ids
     *
     * @return string[]|null
     */
    public function getMaxOutOfPocketIds()
    {
        return $this->container['max_out_of_pocket_ids'];
    }

    /**
     * Sets max_out_of_pocket_ids
     *
     * @param string[]|null $max_out_of_pocket_ids max_out_of_pocket_ids
     *
     * @return self
     */
    public function setMaxOutOfPocketIds($max_out_of_pocket_ids)
    {
        if (is_null($max_out_of_pocket_ids)) {
            throw new \InvalidArgumentException('non-nullable max_out_of_pocket_ids cannot be null');
        }
        $this->container['max_out_of_pocket_ids'] = $max_out_of_pocket_ids;

        return $this;
    }

    /**
     * Gets co_insurance
     *
     * @return float|null
     */
    public function getCoInsurance()
    {
        return $this->container['co_insurance'];
    }

    /**
     * Sets co_insurance
     *
     * @param float|null $co_insurance co_insurance
     *
     * @return self
     */
    public function setCoInsurance($co_insurance)
    {
        if (is_null($co_insurance)) {
            throw new \InvalidArgumentException('non-nullable co_insurance cannot be null');
        }
        $this->container['co_insurance'] = $co_insurance;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return string|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param string|null $effective_date effective_date
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        if (is_null($effective_date)) {
            array_push($this->openAPINullablesSetToNull, 'effective_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effective_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets plan_type_id
     *
     * @return int|null
     */
    public function getPlanTypeId()
    {
        return $this->container['plan_type_id'];
    }

    /**
     * Sets plan_type_id
     *
     * @param int|null $plan_type_id plan_type_id
     *
     * @return self
     */
    public function setPlanTypeId($plan_type_id)
    {
        if (is_null($plan_type_id)) {
            throw new \InvalidArgumentException('non-nullable plan_type_id cannot be null');
        }
        $this->container['plan_type_id'] = $plan_type_id;

        return $this;
    }

    /**
     * Gets benefit_type
     *
     * @return string|null
     */
    public function getBenefitType()
    {
        return $this->container['benefit_type'];
    }

    /**
     * Sets benefit_type
     *
     * @param string|null $benefit_type benefit_type
     *
     * @return self
     */
    public function setBenefitType($benefit_type)
    {
        if (is_null($benefit_type)) {
            throw new \InvalidArgumentException('non-nullable benefit_type cannot be null');
        }
        $this->container['benefit_type'] = $benefit_type;

        return $this;
    }

    /**
     * Gets auto_enroll_setting
     *
     * @return string|null
     */
    public function getAutoEnrollSetting()
    {
        return $this->container['auto_enroll_setting'];
    }

    /**
     * Sets auto_enroll_setting
     *
     * @param string|null $auto_enroll_setting auto_enroll_setting
     *
     * @return self
     */
    public function setAutoEnrollSetting($auto_enroll_setting)
    {
        if (is_null($auto_enroll_setting)) {
            array_push($this->openAPINullablesSetToNull, 'auto_enroll_setting');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_enroll_setting', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_enroll_setting'] = $auto_enroll_setting;

        return $this;
    }

    /**
     * Gets auto_enroll_default_employee_contribution_amount
     *
     * @return float|null
     */
    public function getAutoEnrollDefaultEmployeeContributionAmount()
    {
        return $this->container['auto_enroll_default_employee_contribution_amount'];
    }

    /**
     * Sets auto_enroll_default_employee_contribution_amount
     *
     * @param float|null $auto_enroll_default_employee_contribution_amount auto_enroll_default_employee_contribution_amount
     *
     * @return self
     */
    public function setAutoEnrollDefaultEmployeeContributionAmount($auto_enroll_default_employee_contribution_amount)
    {
        if (is_null($auto_enroll_default_employee_contribution_amount)) {
            array_push($this->openAPINullablesSetToNull, 'auto_enroll_default_employee_contribution_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_enroll_default_employee_contribution_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auto_enroll_default_employee_contribution_amount'] = $auto_enroll_default_employee_contribution_amount;

        return $this;
    }

    /**
     * Gets is_variable
     *
     * @return bool|null
     */
    public function getIsVariable()
    {
        return $this->container['is_variable'];
    }

    /**
     * Sets is_variable
     *
     * @param bool|null $is_variable is_variable
     *
     * @return self
     */
    public function setIsVariable($is_variable)
    {
        if (is_null($is_variable)) {
            array_push($this->openAPINullablesSetToNull, 'is_variable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_variable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_variable'] = $is_variable;

        return $this;
    }

    /**
     * Gets required_plan_ids
     *
     * @return string[]|null
     */
    public function getRequiredPlanIds()
    {
        return $this->container['required_plan_ids'];
    }

    /**
     * Sets required_plan_ids
     *
     * @param string[]|null $required_plan_ids required_plan_ids
     *
     * @return self
     */
    public function setRequiredPlanIds($required_plan_ids)
    {
        if (is_null($required_plan_ids)) {
            throw new \InvalidArgumentException('non-nullable required_plan_ids cannot be null');
        }
        $this->container['required_plan_ids'] = $required_plan_ids;

        return $this;
    }

    /**
     * Gets plan_category_data_options
     *
     * @return object|null
     */
    public function getPlanCategoryDataOptions()
    {
        return $this->container['plan_category_data_options'];
    }

    /**
     * Sets plan_category_data_options
     *
     * @param object|null $plan_category_data_options plan_category_data_options
     *
     * @return self
     */
    public function setPlanCategoryDataOptions($plan_category_data_options)
    {
        if (is_null($plan_category_data_options)) {
            throw new \InvalidArgumentException('non-nullable plan_category_data_options cannot be null');
        }
        $this->container['plan_category_data_options'] = $plan_category_data_options;

        return $this;
    }

    /**
     * Gets is_safe_harbor
     *
     * @return bool|null
     */
    public function getIsSafeHarbor()
    {
        return $this->container['is_safe_harbor'];
    }

    /**
     * Sets is_safe_harbor
     *
     * @param bool|null $is_safe_harbor is_safe_harbor
     *
     * @return self
     */
    public function setIsSafeHarbor($is_safe_harbor)
    {
        if (is_null($is_safe_harbor)) {
            throw new \InvalidArgumentException('non-nullable is_safe_harbor cannot be null');
        }
        $this->container['is_safe_harbor'] = $is_safe_harbor;

        return $this;
    }

    /**
     * Gets plan_files
     *
     * @return \MySdk\Model\BenefitPlanFileViewObject[]|null
     */
    public function getPlanFiles()
    {
        return $this->container['plan_files'];
    }

    /**
     * Sets plan_files
     *
     * @param \MySdk\Model\BenefitPlanFileViewObject[]|null $plan_files plan_files
     *
     * @return self
     */
    public function setPlanFiles($plan_files)
    {
        if (is_null($plan_files)) {
            throw new \InvalidArgumentException('non-nullable plan_files cannot be null');
        }
        $this->container['plan_files'] = $plan_files;

        return $this;
    }

    /**
     * Gets additional_plan_urls
     *
     * @return \MySdk\Model\NamedPlanUrl[]|null
     */
    public function getAdditionalPlanUrls()
    {
        return $this->container['additional_plan_urls'];
    }

    /**
     * Sets additional_plan_urls
     *
     * @param \MySdk\Model\NamedPlanUrl[]|null $additional_plan_urls additional_plan_urls
     *
     * @return self
     */
    public function setAdditionalPlanUrls($additional_plan_urls)
    {
        if (is_null($additional_plan_urls)) {
            throw new \InvalidArgumentException('non-nullable additional_plan_urls cannot be null');
        }
        $this->container['additional_plan_urls'] = $additional_plan_urls;

        return $this;
    }

    /**
     * Gets legal_text
     *
     * @return \MySdk\Model\LegalText|null
     */
    public function getLegalText()
    {
        return $this->container['legal_text'];
    }

    /**
     * Sets legal_text
     *
     * @param \MySdk\Model\LegalText|null $legal_text legal_text
     *
     * @return self
     */
    public function setLegalText($legal_text)
    {
        if (is_null($legal_text)) {
            throw new \InvalidArgumentException('non-nullable legal_text cannot be null');
        }
        $this->container['legal_text'] = $legal_text;

        return $this;
    }

    /**
     * Gets rate_type
     *
     * @return string|null
     */
    public function getRateType()
    {
        return $this->container['rate_type'];
    }

    /**
     * Sets rate_type
     *
     * @param string|null $rate_type rate_type
     *
     * @return self
     */
    public function setRateType($rate_type)
    {
        if (is_null($rate_type)) {
            throw new \InvalidArgumentException('non-nullable rate_type cannot be null');
        }
        $this->container['rate_type'] = $rate_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


