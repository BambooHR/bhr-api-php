<?php
/**
 * TimeAndLaborManagementDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TimeAndLaborManagementDataObject Class Doc Comment
 *
 * @category Class
 * @description Represents employee Time and Labor Management data including hours worked, type of hours, and associated project/task information
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeAndLaborManagementDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeAndLaborManagementDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'hours_type_id' => 'string',
        'hours_type' => 'string',
        'date' => '\DateTime',
        'hours' => 'float',
        'rate' => 'float',
        'date_time_adjusted' => '\DateTime',
        'include_in_payroll' => 'string',
        'project_id' => 'int',
        'task_id' => 'int',
        'shift_differential_id' => 'int',
        'holiday_id' => 'int',
        'record_id' => 'int',
        'record_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'hours_type_id' => null,
        'hours_type' => null,
        'date' => 'date',
        'hours' => 'float',
        'rate' => 'float',
        'date_time_adjusted' => 'date-time',
        'include_in_payroll' => null,
        'project_id' => null,
        'task_id' => null,
        'shift_differential_id' => null,
        'holiday_id' => null,
        'record_id' => null,
        'record_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'hours_type_id' => false,
        'hours_type' => false,
        'date' => false,
        'hours' => false,
        'rate' => false,
        'date_time_adjusted' => false,
        'include_in_payroll' => false,
        'project_id' => false,
        'task_id' => false,
        'shift_differential_id' => false,
        'holiday_id' => false,
        'record_id' => false,
        'record_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'hours_type_id' => 'hoursTypeId',
        'hours_type' => 'hoursType',
        'date' => 'date',
        'hours' => 'hours',
        'rate' => 'rate',
        'date_time_adjusted' => 'dateTimeAdjusted',
        'include_in_payroll' => 'includeInPayroll',
        'project_id' => 'projectId',
        'task_id' => 'taskId',
        'shift_differential_id' => 'shiftDifferentialId',
        'holiday_id' => 'holidayId',
        'record_id' => 'recordId',
        'record_type' => 'recordType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'hours_type_id' => 'setHoursTypeId',
        'hours_type' => 'setHoursType',
        'date' => 'setDate',
        'hours' => 'setHours',
        'rate' => 'setRate',
        'date_time_adjusted' => 'setDateTimeAdjusted',
        'include_in_payroll' => 'setIncludeInPayroll',
        'project_id' => 'setProjectId',
        'task_id' => 'setTaskId',
        'shift_differential_id' => 'setShiftDifferentialId',
        'holiday_id' => 'setHolidayId',
        'record_id' => 'setRecordId',
        'record_type' => 'setRecordType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'hours_type_id' => 'getHoursTypeId',
        'hours_type' => 'getHoursType',
        'date' => 'getDate',
        'hours' => 'getHours',
        'rate' => 'getRate',
        'date_time_adjusted' => 'getDateTimeAdjusted',
        'include_in_payroll' => 'getIncludeInPayroll',
        'project_id' => 'getProjectId',
        'task_id' => 'getTaskId',
        'shift_differential_id' => 'getShiftDifferentialId',
        'holiday_id' => 'getHolidayId',
        'record_id' => 'getRecordId',
        'record_type' => 'getRecordType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('hours_type_id', $data ?? [], null);
        $this->setIfExists('hours_type', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('hours', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('date_time_adjusted', $data ?? [], null);
        $this->setIfExists('include_in_payroll', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('task_id', $data ?? [], null);
        $this->setIfExists('shift_differential_id', $data ?? [], null);
        $this->setIfExists('holiday_id', $data ?? [], null);
        $this->setIfExists('record_id', $data ?? [], null);
        $this->setIfExists('record_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id The unique identifier for the employee
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets hours_type_id
     *
     * @return string|null
     */
    public function getHoursTypeId()
    {
        return $this->container['hours_type_id'];
    }

    /**
     * Sets hours_type_id
     *
     * @param string|null $hours_type_id The unique identifier for the hours Type
     *
     * @return self
     */
    public function setHoursTypeId($hours_type_id)
    {
        if (is_null($hours_type_id)) {
            throw new \InvalidArgumentException('non-nullable hours_type_id cannot be null');
        }
        $this->container['hours_type_id'] = $hours_type_id;

        return $this;
    }

    /**
     * Gets hours_type
     *
     * @return string|null
     */
    public function getHoursType()
    {
        return $this->container['hours_type'];
    }

    /**
     * Sets hours_type
     *
     * @param string|null $hours_type Hours Type
     *
     * @return self
     */
    public function setHoursType($hours_type)
    {
        if (is_null($hours_type)) {
            throw new \InvalidArgumentException('non-nullable hours_type cannot be null');
        }
        $this->container['hours_type'] = $hours_type;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Date Hours Worked
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets hours
     *
     * @return float|null
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     *
     * @param float|null $hours Hours worked
     *
     * @return self
     */
    public function setHours($hours)
    {
        if (is_null($hours)) {
            throw new \InvalidArgumentException('non-nullable hours cannot be null');
        }
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate Rate for hours worked
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets date_time_adjusted
     *
     * @return \DateTime|null
     */
    public function getDateTimeAdjusted()
    {
        return $this->container['date_time_adjusted'];
    }

    /**
     * Sets date_time_adjusted
     *
     * @param \DateTime|null $date_time_adjusted DateTime Record was adjusted
     *
     * @return self
     */
    public function setDateTimeAdjusted($date_time_adjusted)
    {
        if (is_null($date_time_adjusted)) {
            throw new \InvalidArgumentException('non-nullable date_time_adjusted cannot be null');
        }
        $this->container['date_time_adjusted'] = $date_time_adjusted;

        return $this;
    }

    /**
     * Gets include_in_payroll
     *
     * @return string|null
     */
    public function getIncludeInPayroll()
    {
        return $this->container['include_in_payroll'];
    }

    /**
     * Sets include_in_payroll
     *
     * @param string|null $include_in_payroll Included in Payroll Boolean
     *
     * @return self
     */
    public function setIncludeInPayroll($include_in_payroll)
    {
        if (is_null($include_in_payroll)) {
            throw new \InvalidArgumentException('non-nullable include_in_payroll cannot be null');
        }
        $this->container['include_in_payroll'] = $include_in_payroll;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id The unique identifier for the project
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return int|null
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param int|null $task_id The unique identifier for the task
     *
     * @return self
     */
    public function setTaskId($task_id)
    {
        if (is_null($task_id)) {
            throw new \InvalidArgumentException('non-nullable task_id cannot be null');
        }
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets shift_differential_id
     *
     * @return int|null
     */
    public function getShiftDifferentialId()
    {
        return $this->container['shift_differential_id'];
    }

    /**
     * Sets shift_differential_id
     *
     * @param int|null $shift_differential_id The unique identifier for the shift differential
     *
     * @return self
     */
    public function setShiftDifferentialId($shift_differential_id)
    {
        if (is_null($shift_differential_id)) {
            throw new \InvalidArgumentException('non-nullable shift_differential_id cannot be null');
        }
        $this->container['shift_differential_id'] = $shift_differential_id;

        return $this;
    }

    /**
     * Gets holiday_id
     *
     * @return int|null
     */
    public function getHolidayId()
    {
        return $this->container['holiday_id'];
    }

    /**
     * Sets holiday_id
     *
     * @param int|null $holiday_id The unique identifier for the holiday
     *
     * @return self
     */
    public function setHolidayId($holiday_id)
    {
        if (is_null($holiday_id)) {
            throw new \InvalidArgumentException('non-nullable holiday_id cannot be null');
        }
        $this->container['holiday_id'] = $holiday_id;

        return $this;
    }

    /**
     * Gets record_id
     *
     * @return int|null
     */
    public function getRecordId()
    {
        return $this->container['record_id'];
    }

    /**
     * Sets record_id
     *
     * @param int|null $record_id The unique identifier for the time off
     *
     * @return self
     */
    public function setRecordId($record_id)
    {
        if (is_null($record_id)) {
            throw new \InvalidArgumentException('non-nullable record_id cannot be null');
        }
        $this->container['record_id'] = $record_id;

        return $this;
    }

    /**
     * Gets record_type
     *
     * @return string|null
     */
    public function getRecordType()
    {
        return $this->container['record_type'];
    }

    /**
     * Sets record_type
     *
     * @param string|null $record_type The record type for the time off
     *
     * @return self
     */
    public function setRecordType($record_type)
    {
        if (is_null($record_type)) {
            throw new \InvalidArgumentException('non-nullable record_type cannot be null');
        }
        $this->container['record_type'] = $record_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


