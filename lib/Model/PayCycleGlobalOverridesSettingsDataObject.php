<?php
/**
 * PayCycleGlobalOverridesSettingsDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayCycleGlobalOverridesSettingsDataObject Class Doc Comment
 *
 * @category Class
 * @description Pay Cycle Global Overrides Settings Data Object
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayCycleGlobalOverridesSettingsDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayCycleGlobalOverridesSettingsDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'clear_wages' => 'bool',
        'clear_hours' => 'bool',
        'clear_extra_pay' => 'bool',
        'use_federal_override' => 'bool',
        'federal_override_amount' => 'float',
        'federal_override_amount_type' => 'string',
        'force_paper_check' => 'bool',
        'has_suppressed_deductions' => 'bool',
        'global_note' => 'string',
        'pay_period_id' => 'string',
        'use_federal_custom_override' => 'bool',
        'include_federal_exempt_employees' => 'bool',
        'state_taxes' => 'array[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'clear_wages' => null,
        'clear_hours' => null,
        'clear_extra_pay' => null,
        'use_federal_override' => null,
        'federal_override_amount' => null,
        'federal_override_amount_type' => null,
        'force_paper_check' => null,
        'has_suppressed_deductions' => null,
        'global_note' => null,
        'pay_period_id' => null,
        'use_federal_custom_override' => null,
        'include_federal_exempt_employees' => null,
        'state_taxes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'clear_wages' => false,
        'clear_hours' => false,
        'clear_extra_pay' => false,
        'use_federal_override' => false,
        'federal_override_amount' => false,
        'federal_override_amount_type' => false,
        'force_paper_check' => false,
        'has_suppressed_deductions' => false,
        'global_note' => false,
        'pay_period_id' => false,
        'use_federal_custom_override' => false,
        'include_federal_exempt_employees' => false,
        'state_taxes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clear_wages' => 'clearWages',
        'clear_hours' => 'clearHours',
        'clear_extra_pay' => 'clearExtraPay',
        'use_federal_override' => 'useFederalOverride',
        'federal_override_amount' => 'federalOverrideAmount',
        'federal_override_amount_type' => 'federalOverrideAmountType',
        'force_paper_check' => 'forcePaperCheck',
        'has_suppressed_deductions' => 'hasSuppressedDeductions',
        'global_note' => 'globalNote',
        'pay_period_id' => 'payPeriodId',
        'use_federal_custom_override' => 'useFederalCustomOverride',
        'include_federal_exempt_employees' => 'includeFederalExemptEmployees',
        'state_taxes' => 'stateTaxes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clear_wages' => 'setClearWages',
        'clear_hours' => 'setClearHours',
        'clear_extra_pay' => 'setClearExtraPay',
        'use_federal_override' => 'setUseFederalOverride',
        'federal_override_amount' => 'setFederalOverrideAmount',
        'federal_override_amount_type' => 'setFederalOverrideAmountType',
        'force_paper_check' => 'setForcePaperCheck',
        'has_suppressed_deductions' => 'setHasSuppressedDeductions',
        'global_note' => 'setGlobalNote',
        'pay_period_id' => 'setPayPeriodId',
        'use_federal_custom_override' => 'setUseFederalCustomOverride',
        'include_federal_exempt_employees' => 'setIncludeFederalExemptEmployees',
        'state_taxes' => 'setStateTaxes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clear_wages' => 'getClearWages',
        'clear_hours' => 'getClearHours',
        'clear_extra_pay' => 'getClearExtraPay',
        'use_federal_override' => 'getUseFederalOverride',
        'federal_override_amount' => 'getFederalOverrideAmount',
        'federal_override_amount_type' => 'getFederalOverrideAmountType',
        'force_paper_check' => 'getForcePaperCheck',
        'has_suppressed_deductions' => 'getHasSuppressedDeductions',
        'global_note' => 'getGlobalNote',
        'pay_period_id' => 'getPayPeriodId',
        'use_federal_custom_override' => 'getUseFederalCustomOverride',
        'include_federal_exempt_employees' => 'getIncludeFederalExemptEmployees',
        'state_taxes' => 'getStateTaxes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('clear_wages', $data ?? [], null);
        $this->setIfExists('clear_hours', $data ?? [], null);
        $this->setIfExists('clear_extra_pay', $data ?? [], null);
        $this->setIfExists('use_federal_override', $data ?? [], null);
        $this->setIfExists('federal_override_amount', $data ?? [], null);
        $this->setIfExists('federal_override_amount_type', $data ?? [], null);
        $this->setIfExists('force_paper_check', $data ?? [], null);
        $this->setIfExists('has_suppressed_deductions', $data ?? [], null);
        $this->setIfExists('global_note', $data ?? [], null);
        $this->setIfExists('pay_period_id', $data ?? [], null);
        $this->setIfExists('use_federal_custom_override', $data ?? [], null);
        $this->setIfExists('include_federal_exempt_employees', $data ?? [], null);
        $this->setIfExists('state_taxes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clear_wages
     *
     * @return bool|null
     */
    public function getClearWages()
    {
        return $this->container['clear_wages'];
    }

    /**
     * Sets clear_wages
     *
     * @param bool|null $clear_wages Clear Wages
     *
     * @return self
     */
    public function setClearWages($clear_wages)
    {
        if (is_null($clear_wages)) {
            throw new \InvalidArgumentException('non-nullable clear_wages cannot be null');
        }
        $this->container['clear_wages'] = $clear_wages;

        return $this;
    }

    /**
     * Gets clear_hours
     *
     * @return bool|null
     */
    public function getClearHours()
    {
        return $this->container['clear_hours'];
    }

    /**
     * Sets clear_hours
     *
     * @param bool|null $clear_hours Clear Hours
     *
     * @return self
     */
    public function setClearHours($clear_hours)
    {
        if (is_null($clear_hours)) {
            throw new \InvalidArgumentException('non-nullable clear_hours cannot be null');
        }
        $this->container['clear_hours'] = $clear_hours;

        return $this;
    }

    /**
     * Gets clear_extra_pay
     *
     * @return bool|null
     */
    public function getClearExtraPay()
    {
        return $this->container['clear_extra_pay'];
    }

    /**
     * Sets clear_extra_pay
     *
     * @param bool|null $clear_extra_pay Clear Extra Pay
     *
     * @return self
     */
    public function setClearExtraPay($clear_extra_pay)
    {
        if (is_null($clear_extra_pay)) {
            throw new \InvalidArgumentException('non-nullable clear_extra_pay cannot be null');
        }
        $this->container['clear_extra_pay'] = $clear_extra_pay;

        return $this;
    }

    /**
     * Gets use_federal_override
     *
     * @return bool|null
     */
    public function getUseFederalOverride()
    {
        return $this->container['use_federal_override'];
    }

    /**
     * Sets use_federal_override
     *
     * @param bool|null $use_federal_override Use Federal Override
     *
     * @return self
     */
    public function setUseFederalOverride($use_federal_override)
    {
        if (is_null($use_federal_override)) {
            throw new \InvalidArgumentException('non-nullable use_federal_override cannot be null');
        }
        $this->container['use_federal_override'] = $use_federal_override;

        return $this;
    }

    /**
     * Gets federal_override_amount
     *
     * @return float|null
     */
    public function getFederalOverrideAmount()
    {
        return $this->container['federal_override_amount'];
    }

    /**
     * Sets federal_override_amount
     *
     * @param float|null $federal_override_amount Federal Override Amount
     *
     * @return self
     */
    public function setFederalOverrideAmount($federal_override_amount)
    {
        if (is_null($federal_override_amount)) {
            throw new \InvalidArgumentException('non-nullable federal_override_amount cannot be null');
        }
        $this->container['federal_override_amount'] = $federal_override_amount;

        return $this;
    }

    /**
     * Gets federal_override_amount_type
     *
     * @return string|null
     */
    public function getFederalOverrideAmountType()
    {
        return $this->container['federal_override_amount_type'];
    }

    /**
     * Sets federal_override_amount_type
     *
     * @param string|null $federal_override_amount_type Federal Override Amount Type
     *
     * @return self
     */
    public function setFederalOverrideAmountType($federal_override_amount_type)
    {
        if (is_null($federal_override_amount_type)) {
            throw new \InvalidArgumentException('non-nullable federal_override_amount_type cannot be null');
        }
        $this->container['federal_override_amount_type'] = $federal_override_amount_type;

        return $this;
    }

    /**
     * Gets force_paper_check
     *
     * @return bool|null
     */
    public function getForcePaperCheck()
    {
        return $this->container['force_paper_check'];
    }

    /**
     * Sets force_paper_check
     *
     * @param bool|null $force_paper_check Force Paper Check
     *
     * @return self
     */
    public function setForcePaperCheck($force_paper_check)
    {
        if (is_null($force_paper_check)) {
            throw new \InvalidArgumentException('non-nullable force_paper_check cannot be null');
        }
        $this->container['force_paper_check'] = $force_paper_check;

        return $this;
    }

    /**
     * Gets has_suppressed_deductions
     *
     * @return bool|null
     */
    public function getHasSuppressedDeductions()
    {
        return $this->container['has_suppressed_deductions'];
    }

    /**
     * Sets has_suppressed_deductions
     *
     * @param bool|null $has_suppressed_deductions Has Suppressed Deductions
     *
     * @return self
     */
    public function setHasSuppressedDeductions($has_suppressed_deductions)
    {
        if (is_null($has_suppressed_deductions)) {
            throw new \InvalidArgumentException('non-nullable has_suppressed_deductions cannot be null');
        }
        $this->container['has_suppressed_deductions'] = $has_suppressed_deductions;

        return $this;
    }

    /**
     * Gets global_note
     *
     * @return string|null
     */
    public function getGlobalNote()
    {
        return $this->container['global_note'];
    }

    /**
     * Sets global_note
     *
     * @param string|null $global_note Global Note
     *
     * @return self
     */
    public function setGlobalNote($global_note)
    {
        if (is_null($global_note)) {
            throw new \InvalidArgumentException('non-nullable global_note cannot be null');
        }
        $this->container['global_note'] = $global_note;

        return $this;
    }

    /**
     * Gets pay_period_id
     *
     * @return string|null
     */
    public function getPayPeriodId()
    {
        return $this->container['pay_period_id'];
    }

    /**
     * Sets pay_period_id
     *
     * @param string|null $pay_period_id Pay Period ID
     *
     * @return self
     */
    public function setPayPeriodId($pay_period_id)
    {
        if (is_null($pay_period_id)) {
            throw new \InvalidArgumentException('non-nullable pay_period_id cannot be null');
        }
        $this->container['pay_period_id'] = $pay_period_id;

        return $this;
    }

    /**
     * Gets use_federal_custom_override
     *
     * @return bool|null
     */
    public function getUseFederalCustomOverride()
    {
        return $this->container['use_federal_custom_override'];
    }

    /**
     * Sets use_federal_custom_override
     *
     * @param bool|null $use_federal_custom_override Use Federal Custom Override
     *
     * @return self
     */
    public function setUseFederalCustomOverride($use_federal_custom_override)
    {
        if (is_null($use_federal_custom_override)) {
            throw new \InvalidArgumentException('non-nullable use_federal_custom_override cannot be null');
        }
        $this->container['use_federal_custom_override'] = $use_federal_custom_override;

        return $this;
    }

    /**
     * Gets include_federal_exempt_employees
     *
     * @return bool|null
     */
    public function getIncludeFederalExemptEmployees()
    {
        return $this->container['include_federal_exempt_employees'];
    }

    /**
     * Sets include_federal_exempt_employees
     *
     * @param bool|null $include_federal_exempt_employees Include Federal Exempt Employees
     *
     * @return self
     */
    public function setIncludeFederalExemptEmployees($include_federal_exempt_employees)
    {
        if (is_null($include_federal_exempt_employees)) {
            throw new \InvalidArgumentException('non-nullable include_federal_exempt_employees cannot be null');
        }
        $this->container['include_federal_exempt_employees'] = $include_federal_exempt_employees;

        return $this;
    }

    /**
     * Gets state_taxes
     *
     * @return array[]|null
     */
    public function getStateTaxes()
    {
        return $this->container['state_taxes'];
    }

    /**
     * Sets state_taxes
     *
     * @param array[]|null $state_taxes state_taxes
     *
     * @return self
     */
    public function setStateTaxes($state_taxes)
    {
        if (is_null($state_taxes)) {
            throw new \InvalidArgumentException('non-nullable state_taxes cannot be null');
        }
        $this->container['state_taxes'] = $state_taxes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


