<?php
/**
 * PayrollExtraPayControllerExtraPayEmployee
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollExtraPayControllerExtraPayEmployee Class Doc Comment
 *
 * @category Class
 * @description Employee data for extra pay
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollExtraPayControllerExtraPayEmployee implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payroll.ExtraPayController.ExtraPayEmployee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'employee_number' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'nickname' => 'string',
        'job_title' => 'string',
        'photo_url' => 'string',
        'payroll_enabled' => 'bool',
        'included_in_pay_cycle' => 'bool',
        'status' => 'string',
        'rehired' => 'bool',
        'payroll_active' => 'bool',
        'has2_pct_tax_type' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'employee_number' => null,
        'first_name' => null,
        'last_name' => null,
        'nickname' => null,
        'job_title' => null,
        'photo_url' => null,
        'payroll_enabled' => null,
        'included_in_pay_cycle' => null,
        'status' => null,
        'rehired' => null,
        'payroll_active' => null,
        'has2_pct_tax_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'employee_number' => false,
        'first_name' => false,
        'last_name' => false,
        'nickname' => false,
        'job_title' => false,
        'photo_url' => false,
        'payroll_enabled' => false,
        'included_in_pay_cycle' => false,
        'status' => false,
        'rehired' => false,
        'payroll_active' => false,
        'has2_pct_tax_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'employee_number' => 'employeeNumber',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'nickname' => 'nickname',
        'job_title' => 'jobTitle',
        'photo_url' => 'photoUrl',
        'payroll_enabled' => 'payrollEnabled',
        'included_in_pay_cycle' => 'includedInPayCycle',
        'status' => 'status',
        'rehired' => 'rehired',
        'payroll_active' => 'payrollActive',
        'has2_pct_tax_type' => 'has2PctTaxType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'employee_number' => 'setEmployeeNumber',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'nickname' => 'setNickname',
        'job_title' => 'setJobTitle',
        'photo_url' => 'setPhotoUrl',
        'payroll_enabled' => 'setPayrollEnabled',
        'included_in_pay_cycle' => 'setIncludedInPayCycle',
        'status' => 'setStatus',
        'rehired' => 'setRehired',
        'payroll_active' => 'setPayrollActive',
        'has2_pct_tax_type' => 'setHas2PctTaxType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'employee_number' => 'getEmployeeNumber',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'nickname' => 'getNickname',
        'job_title' => 'getJobTitle',
        'photo_url' => 'getPhotoUrl',
        'payroll_enabled' => 'getPayrollEnabled',
        'included_in_pay_cycle' => 'getIncludedInPayCycle',
        'status' => 'getStatus',
        'rehired' => 'getRehired',
        'payroll_active' => 'getPayrollActive',
        'has2_pct_tax_type' => 'getHas2PctTaxType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_number', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('photo_url', $data ?? [], null);
        $this->setIfExists('payroll_enabled', $data ?? [], null);
        $this->setIfExists('included_in_pay_cycle', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('rehired', $data ?? [], null);
        $this->setIfExists('payroll_active', $data ?? [], null);
        $this->setIfExists('has2_pct_tax_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Employee identifier
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_number
     *
     * @return string|null
     */
    public function getEmployeeNumber()
    {
        return $this->container['employee_number'];
    }

    /**
     * Sets employee_number
     *
     * @param string|null $employee_number Employee number
     *
     * @return self
     */
    public function setEmployeeNumber($employee_number)
    {
        if (is_null($employee_number)) {
            throw new \InvalidArgumentException('non-nullable employee_number cannot be null');
        }
        $this->container['employee_number'] = $employee_number;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname Nickname
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            throw new \InvalidArgumentException('non-nullable nickname cannot be null');
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Job title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            throw new \InvalidArgumentException('non-nullable job_title cannot be null');
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets photo_url
     *
     * @return string|null
     */
    public function getPhotoUrl()
    {
        return $this->container['photo_url'];
    }

    /**
     * Sets photo_url
     *
     * @param string|null $photo_url URL to employee photo
     *
     * @return self
     */
    public function setPhotoUrl($photo_url)
    {
        if (is_null($photo_url)) {
            throw new \InvalidArgumentException('non-nullable photo_url cannot be null');
        }
        $this->container['photo_url'] = $photo_url;

        return $this;
    }

    /**
     * Gets payroll_enabled
     *
     * @return bool|null
     */
    public function getPayrollEnabled()
    {
        return $this->container['payroll_enabled'];
    }

    /**
     * Sets payroll_enabled
     *
     * @param bool|null $payroll_enabled Whether payroll is enabled for the employee
     *
     * @return self
     */
    public function setPayrollEnabled($payroll_enabled)
    {
        if (is_null($payroll_enabled)) {
            throw new \InvalidArgumentException('non-nullable payroll_enabled cannot be null');
        }
        $this->container['payroll_enabled'] = $payroll_enabled;

        return $this;
    }

    /**
     * Gets included_in_pay_cycle
     *
     * @return bool|null
     */
    public function getIncludedInPayCycle()
    {
        return $this->container['included_in_pay_cycle'];
    }

    /**
     * Sets included_in_pay_cycle
     *
     * @param bool|null $included_in_pay_cycle Whether employee is included in pay cycle
     *
     * @return self
     */
    public function setIncludedInPayCycle($included_in_pay_cycle)
    {
        if (is_null($included_in_pay_cycle)) {
            throw new \InvalidArgumentException('non-nullable included_in_pay_cycle cannot be null');
        }
        $this->container['included_in_pay_cycle'] = $included_in_pay_cycle;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Employee status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets rehired
     *
     * @return bool|null
     */
    public function getRehired()
    {
        return $this->container['rehired'];
    }

    /**
     * Sets rehired
     *
     * @param bool|null $rehired Whether employee has been rehired
     *
     * @return self
     */
    public function setRehired($rehired)
    {
        if (is_null($rehired)) {
            throw new \InvalidArgumentException('non-nullable rehired cannot be null');
        }
        $this->container['rehired'] = $rehired;

        return $this;
    }

    /**
     * Gets payroll_active
     *
     * @return bool|null
     */
    public function getPayrollActive()
    {
        return $this->container['payroll_active'];
    }

    /**
     * Sets payroll_active
     *
     * @param bool|null $payroll_active Whether employee is active in payroll
     *
     * @return self
     */
    public function setPayrollActive($payroll_active)
    {
        if (is_null($payroll_active)) {
            throw new \InvalidArgumentException('non-nullable payroll_active cannot be null');
        }
        $this->container['payroll_active'] = $payroll_active;

        return $this;
    }

    /**
     * Gets has2_pct_tax_type
     *
     * @return bool|null
     */
    public function getHas2PctTaxType()
    {
        return $this->container['has2_pct_tax_type'];
    }

    /**
     * Sets has2_pct_tax_type
     *
     * @param bool|null $has2_pct_tax_type Whether employee has 2% tax type
     *
     * @return self
     */
    public function setHas2PctTaxType($has2_pct_tax_type)
    {
        if (is_null($has2_pct_tax_type)) {
            throw new \InvalidArgumentException('non-nullable has2_pct_tax_type cannot be null');
        }
        $this->container['has2_pct_tax_type'] = $has2_pct_tax_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


