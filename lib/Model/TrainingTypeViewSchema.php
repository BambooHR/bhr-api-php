<?php
/**
 * TrainingTypeViewSchema
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TrainingTypeViewSchema Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TrainingTypeViewSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TrainingTypeViewSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'can_add_categories' => 'bool',
        'title' => 'string',
        'training' => '\MySdk\Model\TrainingTypeDataSchema',
        'training_files' => '\MySdk\Model\TrainingTypeViewSchemaTrainingFilesInner[]',
        'categories' => 'array<string,string>',
        'sections' => '\MySdk\Model\TrainingTypeViewSchemaSectionsInner[]',
        'filter_list_values' => '\MySdk\Model\TrainingTypeViewSchemaFilterListValues'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'can_add_categories' => null,
        'title' => null,
        'training' => null,
        'training_files' => null,
        'categories' => null,
        'sections' => null,
        'filter_list_values' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'can_add_categories' => false,
        'title' => false,
        'training' => true,
        'training_files' => false,
        'categories' => false,
        'sections' => false,
        'filter_list_values' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'can_add_categories' => 'canAddCategories',
        'title' => 'title',
        'training' => 'training',
        'training_files' => 'trainingFiles',
        'categories' => 'categories',
        'sections' => 'sections',
        'filter_list_values' => 'filterListValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'can_add_categories' => 'setCanAddCategories',
        'title' => 'setTitle',
        'training' => 'setTraining',
        'training_files' => 'setTrainingFiles',
        'categories' => 'setCategories',
        'sections' => 'setSections',
        'filter_list_values' => 'setFilterListValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'can_add_categories' => 'getCanAddCategories',
        'title' => 'getTitle',
        'training' => 'getTraining',
        'training_files' => 'getTrainingFiles',
        'categories' => 'getCategories',
        'sections' => 'getSections',
        'filter_list_values' => 'getFilterListValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('can_add_categories', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('training', $data ?? [], null);
        $this->setIfExists('training_files', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('sections', $data ?? [], null);
        $this->setIfExists('filter_list_values', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets can_add_categories
     *
     * @return bool|null
     */
    public function getCanAddCategories()
    {
        return $this->container['can_add_categories'];
    }

    /**
     * Sets can_add_categories
     *
     * @param bool|null $can_add_categories can_add_categories
     *
     * @return self
     */
    public function setCanAddCategories($can_add_categories)
    {
        if (is_null($can_add_categories)) {
            throw new \InvalidArgumentException('non-nullable can_add_categories cannot be null');
        }
        $this->container['can_add_categories'] = $can_add_categories;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets training
     *
     * @return \MySdk\Model\TrainingTypeDataSchema|null
     */
    public function getTraining()
    {
        return $this->container['training'];
    }

    /**
     * Sets training
     *
     * @param \MySdk\Model\TrainingTypeDataSchema|null $training training
     *
     * @return self
     */
    public function setTraining($training)
    {
        if (is_null($training)) {
            array_push($this->openAPINullablesSetToNull, 'training');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('training', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['training'] = $training;

        return $this;
    }

    /**
     * Gets training_files
     *
     * @return \MySdk\Model\TrainingTypeViewSchemaTrainingFilesInner[]|null
     */
    public function getTrainingFiles()
    {
        return $this->container['training_files'];
    }

    /**
     * Sets training_files
     *
     * @param \MySdk\Model\TrainingTypeViewSchemaTrainingFilesInner[]|null $training_files training_files
     *
     * @return self
     */
    public function setTrainingFiles($training_files)
    {
        if (is_null($training_files)) {
            throw new \InvalidArgumentException('non-nullable training_files cannot be null');
        }
        $this->container['training_files'] = $training_files;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return array<string,string>|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param array<string,string>|null $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets sections
     *
     * @return \MySdk\Model\TrainingTypeViewSchemaSectionsInner[]|null
     */
    public function getSections()
    {
        return $this->container['sections'];
    }

    /**
     * Sets sections
     *
     * @param \MySdk\Model\TrainingTypeViewSchemaSectionsInner[]|null $sections sections
     *
     * @return self
     */
    public function setSections($sections)
    {
        if (is_null($sections)) {
            throw new \InvalidArgumentException('non-nullable sections cannot be null');
        }
        $this->container['sections'] = $sections;

        return $this;
    }

    /**
     * Gets filter_list_values
     *
     * @return \MySdk\Model\TrainingTypeViewSchemaFilterListValues|null
     */
    public function getFilterListValues()
    {
        return $this->container['filter_list_values'];
    }

    /**
     * Sets filter_list_values
     *
     * @param \MySdk\Model\TrainingTypeViewSchemaFilterListValues|null $filter_list_values filter_list_values
     *
     * @return self
     */
    public function setFilterListValues($filter_list_values)
    {
        if (is_null($filter_list_values)) {
            throw new \InvalidArgumentException('non-nullable filter_list_values cannot be null');
        }
        $this->container['filter_list_values'] = $filter_list_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


