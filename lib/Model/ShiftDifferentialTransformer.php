<?php
/**
 * ShiftDifferentialTransformer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * ShiftDifferentialTransformer Class Doc Comment
 *
 * @category Class
 * @description Represents a transformed shift differential with its associated data
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ShiftDifferentialTransformer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ShiftDifferentialTransformer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'schedule' => 'string',
        'rate' => 'float',
        'rate_type' => 'string',
        'allow_all_employees' => 'bool',
        'days' => 'string[]',
        'start' => 'string',
        'start_meridiem' => 'string',
        'end' => 'string',
        'end_meridiem' => 'string',
        'created_ymdt' => '\DateTime',
        'updated_ymdt' => '\DateTime',
        'archived_ymdt' => '\DateTime',
        'deleted_ymdt' => '\DateTime',
        'created_by' => 'int',
        'updated_by' => 'int',
        'archived_by' => 'int',
        'deleted_by' => 'int',
        'employee_count' => 'int',
        'employees' => '\MySdk\Model\ShiftDifferentialTransformerEmployeesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'schedule' => null,
        'rate' => 'float',
        'rate_type' => null,
        'allow_all_employees' => null,
        'days' => null,
        'start' => null,
        'start_meridiem' => null,
        'end' => null,
        'end_meridiem' => null,
        'created_ymdt' => 'date-time',
        'updated_ymdt' => 'date-time',
        'archived_ymdt' => 'date-time',
        'deleted_ymdt' => 'date-time',
        'created_by' => null,
        'updated_by' => null,
        'archived_by' => null,
        'deleted_by' => null,
        'employee_count' => null,
        'employees' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'schedule' => false,
        'rate' => false,
        'rate_type' => false,
        'allow_all_employees' => false,
        'days' => false,
        'start' => false,
        'start_meridiem' => false,
        'end' => false,
        'end_meridiem' => false,
        'created_ymdt' => true,
        'updated_ymdt' => true,
        'archived_ymdt' => true,
        'deleted_ymdt' => true,
        'created_by' => true,
        'updated_by' => true,
        'archived_by' => true,
        'deleted_by' => true,
        'employee_count' => false,
        'employees' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'schedule' => 'schedule',
        'rate' => 'rate',
        'rate_type' => 'rateType',
        'allow_all_employees' => 'allowAllEmployees',
        'days' => 'days',
        'start' => 'start',
        'start_meridiem' => 'startMeridiem',
        'end' => 'end',
        'end_meridiem' => 'endMeridiem',
        'created_ymdt' => 'createdYmdt',
        'updated_ymdt' => 'updatedYmdt',
        'archived_ymdt' => 'archivedYmdt',
        'deleted_ymdt' => 'deletedYmdt',
        'created_by' => 'createdBy',
        'updated_by' => 'updatedBy',
        'archived_by' => 'archivedBy',
        'deleted_by' => 'deletedBy',
        'employee_count' => 'employeeCount',
        'employees' => 'employees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'schedule' => 'setSchedule',
        'rate' => 'setRate',
        'rate_type' => 'setRateType',
        'allow_all_employees' => 'setAllowAllEmployees',
        'days' => 'setDays',
        'start' => 'setStart',
        'start_meridiem' => 'setStartMeridiem',
        'end' => 'setEnd',
        'end_meridiem' => 'setEndMeridiem',
        'created_ymdt' => 'setCreatedYmdt',
        'updated_ymdt' => 'setUpdatedYmdt',
        'archived_ymdt' => 'setArchivedYmdt',
        'deleted_ymdt' => 'setDeletedYmdt',
        'created_by' => 'setCreatedBy',
        'updated_by' => 'setUpdatedBy',
        'archived_by' => 'setArchivedBy',
        'deleted_by' => 'setDeletedBy',
        'employee_count' => 'setEmployeeCount',
        'employees' => 'setEmployees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'schedule' => 'getSchedule',
        'rate' => 'getRate',
        'rate_type' => 'getRateType',
        'allow_all_employees' => 'getAllowAllEmployees',
        'days' => 'getDays',
        'start' => 'getStart',
        'start_meridiem' => 'getStartMeridiem',
        'end' => 'getEnd',
        'end_meridiem' => 'getEndMeridiem',
        'created_ymdt' => 'getCreatedYmdt',
        'updated_ymdt' => 'getUpdatedYmdt',
        'archived_ymdt' => 'getArchivedYmdt',
        'deleted_ymdt' => 'getDeletedYmdt',
        'created_by' => 'getCreatedBy',
        'updated_by' => 'getUpdatedBy',
        'archived_by' => 'getArchivedBy',
        'deleted_by' => 'getDeletedBy',
        'employee_count' => 'getEmployeeCount',
        'employees' => 'getEmployees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RATE_TYPE_FIXED = 'fixed';
    public const RATE_TYPE_PERCENTAGE = 'percentage';
    public const START_MERIDIEM_AM = 'AM';
    public const START_MERIDIEM_PM = 'PM';
    public const END_MERIDIEM_AM = 'AM';
    public const END_MERIDIEM_PM = 'PM';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRateTypeAllowableValues()
    {
        return [
            self::RATE_TYPE_FIXED,
            self::RATE_TYPE_PERCENTAGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStartMeridiemAllowableValues()
    {
        return [
            self::START_MERIDIEM_AM,
            self::START_MERIDIEM_PM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEndMeridiemAllowableValues()
    {
        return [
            self::END_MERIDIEM_AM,
            self::END_MERIDIEM_PM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('schedule', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('rate_type', $data ?? [], null);
        $this->setIfExists('allow_all_employees', $data ?? [], null);
        $this->setIfExists('days', $data ?? [], null);
        $this->setIfExists('start', $data ?? [], null);
        $this->setIfExists('start_meridiem', $data ?? [], null);
        $this->setIfExists('end', $data ?? [], null);
        $this->setIfExists('end_meridiem', $data ?? [], null);
        $this->setIfExists('created_ymdt', $data ?? [], null);
        $this->setIfExists('updated_ymdt', $data ?? [], null);
        $this->setIfExists('archived_ymdt', $data ?? [], null);
        $this->setIfExists('deleted_ymdt', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
        $this->setIfExists('archived_by', $data ?? [], null);
        $this->setIfExists('deleted_by', $data ?? [], null);
        $this->setIfExists('employee_count', $data ?? [], null);
        $this->setIfExists('employees', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRateTypeAllowableValues();
        if (!is_null($this->container['rate_type']) && !in_array($this->container['rate_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'rate_type', must be one of '%s'",
                $this->container['rate_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStartMeridiemAllowableValues();
        if (!is_null($this->container['start_meridiem']) && !in_array($this->container['start_meridiem'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'start_meridiem', must be one of '%s'",
                $this->container['start_meridiem'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEndMeridiemAllowableValues();
        if (!is_null($this->container['end_meridiem']) && !in_array($this->container['end_meridiem'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'end_meridiem', must be one of '%s'",
                $this->container['end_meridiem'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique identifier of the shift differential
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the shift differential
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string|null $schedule Schedule type of the shift differential
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        if (is_null($schedule)) {
            throw new \InvalidArgumentException('non-nullable schedule cannot be null');
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate Rate value of the shift differential
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets rate_type
     *
     * @return string|null
     */
    public function getRateType()
    {
        return $this->container['rate_type'];
    }

    /**
     * Sets rate_type
     *
     * @param string|null $rate_type Type of rate (fixed or percentage)
     *
     * @return self
     */
    public function setRateType($rate_type)
    {
        if (is_null($rate_type)) {
            throw new \InvalidArgumentException('non-nullable rate_type cannot be null');
        }
        $allowedValues = $this->getRateTypeAllowableValues();
        if (!in_array($rate_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'rate_type', must be one of '%s'",
                    $rate_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['rate_type'] = $rate_type;

        return $this;
    }

    /**
     * Gets allow_all_employees
     *
     * @return bool|null
     */
    public function getAllowAllEmployees()
    {
        return $this->container['allow_all_employees'];
    }

    /**
     * Sets allow_all_employees
     *
     * @param bool|null $allow_all_employees Whether this shift differential applies to all employees
     *
     * @return self
     */
    public function setAllowAllEmployees($allow_all_employees)
    {
        if (is_null($allow_all_employees)) {
            throw new \InvalidArgumentException('non-nullable allow_all_employees cannot be null');
        }
        $this->container['allow_all_employees'] = $allow_all_employees;

        return $this;
    }

    /**
     * Gets days
     *
     * @return string[]|null
     */
    public function getDays()
    {
        return $this->container['days'];
    }

    /**
     * Sets days
     *
     * @param string[]|null $days Days of the week when this shift differential applies
     *
     * @return self
     */
    public function setDays($days)
    {
        if (is_null($days)) {
            throw new \InvalidArgumentException('non-nullable days cannot be null');
        }
        $this->container['days'] = $days;

        return $this;
    }

    /**
     * Gets start
     *
     * @return string|null
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param string|null $start Start time of the shift differential in 12-hour format
     *
     * @return self
     */
    public function setStart($start)
    {
        if (is_null($start)) {
            throw new \InvalidArgumentException('non-nullable start cannot be null');
        }
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets start_meridiem
     *
     * @return string|null
     */
    public function getStartMeridiem()
    {
        return $this->container['start_meridiem'];
    }

    /**
     * Sets start_meridiem
     *
     * @param string|null $start_meridiem AM/PM indicator for the start time
     *
     * @return self
     */
    public function setStartMeridiem($start_meridiem)
    {
        if (is_null($start_meridiem)) {
            throw new \InvalidArgumentException('non-nullable start_meridiem cannot be null');
        }
        $allowedValues = $this->getStartMeridiemAllowableValues();
        if (!in_array($start_meridiem, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'start_meridiem', must be one of '%s'",
                    $start_meridiem,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['start_meridiem'] = $start_meridiem;

        return $this;
    }

    /**
     * Gets end
     *
     * @return string|null
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param string|null $end End time of the shift differential in 12-hour format
     *
     * @return self
     */
    public function setEnd($end)
    {
        if (is_null($end)) {
            throw new \InvalidArgumentException('non-nullable end cannot be null');
        }
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets end_meridiem
     *
     * @return string|null
     */
    public function getEndMeridiem()
    {
        return $this->container['end_meridiem'];
    }

    /**
     * Sets end_meridiem
     *
     * @param string|null $end_meridiem AM/PM indicator for the end time
     *
     * @return self
     */
    public function setEndMeridiem($end_meridiem)
    {
        if (is_null($end_meridiem)) {
            throw new \InvalidArgumentException('non-nullable end_meridiem cannot be null');
        }
        $allowedValues = $this->getEndMeridiemAllowableValues();
        if (!in_array($end_meridiem, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'end_meridiem', must be one of '%s'",
                    $end_meridiem,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['end_meridiem'] = $end_meridiem;

        return $this;
    }

    /**
     * Gets created_ymdt
     *
     * @return \DateTime|null
     */
    public function getCreatedYmdt()
    {
        return $this->container['created_ymdt'];
    }

    /**
     * Sets created_ymdt
     *
     * @param \DateTime|null $created_ymdt ISO 8601 formatted timestamp when the shift differential was created
     *
     * @return self
     */
    public function setCreatedYmdt($created_ymdt)
    {
        if (is_null($created_ymdt)) {
            array_push($this->openAPINullablesSetToNull, 'created_ymdt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_ymdt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_ymdt'] = $created_ymdt;

        return $this;
    }

    /**
     * Gets updated_ymdt
     *
     * @return \DateTime|null
     */
    public function getUpdatedYmdt()
    {
        return $this->container['updated_ymdt'];
    }

    /**
     * Sets updated_ymdt
     *
     * @param \DateTime|null $updated_ymdt ISO 8601 formatted timestamp when the shift differential was last updated
     *
     * @return self
     */
    public function setUpdatedYmdt($updated_ymdt)
    {
        if (is_null($updated_ymdt)) {
            array_push($this->openAPINullablesSetToNull, 'updated_ymdt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_ymdt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_ymdt'] = $updated_ymdt;

        return $this;
    }

    /**
     * Gets archived_ymdt
     *
     * @return \DateTime|null
     */
    public function getArchivedYmdt()
    {
        return $this->container['archived_ymdt'];
    }

    /**
     * Sets archived_ymdt
     *
     * @param \DateTime|null $archived_ymdt ISO 8601 formatted timestamp when the shift differential was archived
     *
     * @return self
     */
    public function setArchivedYmdt($archived_ymdt)
    {
        if (is_null($archived_ymdt)) {
            array_push($this->openAPINullablesSetToNull, 'archived_ymdt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('archived_ymdt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['archived_ymdt'] = $archived_ymdt;

        return $this;
    }

    /**
     * Gets deleted_ymdt
     *
     * @return \DateTime|null
     */
    public function getDeletedYmdt()
    {
        return $this->container['deleted_ymdt'];
    }

    /**
     * Sets deleted_ymdt
     *
     * @param \DateTime|null $deleted_ymdt ISO 8601 formatted timestamp when the shift differential was deleted
     *
     * @return self
     */
    public function setDeletedYmdt($deleted_ymdt)
    {
        if (is_null($deleted_ymdt)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_ymdt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_ymdt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_ymdt'] = $deleted_ymdt;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return int|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param int|null $created_by ID of the user who created the shift differential
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            array_push($this->openAPINullablesSetToNull, 'created_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return int|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param int|null $updated_by ID of the user who last updated the shift differential
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            array_push($this->openAPINullablesSetToNull, 'updated_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets archived_by
     *
     * @return int|null
     */
    public function getArchivedBy()
    {
        return $this->container['archived_by'];
    }

    /**
     * Sets archived_by
     *
     * @param int|null $archived_by ID of the user who archived the shift differential
     *
     * @return self
     */
    public function setArchivedBy($archived_by)
    {
        if (is_null($archived_by)) {
            array_push($this->openAPINullablesSetToNull, 'archived_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('archived_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['archived_by'] = $archived_by;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return int|null
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param int|null $deleted_by ID of the user who deleted the shift differential
     *
     * @return self
     */
    public function setDeletedBy($deleted_by)
    {
        if (is_null($deleted_by)) {
            array_push($this->openAPINullablesSetToNull, 'deleted_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deleted_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets employee_count
     *
     * @return int|null
     */
    public function getEmployeeCount()
    {
        return $this->container['employee_count'];
    }

    /**
     * Sets employee_count
     *
     * @param int|null $employee_count Number of employees assigned to this shift differential
     *
     * @return self
     */
    public function setEmployeeCount($employee_count)
    {
        if (is_null($employee_count)) {
            throw new \InvalidArgumentException('non-nullable employee_count cannot be null');
        }
        $this->container['employee_count'] = $employee_count;

        return $this;
    }

    /**
     * Gets employees
     *
     * @return \MySdk\Model\ShiftDifferentialTransformerEmployeesInner[]|null
     */
    public function getEmployees()
    {
        return $this->container['employees'];
    }

    /**
     * Sets employees
     *
     * @param \MySdk\Model\ShiftDifferentialTransformerEmployeesInner[]|null $employees List of employees assigned to this shift differential
     *
     * @return self
     */
    public function setEmployees($employees)
    {
        if (is_null($employees)) {
            throw new \InvalidArgumentException('non-nullable employees cannot be null');
        }
        $this->container['employees'] = $employees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


