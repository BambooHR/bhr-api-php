<?php
/**
 * PayrollExtraPayControllerExtraPayPayment
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollExtraPayControllerExtraPayPayment Class Doc Comment
 *
 * @category Class
 * @description Extra pay payment history entry
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollExtraPayControllerExtraPayPayment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payroll.ExtraPayController.ExtraPayPayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'pay_cycle_wage_id' => 'int',
        'amount' => 'string',
        'pay_type_id' => 'int',
        'pay_type' => 'string',
        'paid_date' => '\DateTime',
        'wage_type' => 'string',
        'payroll_pay_cycle_id' => 'int',
        'pay_date' => '\DateTime',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'pay_cycle_wage_id' => null,
        'amount' => null,
        'pay_type_id' => null,
        'pay_type' => null,
        'paid_date' => 'date',
        'wage_type' => null,
        'payroll_pay_cycle_id' => null,
        'pay_date' => 'date',
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'pay_cycle_wage_id' => false,
        'amount' => false,
        'pay_type_id' => false,
        'pay_type' => false,
        'paid_date' => false,
        'wage_type' => false,
        'payroll_pay_cycle_id' => false,
        'pay_date' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pay_cycle_wage_id' => 'payCycleWageId',
        'amount' => 'amount',
        'pay_type_id' => 'payTypeId',
        'pay_type' => 'payType',
        'paid_date' => 'paidDate',
        'wage_type' => 'wageType',
        'payroll_pay_cycle_id' => 'payrollPayCycleId',
        'pay_date' => 'payDate',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pay_cycle_wage_id' => 'setPayCycleWageId',
        'amount' => 'setAmount',
        'pay_type_id' => 'setPayTypeId',
        'pay_type' => 'setPayType',
        'paid_date' => 'setPaidDate',
        'wage_type' => 'setWageType',
        'payroll_pay_cycle_id' => 'setPayrollPayCycleId',
        'pay_date' => 'setPayDate',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pay_cycle_wage_id' => 'getPayCycleWageId',
        'amount' => 'getAmount',
        'pay_type_id' => 'getPayTypeId',
        'pay_type' => 'getPayType',
        'paid_date' => 'getPaidDate',
        'wage_type' => 'getWageType',
        'payroll_pay_cycle_id' => 'getPayrollPayCycleId',
        'pay_date' => 'getPayDate',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('pay_cycle_wage_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('pay_type_id', $data ?? [], null);
        $this->setIfExists('pay_type', $data ?? [], null);
        $this->setIfExists('paid_date', $data ?? [], null);
        $this->setIfExists('wage_type', $data ?? [], null);
        $this->setIfExists('payroll_pay_cycle_id', $data ?? [], null);
        $this->setIfExists('pay_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pay_cycle_wage_id
     *
     * @return int|null
     */
    public function getPayCycleWageId()
    {
        return $this->container['pay_cycle_wage_id'];
    }

    /**
     * Sets pay_cycle_wage_id
     *
     * @param int|null $pay_cycle_wage_id Pay cycle wage identifier
     *
     * @return self
     */
    public function setPayCycleWageId($pay_cycle_wage_id)
    {
        if (is_null($pay_cycle_wage_id)) {
            throw new \InvalidArgumentException('non-nullable pay_cycle_wage_id cannot be null');
        }
        $this->container['pay_cycle_wage_id'] = $pay_cycle_wage_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount Payment amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets pay_type_id
     *
     * @return int|null
     */
    public function getPayTypeId()
    {
        return $this->container['pay_type_id'];
    }

    /**
     * Sets pay_type_id
     *
     * @param int|null $pay_type_id Pay type identifier
     *
     * @return self
     */
    public function setPayTypeId($pay_type_id)
    {
        if (is_null($pay_type_id)) {
            throw new \InvalidArgumentException('non-nullable pay_type_id cannot be null');
        }
        $this->container['pay_type_id'] = $pay_type_id;

        return $this;
    }

    /**
     * Gets pay_type
     *
     * @return string|null
     */
    public function getPayType()
    {
        return $this->container['pay_type'];
    }

    /**
     * Sets pay_type
     *
     * @param string|null $pay_type Pay type name
     *
     * @return self
     */
    public function setPayType($pay_type)
    {
        if (is_null($pay_type)) {
            throw new \InvalidArgumentException('non-nullable pay_type cannot be null');
        }
        $this->container['pay_type'] = $pay_type;

        return $this;
    }

    /**
     * Gets paid_date
     *
     * @return \DateTime|null
     */
    public function getPaidDate()
    {
        return $this->container['paid_date'];
    }

    /**
     * Sets paid_date
     *
     * @param \DateTime|null $paid_date Date payment was made
     *
     * @return self
     */
    public function setPaidDate($paid_date)
    {
        if (is_null($paid_date)) {
            throw new \InvalidArgumentException('non-nullable paid_date cannot be null');
        }
        $this->container['paid_date'] = $paid_date;

        return $this;
    }

    /**
     * Gets wage_type
     *
     * @return string|null
     */
    public function getWageType()
    {
        return $this->container['wage_type'];
    }

    /**
     * Sets wage_type
     *
     * @param string|null $wage_type Type of wage
     *
     * @return self
     */
    public function setWageType($wage_type)
    {
        if (is_null($wage_type)) {
            throw new \InvalidArgumentException('non-nullable wage_type cannot be null');
        }
        $this->container['wage_type'] = $wage_type;

        return $this;
    }

    /**
     * Gets payroll_pay_cycle_id
     *
     * @return int|null
     */
    public function getPayrollPayCycleId()
    {
        return $this->container['payroll_pay_cycle_id'];
    }

    /**
     * Sets payroll_pay_cycle_id
     *
     * @param int|null $payroll_pay_cycle_id Payroll pay cycle identifier
     *
     * @return self
     */
    public function setPayrollPayCycleId($payroll_pay_cycle_id)
    {
        if (is_null($payroll_pay_cycle_id)) {
            throw new \InvalidArgumentException('non-nullable payroll_pay_cycle_id cannot be null');
        }
        $this->container['payroll_pay_cycle_id'] = $payroll_pay_cycle_id;

        return $this;
    }

    /**
     * Gets pay_date
     *
     * @return \DateTime|null
     */
    public function getPayDate()
    {
        return $this->container['pay_date'];
    }

    /**
     * Sets pay_date
     *
     * @param \DateTime|null $pay_date Scheduled payment date
     *
     * @return self
     */
    public function setPayDate($pay_date)
    {
        if (is_null($pay_date)) {
            throw new \InvalidArgumentException('non-nullable pay_date cannot be null');
        }
        $this->container['pay_date'] = $pay_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Payment status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


