<?php
/**
 * BankInformationViewObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * BankInformationViewObject Class Doc Comment
 *
 * @category Class
 * @description Bank account information
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BankInformationViewObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BankInformationViewObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'client_id' => 'int',
        'is_legacy' => 'bool',
        'bank_id' => 'string',
        'account_nickname' => 'string',
        'account_number' => 'string',
        'routing_number' => 'string',
        'account_type' => 'string',
        'bank_logo' => 'string',
        'bank_name' => 'string',
        'is_verified' => 'bool',
        'npc_account_number' => 'string',
        'form_ach_authorization' => '\MySdk\Model\BambooHrPayrollDocumentStatusViewObject',
        'form_bank_authorization' => '\MySdk\Model\BambooHrPayrollDocumentStatusViewObject',
        'is_npc_onboarding_flow_manual' => 'bool',
        'pennies_has_been_stored' => 'bool',
        'plaid_status' => 'string',
        'is_plaid_disabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'client_id' => null,
        'is_legacy' => null,
        'bank_id' => null,
        'account_nickname' => null,
        'account_number' => null,
        'routing_number' => null,
        'account_type' => null,
        'bank_logo' => null,
        'bank_name' => null,
        'is_verified' => null,
        'npc_account_number' => null,
        'form_ach_authorization' => null,
        'form_bank_authorization' => null,
        'is_npc_onboarding_flow_manual' => null,
        'pennies_has_been_stored' => null,
        'plaid_status' => null,
        'is_plaid_disabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'client_id' => false,
        'is_legacy' => false,
        'bank_id' => false,
        'account_nickname' => false,
        'account_number' => false,
        'routing_number' => false,
        'account_type' => false,
        'bank_logo' => false,
        'bank_name' => false,
        'is_verified' => false,
        'npc_account_number' => true,
        'form_ach_authorization' => false,
        'form_bank_authorization' => false,
        'is_npc_onboarding_flow_manual' => false,
        'pennies_has_been_stored' => false,
        'plaid_status' => false,
        'is_plaid_disabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'clientId',
        'is_legacy' => 'isLegacy',
        'bank_id' => 'bankId',
        'account_nickname' => 'accountNickname',
        'account_number' => 'accountNumber',
        'routing_number' => 'routingNumber',
        'account_type' => 'accountType',
        'bank_logo' => 'bankLogo',
        'bank_name' => 'bankName',
        'is_verified' => 'isVerified',
        'npc_account_number' => 'npcAccountNumber',
        'form_ach_authorization' => 'formAchAuthorization',
        'form_bank_authorization' => 'formBankAuthorization',
        'is_npc_onboarding_flow_manual' => 'isNpcOnboardingFlowManual',
        'pennies_has_been_stored' => 'penniesHasBeenStored',
        'plaid_status' => 'plaidStatus',
        'is_plaid_disabled' => 'isPlaidDisabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'is_legacy' => 'setIsLegacy',
        'bank_id' => 'setBankId',
        'account_nickname' => 'setAccountNickname',
        'account_number' => 'setAccountNumber',
        'routing_number' => 'setRoutingNumber',
        'account_type' => 'setAccountType',
        'bank_logo' => 'setBankLogo',
        'bank_name' => 'setBankName',
        'is_verified' => 'setIsVerified',
        'npc_account_number' => 'setNpcAccountNumber',
        'form_ach_authorization' => 'setFormAchAuthorization',
        'form_bank_authorization' => 'setFormBankAuthorization',
        'is_npc_onboarding_flow_manual' => 'setIsNpcOnboardingFlowManual',
        'pennies_has_been_stored' => 'setPenniesHasBeenStored',
        'plaid_status' => 'setPlaidStatus',
        'is_plaid_disabled' => 'setIsPlaidDisabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'is_legacy' => 'getIsLegacy',
        'bank_id' => 'getBankId',
        'account_nickname' => 'getAccountNickname',
        'account_number' => 'getAccountNumber',
        'routing_number' => 'getRoutingNumber',
        'account_type' => 'getAccountType',
        'bank_logo' => 'getBankLogo',
        'bank_name' => 'getBankName',
        'is_verified' => 'getIsVerified',
        'npc_account_number' => 'getNpcAccountNumber',
        'form_ach_authorization' => 'getFormAchAuthorization',
        'form_bank_authorization' => 'getFormBankAuthorization',
        'is_npc_onboarding_flow_manual' => 'getIsNpcOnboardingFlowManual',
        'pennies_has_been_stored' => 'getPenniesHasBeenStored',
        'plaid_status' => 'getPlaidStatus',
        'is_plaid_disabled' => 'getIsPlaidDisabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACCOUNT_TYPE_CHECKING = 'Checking';
    public const ACCOUNT_TYPE_SAVINGS = 'Savings';
    public const PLAID_STATUS_LINKED = 'Linked';
    public const PLAID_STATUS_EXEMPT = 'Exempt';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_CHECKING,
            self::ACCOUNT_TYPE_SAVINGS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlaidStatusAllowableValues()
    {
        return [
            self::PLAID_STATUS_LINKED,
            self::PLAID_STATUS_EXEMPT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('is_legacy', $data ?? [], null);
        $this->setIfExists('bank_id', $data ?? [], null);
        $this->setIfExists('account_nickname', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('routing_number', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('bank_logo', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('is_verified', $data ?? [], null);
        $this->setIfExists('npc_account_number', $data ?? [], null);
        $this->setIfExists('form_ach_authorization', $data ?? [], null);
        $this->setIfExists('form_bank_authorization', $data ?? [], null);
        $this->setIfExists('is_npc_onboarding_flow_manual', $data ?? [], null);
        $this->setIfExists('pennies_has_been_stored', $data ?? [], null);
        $this->setIfExists('plaid_status', $data ?? [], null);
        $this->setIfExists('is_plaid_disabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'account_type', must be one of '%s'",
                $this->container['account_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPlaidStatusAllowableValues();
        if (!is_null($this->container['plaid_status']) && !in_array($this->container['plaid_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'plaid_status', must be one of '%s'",
                $this->container['plaid_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return int|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int|null $client_id Client ID
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets is_legacy
     *
     * @return bool|null
     */
    public function getIsLegacy()
    {
        return $this->container['is_legacy'];
    }

    /**
     * Sets is_legacy
     *
     * @param bool|null $is_legacy Whether the bank account is legacy
     *
     * @return self
     */
    public function setIsLegacy($is_legacy)
    {
        if (is_null($is_legacy)) {
            throw new \InvalidArgumentException('non-nullable is_legacy cannot be null');
        }
        $this->container['is_legacy'] = $is_legacy;

        return $this;
    }

    /**
     * Gets bank_id
     *
     * @return string|null
     */
    public function getBankId()
    {
        return $this->container['bank_id'];
    }

    /**
     * Sets bank_id
     *
     * @param string|null $bank_id Bank ID
     *
     * @return self
     */
    public function setBankId($bank_id)
    {
        if (is_null($bank_id)) {
            throw new \InvalidArgumentException('non-nullable bank_id cannot be null');
        }
        $this->container['bank_id'] = $bank_id;

        return $this;
    }

    /**
     * Gets account_nickname
     *
     * @return string|null
     */
    public function getAccountNickname()
    {
        return $this->container['account_nickname'];
    }

    /**
     * Sets account_nickname
     *
     * @param string|null $account_nickname Account nickname
     *
     * @return self
     */
    public function setAccountNickname($account_nickname)
    {
        if (is_null($account_nickname)) {
            throw new \InvalidArgumentException('non-nullable account_nickname cannot be null');
        }
        $this->container['account_nickname'] = $account_nickname;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Account number (masked)
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string|null
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string|null $routing_number Bank routing number
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if (is_null($routing_number)) {
            throw new \InvalidArgumentException('non-nullable routing_number cannot be null');
        }
        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type Account type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'account_type', must be one of '%s'",
                    $account_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets bank_logo
     *
     * @return string|null
     */
    public function getBankLogo()
    {
        return $this->container['bank_logo'];
    }

    /**
     * Sets bank_logo
     *
     * @param string|null $bank_logo URL to bank logo
     *
     * @return self
     */
    public function setBankLogo($bank_logo)
    {
        if (is_null($bank_logo)) {
            throw new \InvalidArgumentException('non-nullable bank_logo cannot be null');
        }
        $this->container['bank_logo'] = $bank_logo;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name Bank name
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            throw new \InvalidArgumentException('non-nullable bank_name cannot be null');
        }
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets is_verified
     *
     * @return bool|null
     */
    public function getIsVerified()
    {
        return $this->container['is_verified'];
    }

    /**
     * Sets is_verified
     *
     * @param bool|null $is_verified Verification status
     *
     * @return self
     */
    public function setIsVerified($is_verified)
    {
        if (is_null($is_verified)) {
            throw new \InvalidArgumentException('non-nullable is_verified cannot be null');
        }
        $this->container['is_verified'] = $is_verified;

        return $this;
    }

    /**
     * Gets npc_account_number
     *
     * @return string|null
     */
    public function getNpcAccountNumber()
    {
        return $this->container['npc_account_number'];
    }

    /**
     * Sets npc_account_number
     *
     * @param string|null $npc_account_number NPC account number
     *
     * @return self
     */
    public function setNpcAccountNumber($npc_account_number)
    {
        if (is_null($npc_account_number)) {
            array_push($this->openAPINullablesSetToNull, 'npc_account_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('npc_account_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['npc_account_number'] = $npc_account_number;

        return $this;
    }

    /**
     * Gets form_ach_authorization
     *
     * @return \MySdk\Model\BambooHrPayrollDocumentStatusViewObject|null
     */
    public function getFormAchAuthorization()
    {
        return $this->container['form_ach_authorization'];
    }

    /**
     * Sets form_ach_authorization
     *
     * @param \MySdk\Model\BambooHrPayrollDocumentStatusViewObject|null $form_ach_authorization form_ach_authorization
     *
     * @return self
     */
    public function setFormAchAuthorization($form_ach_authorization)
    {
        if (is_null($form_ach_authorization)) {
            throw new \InvalidArgumentException('non-nullable form_ach_authorization cannot be null');
        }
        $this->container['form_ach_authorization'] = $form_ach_authorization;

        return $this;
    }

    /**
     * Gets form_bank_authorization
     *
     * @return \MySdk\Model\BambooHrPayrollDocumentStatusViewObject|null
     */
    public function getFormBankAuthorization()
    {
        return $this->container['form_bank_authorization'];
    }

    /**
     * Sets form_bank_authorization
     *
     * @param \MySdk\Model\BambooHrPayrollDocumentStatusViewObject|null $form_bank_authorization form_bank_authorization
     *
     * @return self
     */
    public function setFormBankAuthorization($form_bank_authorization)
    {
        if (is_null($form_bank_authorization)) {
            throw new \InvalidArgumentException('non-nullable form_bank_authorization cannot be null');
        }
        $this->container['form_bank_authorization'] = $form_bank_authorization;

        return $this;
    }

    /**
     * Gets is_npc_onboarding_flow_manual
     *
     * @return bool|null
     */
    public function getIsNpcOnboardingFlowManual()
    {
        return $this->container['is_npc_onboarding_flow_manual'];
    }

    /**
     * Sets is_npc_onboarding_flow_manual
     *
     * @param bool|null $is_npc_onboarding_flow_manual Whether NPC onboarding flow is manual
     *
     * @return self
     */
    public function setIsNpcOnboardingFlowManual($is_npc_onboarding_flow_manual)
    {
        if (is_null($is_npc_onboarding_flow_manual)) {
            throw new \InvalidArgumentException('non-nullable is_npc_onboarding_flow_manual cannot be null');
        }
        $this->container['is_npc_onboarding_flow_manual'] = $is_npc_onboarding_flow_manual;

        return $this;
    }

    /**
     * Gets pennies_has_been_stored
     *
     * @return bool|null
     */
    public function getPenniesHasBeenStored()
    {
        return $this->container['pennies_has_been_stored'];
    }

    /**
     * Sets pennies_has_been_stored
     *
     * @param bool|null $pennies_has_been_stored Whether penny verification has been stored
     *
     * @return self
     */
    public function setPenniesHasBeenStored($pennies_has_been_stored)
    {
        if (is_null($pennies_has_been_stored)) {
            throw new \InvalidArgumentException('non-nullable pennies_has_been_stored cannot be null');
        }
        $this->container['pennies_has_been_stored'] = $pennies_has_been_stored;

        return $this;
    }

    /**
     * Gets plaid_status
     *
     * @return string|null
     */
    public function getPlaidStatus()
    {
        return $this->container['plaid_status'];
    }

    /**
     * Sets plaid_status
     *
     * @param string|null $plaid_status Plaid integration status
     *
     * @return self
     */
    public function setPlaidStatus($plaid_status)
    {
        if (is_null($plaid_status)) {
            throw new \InvalidArgumentException('non-nullable plaid_status cannot be null');
        }
        $allowedValues = $this->getPlaidStatusAllowableValues();
        if (!in_array($plaid_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'plaid_status', must be one of '%s'",
                    $plaid_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['plaid_status'] = $plaid_status;

        return $this;
    }

    /**
     * Gets is_plaid_disabled
     *
     * @return bool|null
     */
    public function getIsPlaidDisabled()
    {
        return $this->container['is_plaid_disabled'];
    }

    /**
     * Sets is_plaid_disabled
     *
     * @param bool|null $is_plaid_disabled Whether Plaid integration is disabled
     *
     * @return self
     */
    public function setIsPlaidDisabled($is_plaid_disabled)
    {
        if (is_null($is_plaid_disabled)) {
            throw new \InvalidArgumentException('non-nullable is_plaid_disabled cannot be null');
        }
        $this->container['is_plaid_disabled'] = $is_plaid_disabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


