<?php
/**
 * TotalRewardsEmployeeStatement
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TotalRewardsEmployeeStatement Class Doc Comment
 *
 * @category Class
 * @description Schema for a total rewards statement
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TotalRewardsEmployeeStatement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TotalRewards-EmployeeStatement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'string',
        'employee_name' => 'string',
        'job_title' => 'string',
        'has_mixed_currency_types' => 'bool',
        'overview_section' => '\MySdk\Model\TotalRewardsOverviewSectionValues',
        'pay_section' => '\MySdk\Model\TotalRewardsTimelineSectionValues',
        'bonus_section' => '\MySdk\Model\TotalRewardsTimelineSectionValues',
        'commission_section' => '\MySdk\Model\TotalRewardsTimelineSectionValues',
        'benefit_section' => '\MySdk\Model\TotalRewardsBenefitSectionValues',
        'equity_section' => '\MySdk\Model\TotalRewardsEquitySectionValues',
        'calendar_section' => '\MySdk\Model\TotalRewardsCalendarSectionValues',
        'extra_pay_section' => '\MySdk\Model\TotalRewardsExtraPaySectionValues',
        'custom_disclaimer_info' => '\MySdk\Model\TotalRewardsCustomDisclaimerInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'employee_name' => null,
        'job_title' => null,
        'has_mixed_currency_types' => 'boolean',
        'overview_section' => null,
        'pay_section' => null,
        'bonus_section' => null,
        'commission_section' => null,
        'benefit_section' => null,
        'equity_section' => null,
        'calendar_section' => null,
        'extra_pay_section' => null,
        'custom_disclaimer_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => true,
        'employee_name' => false,
        'job_title' => true,
        'has_mixed_currency_types' => true,
        'overview_section' => false,
        'pay_section' => true,
        'bonus_section' => true,
        'commission_section' => true,
        'benefit_section' => true,
        'equity_section' => true,
        'calendar_section' => true,
        'extra_pay_section' => true,
        'custom_disclaimer_info' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'employee_name' => 'employeeName',
        'job_title' => 'jobTitle',
        'has_mixed_currency_types' => 'hasMixedCurrencyTypes',
        'overview_section' => 'overviewSection',
        'pay_section' => 'paySection',
        'bonus_section' => 'bonusSection',
        'commission_section' => 'commissionSection',
        'benefit_section' => 'benefitSection',
        'equity_section' => 'equitySection',
        'calendar_section' => 'calendarSection',
        'extra_pay_section' => 'extraPaySection',
        'custom_disclaimer_info' => 'customDisclaimerInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'employee_name' => 'setEmployeeName',
        'job_title' => 'setJobTitle',
        'has_mixed_currency_types' => 'setHasMixedCurrencyTypes',
        'overview_section' => 'setOverviewSection',
        'pay_section' => 'setPaySection',
        'bonus_section' => 'setBonusSection',
        'commission_section' => 'setCommissionSection',
        'benefit_section' => 'setBenefitSection',
        'equity_section' => 'setEquitySection',
        'calendar_section' => 'setCalendarSection',
        'extra_pay_section' => 'setExtraPaySection',
        'custom_disclaimer_info' => 'setCustomDisclaimerInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'employee_name' => 'getEmployeeName',
        'job_title' => 'getJobTitle',
        'has_mixed_currency_types' => 'getHasMixedCurrencyTypes',
        'overview_section' => 'getOverviewSection',
        'pay_section' => 'getPaySection',
        'bonus_section' => 'getBonusSection',
        'commission_section' => 'getCommissionSection',
        'benefit_section' => 'getBenefitSection',
        'equity_section' => 'getEquitySection',
        'calendar_section' => 'getCalendarSection',
        'extra_pay_section' => 'getExtraPaySection',
        'custom_disclaimer_info' => 'getCustomDisclaimerInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_name', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('has_mixed_currency_types', $data ?? [], null);
        $this->setIfExists('overview_section', $data ?? [], null);
        $this->setIfExists('pay_section', $data ?? [], null);
        $this->setIfExists('bonus_section', $data ?? [], null);
        $this->setIfExists('commission_section', $data ?? [], null);
        $this->setIfExists('benefit_section', $data ?? [], null);
        $this->setIfExists('equity_section', $data ?? [], null);
        $this->setIfExists('calendar_section', $data ?? [], null);
        $this->setIfExists('extra_pay_section', $data ?? [], null);
        $this->setIfExists('custom_disclaimer_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return string|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string|null $employee_id Employee Id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            array_push($this->openAPINullablesSetToNull, 'employee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_name
     *
     * @return string|null
     */
    public function getEmployeeName()
    {
        return $this->container['employee_name'];
    }

    /**
     * Sets employee_name
     *
     * @param string|null $employee_name Employee Name
     *
     * @return self
     */
    public function setEmployeeName($employee_name)
    {
        if (is_null($employee_name)) {
            throw new \InvalidArgumentException('non-nullable employee_name cannot be null');
        }
        $this->container['employee_name'] = $employee_name;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Employee Job Title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            array_push($this->openAPINullablesSetToNull, 'job_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets has_mixed_currency_types
     *
     * @return bool|null
     */
    public function getHasMixedCurrencyTypes()
    {
        return $this->container['has_mixed_currency_types'];
    }

    /**
     * Sets has_mixed_currency_types
     *
     * @param bool|null $has_mixed_currency_types Employee statement has multiple currencies
     *
     * @return self
     */
    public function setHasMixedCurrencyTypes($has_mixed_currency_types)
    {
        if (is_null($has_mixed_currency_types)) {
            array_push($this->openAPINullablesSetToNull, 'has_mixed_currency_types');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_mixed_currency_types', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_mixed_currency_types'] = $has_mixed_currency_types;

        return $this;
    }

    /**
     * Gets overview_section
     *
     * @return \MySdk\Model\TotalRewardsOverviewSectionValues|null
     */
    public function getOverviewSection()
    {
        return $this->container['overview_section'];
    }

    /**
     * Sets overview_section
     *
     * @param \MySdk\Model\TotalRewardsOverviewSectionValues|null $overview_section overview_section
     *
     * @return self
     */
    public function setOverviewSection($overview_section)
    {
        if (is_null($overview_section)) {
            throw new \InvalidArgumentException('non-nullable overview_section cannot be null');
        }
        $this->container['overview_section'] = $overview_section;

        return $this;
    }

    /**
     * Gets pay_section
     *
     * @return \MySdk\Model\TotalRewardsTimelineSectionValues|null
     */
    public function getPaySection()
    {
        return $this->container['pay_section'];
    }

    /**
     * Sets pay_section
     *
     * @param \MySdk\Model\TotalRewardsTimelineSectionValues|null $pay_section pay_section
     *
     * @return self
     */
    public function setPaySection($pay_section)
    {
        if (is_null($pay_section)) {
            array_push($this->openAPINullablesSetToNull, 'pay_section');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_section', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_section'] = $pay_section;

        return $this;
    }

    /**
     * Gets bonus_section
     *
     * @return \MySdk\Model\TotalRewardsTimelineSectionValues|null
     */
    public function getBonusSection()
    {
        return $this->container['bonus_section'];
    }

    /**
     * Sets bonus_section
     *
     * @param \MySdk\Model\TotalRewardsTimelineSectionValues|null $bonus_section bonus_section
     *
     * @return self
     */
    public function setBonusSection($bonus_section)
    {
        if (is_null($bonus_section)) {
            array_push($this->openAPINullablesSetToNull, 'bonus_section');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bonus_section', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bonus_section'] = $bonus_section;

        return $this;
    }

    /**
     * Gets commission_section
     *
     * @return \MySdk\Model\TotalRewardsTimelineSectionValues|null
     */
    public function getCommissionSection()
    {
        return $this->container['commission_section'];
    }

    /**
     * Sets commission_section
     *
     * @param \MySdk\Model\TotalRewardsTimelineSectionValues|null $commission_section commission_section
     *
     * @return self
     */
    public function setCommissionSection($commission_section)
    {
        if (is_null($commission_section)) {
            array_push($this->openAPINullablesSetToNull, 'commission_section');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('commission_section', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['commission_section'] = $commission_section;

        return $this;
    }

    /**
     * Gets benefit_section
     *
     * @return \MySdk\Model\TotalRewardsBenefitSectionValues|null
     */
    public function getBenefitSection()
    {
        return $this->container['benefit_section'];
    }

    /**
     * Sets benefit_section
     *
     * @param \MySdk\Model\TotalRewardsBenefitSectionValues|null $benefit_section benefit_section
     *
     * @return self
     */
    public function setBenefitSection($benefit_section)
    {
        if (is_null($benefit_section)) {
            array_push($this->openAPINullablesSetToNull, 'benefit_section');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('benefit_section', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['benefit_section'] = $benefit_section;

        return $this;
    }

    /**
     * Gets equity_section
     *
     * @return \MySdk\Model\TotalRewardsEquitySectionValues|null
     */
    public function getEquitySection()
    {
        return $this->container['equity_section'];
    }

    /**
     * Sets equity_section
     *
     * @param \MySdk\Model\TotalRewardsEquitySectionValues|null $equity_section equity_section
     *
     * @return self
     */
    public function setEquitySection($equity_section)
    {
        if (is_null($equity_section)) {
            array_push($this->openAPINullablesSetToNull, 'equity_section');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('equity_section', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['equity_section'] = $equity_section;

        return $this;
    }

    /**
     * Gets calendar_section
     *
     * @return \MySdk\Model\TotalRewardsCalendarSectionValues|null
     */
    public function getCalendarSection()
    {
        return $this->container['calendar_section'];
    }

    /**
     * Sets calendar_section
     *
     * @param \MySdk\Model\TotalRewardsCalendarSectionValues|null $calendar_section calendar_section
     *
     * @return self
     */
    public function setCalendarSection($calendar_section)
    {
        if (is_null($calendar_section)) {
            array_push($this->openAPINullablesSetToNull, 'calendar_section');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('calendar_section', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['calendar_section'] = $calendar_section;

        return $this;
    }

    /**
     * Gets extra_pay_section
     *
     * @return \MySdk\Model\TotalRewardsExtraPaySectionValues|null
     */
    public function getExtraPaySection()
    {
        return $this->container['extra_pay_section'];
    }

    /**
     * Sets extra_pay_section
     *
     * @param \MySdk\Model\TotalRewardsExtraPaySectionValues|null $extra_pay_section extra_pay_section
     *
     * @return self
     */
    public function setExtraPaySection($extra_pay_section)
    {
        if (is_null($extra_pay_section)) {
            array_push($this->openAPINullablesSetToNull, 'extra_pay_section');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('extra_pay_section', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['extra_pay_section'] = $extra_pay_section;

        return $this;
    }

    /**
     * Gets custom_disclaimer_info
     *
     * @return \MySdk\Model\TotalRewardsCustomDisclaimerInfo|null
     */
    public function getCustomDisclaimerInfo()
    {
        return $this->container['custom_disclaimer_info'];
    }

    /**
     * Sets custom_disclaimer_info
     *
     * @param \MySdk\Model\TotalRewardsCustomDisclaimerInfo|null $custom_disclaimer_info custom_disclaimer_info
     *
     * @return self
     */
    public function setCustomDisclaimerInfo($custom_disclaimer_info)
    {
        if (is_null($custom_disclaimer_info)) {
            array_push($this->openAPINullablesSetToNull, 'custom_disclaimer_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_disclaimer_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_disclaimer_info'] = $custom_disclaimer_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


