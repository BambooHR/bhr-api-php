<?php
/**
 * ScopeAccessDescriptionDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * ScopeAccessDescriptionDataObject Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScopeAccessDescriptionDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScopeAccessDescriptionDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'scope' => 'string',
        'description' => 'string',
        'sub_description' => 'string',
        'visibility' => 'int',
        'assumed_scopes' => 'string[]',
        'scope_category' => 'string',
        'display_name' => 'string',
        'write_access' => 'bool',
        'is_meta_scope' => 'bool',
        'fields' => 'string[]',
        'actions' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'scope' => null,
        'description' => null,
        'sub_description' => null,
        'visibility' => null,
        'assumed_scopes' => null,
        'scope_category' => null,
        'display_name' => null,
        'write_access' => null,
        'is_meta_scope' => null,
        'fields' => null,
        'actions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'scope' => false,
        'description' => false,
        'sub_description' => false,
        'visibility' => false,
        'assumed_scopes' => false,
        'scope_category' => false,
        'display_name' => false,
        'write_access' => true,
        'is_meta_scope' => true,
        'fields' => false,
        'actions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scope' => 'scope',
        'description' => 'description',
        'sub_description' => 'subDescription',
        'visibility' => 'visibility',
        'assumed_scopes' => 'assumedScopes',
        'scope_category' => 'scopeCategory',
        'display_name' => 'displayName',
        'write_access' => 'writeAccess',
        'is_meta_scope' => 'isMetaScope',
        'fields' => 'fields',
        'actions' => 'actions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scope' => 'setScope',
        'description' => 'setDescription',
        'sub_description' => 'setSubDescription',
        'visibility' => 'setVisibility',
        'assumed_scopes' => 'setAssumedScopes',
        'scope_category' => 'setScopeCategory',
        'display_name' => 'setDisplayName',
        'write_access' => 'setWriteAccess',
        'is_meta_scope' => 'setIsMetaScope',
        'fields' => 'setFields',
        'actions' => 'setActions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scope' => 'getScope',
        'description' => 'getDescription',
        'sub_description' => 'getSubDescription',
        'visibility' => 'getVisibility',
        'assumed_scopes' => 'getAssumedScopes',
        'scope_category' => 'getScopeCategory',
        'display_name' => 'getDisplayName',
        'write_access' => 'getWriteAccess',
        'is_meta_scope' => 'getIsMetaScope',
        'fields' => 'getFields',
        'actions' => 'getActions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('sub_description', $data ?? [], null);
        $this->setIfExists('visibility', $data ?? [], null);
        $this->setIfExists('assumed_scopes', $data ?? [], null);
        $this->setIfExists('scope_category', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('write_access', $data ?? [], null);
        $this->setIfExists('is_meta_scope', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('actions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope Scope identifier
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Scope description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets sub_description
     *
     * @return string|null
     */
    public function getSubDescription()
    {
        return $this->container['sub_description'];
    }

    /**
     * Sets sub_description
     *
     * @param string|null $sub_description Scope sub-description
     *
     * @return self
     */
    public function setSubDescription($sub_description)
    {
        if (is_null($sub_description)) {
            throw new \InvalidArgumentException('non-nullable sub_description cannot be null');
        }
        $this->container['sub_description'] = $sub_description;

        return $this;
    }

    /**
     * Gets visibility
     *
     * @return int|null
     */
    public function getVisibility()
    {
        return $this->container['visibility'];
    }

    /**
     * Sets visibility
     *
     * @param int|null $visibility Bitmask of the scope visibility (PUBLIC = 1, PRIVATE = 2)
     *
     * @return self
     */
    public function setVisibility($visibility)
    {
        if (is_null($visibility)) {
            throw new \InvalidArgumentException('non-nullable visibility cannot be null');
        }
        $this->container['visibility'] = $visibility;

        return $this;
    }

    /**
     * Gets assumed_scopes
     *
     * @return string[]|null
     */
    public function getAssumedScopes()
    {
        return $this->container['assumed_scopes'];
    }

    /**
     * Sets assumed_scopes
     *
     * @param string[]|null $assumed_scopes List of scopes whose permissions this scope assumes
     *
     * @return self
     */
    public function setAssumedScopes($assumed_scopes)
    {
        if (is_null($assumed_scopes)) {
            throw new \InvalidArgumentException('non-nullable assumed_scopes cannot be null');
        }
        $this->container['assumed_scopes'] = $assumed_scopes;

        return $this;
    }

    /**
     * Gets scope_category
     *
     * @return string|null
     */
    public function getScopeCategory()
    {
        return $this->container['scope_category'];
    }

    /**
     * Sets scope_category
     *
     * @param string|null $scope_category Category of the scope to show the scopes in groups
     *
     * @return self
     */
    public function setScopeCategory($scope_category)
    {
        if (is_null($scope_category)) {
            throw new \InvalidArgumentException('non-nullable scope_category cannot be null');
        }
        $this->container['scope_category'] = $scope_category;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Scope display name to show to end-users
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets write_access
     *
     * @return bool|null
     */
    public function getWriteAccess()
    {
        return $this->container['write_access'];
    }

    /**
     * Sets write_access
     *
     * @param bool|null $write_access True if the application also has the {scope}.write scope
     *
     * @return self
     */
    public function setWriteAccess($write_access)
    {
        if (is_null($write_access)) {
            array_push($this->openAPINullablesSetToNull, 'write_access');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('write_access', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['write_access'] = $write_access;

        return $this;
    }

    /**
     * Gets is_meta_scope
     *
     * @return bool|null
     */
    public function getIsMetaScope()
    {
        return $this->container['is_meta_scope'];
    }

    /**
     * Sets is_meta_scope
     *
     * @param bool|null $is_meta_scope True this scope is listed inside ApplicationScopeDefinitions::META_SCOPES
     *
     * @return self
     */
    public function setIsMetaScope($is_meta_scope)
    {
        if (is_null($is_meta_scope)) {
            array_push($this->openAPINullablesSetToNull, 'is_meta_scope');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_meta_scope', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_meta_scope'] = $is_meta_scope;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return string[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string[]|null $fields Field permissions granted to this scope
     *
     * @return self
     */
    public function setFields($fields)
    {
        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return string[]|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param string[]|null $actions Action permissions granted to this scope
     *
     * @return self
     */
    public function setActions($actions)
    {
        if (is_null($actions)) {
            throw new \InvalidArgumentException('non-nullable actions cannot be null');
        }
        $this->container['actions'] = $actions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


