<?php
/**
 * CompanyAlertDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * CompanyAlertDataObject Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyAlertDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyAlertDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'bamboo_alert_id' => 'int',
        'schedule' => 'string',
        'due_within' => 'int',
        'due_interval' => 'string',
        'send_to_employee' => 'bool',
        'send_to_manager' => 'bool',
        'send_to_admin' => 'bool',
        'editor_user_id' => 'int',
        'last_edited' => 'mixed',
        'custom_message' => 'string',
        'custom_subject' => 'string',
        'group_by' => 'string',
        'limit_training_to_required' => 'bool',
        'run_at_time' => 'string',
        'run_at_time_zone' => 'string',
        'include_position' => 'bool',
        'include_location' => 'bool',
        'additional_recipient_emails' => 'string[]',
        'employee_ids' => 'string[]',
        'list_value_ids' => 'int[]',
        'filter_list_value_ids' => 'int[]',
        'user_ids' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'bamboo_alert_id' => null,
        'schedule' => null,
        'due_within' => null,
        'due_interval' => null,
        'send_to_employee' => null,
        'send_to_manager' => null,
        'send_to_admin' => null,
        'editor_user_id' => null,
        'last_edited' => null,
        'custom_message' => null,
        'custom_subject' => null,
        'group_by' => null,
        'limit_training_to_required' => null,
        'run_at_time' => null,
        'run_at_time_zone' => null,
        'include_position' => null,
        'include_location' => null,
        'additional_recipient_emails' => null,
        'employee_ids' => null,
        'list_value_ids' => null,
        'filter_list_value_ids' => null,
        'user_ids' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'bamboo_alert_id' => false,
        'schedule' => false,
        'due_within' => true,
        'due_interval' => true,
        'send_to_employee' => false,
        'send_to_manager' => false,
        'send_to_admin' => false,
        'editor_user_id' => true,
        'last_edited' => true,
        'custom_message' => true,
        'custom_subject' => true,
        'group_by' => true,
        'limit_training_to_required' => false,
        'run_at_time' => true,
        'run_at_time_zone' => true,
        'include_position' => false,
        'include_location' => false,
        'additional_recipient_emails' => false,
        'employee_ids' => false,
        'list_value_ids' => false,
        'filter_list_value_ids' => false,
        'user_ids' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'bamboo_alert_id' => 'bambooAlertId',
        'schedule' => 'schedule',
        'due_within' => 'dueWithin',
        'due_interval' => 'dueInterval',
        'send_to_employee' => 'sendToEmployee',
        'send_to_manager' => 'sendToManager',
        'send_to_admin' => 'sendToAdmin',
        'editor_user_id' => 'editorUserId',
        'last_edited' => 'lastEdited',
        'custom_message' => 'customMessage',
        'custom_subject' => 'customSubject',
        'group_by' => 'groupBy',
        'limit_training_to_required' => 'limitTrainingToRequired',
        'run_at_time' => 'runAtTime',
        'run_at_time_zone' => 'runAtTimeZone',
        'include_position' => 'includePosition',
        'include_location' => 'includeLocation',
        'additional_recipient_emails' => 'additionalRecipientEmails',
        'employee_ids' => 'employeeIds',
        'list_value_ids' => 'listValueIds',
        'filter_list_value_ids' => 'filterListValueIds',
        'user_ids' => 'userIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'bamboo_alert_id' => 'setBambooAlertId',
        'schedule' => 'setSchedule',
        'due_within' => 'setDueWithin',
        'due_interval' => 'setDueInterval',
        'send_to_employee' => 'setSendToEmployee',
        'send_to_manager' => 'setSendToManager',
        'send_to_admin' => 'setSendToAdmin',
        'editor_user_id' => 'setEditorUserId',
        'last_edited' => 'setLastEdited',
        'custom_message' => 'setCustomMessage',
        'custom_subject' => 'setCustomSubject',
        'group_by' => 'setGroupBy',
        'limit_training_to_required' => 'setLimitTrainingToRequired',
        'run_at_time' => 'setRunAtTime',
        'run_at_time_zone' => 'setRunAtTimeZone',
        'include_position' => 'setIncludePosition',
        'include_location' => 'setIncludeLocation',
        'additional_recipient_emails' => 'setAdditionalRecipientEmails',
        'employee_ids' => 'setEmployeeIds',
        'list_value_ids' => 'setListValueIds',
        'filter_list_value_ids' => 'setFilterListValueIds',
        'user_ids' => 'setUserIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'bamboo_alert_id' => 'getBambooAlertId',
        'schedule' => 'getSchedule',
        'due_within' => 'getDueWithin',
        'due_interval' => 'getDueInterval',
        'send_to_employee' => 'getSendToEmployee',
        'send_to_manager' => 'getSendToManager',
        'send_to_admin' => 'getSendToAdmin',
        'editor_user_id' => 'getEditorUserId',
        'last_edited' => 'getLastEdited',
        'custom_message' => 'getCustomMessage',
        'custom_subject' => 'getCustomSubject',
        'group_by' => 'getGroupBy',
        'limit_training_to_required' => 'getLimitTrainingToRequired',
        'run_at_time' => 'getRunAtTime',
        'run_at_time_zone' => 'getRunAtTimeZone',
        'include_position' => 'getIncludePosition',
        'include_location' => 'getIncludeLocation',
        'additional_recipient_emails' => 'getAdditionalRecipientEmails',
        'employee_ids' => 'getEmployeeIds',
        'list_value_ids' => 'getListValueIds',
        'filter_list_value_ids' => 'getFilterListValueIds',
        'user_ids' => 'getUserIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SCHEDULE_DAILY = 'daily';
    public const SCHEDULE_WEEKLY = 'weekly';
    public const SCHEDULE_MONTHLY = 'monthly';
    public const SCHEDULE_QUARTERLY = 'quarterly';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScheduleAllowableValues()
    {
        return [
            self::SCHEDULE_DAILY,
            self::SCHEDULE_WEEKLY,
            self::SCHEDULE_MONTHLY,
            self::SCHEDULE_QUARTERLY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('bamboo_alert_id', $data ?? [], null);
        $this->setIfExists('schedule', $data ?? [], null);
        $this->setIfExists('due_within', $data ?? [], null);
        $this->setIfExists('due_interval', $data ?? [], null);
        $this->setIfExists('send_to_employee', $data ?? [], null);
        $this->setIfExists('send_to_manager', $data ?? [], null);
        $this->setIfExists('send_to_admin', $data ?? [], null);
        $this->setIfExists('editor_user_id', $data ?? [], null);
        $this->setIfExists('last_edited', $data ?? [], null);
        $this->setIfExists('custom_message', $data ?? [], null);
        $this->setIfExists('custom_subject', $data ?? [], null);
        $this->setIfExists('group_by', $data ?? [], null);
        $this->setIfExists('limit_training_to_required', $data ?? [], null);
        $this->setIfExists('run_at_time', $data ?? [], null);
        $this->setIfExists('run_at_time_zone', $data ?? [], null);
        $this->setIfExists('include_position', $data ?? [], null);
        $this->setIfExists('include_location', $data ?? [], null);
        $this->setIfExists('additional_recipient_emails', $data ?? [], null);
        $this->setIfExists('employee_ids', $data ?? [], null);
        $this->setIfExists('list_value_ids', $data ?? [], null);
        $this->setIfExists('filter_list_value_ids', $data ?? [], null);
        $this->setIfExists('user_ids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getScheduleAllowableValues();
        if (!is_null($this->container['schedule']) && !in_array($this->container['schedule'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'schedule', must be one of '%s'",
                $this->container['schedule'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique identifier of the company alert.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bamboo_alert_id
     *
     * @return int|null
     */
    public function getBambooAlertId()
    {
        return $this->container['bamboo_alert_id'];
    }

    /**
     * Sets bamboo_alert_id
     *
     * @param int|null $bamboo_alert_id The unique identifier of the Bamboo alert.
     *
     * @return self
     */
    public function setBambooAlertId($bamboo_alert_id)
    {
        if (is_null($bamboo_alert_id)) {
            throw new \InvalidArgumentException('non-nullable bamboo_alert_id cannot be null');
        }
        $this->container['bamboo_alert_id'] = $bamboo_alert_id;

        return $this;
    }

    /**
     * Gets schedule
     *
     * @return string|null
     */
    public function getSchedule()
    {
        return $this->container['schedule'];
    }

    /**
     * Sets schedule
     *
     * @param string|null $schedule The schedule for the company alert.
     *
     * @return self
     */
    public function setSchedule($schedule)
    {
        if (is_null($schedule)) {
            throw new \InvalidArgumentException('non-nullable schedule cannot be null');
        }
        $allowedValues = $this->getScheduleAllowableValues();
        if (!in_array($schedule, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'schedule', must be one of '%s'",
                    $schedule,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['schedule'] = $schedule;

        return $this;
    }

    /**
     * Gets due_within
     *
     * @return int|null
     */
    public function getDueWithin()
    {
        return $this->container['due_within'];
    }

    /**
     * Sets due_within
     *
     * @param int|null $due_within The number of days before the alert is due.
     *
     * @return self
     */
    public function setDueWithin($due_within)
    {
        if (is_null($due_within)) {
            array_push($this->openAPINullablesSetToNull, 'due_within');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('due_within', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['due_within'] = $due_within;

        return $this;
    }

    /**
     * Gets due_interval
     *
     * @return string|null
     */
    public function getDueInterval()
    {
        return $this->container['due_interval'];
    }

    /**
     * Sets due_interval
     *
     * @param string|null $due_interval The interval for the alert.
     *
     * @return self
     */
    public function setDueInterval($due_interval)
    {
        if (is_null($due_interval)) {
            array_push($this->openAPINullablesSetToNull, 'due_interval');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('due_interval', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['due_interval'] = $due_interval;

        return $this;
    }

    /**
     * Gets send_to_employee
     *
     * @return bool|null
     */
    public function getSendToEmployee()
    {
        return $this->container['send_to_employee'];
    }

    /**
     * Sets send_to_employee
     *
     * @param bool|null $send_to_employee Whether the alert should be sent to employees.
     *
     * @return self
     */
    public function setSendToEmployee($send_to_employee)
    {
        if (is_null($send_to_employee)) {
            throw new \InvalidArgumentException('non-nullable send_to_employee cannot be null');
        }
        $this->container['send_to_employee'] = $send_to_employee;

        return $this;
    }

    /**
     * Gets send_to_manager
     *
     * @return bool|null
     */
    public function getSendToManager()
    {
        return $this->container['send_to_manager'];
    }

    /**
     * Sets send_to_manager
     *
     * @param bool|null $send_to_manager Whether the alert should be sent to managers.
     *
     * @return self
     */
    public function setSendToManager($send_to_manager)
    {
        if (is_null($send_to_manager)) {
            throw new \InvalidArgumentException('non-nullable send_to_manager cannot be null');
        }
        $this->container['send_to_manager'] = $send_to_manager;

        return $this;
    }

    /**
     * Gets send_to_admin
     *
     * @return bool|null
     */
    public function getSendToAdmin()
    {
        return $this->container['send_to_admin'];
    }

    /**
     * Sets send_to_admin
     *
     * @param bool|null $send_to_admin Whether the alert should be sent to admins.
     *
     * @return self
     */
    public function setSendToAdmin($send_to_admin)
    {
        if (is_null($send_to_admin)) {
            throw new \InvalidArgumentException('non-nullable send_to_admin cannot be null');
        }
        $this->container['send_to_admin'] = $send_to_admin;

        return $this;
    }

    /**
     * Gets editor_user_id
     *
     * @return int|null
     */
    public function getEditorUserId()
    {
        return $this->container['editor_user_id'];
    }

    /**
     * Sets editor_user_id
     *
     * @param int|null $editor_user_id The user ID of the editor.
     *
     * @return self
     */
    public function setEditorUserId($editor_user_id)
    {
        if (is_null($editor_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'editor_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('editor_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['editor_user_id'] = $editor_user_id;

        return $this;
    }

    /**
     * Gets last_edited
     *
     * @return mixed|null
     */
    public function getLastEdited()
    {
        return $this->container['last_edited'];
    }

    /**
     * Sets last_edited
     *
     * @param mixed|null $last_edited The last edited date of the company alert.
     *
     * @return self
     */
    public function setLastEdited($last_edited)
    {
        if (is_null($last_edited)) {
            array_push($this->openAPINullablesSetToNull, 'last_edited');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_edited', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_edited'] = $last_edited;

        return $this;
    }

    /**
     * Gets custom_message
     *
     * @return string|null
     */
    public function getCustomMessage()
    {
        return $this->container['custom_message'];
    }

    /**
     * Sets custom_message
     *
     * @param string|null $custom_message The custom message for the company alert.
     *
     * @return self
     */
    public function setCustomMessage($custom_message)
    {
        if (is_null($custom_message)) {
            array_push($this->openAPINullablesSetToNull, 'custom_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_message'] = $custom_message;

        return $this;
    }

    /**
     * Gets custom_subject
     *
     * @return string|null
     */
    public function getCustomSubject()
    {
        return $this->container['custom_subject'];
    }

    /**
     * Sets custom_subject
     *
     * @param string|null $custom_subject The custom subject for the company alert.
     *
     * @return self
     */
    public function setCustomSubject($custom_subject)
    {
        if (is_null($custom_subject)) {
            array_push($this->openAPINullablesSetToNull, 'custom_subject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_subject', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_subject'] = $custom_subject;

        return $this;
    }

    /**
     * Gets group_by
     *
     * @return string|null
     */
    public function getGroupBy()
    {
        return $this->container['group_by'];
    }

    /**
     * Sets group_by
     *
     * @param string|null $group_by The group by for the company alert.
     *
     * @return self
     */
    public function setGroupBy($group_by)
    {
        if (is_null($group_by)) {
            array_push($this->openAPINullablesSetToNull, 'group_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['group_by'] = $group_by;

        return $this;
    }

    /**
     * Gets limit_training_to_required
     *
     * @return bool|null
     */
    public function getLimitTrainingToRequired()
    {
        return $this->container['limit_training_to_required'];
    }

    /**
     * Sets limit_training_to_required
     *
     * @param bool|null $limit_training_to_required Whether the training should be limited to required training.
     *
     * @return self
     */
    public function setLimitTrainingToRequired($limit_training_to_required)
    {
        if (is_null($limit_training_to_required)) {
            throw new \InvalidArgumentException('non-nullable limit_training_to_required cannot be null');
        }
        $this->container['limit_training_to_required'] = $limit_training_to_required;

        return $this;
    }

    /**
     * Gets run_at_time
     *
     * @return string|null
     */
    public function getRunAtTime()
    {
        return $this->container['run_at_time'];
    }

    /**
     * Sets run_at_time
     *
     * @param string|null $run_at_time The time the company alert should run at.
     *
     * @return self
     */
    public function setRunAtTime($run_at_time)
    {
        if (is_null($run_at_time)) {
            array_push($this->openAPINullablesSetToNull, 'run_at_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('run_at_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['run_at_time'] = $run_at_time;

        return $this;
    }

    /**
     * Gets run_at_time_zone
     *
     * @return string|null
     */
    public function getRunAtTimeZone()
    {
        return $this->container['run_at_time_zone'];
    }

    /**
     * Sets run_at_time_zone
     *
     * @param string|null $run_at_time_zone The time zone the company alert should run at.
     *
     * @return self
     */
    public function setRunAtTimeZone($run_at_time_zone)
    {
        if (is_null($run_at_time_zone)) {
            array_push($this->openAPINullablesSetToNull, 'run_at_time_zone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('run_at_time_zone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['run_at_time_zone'] = $run_at_time_zone;

        return $this;
    }

    /**
     * Gets include_position
     *
     * @return bool|null
     */
    public function getIncludePosition()
    {
        return $this->container['include_position'];
    }

    /**
     * Sets include_position
     *
     * @param bool|null $include_position Whether the alert should include position.
     *
     * @return self
     */
    public function setIncludePosition($include_position)
    {
        if (is_null($include_position)) {
            throw new \InvalidArgumentException('non-nullable include_position cannot be null');
        }
        $this->container['include_position'] = $include_position;

        return $this;
    }

    /**
     * Gets include_location
     *
     * @return bool|null
     */
    public function getIncludeLocation()
    {
        return $this->container['include_location'];
    }

    /**
     * Sets include_location
     *
     * @param bool|null $include_location Whether the alert should include location.
     *
     * @return self
     */
    public function setIncludeLocation($include_location)
    {
        if (is_null($include_location)) {
            throw new \InvalidArgumentException('non-nullable include_location cannot be null');
        }
        $this->container['include_location'] = $include_location;

        return $this;
    }

    /**
     * Gets additional_recipient_emails
     *
     * @return string[]|null
     */
    public function getAdditionalRecipientEmails()
    {
        return $this->container['additional_recipient_emails'];
    }

    /**
     * Sets additional_recipient_emails
     *
     * @param string[]|null $additional_recipient_emails The additional recipient emails for the company alert.
     *
     * @return self
     */
    public function setAdditionalRecipientEmails($additional_recipient_emails)
    {
        if (is_null($additional_recipient_emails)) {
            throw new \InvalidArgumentException('non-nullable additional_recipient_emails cannot be null');
        }
        $this->container['additional_recipient_emails'] = $additional_recipient_emails;

        return $this;
    }

    /**
     * Gets employee_ids
     *
     * @return string[]|null
     */
    public function getEmployeeIds()
    {
        return $this->container['employee_ids'];
    }

    /**
     * Sets employee_ids
     *
     * @param string[]|null $employee_ids The employee IDs for the company alert.
     *
     * @return self
     */
    public function setEmployeeIds($employee_ids)
    {
        if (is_null($employee_ids)) {
            throw new \InvalidArgumentException('non-nullable employee_ids cannot be null');
        }
        $this->container['employee_ids'] = $employee_ids;

        return $this;
    }

    /**
     * Gets list_value_ids
     *
     * @return int[]|null
     */
    public function getListValueIds()
    {
        return $this->container['list_value_ids'];
    }

    /**
     * Sets list_value_ids
     *
     * @param int[]|null $list_value_ids The list value IDs for the company alert.
     *
     * @return self
     */
    public function setListValueIds($list_value_ids)
    {
        if (is_null($list_value_ids)) {
            throw new \InvalidArgumentException('non-nullable list_value_ids cannot be null');
        }
        $this->container['list_value_ids'] = $list_value_ids;

        return $this;
    }

    /**
     * Gets filter_list_value_ids
     *
     * @return int[]|null
     */
    public function getFilterListValueIds()
    {
        return $this->container['filter_list_value_ids'];
    }

    /**
     * Sets filter_list_value_ids
     *
     * @param int[]|null $filter_list_value_ids The filter list value IDs for the company alert.
     *
     * @return self
     */
    public function setFilterListValueIds($filter_list_value_ids)
    {
        if (is_null($filter_list_value_ids)) {
            throw new \InvalidArgumentException('non-nullable filter_list_value_ids cannot be null');
        }
        $this->container['filter_list_value_ids'] = $filter_list_value_ids;

        return $this;
    }

    /**
     * Gets user_ids
     *
     * @return int[]|null
     */
    public function getUserIds()
    {
        return $this->container['user_ids'];
    }

    /**
     * Sets user_ids
     *
     * @param int[]|null $user_ids The user IDs for the company alert.
     *
     * @return self
     */
    public function setUserIds($user_ids)
    {
        if (is_null($user_ids)) {
            throw new \InvalidArgumentException('non-nullable user_ids cannot be null');
        }
        $this->container['user_ids'] = $user_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


