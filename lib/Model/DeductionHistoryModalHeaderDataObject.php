<?php
/**
 * DeductionHistoryModalHeaderDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * DeductionHistoryModalHeaderDataObject Class Doc Comment
 *
 * @category Class
 * @description Deduction History Modal Header Data Object
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeductionHistoryModalHeaderDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeductionHistoryModalHeaderDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => 'string',
        'type' => 'string',
        'start_date' => 'string',
        'end_date' => 'string',
        'deduction_name' => 'string',
        'coverage_level' => 'string',
        'deduction_type' => 'string',
        'tax_rule' => 'string',
        'employee_pays' => 'float',
        'employee_pays_type' => 'string',
        'employee_pays_percent_type' => 'string',
        'company_pays' => 'float',
        'company_pays_type' => 'string',
        'company_pays_percent_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'type' => null,
        'start_date' => null,
        'end_date' => null,
        'deduction_name' => null,
        'coverage_level' => null,
        'deduction_type' => null,
        'tax_rule' => null,
        'employee_pays' => 'float',
        'employee_pays_type' => null,
        'employee_pays_percent_type' => null,
        'company_pays' => 'float',
        'company_pays_type' => null,
        'company_pays_percent_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
        'type' => false,
        'start_date' => false,
        'end_date' => true,
        'deduction_name' => false,
        'coverage_level' => true,
        'deduction_type' => true,
        'tax_rule' => true,
        'employee_pays' => false,
        'employee_pays_type' => false,
        'employee_pays_percent_type' => true,
        'company_pays' => true,
        'company_pays_type' => true,
        'company_pays_percent_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'type' => 'type',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'deduction_name' => 'deductionName',
        'coverage_level' => 'coverageLevel',
        'deduction_type' => 'deductionType',
        'tax_rule' => 'taxRule',
        'employee_pays' => 'employeePays',
        'employee_pays_type' => 'employeePaysType',
        'employee_pays_percent_type' => 'employeePaysPercentType',
        'company_pays' => 'companyPays',
        'company_pays_type' => 'companyPaysType',
        'company_pays_percent_type' => 'companyPaysPercentType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'type' => 'setType',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'deduction_name' => 'setDeductionName',
        'coverage_level' => 'setCoverageLevel',
        'deduction_type' => 'setDeductionType',
        'tax_rule' => 'setTaxRule',
        'employee_pays' => 'setEmployeePays',
        'employee_pays_type' => 'setEmployeePaysType',
        'employee_pays_percent_type' => 'setEmployeePaysPercentType',
        'company_pays' => 'setCompanyPays',
        'company_pays_type' => 'setCompanyPaysType',
        'company_pays_percent_type' => 'setCompanyPaysPercentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'type' => 'getType',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'deduction_name' => 'getDeductionName',
        'coverage_level' => 'getCoverageLevel',
        'deduction_type' => 'getDeductionType',
        'tax_rule' => 'getTaxRule',
        'employee_pays' => 'getEmployeePays',
        'employee_pays_type' => 'getEmployeePaysType',
        'employee_pays_percent_type' => 'getEmployeePaysPercentType',
        'company_pays' => 'getCompanyPays',
        'company_pays_type' => 'getCompanyPaysType',
        'company_pays_percent_type' => 'getCompanyPaysPercentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('deduction_name', $data ?? [], null);
        $this->setIfExists('coverage_level', $data ?? [], null);
        $this->setIfExists('deduction_type', $data ?? [], null);
        $this->setIfExists('tax_rule', $data ?? [], null);
        $this->setIfExists('employee_pays', $data ?? [], null);
        $this->setIfExists('employee_pays_type', $data ?? [], null);
        $this->setIfExists('employee_pays_percent_type', $data ?? [], null);
        $this->setIfExists('company_pays', $data ?? [], null);
        $this->setIfExists('company_pays_type', $data ?? [], null);
        $this->setIfExists('company_pays_percent_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets deduction_name
     *
     * @return string|null
     */
    public function getDeductionName()
    {
        return $this->container['deduction_name'];
    }

    /**
     * Sets deduction_name
     *
     * @param string|null $deduction_name deduction_name
     *
     * @return self
     */
    public function setDeductionName($deduction_name)
    {
        if (is_null($deduction_name)) {
            throw new \InvalidArgumentException('non-nullable deduction_name cannot be null');
        }
        $this->container['deduction_name'] = $deduction_name;

        return $this;
    }

    /**
     * Gets coverage_level
     *
     * @return string|null
     */
    public function getCoverageLevel()
    {
        return $this->container['coverage_level'];
    }

    /**
     * Sets coverage_level
     *
     * @param string|null $coverage_level coverage_level
     *
     * @return self
     */
    public function setCoverageLevel($coverage_level)
    {
        if (is_null($coverage_level)) {
            array_push($this->openAPINullablesSetToNull, 'coverage_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('coverage_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['coverage_level'] = $coverage_level;

        return $this;
    }

    /**
     * Gets deduction_type
     *
     * @return string|null
     */
    public function getDeductionType()
    {
        return $this->container['deduction_type'];
    }

    /**
     * Sets deduction_type
     *
     * @param string|null $deduction_type deduction_type
     *
     * @return self
     */
    public function setDeductionType($deduction_type)
    {
        if (is_null($deduction_type)) {
            array_push($this->openAPINullablesSetToNull, 'deduction_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deduction_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deduction_type'] = $deduction_type;

        return $this;
    }

    /**
     * Gets tax_rule
     *
     * @return string|null
     */
    public function getTaxRule()
    {
        return $this->container['tax_rule'];
    }

    /**
     * Sets tax_rule
     *
     * @param string|null $tax_rule tax_rule
     *
     * @return self
     */
    public function setTaxRule($tax_rule)
    {
        if (is_null($tax_rule)) {
            array_push($this->openAPINullablesSetToNull, 'tax_rule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_rule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_rule'] = $tax_rule;

        return $this;
    }

    /**
     * Gets employee_pays
     *
     * @return float|null
     */
    public function getEmployeePays()
    {
        return $this->container['employee_pays'];
    }

    /**
     * Sets employee_pays
     *
     * @param float|null $employee_pays employee_pays
     *
     * @return self
     */
    public function setEmployeePays($employee_pays)
    {
        if (is_null($employee_pays)) {
            throw new \InvalidArgumentException('non-nullable employee_pays cannot be null');
        }
        $this->container['employee_pays'] = $employee_pays;

        return $this;
    }

    /**
     * Gets employee_pays_type
     *
     * @return string|null
     */
    public function getEmployeePaysType()
    {
        return $this->container['employee_pays_type'];
    }

    /**
     * Sets employee_pays_type
     *
     * @param string|null $employee_pays_type employee_pays_type
     *
     * @return self
     */
    public function setEmployeePaysType($employee_pays_type)
    {
        if (is_null($employee_pays_type)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_type cannot be null');
        }
        $this->container['employee_pays_type'] = $employee_pays_type;

        return $this;
    }

    /**
     * Gets employee_pays_percent_type
     *
     * @return string|null
     */
    public function getEmployeePaysPercentType()
    {
        return $this->container['employee_pays_percent_type'];
    }

    /**
     * Sets employee_pays_percent_type
     *
     * @param string|null $employee_pays_percent_type employee_pays_percent_type
     *
     * @return self
     */
    public function setEmployeePaysPercentType($employee_pays_percent_type)
    {
        if (is_null($employee_pays_percent_type)) {
            array_push($this->openAPINullablesSetToNull, 'employee_pays_percent_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_pays_percent_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_pays_percent_type'] = $employee_pays_percent_type;

        return $this;
    }

    /**
     * Gets company_pays
     *
     * @return float|null
     */
    public function getCompanyPays()
    {
        return $this->container['company_pays'];
    }

    /**
     * Sets company_pays
     *
     * @param float|null $company_pays company_pays
     *
     * @return self
     */
    public function setCompanyPays($company_pays)
    {
        if (is_null($company_pays)) {
            array_push($this->openAPINullablesSetToNull, 'company_pays');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_pays', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_pays'] = $company_pays;

        return $this;
    }

    /**
     * Gets company_pays_type
     *
     * @return string|null
     */
    public function getCompanyPaysType()
    {
        return $this->container['company_pays_type'];
    }

    /**
     * Sets company_pays_type
     *
     * @param string|null $company_pays_type company_pays_type
     *
     * @return self
     */
    public function setCompanyPaysType($company_pays_type)
    {
        if (is_null($company_pays_type)) {
            array_push($this->openAPINullablesSetToNull, 'company_pays_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_pays_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_pays_type'] = $company_pays_type;

        return $this;
    }

    /**
     * Gets company_pays_percent_type
     *
     * @return string|null
     */
    public function getCompanyPaysPercentType()
    {
        return $this->container['company_pays_percent_type'];
    }

    /**
     * Sets company_pays_percent_type
     *
     * @param string|null $company_pays_percent_type company_pays_percent_type
     *
     * @return self
     */
    public function setCompanyPaysPercentType($company_pays_percent_type)
    {
        if (is_null($company_pays_percent_type)) {
            array_push($this->openAPINullablesSetToNull, 'company_pays_percent_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_pays_percent_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_pays_percent_type'] = $company_pays_percent_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


