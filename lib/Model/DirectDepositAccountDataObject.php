<?php
/**
 * DirectDepositAccountDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * DirectDepositAccountDataObject Class Doc Comment
 *
 * @category Class
 * @description Represents a direct deposit account for an employee, including account details such as account number, routing number, and bank information.
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DirectDepositAccountDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DirectDepositAccountDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'deposit_order' => 'string',
        'account_number' => 'string',
        'masked_account_number' => 'string',
        'routing_number' => 'string',
        'account_type' => 'string',
        'bank_logo_url' => 'string',
        'bank_name' => 'string',
        'rule_amount' => 'string',
        'flat_or_percent_flag' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'end_date' => 'string',
        'nickname' => 'string',
        'version' => 'int',
        'ref_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'deposit_order' => null,
        'account_number' => null,
        'masked_account_number' => null,
        'routing_number' => null,
        'account_type' => null,
        'bank_logo_url' => null,
        'bank_name' => null,
        'rule_amount' => null,
        'flat_or_percent_flag' => null,
        'created_at' => null,
        'updated_at' => null,
        'end_date' => null,
        'nickname' => null,
        'version' => null,
        'ref_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'deposit_order' => false,
        'account_number' => false,
        'masked_account_number' => false,
        'routing_number' => false,
        'account_type' => false,
        'bank_logo_url' => false,
        'bank_name' => false,
        'rule_amount' => false,
        'flat_or_percent_flag' => false,
        'created_at' => false,
        'updated_at' => false,
        'end_date' => false,
        'nickname' => false,
        'version' => false,
        'ref_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'deposit_order' => 'depositOrder',
        'account_number' => 'accountNumber',
        'masked_account_number' => 'maskedAccountNumber',
        'routing_number' => 'routingNumber',
        'account_type' => 'accountType',
        'bank_logo_url' => 'bankLogoUrl',
        'bank_name' => 'bankName',
        'rule_amount' => 'ruleAmount',
        'flat_or_percent_flag' => 'flatOrPercentFlag',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'end_date' => 'endDate',
        'nickname' => 'nickname',
        'version' => 'version',
        'ref_id' => 'refId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'deposit_order' => 'setDepositOrder',
        'account_number' => 'setAccountNumber',
        'masked_account_number' => 'setMaskedAccountNumber',
        'routing_number' => 'setRoutingNumber',
        'account_type' => 'setAccountType',
        'bank_logo_url' => 'setBankLogoUrl',
        'bank_name' => 'setBankName',
        'rule_amount' => 'setRuleAmount',
        'flat_or_percent_flag' => 'setFlatOrPercentFlag',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'end_date' => 'setEndDate',
        'nickname' => 'setNickname',
        'version' => 'setVersion',
        'ref_id' => 'setRefId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'deposit_order' => 'getDepositOrder',
        'account_number' => 'getAccountNumber',
        'masked_account_number' => 'getMaskedAccountNumber',
        'routing_number' => 'getRoutingNumber',
        'account_type' => 'getAccountType',
        'bank_logo_url' => 'getBankLogoUrl',
        'bank_name' => 'getBankName',
        'rule_amount' => 'getRuleAmount',
        'flat_or_percent_flag' => 'getFlatOrPercentFlag',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'end_date' => 'getEndDate',
        'nickname' => 'getNickname',
        'version' => 'getVersion',
        'ref_id' => 'getRefId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('deposit_order', $data ?? [], null);
        $this->setIfExists('account_number', $data ?? [], null);
        $this->setIfExists('masked_account_number', $data ?? [], null);
        $this->setIfExists('routing_number', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('bank_logo_url', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('rule_amount', $data ?? [], null);
        $this->setIfExists('flat_or_percent_flag', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('nickname', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('ref_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier for the direct deposit account
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets deposit_order
     *
     * @return string|null
     */
    public function getDepositOrder()
    {
        return $this->container['deposit_order'];
    }

    /**
     * Sets deposit_order
     *
     * @param string|null $deposit_order Deposit Order
     *
     * @return self
     */
    public function setDepositOrder($deposit_order)
    {
        if (is_null($deposit_order)) {
            throw new \InvalidArgumentException('non-nullable deposit_order cannot be null');
        }
        $this->container['deposit_order'] = $deposit_order;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number Account Number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        if (is_null($account_number)) {
            throw new \InvalidArgumentException('non-nullable account_number cannot be null');
        }
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets masked_account_number
     *
     * @return string|null
     */
    public function getMaskedAccountNumber()
    {
        return $this->container['masked_account_number'];
    }

    /**
     * Sets masked_account_number
     *
     * @param string|null $masked_account_number Masked Account Number
     *
     * @return self
     */
    public function setMaskedAccountNumber($masked_account_number)
    {
        if (is_null($masked_account_number)) {
            throw new \InvalidArgumentException('non-nullable masked_account_number cannot be null');
        }
        $this->container['masked_account_number'] = $masked_account_number;

        return $this;
    }

    /**
     * Gets routing_number
     *
     * @return string|null
     */
    public function getRoutingNumber()
    {
        return $this->container['routing_number'];
    }

    /**
     * Sets routing_number
     *
     * @param string|null $routing_number Routing Number
     *
     * @return self
     */
    public function setRoutingNumber($routing_number)
    {
        if (is_null($routing_number)) {
            throw new \InvalidArgumentException('non-nullable routing_number cannot be null');
        }
        $this->container['routing_number'] = $routing_number;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string|null $account_type Account Type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets bank_logo_url
     *
     * @return string|null
     */
    public function getBankLogoUrl()
    {
        return $this->container['bank_logo_url'];
    }

    /**
     * Sets bank_logo_url
     *
     * @param string|null $bank_logo_url Bank Long URL
     *
     * @return self
     */
    public function setBankLogoUrl($bank_logo_url)
    {
        if (is_null($bank_logo_url)) {
            throw new \InvalidArgumentException('non-nullable bank_logo_url cannot be null');
        }
        $this->container['bank_logo_url'] = $bank_logo_url;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name Bank Name
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            throw new \InvalidArgumentException('non-nullable bank_name cannot be null');
        }
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets rule_amount
     *
     * @return string|null
     */
    public function getRuleAmount()
    {
        return $this->container['rule_amount'];
    }

    /**
     * Sets rule_amount
     *
     * @param string|null $rule_amount Rule Amount
     *
     * @return self
     */
    public function setRuleAmount($rule_amount)
    {
        if (is_null($rule_amount)) {
            throw new \InvalidArgumentException('non-nullable rule_amount cannot be null');
        }
        $this->container['rule_amount'] = $rule_amount;

        return $this;
    }

    /**
     * Gets flat_or_percent_flag
     *
     * @return string|null
     */
    public function getFlatOrPercentFlag()
    {
        return $this->container['flat_or_percent_flag'];
    }

    /**
     * Sets flat_or_percent_flag
     *
     * @param string|null $flat_or_percent_flag Flat or Percent Type
     *
     * @return self
     */
    public function setFlatOrPercentFlag($flat_or_percent_flag)
    {
        if (is_null($flat_or_percent_flag)) {
            throw new \InvalidArgumentException('non-nullable flat_or_percent_flag cannot be null');
        }
        $this->container['flat_or_percent_flag'] = $flat_or_percent_flag;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at Created At
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at Updated At
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date End Date At
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets nickname
     *
     * @return string|null
     */
    public function getNickname()
    {
        return $this->container['nickname'];
    }

    /**
     * Sets nickname
     *
     * @param string|null $nickname Nickname
     *
     * @return self
     */
    public function setNickname($nickname)
    {
        if (is_null($nickname)) {
            throw new \InvalidArgumentException('non-nullable nickname cannot be null');
        }
        $this->container['nickname'] = $nickname;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return int|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param int|null $ref_id The refId
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        if (is_null($ref_id)) {
            throw new \InvalidArgumentException('non-nullable ref_id cannot be null');
        }
        $this->container['ref_id'] = $ref_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


