<?php
/**
 * PtoTabDataTransformer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PtoTabDataTransformer Class Doc Comment
 *
 * @category Class
 * @description Represents the PTO tab data transformer.
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PtoTabDataTransformer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PtoTabDataTransformer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'types' => 'string[]',
        'hire_date_page_id' => 'int',
        'min' => 'int',
        'max' => 'int',
        'year' => 'int',
        'default_history_show' => 'bool',
        'default_history_table' => 'bool',
        'colspan' => 'int',
        'auth_user_id' => 'int',
        'has_pto_policies_perm' => 'bool',
        'has_pto_resource_perm' => 'bool',
        'can_access_pto_hire_date_field' => 'bool',
        'missing_hire_date' => 'bool',
        'history_type_count' => 'int',
        'cards' => '\MySdk\Model\TimeOffTabCardTransformer[]',
        'upcoming_time_off' => '\MySdk\Model\UpcomingTimeOffTransformerOld[]',
        'is_previewing_as_another_user' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'types' => null,
        'hire_date_page_id' => null,
        'min' => null,
        'max' => null,
        'year' => null,
        'default_history_show' => null,
        'default_history_table' => null,
        'colspan' => null,
        'auth_user_id' => null,
        'has_pto_policies_perm' => null,
        'has_pto_resource_perm' => null,
        'can_access_pto_hire_date_field' => null,
        'missing_hire_date' => null,
        'history_type_count' => null,
        'cards' => null,
        'upcoming_time_off' => null,
        'is_previewing_as_another_user' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'types' => false,
        'hire_date_page_id' => false,
        'min' => false,
        'max' => false,
        'year' => false,
        'default_history_show' => false,
        'default_history_table' => false,
        'colspan' => false,
        'auth_user_id' => false,
        'has_pto_policies_perm' => false,
        'has_pto_resource_perm' => false,
        'can_access_pto_hire_date_field' => false,
        'missing_hire_date' => false,
        'history_type_count' => false,
        'cards' => false,
        'upcoming_time_off' => false,
        'is_previewing_as_another_user' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'types' => 'types',
        'hire_date_page_id' => 'hireDatePageId',
        'min' => 'min',
        'max' => 'max',
        'year' => 'year',
        'default_history_show' => 'defaultHistoryShow',
        'default_history_table' => 'defaultHistoryTable',
        'colspan' => 'colspan',
        'auth_user_id' => 'authUserId',
        'has_pto_policies_perm' => 'hasPtoPoliciesPerm',
        'has_pto_resource_perm' => 'hasPtoResourcePerm',
        'can_access_pto_hire_date_field' => 'canAccessPtoHireDateField',
        'missing_hire_date' => 'missingHireDate',
        'history_type_count' => 'historyTypeCount',
        'cards' => 'cards',
        'upcoming_time_off' => 'upcomingTimeOff',
        'is_previewing_as_another_user' => 'isPreviewingAsAnotherUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'types' => 'setTypes',
        'hire_date_page_id' => 'setHireDatePageId',
        'min' => 'setMin',
        'max' => 'setMax',
        'year' => 'setYear',
        'default_history_show' => 'setDefaultHistoryShow',
        'default_history_table' => 'setDefaultHistoryTable',
        'colspan' => 'setColspan',
        'auth_user_id' => 'setAuthUserId',
        'has_pto_policies_perm' => 'setHasPtoPoliciesPerm',
        'has_pto_resource_perm' => 'setHasPtoResourcePerm',
        'can_access_pto_hire_date_field' => 'setCanAccessPtoHireDateField',
        'missing_hire_date' => 'setMissingHireDate',
        'history_type_count' => 'setHistoryTypeCount',
        'cards' => 'setCards',
        'upcoming_time_off' => 'setUpcomingTimeOff',
        'is_previewing_as_another_user' => 'setIsPreviewingAsAnotherUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'types' => 'getTypes',
        'hire_date_page_id' => 'getHireDatePageId',
        'min' => 'getMin',
        'max' => 'getMax',
        'year' => 'getYear',
        'default_history_show' => 'getDefaultHistoryShow',
        'default_history_table' => 'getDefaultHistoryTable',
        'colspan' => 'getColspan',
        'auth_user_id' => 'getAuthUserId',
        'has_pto_policies_perm' => 'getHasPtoPoliciesPerm',
        'has_pto_resource_perm' => 'getHasPtoResourcePerm',
        'can_access_pto_hire_date_field' => 'getCanAccessPtoHireDateField',
        'missing_hire_date' => 'getMissingHireDate',
        'history_type_count' => 'getHistoryTypeCount',
        'cards' => 'getCards',
        'upcoming_time_off' => 'getUpcomingTimeOff',
        'is_previewing_as_another_user' => 'getIsPreviewingAsAnotherUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('types', $data ?? [], null);
        $this->setIfExists('hire_date_page_id', $data ?? [], null);
        $this->setIfExists('min', $data ?? [], null);
        $this->setIfExists('max', $data ?? [], null);
        $this->setIfExists('year', $data ?? [], null);
        $this->setIfExists('default_history_show', $data ?? [], null);
        $this->setIfExists('default_history_table', $data ?? [], null);
        $this->setIfExists('colspan', $data ?? [], null);
        $this->setIfExists('auth_user_id', $data ?? [], null);
        $this->setIfExists('has_pto_policies_perm', $data ?? [], null);
        $this->setIfExists('has_pto_resource_perm', $data ?? [], null);
        $this->setIfExists('can_access_pto_hire_date_field', $data ?? [], null);
        $this->setIfExists('missing_hire_date', $data ?? [], null);
        $this->setIfExists('history_type_count', $data ?? [], null);
        $this->setIfExists('cards', $data ?? [], null);
        $this->setIfExists('upcoming_time_off', $data ?? [], null);
        $this->setIfExists('is_previewing_as_another_user', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets types
     *
     * @return string[]|null
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[]|null $types Class PtoTabDataTransformer
     *
     * @return self
     */
    public function setTypes($types)
    {
        if (is_null($types)) {
            throw new \InvalidArgumentException('non-nullable types cannot be null');
        }
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets hire_date_page_id
     *
     * @return int|null
     */
    public function getHireDatePageId()
    {
        return $this->container['hire_date_page_id'];
    }

    /**
     * Sets hire_date_page_id
     *
     * @param int|null $hire_date_page_id hire_date_page_id
     *
     * @return self
     */
    public function setHireDatePageId($hire_date_page_id)
    {
        if (is_null($hire_date_page_id)) {
            throw new \InvalidArgumentException('non-nullable hire_date_page_id cannot be null');
        }
        $this->container['hire_date_page_id'] = $hire_date_page_id;

        return $this;
    }

    /**
     * Gets min
     *
     * @return int|null
     */
    public function getMin()
    {
        return $this->container['min'];
    }

    /**
     * Sets min
     *
     * @param int|null $min min
     *
     * @return self
     */
    public function setMin($min)
    {
        if (is_null($min)) {
            throw new \InvalidArgumentException('non-nullable min cannot be null');
        }
        $this->container['min'] = $min;

        return $this;
    }

    /**
     * Gets max
     *
     * @return int|null
     */
    public function getMax()
    {
        return $this->container['max'];
    }

    /**
     * Sets max
     *
     * @param int|null $max max
     *
     * @return self
     */
    public function setMax($max)
    {
        if (is_null($max)) {
            throw new \InvalidArgumentException('non-nullable max cannot be null');
        }
        $this->container['max'] = $max;

        return $this;
    }

    /**
     * Gets year
     *
     * @return int|null
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param int|null $year year
     *
     * @return self
     */
    public function setYear($year)
    {
        if (is_null($year)) {
            throw new \InvalidArgumentException('non-nullable year cannot be null');
        }
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets default_history_show
     *
     * @return bool|null
     */
    public function getDefaultHistoryShow()
    {
        return $this->container['default_history_show'];
    }

    /**
     * Sets default_history_show
     *
     * @param bool|null $default_history_show default_history_show
     *
     * @return self
     */
    public function setDefaultHistoryShow($default_history_show)
    {
        if (is_null($default_history_show)) {
            throw new \InvalidArgumentException('non-nullable default_history_show cannot be null');
        }
        $this->container['default_history_show'] = $default_history_show;

        return $this;
    }

    /**
     * Gets default_history_table
     *
     * @return bool|null
     */
    public function getDefaultHistoryTable()
    {
        return $this->container['default_history_table'];
    }

    /**
     * Sets default_history_table
     *
     * @param bool|null $default_history_table default_history_table
     *
     * @return self
     */
    public function setDefaultHistoryTable($default_history_table)
    {
        if (is_null($default_history_table)) {
            throw new \InvalidArgumentException('non-nullable default_history_table cannot be null');
        }
        $this->container['default_history_table'] = $default_history_table;

        return $this;
    }

    /**
     * Gets colspan
     *
     * @return int|null
     */
    public function getColspan()
    {
        return $this->container['colspan'];
    }

    /**
     * Sets colspan
     *
     * @param int|null $colspan colspan
     *
     * @return self
     */
    public function setColspan($colspan)
    {
        if (is_null($colspan)) {
            throw new \InvalidArgumentException('non-nullable colspan cannot be null');
        }
        $this->container['colspan'] = $colspan;

        return $this;
    }

    /**
     * Gets auth_user_id
     *
     * @return int|null
     */
    public function getAuthUserId()
    {
        return $this->container['auth_user_id'];
    }

    /**
     * Sets auth_user_id
     *
     * @param int|null $auth_user_id auth_user_id
     *
     * @return self
     */
    public function setAuthUserId($auth_user_id)
    {
        if (is_null($auth_user_id)) {
            throw new \InvalidArgumentException('non-nullable auth_user_id cannot be null');
        }
        $this->container['auth_user_id'] = $auth_user_id;

        return $this;
    }

    /**
     * Gets has_pto_policies_perm
     *
     * @return bool|null
     */
    public function getHasPtoPoliciesPerm()
    {
        return $this->container['has_pto_policies_perm'];
    }

    /**
     * Sets has_pto_policies_perm
     *
     * @param bool|null $has_pto_policies_perm has_pto_policies_perm
     *
     * @return self
     */
    public function setHasPtoPoliciesPerm($has_pto_policies_perm)
    {
        if (is_null($has_pto_policies_perm)) {
            throw new \InvalidArgumentException('non-nullable has_pto_policies_perm cannot be null');
        }
        $this->container['has_pto_policies_perm'] = $has_pto_policies_perm;

        return $this;
    }

    /**
     * Gets has_pto_resource_perm
     *
     * @return bool|null
     */
    public function getHasPtoResourcePerm()
    {
        return $this->container['has_pto_resource_perm'];
    }

    /**
     * Sets has_pto_resource_perm
     *
     * @param bool|null $has_pto_resource_perm has_pto_resource_perm
     *
     * @return self
     */
    public function setHasPtoResourcePerm($has_pto_resource_perm)
    {
        if (is_null($has_pto_resource_perm)) {
            throw new \InvalidArgumentException('non-nullable has_pto_resource_perm cannot be null');
        }
        $this->container['has_pto_resource_perm'] = $has_pto_resource_perm;

        return $this;
    }

    /**
     * Gets can_access_pto_hire_date_field
     *
     * @return bool|null
     */
    public function getCanAccessPtoHireDateField()
    {
        return $this->container['can_access_pto_hire_date_field'];
    }

    /**
     * Sets can_access_pto_hire_date_field
     *
     * @param bool|null $can_access_pto_hire_date_field can_access_pto_hire_date_field
     *
     * @return self
     */
    public function setCanAccessPtoHireDateField($can_access_pto_hire_date_field)
    {
        if (is_null($can_access_pto_hire_date_field)) {
            throw new \InvalidArgumentException('non-nullable can_access_pto_hire_date_field cannot be null');
        }
        $this->container['can_access_pto_hire_date_field'] = $can_access_pto_hire_date_field;

        return $this;
    }

    /**
     * Gets missing_hire_date
     *
     * @return bool|null
     */
    public function getMissingHireDate()
    {
        return $this->container['missing_hire_date'];
    }

    /**
     * Sets missing_hire_date
     *
     * @param bool|null $missing_hire_date missing_hire_date
     *
     * @return self
     */
    public function setMissingHireDate($missing_hire_date)
    {
        if (is_null($missing_hire_date)) {
            throw new \InvalidArgumentException('non-nullable missing_hire_date cannot be null');
        }
        $this->container['missing_hire_date'] = $missing_hire_date;

        return $this;
    }

    /**
     * Gets history_type_count
     *
     * @return int|null
     */
    public function getHistoryTypeCount()
    {
        return $this->container['history_type_count'];
    }

    /**
     * Sets history_type_count
     *
     * @param int|null $history_type_count history_type_count
     *
     * @return self
     */
    public function setHistoryTypeCount($history_type_count)
    {
        if (is_null($history_type_count)) {
            throw new \InvalidArgumentException('non-nullable history_type_count cannot be null');
        }
        $this->container['history_type_count'] = $history_type_count;

        return $this;
    }

    /**
     * Gets cards
     *
     * @return \MySdk\Model\TimeOffTabCardTransformer[]|null
     */
    public function getCards()
    {
        return $this->container['cards'];
    }

    /**
     * Sets cards
     *
     * @param \MySdk\Model\TimeOffTabCardTransformer[]|null $cards cards
     *
     * @return self
     */
    public function setCards($cards)
    {
        if (is_null($cards)) {
            throw new \InvalidArgumentException('non-nullable cards cannot be null');
        }
        $this->container['cards'] = $cards;

        return $this;
    }

    /**
     * Gets upcoming_time_off
     *
     * @return \MySdk\Model\UpcomingTimeOffTransformerOld[]|null
     */
    public function getUpcomingTimeOff()
    {
        return $this->container['upcoming_time_off'];
    }

    /**
     * Sets upcoming_time_off
     *
     * @param \MySdk\Model\UpcomingTimeOffTransformerOld[]|null $upcoming_time_off upcoming_time_off
     *
     * @return self
     */
    public function setUpcomingTimeOff($upcoming_time_off)
    {
        if (is_null($upcoming_time_off)) {
            throw new \InvalidArgumentException('non-nullable upcoming_time_off cannot be null');
        }
        $this->container['upcoming_time_off'] = $upcoming_time_off;

        return $this;
    }

    /**
     * Gets is_previewing_as_another_user
     *
     * @return bool|null
     */
    public function getIsPreviewingAsAnotherUser()
    {
        return $this->container['is_previewing_as_another_user'];
    }

    /**
     * Sets is_previewing_as_another_user
     *
     * @param bool|null $is_previewing_as_another_user is_previewing_as_another_user
     *
     * @return self
     */
    public function setIsPreviewingAsAnotherUser($is_previewing_as_another_user)
    {
        if (is_null($is_previewing_as_another_user)) {
            throw new \InvalidArgumentException('non-nullable is_previewing_as_another_user cannot be null');
        }
        $this->container['is_previewing_as_another_user'] = $is_previewing_as_another_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


