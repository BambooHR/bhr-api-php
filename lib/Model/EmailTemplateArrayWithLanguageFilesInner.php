<?php
/**
 * EmailTemplateArrayWithLanguageFilesInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmailTemplateArrayWithLanguageFilesInner Class Doc Comment
 *
 * @category Class
 * @description Files attached to the email template
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailTemplateArrayWithLanguageFilesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailTemplateArrayWithLanguage_files_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'archived' => 'string',
        'created' => '\DateTime',
        'created_user_id' => 'int',
        'description' => 'string',
        'esignature_template_id' => 'int',
        'file_content' => 'string',
        'file_data_id' => 'int',
        'file_id' => 'int',
        'file_on_s3' => 'string',
        'file_section_id' => 'int',
        'generate_preview_on_upload' => 'string',
        'id' => 'int',
        'mime_content_type' => 'string',
        'mime_type' => 'string',
        'mode' => 'string',
        'most_recent_file_data_id' => 'int',
        'name' => 'string',
        'original_file_name' => 'string',
        'parent_id' => 'int',
        'parent_type' => 'string',
        'preview' => 'string',
        'preview_requested_ymdt' => '\DateTime',
        'scan_complete' => 'string',
        'scan_info' => 'string',
        'share_with_employees' => 'int',
        'size' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'archived' => null,
        'created' => 'date-time',
        'created_user_id' => null,
        'description' => null,
        'esignature_template_id' => null,
        'file_content' => null,
        'file_data_id' => null,
        'file_id' => null,
        'file_on_s3' => null,
        'file_section_id' => null,
        'generate_preview_on_upload' => null,
        'id' => null,
        'mime_content_type' => null,
        'mime_type' => null,
        'mode' => null,
        'most_recent_file_data_id' => null,
        'name' => null,
        'original_file_name' => null,
        'parent_id' => null,
        'parent_type' => null,
        'preview' => null,
        'preview_requested_ymdt' => 'date-time',
        'scan_complete' => null,
        'scan_info' => null,
        'share_with_employees' => null,
        'size' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'archived' => false,
        'created' => false,
        'created_user_id' => false,
        'description' => true,
        'esignature_template_id' => true,
        'file_content' => true,
        'file_data_id' => false,
        'file_id' => false,
        'file_on_s3' => false,
        'file_section_id' => false,
        'generate_preview_on_upload' => false,
        'id' => false,
        'mime_content_type' => true,
        'mime_type' => false,
        'mode' => true,
        'most_recent_file_data_id' => false,
        'name' => false,
        'original_file_name' => false,
        'parent_id' => false,
        'parent_type' => false,
        'preview' => false,
        'preview_requested_ymdt' => true,
        'scan_complete' => false,
        'scan_info' => true,
        'share_with_employees' => false,
        'size' => false,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'archived' => 'archived',
        'created' => 'created',
        'created_user_id' => 'createdUserId',
        'description' => 'description',
        'esignature_template_id' => 'esignatureTemplateId',
        'file_content' => 'fileContent',
        'file_data_id' => 'fileDataId',
        'file_id' => 'fileId',
        'file_on_s3' => 'fileOnS3',
        'file_section_id' => 'fileSectionId',
        'generate_preview_on_upload' => 'generatePreviewOnUpload',
        'id' => 'id',
        'mime_content_type' => 'mimeContentType',
        'mime_type' => 'mimeType',
        'mode' => 'mode',
        'most_recent_file_data_id' => 'mostRecentFileDataId',
        'name' => 'name',
        'original_file_name' => 'originalFileName',
        'parent_id' => 'parentId',
        'parent_type' => 'parentType',
        'preview' => 'preview',
        'preview_requested_ymdt' => 'previewRequestedYmdt',
        'scan_complete' => 'scanComplete',
        'scan_info' => 'scanInfo',
        'share_with_employees' => 'shareWithEmployees',
        'size' => 'size',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'archived' => 'setArchived',
        'created' => 'setCreated',
        'created_user_id' => 'setCreatedUserId',
        'description' => 'setDescription',
        'esignature_template_id' => 'setEsignatureTemplateId',
        'file_content' => 'setFileContent',
        'file_data_id' => 'setFileDataId',
        'file_id' => 'setFileId',
        'file_on_s3' => 'setFileOnS3',
        'file_section_id' => 'setFileSectionId',
        'generate_preview_on_upload' => 'setGeneratePreviewOnUpload',
        'id' => 'setId',
        'mime_content_type' => 'setMimeContentType',
        'mime_type' => 'setMimeType',
        'mode' => 'setMode',
        'most_recent_file_data_id' => 'setMostRecentFileDataId',
        'name' => 'setName',
        'original_file_name' => 'setOriginalFileName',
        'parent_id' => 'setParentId',
        'parent_type' => 'setParentType',
        'preview' => 'setPreview',
        'preview_requested_ymdt' => 'setPreviewRequestedYmdt',
        'scan_complete' => 'setScanComplete',
        'scan_info' => 'setScanInfo',
        'share_with_employees' => 'setShareWithEmployees',
        'size' => 'setSize',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'archived' => 'getArchived',
        'created' => 'getCreated',
        'created_user_id' => 'getCreatedUserId',
        'description' => 'getDescription',
        'esignature_template_id' => 'getEsignatureTemplateId',
        'file_content' => 'getFileContent',
        'file_data_id' => 'getFileDataId',
        'file_id' => 'getFileId',
        'file_on_s3' => 'getFileOnS3',
        'file_section_id' => 'getFileSectionId',
        'generate_preview_on_upload' => 'getGeneratePreviewOnUpload',
        'id' => 'getId',
        'mime_content_type' => 'getMimeContentType',
        'mime_type' => 'getMimeType',
        'mode' => 'getMode',
        'most_recent_file_data_id' => 'getMostRecentFileDataId',
        'name' => 'getName',
        'original_file_name' => 'getOriginalFileName',
        'parent_id' => 'getParentId',
        'parent_type' => 'getParentType',
        'preview' => 'getPreview',
        'preview_requested_ymdt' => 'getPreviewRequestedYmdt',
        'scan_complete' => 'getScanComplete',
        'scan_info' => 'getScanInfo',
        'share_with_employees' => 'getShareWithEmployees',
        'size' => 'getSize',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('created_user_id', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('esignature_template_id', $data ?? [], null);
        $this->setIfExists('file_content', $data ?? [], null);
        $this->setIfExists('file_data_id', $data ?? [], null);
        $this->setIfExists('file_id', $data ?? [], null);
        $this->setIfExists('file_on_s3', $data ?? [], null);
        $this->setIfExists('file_section_id', $data ?? [], null);
        $this->setIfExists('generate_preview_on_upload', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('mime_content_type', $data ?? [], null);
        $this->setIfExists('mime_type', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('most_recent_file_data_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('original_file_name', $data ?? [], null);
        $this->setIfExists('parent_id', $data ?? [], null);
        $this->setIfExists('parent_type', $data ?? [], null);
        $this->setIfExists('preview', $data ?? [], null);
        $this->setIfExists('preview_requested_ymdt', $data ?? [], null);
        $this->setIfExists('scan_complete', $data ?? [], null);
        $this->setIfExists('scan_info', $data ?? [], null);
        $this->setIfExists('share_with_employees', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets archived
     *
     * @return string|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param string|null $archived Archived status
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created Creation date
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets created_user_id
     *
     * @return int|null
     */
    public function getCreatedUserId()
    {
        return $this->container['created_user_id'];
    }

    /**
     * Sets created_user_id
     *
     * @param int|null $created_user_id ID of the user who created the file
     *
     * @return self
     */
    public function setCreatedUserId($created_user_id)
    {
        if (is_null($created_user_id)) {
            throw new \InvalidArgumentException('non-nullable created_user_id cannot be null');
        }
        $this->container['created_user_id'] = $created_user_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the file
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets esignature_template_id
     *
     * @return int|null
     */
    public function getEsignatureTemplateId()
    {
        return $this->container['esignature_template_id'];
    }

    /**
     * Sets esignature_template_id
     *
     * @param int|null $esignature_template_id E-signature template ID
     *
     * @return self
     */
    public function setEsignatureTemplateId($esignature_template_id)
    {
        if (is_null($esignature_template_id)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_template_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_template_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_template_id'] = $esignature_template_id;

        return $this;
    }

    /**
     * Gets file_content
     *
     * @return string|null
     */
    public function getFileContent()
    {
        return $this->container['file_content'];
    }

    /**
     * Sets file_content
     *
     * @param string|null $file_content Content of the file
     *
     * @return self
     */
    public function setFileContent($file_content)
    {
        if (is_null($file_content)) {
            array_push($this->openAPINullablesSetToNull, 'file_content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_content'] = $file_content;

        return $this;
    }

    /**
     * Gets file_data_id
     *
     * @return int|null
     */
    public function getFileDataId()
    {
        return $this->container['file_data_id'];
    }

    /**
     * Sets file_data_id
     *
     * @param int|null $file_data_id File data ID
     *
     * @return self
     */
    public function setFileDataId($file_data_id)
    {
        if (is_null($file_data_id)) {
            throw new \InvalidArgumentException('non-nullable file_data_id cannot be null');
        }
        $this->container['file_data_id'] = $file_data_id;

        return $this;
    }

    /**
     * Gets file_id
     *
     * @return int|null
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param int|null $file_id File ID
     *
     * @return self
     */
    public function setFileId($file_id)
    {
        if (is_null($file_id)) {
            throw new \InvalidArgumentException('non-nullable file_id cannot be null');
        }
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets file_on_s3
     *
     * @return string|null
     */
    public function getFileOnS3()
    {
        return $this->container['file_on_s3'];
    }

    /**
     * Sets file_on_s3
     *
     * @param string|null $file_on_s3 Indicates if the file is on S3
     *
     * @return self
     */
    public function setFileOnS3($file_on_s3)
    {
        if (is_null($file_on_s3)) {
            throw new \InvalidArgumentException('non-nullable file_on_s3 cannot be null');
        }
        $this->container['file_on_s3'] = $file_on_s3;

        return $this;
    }

    /**
     * Gets file_section_id
     *
     * @return int|null
     */
    public function getFileSectionId()
    {
        return $this->container['file_section_id'];
    }

    /**
     * Sets file_section_id
     *
     * @param int|null $file_section_id File section ID
     *
     * @return self
     */
    public function setFileSectionId($file_section_id)
    {
        if (is_null($file_section_id)) {
            throw new \InvalidArgumentException('non-nullable file_section_id cannot be null');
        }
        $this->container['file_section_id'] = $file_section_id;

        return $this;
    }

    /**
     * Gets generate_preview_on_upload
     *
     * @return string|null
     */
    public function getGeneratePreviewOnUpload()
    {
        return $this->container['generate_preview_on_upload'];
    }

    /**
     * Sets generate_preview_on_upload
     *
     * @param string|null $generate_preview_on_upload Indicates if preview should be generated on upload
     *
     * @return self
     */
    public function setGeneratePreviewOnUpload($generate_preview_on_upload)
    {
        if (is_null($generate_preview_on_upload)) {
            throw new \InvalidArgumentException('non-nullable generate_preview_on_upload cannot be null');
        }
        $this->container['generate_preview_on_upload'] = $generate_preview_on_upload;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID of the file
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets mime_content_type
     *
     * @return string|null
     */
    public function getMimeContentType()
    {
        return $this->container['mime_content_type'];
    }

    /**
     * Sets mime_content_type
     *
     * @param string|null $mime_content_type MIME content type
     *
     * @return self
     */
    public function setMimeContentType($mime_content_type)
    {
        if (is_null($mime_content_type)) {
            array_push($this->openAPINullablesSetToNull, 'mime_content_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mime_content_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mime_content_type'] = $mime_content_type;

        return $this;
    }

    /**
     * Gets mime_type
     *
     * @return string|null
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string|null $mime_type MIME type
     *
     * @return self
     */
    public function setMimeType($mime_type)
    {
        if (is_null($mime_type)) {
            throw new \InvalidArgumentException('non-nullable mime_type cannot be null');
        }
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode Mode of the file
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            array_push($this->openAPINullablesSetToNull, 'mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets most_recent_file_data_id
     *
     * @return int|null
     */
    public function getMostRecentFileDataId()
    {
        return $this->container['most_recent_file_data_id'];
    }

    /**
     * Sets most_recent_file_data_id
     *
     * @param int|null $most_recent_file_data_id Most recent file data ID
     *
     * @return self
     */
    public function setMostRecentFileDataId($most_recent_file_data_id)
    {
        if (is_null($most_recent_file_data_id)) {
            throw new \InvalidArgumentException('non-nullable most_recent_file_data_id cannot be null');
        }
        $this->container['most_recent_file_data_id'] = $most_recent_file_data_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the file
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets original_file_name
     *
     * @return string|null
     */
    public function getOriginalFileName()
    {
        return $this->container['original_file_name'];
    }

    /**
     * Sets original_file_name
     *
     * @param string|null $original_file_name Original file name
     *
     * @return self
     */
    public function setOriginalFileName($original_file_name)
    {
        if (is_null($original_file_name)) {
            throw new \InvalidArgumentException('non-nullable original_file_name cannot be null');
        }
        $this->container['original_file_name'] = $original_file_name;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id Parent ID
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        if (is_null($parent_id)) {
            throw new \InvalidArgumentException('non-nullable parent_id cannot be null');
        }
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets parent_type
     *
     * @return string|null
     */
    public function getParentType()
    {
        return $this->container['parent_type'];
    }

    /**
     * Sets parent_type
     *
     * @param string|null $parent_type Parent type
     *
     * @return self
     */
    public function setParentType($parent_type)
    {
        if (is_null($parent_type)) {
            throw new \InvalidArgumentException('non-nullable parent_type cannot be null');
        }
        $this->container['parent_type'] = $parent_type;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return string|null
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param string|null $preview Indicates if preview is available
     *
     * @return self
     */
    public function setPreview($preview)
    {
        if (is_null($preview)) {
            throw new \InvalidArgumentException('non-nullable preview cannot be null');
        }
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets preview_requested_ymdt
     *
     * @return \DateTime|null
     */
    public function getPreviewRequestedYmdt()
    {
        return $this->container['preview_requested_ymdt'];
    }

    /**
     * Sets preview_requested_ymdt
     *
     * @param \DateTime|null $preview_requested_ymdt Preview requested date and time
     *
     * @return self
     */
    public function setPreviewRequestedYmdt($preview_requested_ymdt)
    {
        if (is_null($preview_requested_ymdt)) {
            array_push($this->openAPINullablesSetToNull, 'preview_requested_ymdt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preview_requested_ymdt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preview_requested_ymdt'] = $preview_requested_ymdt;

        return $this;
    }

    /**
     * Gets scan_complete
     *
     * @return string|null
     */
    public function getScanComplete()
    {
        return $this->container['scan_complete'];
    }

    /**
     * Sets scan_complete
     *
     * @param string|null $scan_complete Indicates if scan is complete
     *
     * @return self
     */
    public function setScanComplete($scan_complete)
    {
        if (is_null($scan_complete)) {
            throw new \InvalidArgumentException('non-nullable scan_complete cannot be null');
        }
        $this->container['scan_complete'] = $scan_complete;

        return $this;
    }

    /**
     * Gets scan_info
     *
     * @return string|null
     */
    public function getScanInfo()
    {
        return $this->container['scan_info'];
    }

    /**
     * Sets scan_info
     *
     * @param string|null $scan_info Scan information
     *
     * @return self
     */
    public function setScanInfo($scan_info)
    {
        if (is_null($scan_info)) {
            array_push($this->openAPINullablesSetToNull, 'scan_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scan_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scan_info'] = $scan_info;

        return $this;
    }

    /**
     * Gets share_with_employees
     *
     * @return int|null
     */
    public function getShareWithEmployees()
    {
        return $this->container['share_with_employees'];
    }

    /**
     * Sets share_with_employees
     *
     * @param int|null $share_with_employees Indicates if the file is shared with employees
     *
     * @return self
     */
    public function setShareWithEmployees($share_with_employees)
    {
        if (is_null($share_with_employees)) {
            throw new \InvalidArgumentException('non-nullable share_with_employees cannot be null');
        }
        $this->container['share_with_employees'] = $share_with_employees;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size Size of the file
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of the file
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


