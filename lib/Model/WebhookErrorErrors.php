<?php
/**
 * WebhookErrorErrors
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * WebhookErrorErrors Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WebhookErrorErrors implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WebhookError_errors';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'error' => 'string',
        'unknown_fields' => '\MySdk\Model\WebhookSubErrorPropertyUnknownFieldsInner[]',
        'monitor_fields' => '\MySdk\Model\InboxDetailsWithPersonsType[]',
        'duplicate_post_string' => 'string[]',
        'post_fields' => '\MySdk\Model\WebhookSubErrorPropertyPostFieldsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'error' => null,
        'unknown_fields' => null,
        'monitor_fields' => null,
        'duplicate_post_string' => null,
        'post_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'error' => false,
        'unknown_fields' => false,
        'monitor_fields' => false,
        'duplicate_post_string' => false,
        'post_fields' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error' => 'error',
        'unknown_fields' => 'unknownFields',
        'monitor_fields' => 'monitorFields',
        'duplicate_post_string' => 'duplicatePostString',
        'post_fields' => 'postFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error' => 'setError',
        'unknown_fields' => 'setUnknownFields',
        'monitor_fields' => 'setMonitorFields',
        'duplicate_post_string' => 'setDuplicatePostString',
        'post_fields' => 'setPostFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error' => 'getError',
        'unknown_fields' => 'getUnknownFields',
        'monitor_fields' => 'getMonitorFields',
        'duplicate_post_string' => 'getDuplicatePostString',
        'post_fields' => 'getPostFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('error', $data ?? [], null);
        $this->setIfExists('unknown_fields', $data ?? [], null);
        $this->setIfExists('monitor_fields', $data ?? [], null);
        $this->setIfExists('duplicate_post_string', $data ?? [], null);
        $this->setIfExists('post_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error
     *
     * @return string|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string|null $error error
     *
     * @return self
     */
    public function setError($error)
    {
        if (is_null($error)) {
            throw new \InvalidArgumentException('non-nullable error cannot be null');
        }
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets unknown_fields
     *
     * @return \MySdk\Model\WebhookSubErrorPropertyUnknownFieldsInner[]|null
     */
    public function getUnknownFields()
    {
        return $this->container['unknown_fields'];
    }

    /**
     * Sets unknown_fields
     *
     * @param \MySdk\Model\WebhookSubErrorPropertyUnknownFieldsInner[]|null $unknown_fields unknown_fields
     *
     * @return self
     */
    public function setUnknownFields($unknown_fields)
    {
        if (is_null($unknown_fields)) {
            throw new \InvalidArgumentException('non-nullable unknown_fields cannot be null');
        }
        $this->container['unknown_fields'] = $unknown_fields;

        return $this;
    }

    /**
     * Gets monitor_fields
     *
     * @return \MySdk\Model\InboxDetailsWithPersonsType[]|null
     */
    public function getMonitorFields()
    {
        return $this->container['monitor_fields'];
    }

    /**
     * Sets monitor_fields
     *
     * @param \MySdk\Model\InboxDetailsWithPersonsType[]|null $monitor_fields monitor_fields
     *
     * @return self
     */
    public function setMonitorFields($monitor_fields)
    {
        if (is_null($monitor_fields)) {
            throw new \InvalidArgumentException('non-nullable monitor_fields cannot be null');
        }
        $this->container['monitor_fields'] = $monitor_fields;

        return $this;
    }

    /**
     * Gets duplicate_post_string
     *
     * @return string[]|null
     */
    public function getDuplicatePostString()
    {
        return $this->container['duplicate_post_string'];
    }

    /**
     * Sets duplicate_post_string
     *
     * @param string[]|null $duplicate_post_string duplicate_post_string
     *
     * @return self
     */
    public function setDuplicatePostString($duplicate_post_string)
    {
        if (is_null($duplicate_post_string)) {
            throw new \InvalidArgumentException('non-nullable duplicate_post_string cannot be null');
        }
        $this->container['duplicate_post_string'] = $duplicate_post_string;

        return $this;
    }

    /**
     * Gets post_fields
     *
     * @return \MySdk\Model\WebhookSubErrorPropertyPostFieldsInner[]|null
     */
    public function getPostFields()
    {
        return $this->container['post_fields'];
    }

    /**
     * Sets post_fields
     *
     * @param \MySdk\Model\WebhookSubErrorPropertyPostFieldsInner[]|null $post_fields post_fields
     *
     * @return self
     */
    public function setPostFields($post_fields)
    {
        if (is_null($post_fields)) {
            throw new \InvalidArgumentException('non-nullable post_fields cannot be null');
        }
        $this->container['post_fields'] = $post_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


