<?php
/**
 * FeedbackAssignmentViewObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * FeedbackAssignmentViewObject Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FeedbackAssignmentViewObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FeedbackAssignmentViewObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_preferred_name' => 'string',
        'employee_id' => 'int',
        'max_feedback_requests' => 'int',
        'reviewers' => 'string[]',
        'can_assign' => 'bool',
        'assignments' => 'string[]',
        'questions' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_preferred_name' => null,
        'employee_id' => null,
        'max_feedback_requests' => null,
        'reviewers' => null,
        'can_assign' => null,
        'assignments' => null,
        'questions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_preferred_name' => false,
        'employee_id' => false,
        'max_feedback_requests' => false,
        'reviewers' => false,
        'can_assign' => false,
        'assignments' => false,
        'questions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_preferred_name' => 'employeePreferredName',
        'employee_id' => 'employeeId',
        'max_feedback_requests' => 'maxFeedbackRequests',
        'reviewers' => 'reviewers',
        'can_assign' => 'canAssign',
        'assignments' => 'assignments',
        'questions' => 'questions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_preferred_name' => 'setEmployeePreferredName',
        'employee_id' => 'setEmployeeId',
        'max_feedback_requests' => 'setMaxFeedbackRequests',
        'reviewers' => 'setReviewers',
        'can_assign' => 'setCanAssign',
        'assignments' => 'setAssignments',
        'questions' => 'setQuestions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_preferred_name' => 'getEmployeePreferredName',
        'employee_id' => 'getEmployeeId',
        'max_feedback_requests' => 'getMaxFeedbackRequests',
        'reviewers' => 'getReviewers',
        'can_assign' => 'getCanAssign',
        'assignments' => 'getAssignments',
        'questions' => 'getQuestions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_preferred_name', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('max_feedback_requests', $data ?? [], null);
        $this->setIfExists('reviewers', $data ?? [], null);
        $this->setIfExists('can_assign', $data ?? [], null);
        $this->setIfExists('assignments', $data ?? [], null);
        $this->setIfExists('questions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_preferred_name
     *
     * @return string|null
     */
    public function getEmployeePreferredName()
    {
        return $this->container['employee_preferred_name'];
    }

    /**
     * Sets employee_preferred_name
     *
     * @param string|null $employee_preferred_name employee_preferred_name
     *
     * @return self
     */
    public function setEmployeePreferredName($employee_preferred_name)
    {
        if (is_null($employee_preferred_name)) {
            throw new \InvalidArgumentException('non-nullable employee_preferred_name cannot be null');
        }
        $this->container['employee_preferred_name'] = $employee_preferred_name;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets max_feedback_requests
     *
     * @return int|null
     */
    public function getMaxFeedbackRequests()
    {
        return $this->container['max_feedback_requests'];
    }

    /**
     * Sets max_feedback_requests
     *
     * @param int|null $max_feedback_requests max_feedback_requests
     *
     * @return self
     */
    public function setMaxFeedbackRequests($max_feedback_requests)
    {
        if (is_null($max_feedback_requests)) {
            throw new \InvalidArgumentException('non-nullable max_feedback_requests cannot be null');
        }
        $this->container['max_feedback_requests'] = $max_feedback_requests;

        return $this;
    }

    /**
     * Gets reviewers
     *
     * @return string[]|null
     */
    public function getReviewers()
    {
        return $this->container['reviewers'];
    }

    /**
     * Sets reviewers
     *
     * @param string[]|null $reviewers reviewers
     *
     * @return self
     */
    public function setReviewers($reviewers)
    {
        if (is_null($reviewers)) {
            throw new \InvalidArgumentException('non-nullable reviewers cannot be null');
        }
        $this->container['reviewers'] = $reviewers;

        return $this;
    }

    /**
     * Gets can_assign
     *
     * @return bool|null
     */
    public function getCanAssign()
    {
        return $this->container['can_assign'];
    }

    /**
     * Sets can_assign
     *
     * @param bool|null $can_assign can_assign
     *
     * @return self
     */
    public function setCanAssign($can_assign)
    {
        if (is_null($can_assign)) {
            throw new \InvalidArgumentException('non-nullable can_assign cannot be null');
        }
        $this->container['can_assign'] = $can_assign;

        return $this;
    }

    /**
     * Gets assignments
     *
     * @return string[]|null
     */
    public function getAssignments()
    {
        return $this->container['assignments'];
    }

    /**
     * Sets assignments
     *
     * @param string[]|null $assignments assignments
     *
     * @return self
     */
    public function setAssignments($assignments)
    {
        if (is_null($assignments)) {
            throw new \InvalidArgumentException('non-nullable assignments cannot be null');
        }
        $this->container['assignments'] = $assignments;

        return $this;
    }

    /**
     * Gets questions
     *
     * @return object|null
     */
    public function getQuestions()
    {
        return $this->container['questions'];
    }

    /**
     * Sets questions
     *
     * @param object|null $questions questions
     *
     * @return self
     */
    public function setQuestions($questions)
    {
        if (is_null($questions)) {
            throw new \InvalidArgumentException('non-nullable questions cannot be null');
        }
        $this->container['questions'] = $questions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


