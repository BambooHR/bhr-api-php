<?php
/**
 * PayrollPrePayrollHoursTimesheetDataResponseDataValue
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollPrePayrollHoursTimesheetDataResponseDataValue Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollPrePayrollHoursTimesheetDataResponseDataValue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payroll_PrePayrollHours_TimesheetDataResponse_data_value';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'approved_by_first_name' => 'string',
        'approved_by_last_name' => 'string',
        'approved_on_date_time' => '\DateTime',
        'approver_core_employee_id' => 'int',
        'approver_user_id' => 'int',
        'approver_permission_denied' => 'bool',
        'core_employee_id' => 'int',
        'employee_number' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'photo_url' => 'string',
        'has_time_tracking' => 'bool',
        'is_clocked_in' => 'bool',
        'job_title' => 'string',
        'pay_cycle_exclusion_type' => 'string',
        'payroll_hours' => '\MySdk\Model\PayrollPrePayrollHoursPayrollHourItem[]',
        'timesheet_hours' => '\MySdk\Model\PayrollPrePayrollHoursTimesheetHourItem[]',
        'timesheet_hours_last_changed_at' => 'int',
        'timesheet_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'approved_by_first_name' => null,
        'approved_by_last_name' => null,
        'approved_on_date_time' => 'date-time',
        'approver_core_employee_id' => null,
        'approver_user_id' => null,
        'approver_permission_denied' => null,
        'core_employee_id' => null,
        'employee_number' => null,
        'first_name' => null,
        'last_name' => null,
        'photo_url' => null,
        'has_time_tracking' => null,
        'is_clocked_in' => null,
        'job_title' => null,
        'pay_cycle_exclusion_type' => null,
        'payroll_hours' => null,
        'timesheet_hours' => null,
        'timesheet_hours_last_changed_at' => null,
        'timesheet_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'approved_by_first_name' => true,
        'approved_by_last_name' => true,
        'approved_on_date_time' => true,
        'approver_core_employee_id' => true,
        'approver_user_id' => true,
        'approver_permission_denied' => false,
        'core_employee_id' => false,
        'employee_number' => false,
        'first_name' => false,
        'last_name' => false,
        'photo_url' => true,
        'has_time_tracking' => false,
        'is_clocked_in' => false,
        'job_title' => true,
        'pay_cycle_exclusion_type' => true,
        'payroll_hours' => false,
        'timesheet_hours' => false,
        'timesheet_hours_last_changed_at' => true,
        'timesheet_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'approved_by_first_name' => 'approvedByFirstName',
        'approved_by_last_name' => 'approvedByLastName',
        'approved_on_date_time' => 'approvedOnDateTime',
        'approver_core_employee_id' => 'approverCoreEmployeeId',
        'approver_user_id' => 'approverUserId',
        'approver_permission_denied' => 'approverPermissionDenied',
        'core_employee_id' => 'coreEmployeeId',
        'employee_number' => 'employeeNumber',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'photo_url' => 'photoUrl',
        'has_time_tracking' => 'hasTimeTracking',
        'is_clocked_in' => 'isClockedIn',
        'job_title' => 'jobTitle',
        'pay_cycle_exclusion_type' => 'payCycleExclusionType',
        'payroll_hours' => 'payrollHours',
        'timesheet_hours' => 'timesheetHours',
        'timesheet_hours_last_changed_at' => 'timesheetHoursLastChangedAt',
        'timesheet_id' => 'timesheetId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'approved_by_first_name' => 'setApprovedByFirstName',
        'approved_by_last_name' => 'setApprovedByLastName',
        'approved_on_date_time' => 'setApprovedOnDateTime',
        'approver_core_employee_id' => 'setApproverCoreEmployeeId',
        'approver_user_id' => 'setApproverUserId',
        'approver_permission_denied' => 'setApproverPermissionDenied',
        'core_employee_id' => 'setCoreEmployeeId',
        'employee_number' => 'setEmployeeNumber',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'photo_url' => 'setPhotoUrl',
        'has_time_tracking' => 'setHasTimeTracking',
        'is_clocked_in' => 'setIsClockedIn',
        'job_title' => 'setJobTitle',
        'pay_cycle_exclusion_type' => 'setPayCycleExclusionType',
        'payroll_hours' => 'setPayrollHours',
        'timesheet_hours' => 'setTimesheetHours',
        'timesheet_hours_last_changed_at' => 'setTimesheetHoursLastChangedAt',
        'timesheet_id' => 'setTimesheetId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'approved_by_first_name' => 'getApprovedByFirstName',
        'approved_by_last_name' => 'getApprovedByLastName',
        'approved_on_date_time' => 'getApprovedOnDateTime',
        'approver_core_employee_id' => 'getApproverCoreEmployeeId',
        'approver_user_id' => 'getApproverUserId',
        'approver_permission_denied' => 'getApproverPermissionDenied',
        'core_employee_id' => 'getCoreEmployeeId',
        'employee_number' => 'getEmployeeNumber',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'photo_url' => 'getPhotoUrl',
        'has_time_tracking' => 'getHasTimeTracking',
        'is_clocked_in' => 'getIsClockedIn',
        'job_title' => 'getJobTitle',
        'pay_cycle_exclusion_type' => 'getPayCycleExclusionType',
        'payroll_hours' => 'getPayrollHours',
        'timesheet_hours' => 'getTimesheetHours',
        'timesheet_hours_last_changed_at' => 'getTimesheetHoursLastChangedAt',
        'timesheet_id' => 'getTimesheetId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAY_CYCLE_EXCLUSION_TYPE_INACTIVE_EMPLOYEE_STATUS = 'inactiveEmployeeStatus';
    public const PAY_CYCLE_EXCLUSION_TYPE_REMOVED_FROM_PAY_CYCLE = 'removedFromPayCycle';
    public const PAY_CYCLE_EXCLUSION_TYPE_DISABLED_FROM_PAYROLL = 'disabledFromPayroll';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayCycleExclusionTypeAllowableValues()
    {
        return [
            self::PAY_CYCLE_EXCLUSION_TYPE_INACTIVE_EMPLOYEE_STATUS,
            self::PAY_CYCLE_EXCLUSION_TYPE_REMOVED_FROM_PAY_CYCLE,
            self::PAY_CYCLE_EXCLUSION_TYPE_DISABLED_FROM_PAYROLL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('approved_by_first_name', $data ?? [], null);
        $this->setIfExists('approved_by_last_name', $data ?? [], null);
        $this->setIfExists('approved_on_date_time', $data ?? [], null);
        $this->setIfExists('approver_core_employee_id', $data ?? [], null);
        $this->setIfExists('approver_user_id', $data ?? [], null);
        $this->setIfExists('approver_permission_denied', $data ?? [], null);
        $this->setIfExists('core_employee_id', $data ?? [], null);
        $this->setIfExists('employee_number', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('photo_url', $data ?? [], null);
        $this->setIfExists('has_time_tracking', $data ?? [], null);
        $this->setIfExists('is_clocked_in', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('pay_cycle_exclusion_type', $data ?? [], null);
        $this->setIfExists('payroll_hours', $data ?? [], null);
        $this->setIfExists('timesheet_hours', $data ?? [], null);
        $this->setIfExists('timesheet_hours_last_changed_at', $data ?? [], null);
        $this->setIfExists('timesheet_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPayCycleExclusionTypeAllowableValues();
        if (!is_null($this->container['pay_cycle_exclusion_type']) && !in_array($this->container['pay_cycle_exclusion_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pay_cycle_exclusion_type', must be one of '%s'",
                $this->container['pay_cycle_exclusion_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets approved_by_first_name
     *
     * @return string|null
     */
    public function getApprovedByFirstName()
    {
        return $this->container['approved_by_first_name'];
    }

    /**
     * Sets approved_by_first_name
     *
     * @param string|null $approved_by_first_name First name of the person who approved the timesheet
     *
     * @return self
     */
    public function setApprovedByFirstName($approved_by_first_name)
    {
        if (is_null($approved_by_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'approved_by_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approved_by_first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approved_by_first_name'] = $approved_by_first_name;

        return $this;
    }

    /**
     * Gets approved_by_last_name
     *
     * @return string|null
     */
    public function getApprovedByLastName()
    {
        return $this->container['approved_by_last_name'];
    }

    /**
     * Sets approved_by_last_name
     *
     * @param string|null $approved_by_last_name Last name of the person who approved the timesheet
     *
     * @return self
     */
    public function setApprovedByLastName($approved_by_last_name)
    {
        if (is_null($approved_by_last_name)) {
            array_push($this->openAPINullablesSetToNull, 'approved_by_last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approved_by_last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approved_by_last_name'] = $approved_by_last_name;

        return $this;
    }

    /**
     * Gets approved_on_date_time
     *
     * @return \DateTime|null
     */
    public function getApprovedOnDateTime()
    {
        return $this->container['approved_on_date_time'];
    }

    /**
     * Sets approved_on_date_time
     *
     * @param \DateTime|null $approved_on_date_time Date and time when the timesheet was approved
     *
     * @return self
     */
    public function setApprovedOnDateTime($approved_on_date_time)
    {
        if (is_null($approved_on_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'approved_on_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approved_on_date_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approved_on_date_time'] = $approved_on_date_time;

        return $this;
    }

    /**
     * Gets approver_core_employee_id
     *
     * @return int|null
     */
    public function getApproverCoreEmployeeId()
    {
        return $this->container['approver_core_employee_id'];
    }

    /**
     * Sets approver_core_employee_id
     *
     * @param int|null $approver_core_employee_id Employee ID of the approver (null if approverPermissionDenied is true)
     *
     * @return self
     */
    public function setApproverCoreEmployeeId($approver_core_employee_id)
    {
        if (is_null($approver_core_employee_id)) {
            array_push($this->openAPINullablesSetToNull, 'approver_core_employee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approver_core_employee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approver_core_employee_id'] = $approver_core_employee_id;

        return $this;
    }

    /**
     * Gets approver_user_id
     *
     * @return int|null
     */
    public function getApproverUserId()
    {
        return $this->container['approver_user_id'];
    }

    /**
     * Sets approver_user_id
     *
     * @param int|null $approver_user_id User ID of the approver
     *
     * @return self
     */
    public function setApproverUserId($approver_user_id)
    {
        if (is_null($approver_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'approver_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approver_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['approver_user_id'] = $approver_user_id;

        return $this;
    }

    /**
     * Gets approver_permission_denied
     *
     * @return bool|null
     */
    public function getApproverPermissionDenied()
    {
        return $this->container['approver_permission_denied'];
    }

    /**
     * Sets approver_permission_denied
     *
     * @param bool|null $approver_permission_denied Indicates whether the user has access to see who the timesheet's approver is
     *
     * @return self
     */
    public function setApproverPermissionDenied($approver_permission_denied)
    {
        if (is_null($approver_permission_denied)) {
            throw new \InvalidArgumentException('non-nullable approver_permission_denied cannot be null');
        }
        $this->container['approver_permission_denied'] = $approver_permission_denied;

        return $this;
    }

    /**
     * Gets core_employee_id
     *
     * @return int|null
     */
    public function getCoreEmployeeId()
    {
        return $this->container['core_employee_id'];
    }

    /**
     * Sets core_employee_id
     *
     * @param int|null $core_employee_id Unique identifier for the employee
     *
     * @return self
     */
    public function setCoreEmployeeId($core_employee_id)
    {
        if (is_null($core_employee_id)) {
            throw new \InvalidArgumentException('non-nullable core_employee_id cannot be null');
        }
        $this->container['core_employee_id'] = $core_employee_id;

        return $this;
    }

    /**
     * Gets employee_number
     *
     * @return string|null
     */
    public function getEmployeeNumber()
    {
        return $this->container['employee_number'];
    }

    /**
     * Sets employee_number
     *
     * @param string|null $employee_number Employee's unique identification number in the system
     *
     * @return self
     */
    public function setEmployeeNumber($employee_number)
    {
        if (is_null($employee_number)) {
            throw new \InvalidArgumentException('non-nullable employee_number cannot be null');
        }
        $this->container['employee_number'] = $employee_number;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Employee's first name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Employee's last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets photo_url
     *
     * @return string|null
     */
    public function getPhotoUrl()
    {
        return $this->container['photo_url'];
    }

    /**
     * Sets photo_url
     *
     * @param string|null $photo_url URL to the employee's profile photo
     *
     * @return self
     */
    public function setPhotoUrl($photo_url)
    {
        if (is_null($photo_url)) {
            array_push($this->openAPINullablesSetToNull, 'photo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photo_url'] = $photo_url;

        return $this;
    }

    /**
     * Gets has_time_tracking
     *
     * @return bool|null
     */
    public function getHasTimeTracking()
    {
        return $this->container['has_time_tracking'];
    }

    /**
     * Sets has_time_tracking
     *
     * @param bool|null $has_time_tracking Indicates whether the employee has time tracking enabled
     *
     * @return self
     */
    public function setHasTimeTracking($has_time_tracking)
    {
        if (is_null($has_time_tracking)) {
            throw new \InvalidArgumentException('non-nullable has_time_tracking cannot be null');
        }
        $this->container['has_time_tracking'] = $has_time_tracking;

        return $this;
    }

    /**
     * Gets is_clocked_in
     *
     * @return bool|null
     */
    public function getIsClockedIn()
    {
        return $this->container['is_clocked_in'];
    }

    /**
     * Sets is_clocked_in
     *
     * @param bool|null $is_clocked_in Indicates whether the employee is currently clocked in
     *
     * @return self
     */
    public function setIsClockedIn($is_clocked_in)
    {
        if (is_null($is_clocked_in)) {
            throw new \InvalidArgumentException('non-nullable is_clocked_in cannot be null');
        }
        $this->container['is_clocked_in'] = $is_clocked_in;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Employee's job title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            array_push($this->openAPINullablesSetToNull, 'job_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets pay_cycle_exclusion_type
     *
     * @return string|null
     */
    public function getPayCycleExclusionType()
    {
        return $this->container['pay_cycle_exclusion_type'];
    }

    /**
     * Sets pay_cycle_exclusion_type
     *
     * @param string|null $pay_cycle_exclusion_type Reason why an employee might be excluded from the pay cycle processing
     *
     * @return self
     */
    public function setPayCycleExclusionType($pay_cycle_exclusion_type)
    {
        if (is_null($pay_cycle_exclusion_type)) {
            array_push($this->openAPINullablesSetToNull, 'pay_cycle_exclusion_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_cycle_exclusion_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPayCycleExclusionTypeAllowableValues();
        if (!is_null($pay_cycle_exclusion_type) && !in_array($pay_cycle_exclusion_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pay_cycle_exclusion_type', must be one of '%s'",
                    $pay_cycle_exclusion_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_cycle_exclusion_type'] = $pay_cycle_exclusion_type;

        return $this;
    }

    /**
     * Gets payroll_hours
     *
     * @return \MySdk\Model\PayrollPrePayrollHoursPayrollHourItem[]|null
     */
    public function getPayrollHours()
    {
        return $this->container['payroll_hours'];
    }

    /**
     * Sets payroll_hours
     *
     * @param \MySdk\Model\PayrollPrePayrollHoursPayrollHourItem[]|null $payroll_hours payroll_hours
     *
     * @return self
     */
    public function setPayrollHours($payroll_hours)
    {
        if (is_null($payroll_hours)) {
            throw new \InvalidArgumentException('non-nullable payroll_hours cannot be null');
        }
        $this->container['payroll_hours'] = $payroll_hours;

        return $this;
    }

    /**
     * Gets timesheet_hours
     *
     * @return \MySdk\Model\PayrollPrePayrollHoursTimesheetHourItem[]|null
     */
    public function getTimesheetHours()
    {
        return $this->container['timesheet_hours'];
    }

    /**
     * Sets timesheet_hours
     *
     * @param \MySdk\Model\PayrollPrePayrollHoursTimesheetHourItem[]|null $timesheet_hours timesheet_hours
     *
     * @return self
     */
    public function setTimesheetHours($timesheet_hours)
    {
        if (is_null($timesheet_hours)) {
            throw new \InvalidArgumentException('non-nullable timesheet_hours cannot be null');
        }
        $this->container['timesheet_hours'] = $timesheet_hours;

        return $this;
    }

    /**
     * Gets timesheet_hours_last_changed_at
     *
     * @return int|null
     */
    public function getTimesheetHoursLastChangedAt()
    {
        return $this->container['timesheet_hours_last_changed_at'];
    }

    /**
     * Sets timesheet_hours_last_changed_at
     *
     * @param int|null $timesheet_hours_last_changed_at Unix timestamp of when the timesheet hours were last modified
     *
     * @return self
     */
    public function setTimesheetHoursLastChangedAt($timesheet_hours_last_changed_at)
    {
        if (is_null($timesheet_hours_last_changed_at)) {
            array_push($this->openAPINullablesSetToNull, 'timesheet_hours_last_changed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('timesheet_hours_last_changed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['timesheet_hours_last_changed_at'] = $timesheet_hours_last_changed_at;

        return $this;
    }

    /**
     * Gets timesheet_id
     *
     * @return int|null
     */
    public function getTimesheetId()
    {
        return $this->container['timesheet_id'];
    }

    /**
     * Sets timesheet_id
     *
     * @param int|null $timesheet_id Unique identifier for the employee's timesheet
     *
     * @return self
     */
    public function setTimesheetId($timesheet_id)
    {
        if (is_null($timesheet_id)) {
            throw new \InvalidArgumentException('non-nullable timesheet_id cannot be null');
        }
        $this->container['timesheet_id'] = $timesheet_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


