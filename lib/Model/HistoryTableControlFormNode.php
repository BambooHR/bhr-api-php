<?php
/**
 * HistoryTableControlFormNode
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * HistoryTableControlFormNode Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HistoryTableControlFormNode implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HistoryTableControlFormNode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'label' => 'string',
        'field_id' => 'string',
        'can_add_rows' => 'bool',
        'can_edit' => 'bool',
        'can_delete_rows' => 'bool',
        'columns' => '\MySdk\Model\HistoryTableControlFormNodeAllOfColumns[]',
        'table_type' => 'string',
        'is_history_table' => 'bool',
        'sort_by_field_ids' => 'string[]',
        'sort_direction' => 'string',
        'rows' => '\MySdk\Model\HistoryTableControlFormNodeAllOfRows[]',
        'groups' => '\MySdk\Model\HistoryTableControlFormNodeAllOfGroups[]',
        'sensitive_table_type' => 'string',
        'sensitive_field_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'label' => null,
        'field_id' => null,
        'can_add_rows' => null,
        'can_edit' => null,
        'can_delete_rows' => null,
        'columns' => null,
        'table_type' => null,
        'is_history_table' => null,
        'sort_by_field_ids' => null,
        'sort_direction' => null,
        'rows' => null,
        'groups' => null,
        'sensitive_table_type' => null,
        'sensitive_field_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => false,
        'label' => false,
        'field_id' => false,
        'can_add_rows' => false,
        'can_edit' => false,
        'can_delete_rows' => false,
        'columns' => false,
        'table_type' => false,
        'is_history_table' => false,
        'sort_by_field_ids' => false,
        'sort_direction' => false,
        'rows' => false,
        'groups' => false,
        'sensitive_table_type' => false,
        'sensitive_field_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'label' => 'label',
        'field_id' => 'fieldId',
        'can_add_rows' => 'canAddRows',
        'can_edit' => 'canEdit',
        'can_delete_rows' => 'canDeleteRows',
        'columns' => 'columns',
        'table_type' => 'tableType',
        'is_history_table' => 'isHistoryTable',
        'sort_by_field_ids' => 'sortByFieldIds',
        'sort_direction' => 'sortDirection',
        'rows' => 'rows',
        'groups' => 'groups',
        'sensitive_table_type' => 'sensitiveTableType',
        'sensitive_field_id' => 'sensitiveFieldId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'label' => 'setLabel',
        'field_id' => 'setFieldId',
        'can_add_rows' => 'setCanAddRows',
        'can_edit' => 'setCanEdit',
        'can_delete_rows' => 'setCanDeleteRows',
        'columns' => 'setColumns',
        'table_type' => 'setTableType',
        'is_history_table' => 'setIsHistoryTable',
        'sort_by_field_ids' => 'setSortByFieldIds',
        'sort_direction' => 'setSortDirection',
        'rows' => 'setRows',
        'groups' => 'setGroups',
        'sensitive_table_type' => 'setSensitiveTableType',
        'sensitive_field_id' => 'setSensitiveFieldId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'label' => 'getLabel',
        'field_id' => 'getFieldId',
        'can_add_rows' => 'getCanAddRows',
        'can_edit' => 'getCanEdit',
        'can_delete_rows' => 'getCanDeleteRows',
        'columns' => 'getColumns',
        'table_type' => 'getTableType',
        'is_history_table' => 'getIsHistoryTable',
        'sort_by_field_ids' => 'getSortByFieldIds',
        'sort_direction' => 'getSortDirection',
        'rows' => 'getRows',
        'groups' => 'getGroups',
        'sensitive_table_type' => 'getSensitiveTableType',
        'sensitive_field_id' => 'getSensitiveFieldId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('field_id', $data ?? [], null);
        $this->setIfExists('can_add_rows', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('can_delete_rows', $data ?? [], null);
        $this->setIfExists('columns', $data ?? [], null);
        $this->setIfExists('table_type', $data ?? [], null);
        $this->setIfExists('is_history_table', $data ?? [], null);
        $this->setIfExists('sort_by_field_ids', $data ?? [], null);
        $this->setIfExists('sort_direction', $data ?? [], null);
        $this->setIfExists('rows', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('sensitive_table_type', $data ?? [], null);
        $this->setIfExists('sensitive_field_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the node
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of the form node
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Table label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets field_id
     *
     * @return string|null
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param string|null $field_id Field identifier
     *
     * @return self
     */
    public function setFieldId($field_id)
    {
        if (is_null($field_id)) {
            throw new \InvalidArgumentException('non-nullable field_id cannot be null');
        }
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets can_add_rows
     *
     * @return bool|null
     */
    public function getCanAddRows()
    {
        return $this->container['can_add_rows'];
    }

    /**
     * Sets can_add_rows
     *
     * @param bool|null $can_add_rows Whether rows can be added
     *
     * @return self
     */
    public function setCanAddRows($can_add_rows)
    {
        if (is_null($can_add_rows)) {
            throw new \InvalidArgumentException('non-nullable can_add_rows cannot be null');
        }
        $this->container['can_add_rows'] = $can_add_rows;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit Whether the table is editable
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_delete_rows
     *
     * @return bool|null
     */
    public function getCanDeleteRows()
    {
        return $this->container['can_delete_rows'];
    }

    /**
     * Sets can_delete_rows
     *
     * @param bool|null $can_delete_rows Whether rows can be deleted
     *
     * @return self
     */
    public function setCanDeleteRows($can_delete_rows)
    {
        if (is_null($can_delete_rows)) {
            throw new \InvalidArgumentException('non-nullable can_delete_rows cannot be null');
        }
        $this->container['can_delete_rows'] = $can_delete_rows;

        return $this;
    }

    /**
     * Gets columns
     *
     * @return \MySdk\Model\HistoryTableControlFormNodeAllOfColumns[]|null
     */
    public function getColumns()
    {
        return $this->container['columns'];
    }

    /**
     * Sets columns
     *
     * @param \MySdk\Model\HistoryTableControlFormNodeAllOfColumns[]|null $columns Column definitions
     *
     * @return self
     */
    public function setColumns($columns)
    {
        if (is_null($columns)) {
            throw new \InvalidArgumentException('non-nullable columns cannot be null');
        }
        $this->container['columns'] = $columns;

        return $this;
    }

    /**
     * Gets table_type
     *
     * @return string|null
     */
    public function getTableType()
    {
        return $this->container['table_type'];
    }

    /**
     * Sets table_type
     *
     * @param string|null $table_type Type of table
     *
     * @return self
     */
    public function setTableType($table_type)
    {
        if (is_null($table_type)) {
            throw new \InvalidArgumentException('non-nullable table_type cannot be null');
        }
        $this->container['table_type'] = $table_type;

        return $this;
    }

    /**
     * Gets is_history_table
     *
     * @return bool|null
     */
    public function getIsHistoryTable()
    {
        return $this->container['is_history_table'];
    }

    /**
     * Sets is_history_table
     *
     * @param bool|null $is_history_table Whether this is a history table
     *
     * @return self
     */
    public function setIsHistoryTable($is_history_table)
    {
        if (is_null($is_history_table)) {
            throw new \InvalidArgumentException('non-nullable is_history_table cannot be null');
        }
        $this->container['is_history_table'] = $is_history_table;

        return $this;
    }

    /**
     * Gets sort_by_field_ids
     *
     * @return string[]|null
     */
    public function getSortByFieldIds()
    {
        return $this->container['sort_by_field_ids'];
    }

    /**
     * Sets sort_by_field_ids
     *
     * @param string[]|null $sort_by_field_ids Field IDs to sort by
     *
     * @return self
     */
    public function setSortByFieldIds($sort_by_field_ids)
    {
        if (is_null($sort_by_field_ids)) {
            throw new \InvalidArgumentException('non-nullable sort_by_field_ids cannot be null');
        }
        $this->container['sort_by_field_ids'] = $sort_by_field_ids;

        return $this;
    }

    /**
     * Gets sort_direction
     *
     * @return string|null
     */
    public function getSortDirection()
    {
        return $this->container['sort_direction'];
    }

    /**
     * Sets sort_direction
     *
     * @param string|null $sort_direction Sort direction
     *
     * @return self
     */
    public function setSortDirection($sort_direction)
    {
        if (is_null($sort_direction)) {
            throw new \InvalidArgumentException('non-nullable sort_direction cannot be null');
        }
        $this->container['sort_direction'] = $sort_direction;

        return $this;
    }

    /**
     * Gets rows
     *
     * @return \MySdk\Model\HistoryTableControlFormNodeAllOfRows[]|null
     */
    public function getRows()
    {
        return $this->container['rows'];
    }

    /**
     * Sets rows
     *
     * @param \MySdk\Model\HistoryTableControlFormNodeAllOfRows[]|null $rows Table rows
     *
     * @return self
     */
    public function setRows($rows)
    {
        if (is_null($rows)) {
            throw new \InvalidArgumentException('non-nullable rows cannot be null');
        }
        $this->container['rows'] = $rows;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \MySdk\Model\HistoryTableControlFormNodeAllOfGroups[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \MySdk\Model\HistoryTableControlFormNodeAllOfGroups[]|null $groups Table groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets sensitive_table_type
     *
     * @return string|null
     */
    public function getSensitiveTableType()
    {
        return $this->container['sensitive_table_type'];
    }

    /**
     * Sets sensitive_table_type
     *
     * @param string|null $sensitive_table_type Sensitive table type
     *
     * @return self
     */
    public function setSensitiveTableType($sensitive_table_type)
    {
        if (is_null($sensitive_table_type)) {
            throw new \InvalidArgumentException('non-nullable sensitive_table_type cannot be null');
        }
        $this->container['sensitive_table_type'] = $sensitive_table_type;

        return $this;
    }

    /**
     * Gets sensitive_field_id
     *
     * @return string|null
     */
    public function getSensitiveFieldId()
    {
        return $this->container['sensitive_field_id'];
    }

    /**
     * Sets sensitive_field_id
     *
     * @param string|null $sensitive_field_id Sensitive field identifier
     *
     * @return self
     */
    public function setSensitiveFieldId($sensitive_field_id)
    {
        if (is_null($sensitive_field_id)) {
            throw new \InvalidArgumentException('non-nullable sensitive_field_id cannot be null');
        }
        $this->container['sensitive_field_id'] = $sensitive_field_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


