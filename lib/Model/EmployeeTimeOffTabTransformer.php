<?php
/**
 * EmployeeTimeOffTabTransformer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeTimeOffTabTransformer Class Doc Comment
 *
 * @category Class
 * @description Represents the employee time off tab data.
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeTimeOffTabTransformer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeTimeOffTabTransformer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'accrual_level_start_date' => '\DateTime',
        'hire_date' => '\DateTime',
        'history_display' => '\MySdk\Model\EmployeeTimeOffTabTransformerHistoryDisplay',
        'user_permissions' => '\MySdk\Model\EmployeeTimeOffTabTransformerUserPermissions',
        'policies' => '\MySdk\Model\EmployeeTimeOffTabTransformerPoliciesInner[]',
        'upcoming_time_off_events' => '\MySdk\Model\UpcomingTimeOffTransformer',
        'pause' => '\MySdk\Model\EmployeeTimeOffTabTransformerPause',
        'company_has_policies' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'accrual_level_start_date' => 'date',
        'hire_date' => 'date',
        'history_display' => null,
        'user_permissions' => null,
        'policies' => null,
        'upcoming_time_off_events' => null,
        'pause' => null,
        'company_has_policies' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'accrual_level_start_date' => false,
        'hire_date' => false,
        'history_display' => false,
        'user_permissions' => false,
        'policies' => false,
        'upcoming_time_off_events' => false,
        'pause' => false,
        'company_has_policies' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'accrual_level_start_date' => 'accrualLevelStartDate',
        'hire_date' => 'hireDate',
        'history_display' => 'historyDisplay',
        'user_permissions' => 'userPermissions',
        'policies' => 'policies',
        'upcoming_time_off_events' => 'upcomingTimeOffEvents',
        'pause' => 'pause',
        'company_has_policies' => 'companyHasPolicies'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'accrual_level_start_date' => 'setAccrualLevelStartDate',
        'hire_date' => 'setHireDate',
        'history_display' => 'setHistoryDisplay',
        'user_permissions' => 'setUserPermissions',
        'policies' => 'setPolicies',
        'upcoming_time_off_events' => 'setUpcomingTimeOffEvents',
        'pause' => 'setPause',
        'company_has_policies' => 'setCompanyHasPolicies'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'accrual_level_start_date' => 'getAccrualLevelStartDate',
        'hire_date' => 'getHireDate',
        'history_display' => 'getHistoryDisplay',
        'user_permissions' => 'getUserPermissions',
        'policies' => 'getPolicies',
        'upcoming_time_off_events' => 'getUpcomingTimeOffEvents',
        'pause' => 'getPause',
        'company_has_policies' => 'getCompanyHasPolicies'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('accrual_level_start_date', $data ?? [], null);
        $this->setIfExists('hire_date', $data ?? [], null);
        $this->setIfExists('history_display', $data ?? [], null);
        $this->setIfExists('user_permissions', $data ?? [], null);
        $this->setIfExists('policies', $data ?? [], null);
        $this->setIfExists('upcoming_time_off_events', $data ?? [], null);
        $this->setIfExists('pause', $data ?? [], null);
        $this->setIfExists('company_has_policies', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id The unique identifier of the employee whose time off tab data is being requested.
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets accrual_level_start_date
     *
     * @return \DateTime|null
     */
    public function getAccrualLevelStartDate()
    {
        return $this->container['accrual_level_start_date'];
    }

    /**
     * Sets accrual_level_start_date
     *
     * @param \DateTime|null $accrual_level_start_date The start date of the employee accrual level.
     *
     * @return self
     */
    public function setAccrualLevelStartDate($accrual_level_start_date)
    {
        if (is_null($accrual_level_start_date)) {
            throw new \InvalidArgumentException('non-nullable accrual_level_start_date cannot be null');
        }
        $this->container['accrual_level_start_date'] = $accrual_level_start_date;

        return $this;
    }

    /**
     * Gets hire_date
     *
     * @return \DateTime|null
     */
    public function getHireDate()
    {
        return $this->container['hire_date'];
    }

    /**
     * Sets hire_date
     *
     * @param \DateTime|null $hire_date The hire date of the employee.
     *
     * @return self
     */
    public function setHireDate($hire_date)
    {
        if (is_null($hire_date)) {
            throw new \InvalidArgumentException('non-nullable hire_date cannot be null');
        }
        $this->container['hire_date'] = $hire_date;

        return $this;
    }

    /**
     * Gets history_display
     *
     * @return \MySdk\Model\EmployeeTimeOffTabTransformerHistoryDisplay|null
     */
    public function getHistoryDisplay()
    {
        return $this->container['history_display'];
    }

    /**
     * Sets history_display
     *
     * @param \MySdk\Model\EmployeeTimeOffTabTransformerHistoryDisplay|null $history_display history_display
     *
     * @return self
     */
    public function setHistoryDisplay($history_display)
    {
        if (is_null($history_display)) {
            throw new \InvalidArgumentException('non-nullable history_display cannot be null');
        }
        $this->container['history_display'] = $history_display;

        return $this;
    }

    /**
     * Gets user_permissions
     *
     * @return \MySdk\Model\EmployeeTimeOffTabTransformerUserPermissions|null
     */
    public function getUserPermissions()
    {
        return $this->container['user_permissions'];
    }

    /**
     * Sets user_permissions
     *
     * @param \MySdk\Model\EmployeeTimeOffTabTransformerUserPermissions|null $user_permissions user_permissions
     *
     * @return self
     */
    public function setUserPermissions($user_permissions)
    {
        if (is_null($user_permissions)) {
            throw new \InvalidArgumentException('non-nullable user_permissions cannot be null');
        }
        $this->container['user_permissions'] = $user_permissions;

        return $this;
    }

    /**
     * Gets policies
     *
     * @return \MySdk\Model\EmployeeTimeOffTabTransformerPoliciesInner[]|null
     */
    public function getPolicies()
    {
        return $this->container['policies'];
    }

    /**
     * Sets policies
     *
     * @param \MySdk\Model\EmployeeTimeOffTabTransformerPoliciesInner[]|null $policies policies
     *
     * @return self
     */
    public function setPolicies($policies)
    {
        if (is_null($policies)) {
            throw new \InvalidArgumentException('non-nullable policies cannot be null');
        }
        $this->container['policies'] = $policies;

        return $this;
    }

    /**
     * Gets upcoming_time_off_events
     *
     * @return \MySdk\Model\UpcomingTimeOffTransformer|null
     */
    public function getUpcomingTimeOffEvents()
    {
        return $this->container['upcoming_time_off_events'];
    }

    /**
     * Sets upcoming_time_off_events
     *
     * @param \MySdk\Model\UpcomingTimeOffTransformer|null $upcoming_time_off_events upcoming_time_off_events
     *
     * @return self
     */
    public function setUpcomingTimeOffEvents($upcoming_time_off_events)
    {
        if (is_null($upcoming_time_off_events)) {
            throw new \InvalidArgumentException('non-nullable upcoming_time_off_events cannot be null');
        }
        $this->container['upcoming_time_off_events'] = $upcoming_time_off_events;

        return $this;
    }

    /**
     * Gets pause
     *
     * @return \MySdk\Model\EmployeeTimeOffTabTransformerPause|null
     */
    public function getPause()
    {
        return $this->container['pause'];
    }

    /**
     * Sets pause
     *
     * @param \MySdk\Model\EmployeeTimeOffTabTransformerPause|null $pause pause
     *
     * @return self
     */
    public function setPause($pause)
    {
        if (is_null($pause)) {
            throw new \InvalidArgumentException('non-nullable pause cannot be null');
        }
        $this->container['pause'] = $pause;

        return $this;
    }

    /**
     * Gets company_has_policies
     *
     * @return bool|null
     */
    public function getCompanyHasPolicies()
    {
        return $this->container['company_has_policies'];
    }

    /**
     * Sets company_has_policies
     *
     * @param bool|null $company_has_policies company_has_policies
     *
     * @return self
     */
    public function setCompanyHasPolicies($company_has_policies)
    {
        if (is_null($company_has_policies)) {
            throw new \InvalidArgumentException('non-nullable company_has_policies cannot be null');
        }
        $this->container['company_has_policies'] = $company_has_policies;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


