<?php
/**
 * HoneyPollDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * HoneyPollDataObject Class Doc Comment
 *
 * @category Class
 * @description Poll information
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HoneyPollDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Honey-PollDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'member_id' => 'string',
        'created_at' => '\MySdk\Model\HoneyPollDataObjectCreatedAt',
        'results_at' => '\MySdk\Model\HoneyPollDataObjectResultsAt',
        'is_private' => 'bool',
        'is_anonymous' => 'bool',
        'has_votes' => 'bool',
        'question' => 'string',
        'options' => '\MySdk\Model\HoneyPollDataObjectOptionsInner[]',
        'has_member_voted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int32',
        'member_id' => 'string',
        'created_at' => null,
        'results_at' => null,
        'is_private' => 'boolean',
        'is_anonymous' => 'boolean',
        'has_votes' => 'boolean',
        'question' => 'string',
        'options' => null,
        'has_member_voted' => 'boolean'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'member_id' => false,
        'created_at' => false,
        'results_at' => false,
        'is_private' => false,
        'is_anonymous' => false,
        'has_votes' => false,
        'question' => false,
        'options' => false,
        'has_member_voted' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'member_id' => 'memberId',
        'created_at' => 'createdAt',
        'results_at' => 'resultsAt',
        'is_private' => 'isPrivate',
        'is_anonymous' => 'isAnonymous',
        'has_votes' => 'hasVotes',
        'question' => 'question',
        'options' => 'options',
        'has_member_voted' => 'hasMemberVoted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'member_id' => 'setMemberId',
        'created_at' => 'setCreatedAt',
        'results_at' => 'setResultsAt',
        'is_private' => 'setIsPrivate',
        'is_anonymous' => 'setIsAnonymous',
        'has_votes' => 'setHasVotes',
        'question' => 'setQuestion',
        'options' => 'setOptions',
        'has_member_voted' => 'setHasMemberVoted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'member_id' => 'getMemberId',
        'created_at' => 'getCreatedAt',
        'results_at' => 'getResultsAt',
        'is_private' => 'getIsPrivate',
        'is_anonymous' => 'getIsAnonymous',
        'has_votes' => 'getHasVotes',
        'question' => 'getQuestion',
        'options' => 'getOptions',
        'has_member_voted' => 'getHasMemberVoted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('member_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('results_at', $data ?? [], null);
        $this->setIfExists('is_private', $data ?? [], null);
        $this->setIfExists('is_anonymous', $data ?? [], null);
        $this->setIfExists('has_votes', $data ?? [], null);
        $this->setIfExists('question', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('has_member_voted', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Poll ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets member_id
     *
     * @return string|null
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string|null $member_id Member ID
     *
     * @return self
     */
    public function setMemberId($member_id)
    {
        if (is_null($member_id)) {
            throw new \InvalidArgumentException('non-nullable member_id cannot be null');
        }
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \MySdk\Model\HoneyPollDataObjectCreatedAt|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \MySdk\Model\HoneyPollDataObjectCreatedAt|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets results_at
     *
     * @return \MySdk\Model\HoneyPollDataObjectResultsAt|null
     */
    public function getResultsAt()
    {
        return $this->container['results_at'];
    }

    /**
     * Sets results_at
     *
     * @param \MySdk\Model\HoneyPollDataObjectResultsAt|null $results_at results_at
     *
     * @return self
     */
    public function setResultsAt($results_at)
    {
        if (is_null($results_at)) {
            throw new \InvalidArgumentException('non-nullable results_at cannot be null');
        }
        $this->container['results_at'] = $results_at;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool|null
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool|null $is_private Whether the poll is private
     *
     * @return self
     */
    public function setIsPrivate($is_private)
    {
        if (is_null($is_private)) {
            throw new \InvalidArgumentException('non-nullable is_private cannot be null');
        }
        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets is_anonymous
     *
     * @return bool|null
     */
    public function getIsAnonymous()
    {
        return $this->container['is_anonymous'];
    }

    /**
     * Sets is_anonymous
     *
     * @param bool|null $is_anonymous Whether the poll is anonymous
     *
     * @return self
     */
    public function setIsAnonymous($is_anonymous)
    {
        if (is_null($is_anonymous)) {
            throw new \InvalidArgumentException('non-nullable is_anonymous cannot be null');
        }
        $this->container['is_anonymous'] = $is_anonymous;

        return $this;
    }

    /**
     * Gets has_votes
     *
     * @return bool|null
     */
    public function getHasVotes()
    {
        return $this->container['has_votes'];
    }

    /**
     * Sets has_votes
     *
     * @param bool|null $has_votes Whether the poll has votes
     *
     * @return self
     */
    public function setHasVotes($has_votes)
    {
        if (is_null($has_votes)) {
            throw new \InvalidArgumentException('non-nullable has_votes cannot be null');
        }
        $this->container['has_votes'] = $has_votes;

        return $this;
    }

    /**
     * Gets question
     *
     * @return string|null
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     *
     * @param string|null $question Poll question
     *
     * @return self
     */
    public function setQuestion($question)
    {
        if (is_null($question)) {
            throw new \InvalidArgumentException('non-nullable question cannot be null');
        }
        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \MySdk\Model\HoneyPollDataObjectOptionsInner[]|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \MySdk\Model\HoneyPollDataObjectOptionsInner[]|null $options Poll options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets has_member_voted
     *
     * @return bool|null
     */
    public function getHasMemberVoted()
    {
        return $this->container['has_member_voted'];
    }

    /**
     * Sets has_member_voted
     *
     * @param bool|null $has_member_voted Whether the current member has voted
     *
     * @return self
     */
    public function setHasMemberVoted($has_member_voted)
    {
        if (is_null($has_member_voted)) {
            throw new \InvalidArgumentException('non-nullable has_member_voted cannot be null');
        }
        $this->container['has_member_voted'] = $has_member_voted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


