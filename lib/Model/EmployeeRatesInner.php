<?php
/**
 * EmployeeRatesInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeRatesInner Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeRatesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeRates_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'rate' => 'float',
        'earning_type' => 'string',
        'client_job_id' => 'int',
        'client_job_category_id' => 'int',
        'core_record_id' => 'int',
        'core_table_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'rate' => null,
        'earning_type' => null,
        'client_job_id' => null,
        'client_job_category_id' => null,
        'core_record_id' => null,
        'core_table_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'rate' => false,
        'earning_type' => false,
        'client_job_id' => false,
        'client_job_category_id' => false,
        'core_record_id' => false,
        'core_table_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'rate' => 'rate',
        'earning_type' => 'earningType',
        'client_job_id' => 'clientJobId',
        'client_job_category_id' => 'clientJobCategoryId',
        'core_record_id' => 'coreRecordId',
        'core_table_name' => 'coreTableName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'rate' => 'setRate',
        'earning_type' => 'setEarningType',
        'client_job_id' => 'setClientJobId',
        'client_job_category_id' => 'setClientJobCategoryId',
        'core_record_id' => 'setCoreRecordId',
        'core_table_name' => 'setCoreTableName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'rate' => 'getRate',
        'earning_type' => 'getEarningType',
        'client_job_id' => 'getClientJobId',
        'client_job_category_id' => 'getClientJobCategoryId',
        'core_record_id' => 'getCoreRecordId',
        'core_table_name' => 'getCoreTableName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('earning_type', $data ?? [], null);
        $this->setIfExists('client_job_id', $data ?? [], null);
        $this->setIfExists('client_job_category_id', $data ?? [], null);
        $this->setIfExists('core_record_id', $data ?? [], null);
        $this->setIfExists('core_table_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return float|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param float|null $rate rate
     *
     * @return self
     */
    public function setRate($rate)
    {
        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets earning_type
     *
     * @return string|null
     */
    public function getEarningType()
    {
        return $this->container['earning_type'];
    }

    /**
     * Sets earning_type
     *
     * @param string|null $earning_type earning_type
     *
     * @return self
     */
    public function setEarningType($earning_type)
    {
        if (is_null($earning_type)) {
            throw new \InvalidArgumentException('non-nullable earning_type cannot be null');
        }
        $this->container['earning_type'] = $earning_type;

        return $this;
    }

    /**
     * Gets client_job_id
     *
     * @return int|null
     */
    public function getClientJobId()
    {
        return $this->container['client_job_id'];
    }

    /**
     * Sets client_job_id
     *
     * @param int|null $client_job_id client_job_id
     *
     * @return self
     */
    public function setClientJobId($client_job_id)
    {
        if (is_null($client_job_id)) {
            throw new \InvalidArgumentException('non-nullable client_job_id cannot be null');
        }
        $this->container['client_job_id'] = $client_job_id;

        return $this;
    }

    /**
     * Gets client_job_category_id
     *
     * @return int|null
     */
    public function getClientJobCategoryId()
    {
        return $this->container['client_job_category_id'];
    }

    /**
     * Sets client_job_category_id
     *
     * @param int|null $client_job_category_id client_job_category_id
     *
     * @return self
     */
    public function setClientJobCategoryId($client_job_category_id)
    {
        if (is_null($client_job_category_id)) {
            throw new \InvalidArgumentException('non-nullable client_job_category_id cannot be null');
        }
        $this->container['client_job_category_id'] = $client_job_category_id;

        return $this;
    }

    /**
     * Gets core_record_id
     *
     * @return int|null
     */
    public function getCoreRecordId()
    {
        return $this->container['core_record_id'];
    }

    /**
     * Sets core_record_id
     *
     * @param int|null $core_record_id core_record_id
     *
     * @return self
     */
    public function setCoreRecordId($core_record_id)
    {
        if (is_null($core_record_id)) {
            throw new \InvalidArgumentException('non-nullable core_record_id cannot be null');
        }
        $this->container['core_record_id'] = $core_record_id;

        return $this;
    }

    /**
     * Gets core_table_name
     *
     * @return string|null
     */
    public function getCoreTableName()
    {
        return $this->container['core_table_name'];
    }

    /**
     * Sets core_table_name
     *
     * @param string|null $core_table_name core_table_name
     *
     * @return self
     */
    public function setCoreTableName($core_table_name)
    {
        if (is_null($core_table_name)) {
            throw new \InvalidArgumentException('non-nullable core_table_name cannot be null');
        }
        $this->container['core_table_name'] = $core_table_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


