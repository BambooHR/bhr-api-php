<?php
/**
 * BasicTimesheetApiTransformerHourSummaryInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * BasicTimesheetApiTransformerHourSummaryInner Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BasicTimesheetApiTransformerHourSummaryInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BasicTimesheetApiTransformer_hourSummary_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'hours_type' => 'string',
        'total_hours' => 'float',
        'imported_hours' => 'float',
        'project_id' => 'int',
        'task_id' => 'int',
        'shift_differential_id' => 'int',
        'holiday_id' => 'int',
        'project_name' => 'string',
        'task_name' => 'string',
        'shift_differential_name' => 'string',
        'holiday_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'hours_type' => null,
        'total_hours' => 'float',
        'imported_hours' => 'float',
        'project_id' => null,
        'task_id' => null,
        'shift_differential_id' => null,
        'holiday_id' => null,
        'project_name' => null,
        'task_name' => null,
        'shift_differential_name' => null,
        'holiday_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'hours_type' => false,
        'total_hours' => false,
        'imported_hours' => false,
        'project_id' => true,
        'task_id' => true,
        'shift_differential_id' => true,
        'holiday_id' => true,
        'project_name' => true,
        'task_name' => true,
        'shift_differential_name' => true,
        'holiday_name' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hours_type' => 'hoursType',
        'total_hours' => 'totalHours',
        'imported_hours' => 'importedHours',
        'project_id' => 'projectId',
        'task_id' => 'taskId',
        'shift_differential_id' => 'shiftDifferentialId',
        'holiday_id' => 'holidayId',
        'project_name' => 'projectName',
        'task_name' => 'taskName',
        'shift_differential_name' => 'shiftDifferentialName',
        'holiday_name' => 'holidayName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hours_type' => 'setHoursType',
        'total_hours' => 'setTotalHours',
        'imported_hours' => 'setImportedHours',
        'project_id' => 'setProjectId',
        'task_id' => 'setTaskId',
        'shift_differential_id' => 'setShiftDifferentialId',
        'holiday_id' => 'setHolidayId',
        'project_name' => 'setProjectName',
        'task_name' => 'setTaskName',
        'shift_differential_name' => 'setShiftDifferentialName',
        'holiday_name' => 'setHolidayName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hours_type' => 'getHoursType',
        'total_hours' => 'getTotalHours',
        'imported_hours' => 'getImportedHours',
        'project_id' => 'getProjectId',
        'task_id' => 'getTaskId',
        'shift_differential_id' => 'getShiftDifferentialId',
        'holiday_id' => 'getHolidayId',
        'project_name' => 'getProjectName',
        'task_name' => 'getTaskName',
        'shift_differential_name' => 'getShiftDifferentialName',
        'holiday_name' => 'getHolidayName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('hours_type', $data ?? [], null);
        $this->setIfExists('total_hours', $data ?? [], null);
        $this->setIfExists('imported_hours', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('task_id', $data ?? [], null);
        $this->setIfExists('shift_differential_id', $data ?? [], null);
        $this->setIfExists('holiday_id', $data ?? [], null);
        $this->setIfExists('project_name', $data ?? [], null);
        $this->setIfExists('task_name', $data ?? [], null);
        $this->setIfExists('shift_differential_name', $data ?? [], null);
        $this->setIfExists('holiday_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hours_type
     *
     * @return string|null
     */
    public function getHoursType()
    {
        return $this->container['hours_type'];
    }

    /**
     * Sets hours_type
     *
     * @param string|null $hours_type Hour type
     *
     * @return self
     */
    public function setHoursType($hours_type)
    {
        if (is_null($hours_type)) {
            throw new \InvalidArgumentException('non-nullable hours_type cannot be null');
        }
        $this->container['hours_type'] = $hours_type;

        return $this;
    }

    /**
     * Gets total_hours
     *
     * @return float|null
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param float|null $total_hours Total hours
     *
     * @return self
     */
    public function setTotalHours($total_hours)
    {
        if (is_null($total_hours)) {
            throw new \InvalidArgumentException('non-nullable total_hours cannot be null');
        }
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets imported_hours
     *
     * @return float|null
     */
    public function getImportedHours()
    {
        return $this->container['imported_hours'];
    }

    /**
     * Sets imported_hours
     *
     * @param float|null $imported_hours Imported hours
     *
     * @return self
     */
    public function setImportedHours($imported_hours)
    {
        if (is_null($imported_hours)) {
            throw new \InvalidArgumentException('non-nullable imported_hours cannot be null');
        }
        $this->container['imported_hours'] = $imported_hours;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id Project ID
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            array_push($this->openAPINullablesSetToNull, 'project_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return int|null
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param int|null $task_id Task ID
     *
     * @return self
     */
    public function setTaskId($task_id)
    {
        if (is_null($task_id)) {
            array_push($this->openAPINullablesSetToNull, 'task_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets shift_differential_id
     *
     * @return int|null
     */
    public function getShiftDifferentialId()
    {
        return $this->container['shift_differential_id'];
    }

    /**
     * Sets shift_differential_id
     *
     * @param int|null $shift_differential_id Shift differential ID
     *
     * @return self
     */
    public function setShiftDifferentialId($shift_differential_id)
    {
        if (is_null($shift_differential_id)) {
            array_push($this->openAPINullablesSetToNull, 'shift_differential_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shift_differential_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shift_differential_id'] = $shift_differential_id;

        return $this;
    }

    /**
     * Gets holiday_id
     *
     * @return int|null
     */
    public function getHolidayId()
    {
        return $this->container['holiday_id'];
    }

    /**
     * Sets holiday_id
     *
     * @param int|null $holiday_id Holiday ID
     *
     * @return self
     */
    public function setHolidayId($holiday_id)
    {
        if (is_null($holiday_id)) {
            array_push($this->openAPINullablesSetToNull, 'holiday_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holiday_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['holiday_id'] = $holiday_id;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string|null
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string|null $project_name Project name
     *
     * @return self
     */
    public function setProjectName($project_name)
    {
        if (is_null($project_name)) {
            array_push($this->openAPINullablesSetToNull, 'project_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets task_name
     *
     * @return string|null
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     *
     * @param string|null $task_name Task name
     *
     * @return self
     */
    public function setTaskName($task_name)
    {
        if (is_null($task_name)) {
            array_push($this->openAPINullablesSetToNull, 'task_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_name'] = $task_name;

        return $this;
    }

    /**
     * Gets shift_differential_name
     *
     * @return string|null
     */
    public function getShiftDifferentialName()
    {
        return $this->container['shift_differential_name'];
    }

    /**
     * Sets shift_differential_name
     *
     * @param string|null $shift_differential_name Shift differential name
     *
     * @return self
     */
    public function setShiftDifferentialName($shift_differential_name)
    {
        if (is_null($shift_differential_name)) {
            array_push($this->openAPINullablesSetToNull, 'shift_differential_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shift_differential_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shift_differential_name'] = $shift_differential_name;

        return $this;
    }

    /**
     * Gets holiday_name
     *
     * @return string|null
     */
    public function getHolidayName()
    {
        return $this->container['holiday_name'];
    }

    /**
     * Sets holiday_name
     *
     * @param string|null $holiday_name Holiday name
     *
     * @return self
     */
    public function setHolidayName($holiday_name)
    {
        if (is_null($holiday_name)) {
            array_push($this->openAPINullablesSetToNull, 'holiday_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holiday_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['holiday_name'] = $holiday_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


