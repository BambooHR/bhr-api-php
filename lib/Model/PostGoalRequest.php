<?php
/**
 * PostGoalRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PostGoalRequest Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PostGoalRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'post_goal_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'description' => 'string',
        'due_date' => '\DateTime',
        'percent_complete' => 'int',
        'completion_date' => '\DateTime',
        'shared_with_employee_ids' => 'int[]',
        'aligns_with_option_id' => 'int',
        'milestones' => '\MySdk\Model\PostGoalRequestMilestonesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'description' => null,
        'due_date' => 'date',
        'percent_complete' => null,
        'completion_date' => 'date',
        'shared_with_employee_ids' => null,
        'aligns_with_option_id' => null,
        'milestones' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => false,
        'description' => false,
        'due_date' => false,
        'percent_complete' => false,
        'completion_date' => true,
        'shared_with_employee_ids' => false,
        'aligns_with_option_id' => true,
        'milestones' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'description' => 'description',
        'due_date' => 'dueDate',
        'percent_complete' => 'percentComplete',
        'completion_date' => 'completionDate',
        'shared_with_employee_ids' => 'sharedWithEmployeeIds',
        'aligns_with_option_id' => 'alignsWithOptionId',
        'milestones' => 'milestones'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'description' => 'setDescription',
        'due_date' => 'setDueDate',
        'percent_complete' => 'setPercentComplete',
        'completion_date' => 'setCompletionDate',
        'shared_with_employee_ids' => 'setSharedWithEmployeeIds',
        'aligns_with_option_id' => 'setAlignsWithOptionId',
        'milestones' => 'setMilestones'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'description' => 'getDescription',
        'due_date' => 'getDueDate',
        'percent_complete' => 'getPercentComplete',
        'completion_date' => 'getCompletionDate',
        'shared_with_employee_ids' => 'getSharedWithEmployeeIds',
        'aligns_with_option_id' => 'getAlignsWithOptionId',
        'milestones' => 'getMilestones'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('percent_complete', $data ?? [], null);
        $this->setIfExists('completion_date', $data ?? [], null);
        $this->setIfExists('shared_with_employee_ids', $data ?? [], null);
        $this->setIfExists('aligns_with_option_id', $data ?? [], null);
        $this->setIfExists('milestones', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalidProperties[] = "'due_date' can't be null";
        }
        if ($this->container['percent_complete'] === null) {
            $invalidProperties[] = "'percent_complete' can't be null";
        }
        if (($this->container['percent_complete'] > 100)) {
            $invalidProperties[] = "invalid value for 'percent_complete', must be smaller than or equal to 100.";
        }

        if (($this->container['percent_complete'] < 0)) {
            $invalidProperties[] = "invalid value for 'percent_complete', must be bigger than or equal to 0.";
        }

        if ($this->container['shared_with_employee_ids'] === null) {
            $invalidProperties[] = "'shared_with_employee_ids' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the goal
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A detailed description of the goal
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date The due date for the goal in YYYY-MM-DD format
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets percent_complete
     *
     * @return int
     */
    public function getPercentComplete()
    {
        return $this->container['percent_complete'];
    }

    /**
     * Sets percent_complete
     *
     * @param int $percent_complete The percentage of completion for the goal (0-100)
     *
     * @return self
     */
    public function setPercentComplete($percent_complete)
    {
        if (is_null($percent_complete)) {
            throw new \InvalidArgumentException('non-nullable percent_complete cannot be null');
        }

        if (($percent_complete > 100)) {
            throw new \InvalidArgumentException('invalid value for $percent_complete when calling PostGoalRequest., must be smaller than or equal to 100.');
        }
        if (($percent_complete < 0)) {
            throw new \InvalidArgumentException('invalid value for $percent_complete when calling PostGoalRequest., must be bigger than or equal to 0.');
        }

        $this->container['percent_complete'] = $percent_complete;

        return $this;
    }

    /**
     * Gets completion_date
     *
     * @return \DateTime|null
     */
    public function getCompletionDate()
    {
        return $this->container['completion_date'];
    }

    /**
     * Sets completion_date
     *
     * @param \DateTime|null $completion_date The date when the goal was completed in YYYY-MM-DD format. Required when percentComplete is 100.
     *
     * @return self
     */
    public function setCompletionDate($completion_date)
    {
        if (is_null($completion_date)) {
            array_push($this->openAPINullablesSetToNull, 'completion_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completion_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completion_date'] = $completion_date;

        return $this;
    }

    /**
     * Gets shared_with_employee_ids
     *
     * @return int[]
     */
    public function getSharedWithEmployeeIds()
    {
        return $this->container['shared_with_employee_ids'];
    }

    /**
     * Sets shared_with_employee_ids
     *
     * @param int[] $shared_with_employee_ids List of employee IDs with whom the goal is shared. Must include the employee ID of the goal owner.
     *
     * @return self
     */
    public function setSharedWithEmployeeIds($shared_with_employee_ids)
    {
        if (is_null($shared_with_employee_ids)) {
            throw new \InvalidArgumentException('non-nullable shared_with_employee_ids cannot be null');
        }
        $this->container['shared_with_employee_ids'] = $shared_with_employee_ids;

        return $this;
    }

    /**
     * Gets aligns_with_option_id
     *
     * @return int|null
     */
    public function getAlignsWithOptionId()
    {
        return $this->container['aligns_with_option_id'];
    }

    /**
     * Sets aligns_with_option_id
     *
     * @param int|null $aligns_with_option_id ID of the option this goal aligns with
     *
     * @return self
     */
    public function setAlignsWithOptionId($aligns_with_option_id)
    {
        if (is_null($aligns_with_option_id)) {
            array_push($this->openAPINullablesSetToNull, 'aligns_with_option_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aligns_with_option_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aligns_with_option_id'] = $aligns_with_option_id;

        return $this;
    }

    /**
     * Gets milestones
     *
     * @return \MySdk\Model\PostGoalRequestMilestonesInner[]|null
     */
    public function getMilestones()
    {
        return $this->container['milestones'];
    }

    /**
     * Sets milestones
     *
     * @param \MySdk\Model\PostGoalRequestMilestonesInner[]|null $milestones List of milestones for this goal
     *
     * @return self
     */
    public function setMilestones($milestones)
    {
        if (is_null($milestones)) {
            array_push($this->openAPINullablesSetToNull, 'milestones');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('milestones', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['milestones'] = $milestones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


