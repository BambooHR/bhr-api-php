<?php
/**
 * TimeOffPolicyAccrualOptionsTransformer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TimeOffPolicyAccrualOptionsTransformer Class Doc Comment
 *
 * @category Class
 * @description Transformer for time off policy accrual options
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeOffPolicyAccrualOptionsTransformer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeOffPolicyAccrualOptionsTransformer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carryover_select_option' => 'string',
        'carryover_month' => 'string',
        'carryover_day' => 'string',
        'carryover_expiration' => 'string',
        'reset_negative_balances' => 'bool',
        'first_accrual' => 'string',
        'is_preaccruing' => 'bool',
        'rate_transitions' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'carryover_select_option' => null,
        'carryover_month' => null,
        'carryover_day' => null,
        'carryover_expiration' => null,
        'reset_negative_balances' => null,
        'first_accrual' => null,
        'is_preaccruing' => null,
        'rate_transitions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'carryover_select_option' => false,
        'carryover_month' => false,
        'carryover_day' => false,
        'carryover_expiration' => false,
        'reset_negative_balances' => false,
        'first_accrual' => false,
        'is_preaccruing' => false,
        'rate_transitions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carryover_select_option' => 'carryoverSelectOption',
        'carryover_month' => 'carryoverMonth',
        'carryover_day' => 'carryoverDay',
        'carryover_expiration' => 'carryoverExpiration',
        'reset_negative_balances' => 'resetNegativeBalances',
        'first_accrual' => 'firstAccrual',
        'is_preaccruing' => 'isPreaccruing',
        'rate_transitions' => 'rateTransitions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carryover_select_option' => 'setCarryoverSelectOption',
        'carryover_month' => 'setCarryoverMonth',
        'carryover_day' => 'setCarryoverDay',
        'carryover_expiration' => 'setCarryoverExpiration',
        'reset_negative_balances' => 'setResetNegativeBalances',
        'first_accrual' => 'setFirstAccrual',
        'is_preaccruing' => 'setIsPreaccruing',
        'rate_transitions' => 'setRateTransitions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carryover_select_option' => 'getCarryoverSelectOption',
        'carryover_month' => 'getCarryoverMonth',
        'carryover_day' => 'getCarryoverDay',
        'carryover_expiration' => 'getCarryoverExpiration',
        'reset_negative_balances' => 'getResetNegativeBalances',
        'first_accrual' => 'getFirstAccrual',
        'is_preaccruing' => 'getIsPreaccruing',
        'rate_transitions' => 'getRateTransitions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('carryover_select_option', $data ?? [], null);
        $this->setIfExists('carryover_month', $data ?? [], null);
        $this->setIfExists('carryover_day', $data ?? [], null);
        $this->setIfExists('carryover_expiration', $data ?? [], null);
        $this->setIfExists('reset_negative_balances', $data ?? [], null);
        $this->setIfExists('first_accrual', $data ?? [], null);
        $this->setIfExists('is_preaccruing', $data ?? [], null);
        $this->setIfExists('rate_transitions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carryover_select_option
     *
     * @return string|null
     */
    public function getCarryoverSelectOption()
    {
        return $this->container['carryover_select_option'];
    }

    /**
     * Sets carryover_select_option
     *
     * @param string|null $carryover_select_option carryover_select_option
     *
     * @return self
     */
    public function setCarryoverSelectOption($carryover_select_option)
    {
        if (is_null($carryover_select_option)) {
            throw new \InvalidArgumentException('non-nullable carryover_select_option cannot be null');
        }
        $this->container['carryover_select_option'] = $carryover_select_option;

        return $this;
    }

    /**
     * Gets carryover_month
     *
     * @return string|null
     */
    public function getCarryoverMonth()
    {
        return $this->container['carryover_month'];
    }

    /**
     * Sets carryover_month
     *
     * @param string|null $carryover_month carryover_month
     *
     * @return self
     */
    public function setCarryoverMonth($carryover_month)
    {
        if (is_null($carryover_month)) {
            throw new \InvalidArgumentException('non-nullable carryover_month cannot be null');
        }
        $this->container['carryover_month'] = $carryover_month;

        return $this;
    }

    /**
     * Gets carryover_day
     *
     * @return string|null
     */
    public function getCarryoverDay()
    {
        return $this->container['carryover_day'];
    }

    /**
     * Sets carryover_day
     *
     * @param string|null $carryover_day carryover_day
     *
     * @return self
     */
    public function setCarryoverDay($carryover_day)
    {
        if (is_null($carryover_day)) {
            throw new \InvalidArgumentException('non-nullable carryover_day cannot be null');
        }
        $this->container['carryover_day'] = $carryover_day;

        return $this;
    }

    /**
     * Gets carryover_expiration
     *
     * @return string|null
     */
    public function getCarryoverExpiration()
    {
        return $this->container['carryover_expiration'];
    }

    /**
     * Sets carryover_expiration
     *
     * @param string|null $carryover_expiration carryover_expiration
     *
     * @return self
     */
    public function setCarryoverExpiration($carryover_expiration)
    {
        if (is_null($carryover_expiration)) {
            throw new \InvalidArgumentException('non-nullable carryover_expiration cannot be null');
        }
        $this->container['carryover_expiration'] = $carryover_expiration;

        return $this;
    }

    /**
     * Gets reset_negative_balances
     *
     * @return bool|null
     */
    public function getResetNegativeBalances()
    {
        return $this->container['reset_negative_balances'];
    }

    /**
     * Sets reset_negative_balances
     *
     * @param bool|null $reset_negative_balances reset_negative_balances
     *
     * @return self
     */
    public function setResetNegativeBalances($reset_negative_balances)
    {
        if (is_null($reset_negative_balances)) {
            throw new \InvalidArgumentException('non-nullable reset_negative_balances cannot be null');
        }
        $this->container['reset_negative_balances'] = $reset_negative_balances;

        return $this;
    }

    /**
     * Gets first_accrual
     *
     * @return string|null
     */
    public function getFirstAccrual()
    {
        return $this->container['first_accrual'];
    }

    /**
     * Sets first_accrual
     *
     * @param string|null $first_accrual first_accrual
     *
     * @return self
     */
    public function setFirstAccrual($first_accrual)
    {
        if (is_null($first_accrual)) {
            throw new \InvalidArgumentException('non-nullable first_accrual cannot be null');
        }
        $this->container['first_accrual'] = $first_accrual;

        return $this;
    }

    /**
     * Gets is_preaccruing
     *
     * @return bool|null
     */
    public function getIsPreaccruing()
    {
        return $this->container['is_preaccruing'];
    }

    /**
     * Sets is_preaccruing
     *
     * @param bool|null $is_preaccruing is_preaccruing
     *
     * @return self
     */
    public function setIsPreaccruing($is_preaccruing)
    {
        if (is_null($is_preaccruing)) {
            throw new \InvalidArgumentException('non-nullable is_preaccruing cannot be null');
        }
        $this->container['is_preaccruing'] = $is_preaccruing;

        return $this;
    }

    /**
     * Gets rate_transitions
     *
     * @return string|null
     */
    public function getRateTransitions()
    {
        return $this->container['rate_transitions'];
    }

    /**
     * Sets rate_transitions
     *
     * @param string|null $rate_transitions rate_transitions
     *
     * @return self
     */
    public function setRateTransitions($rate_transitions)
    {
        if (is_null($rate_transitions)) {
            throw new \InvalidArgumentException('non-nullable rate_transitions cannot be null');
        }
        $this->container['rate_transitions'] = $rate_transitions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


