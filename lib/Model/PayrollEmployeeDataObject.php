<?php
/**
 * PayrollEmployeeDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollEmployeeDataObject Class Doc Comment
 *
 * @category Class
 * @description Data object representing an employee in the payroll system
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollEmployeeDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayrollEmployeeDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'preferred_name' => 'string',
        'photo_url' => 'string',
        'job_title' => 'string',
        'department' => 'string',
        'division' => 'string',
        'location' => 'string',
        'employment_status' => 'string',
        'status' => 'string',
        'pay_schedule_id' => 'int',
        'final_pay_date' => 'string',
        'termination_date' => 'string',
        'is_synced' => 'bool',
        'is_included_in_payroll' => 'bool',
        'pay_type' => 'string',
        'tax_type' => 'string',
        'overtime_status' => 'string',
        'has_inactive_compensation' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'first_name' => null,
        'last_name' => null,
        'preferred_name' => null,
        'photo_url' => null,
        'job_title' => null,
        'department' => null,
        'division' => null,
        'location' => null,
        'employment_status' => null,
        'status' => null,
        'pay_schedule_id' => null,
        'final_pay_date' => null,
        'termination_date' => null,
        'is_synced' => null,
        'is_included_in_payroll' => null,
        'pay_type' => null,
        'tax_type' => null,
        'overtime_status' => null,
        'has_inactive_compensation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'first_name' => false,
        'last_name' => false,
        'preferred_name' => true,
        'photo_url' => false,
        'job_title' => true,
        'department' => true,
        'division' => true,
        'location' => true,
        'employment_status' => true,
        'status' => true,
        'pay_schedule_id' => false,
        'final_pay_date' => true,
        'termination_date' => true,
        'is_synced' => true,
        'is_included_in_payroll' => true,
        'pay_type' => true,
        'tax_type' => true,
        'overtime_status' => true,
        'has_inactive_compensation' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'preferred_name' => 'preferredName',
        'photo_url' => 'photoUrl',
        'job_title' => 'jobTitle',
        'department' => 'department',
        'division' => 'division',
        'location' => 'location',
        'employment_status' => 'employmentStatus',
        'status' => 'status',
        'pay_schedule_id' => 'payScheduleId',
        'final_pay_date' => 'finalPayDate',
        'termination_date' => 'terminationDate',
        'is_synced' => 'isSynced',
        'is_included_in_payroll' => 'isIncludedInPayroll',
        'pay_type' => 'payType',
        'tax_type' => 'taxType',
        'overtime_status' => 'overtimeStatus',
        'has_inactive_compensation' => 'hasInactiveCompensation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'preferred_name' => 'setPreferredName',
        'photo_url' => 'setPhotoUrl',
        'job_title' => 'setJobTitle',
        'department' => 'setDepartment',
        'division' => 'setDivision',
        'location' => 'setLocation',
        'employment_status' => 'setEmploymentStatus',
        'status' => 'setStatus',
        'pay_schedule_id' => 'setPayScheduleId',
        'final_pay_date' => 'setFinalPayDate',
        'termination_date' => 'setTerminationDate',
        'is_synced' => 'setIsSynced',
        'is_included_in_payroll' => 'setIsIncludedInPayroll',
        'pay_type' => 'setPayType',
        'tax_type' => 'setTaxType',
        'overtime_status' => 'setOvertimeStatus',
        'has_inactive_compensation' => 'setHasInactiveCompensation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'preferred_name' => 'getPreferredName',
        'photo_url' => 'getPhotoUrl',
        'job_title' => 'getJobTitle',
        'department' => 'getDepartment',
        'division' => 'getDivision',
        'location' => 'getLocation',
        'employment_status' => 'getEmploymentStatus',
        'status' => 'getStatus',
        'pay_schedule_id' => 'getPayScheduleId',
        'final_pay_date' => 'getFinalPayDate',
        'termination_date' => 'getTerminationDate',
        'is_synced' => 'getIsSynced',
        'is_included_in_payroll' => 'getIsIncludedInPayroll',
        'pay_type' => 'getPayType',
        'tax_type' => 'getTaxType',
        'overtime_status' => 'getOvertimeStatus',
        'has_inactive_compensation' => 'getHasInactiveCompensation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('preferred_name', $data ?? [], null);
        $this->setIfExists('photo_url', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('division', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('employment_status', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('pay_schedule_id', $data ?? [], null);
        $this->setIfExists('final_pay_date', $data ?? [], null);
        $this->setIfExists('termination_date', $data ?? [], null);
        $this->setIfExists('is_synced', $data ?? [], null);
        $this->setIfExists('is_included_in_payroll', $data ?? [], null);
        $this->setIfExists('pay_type', $data ?? [], null);
        $this->setIfExists('tax_type', $data ?? [], null);
        $this->setIfExists('overtime_status', $data ?? [], null);
        $this->setIfExists('has_inactive_compensation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Unique identifier for the employee
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Employee's first name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Employee's last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string|null
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string|null $preferred_name Employee's preferred name, if any
     *
     * @return self
     */
    public function setPreferredName($preferred_name)
    {
        if (is_null($preferred_name)) {
            array_push($this->openAPINullablesSetToNull, 'preferred_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('preferred_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets photo_url
     *
     * @return string|null
     */
    public function getPhotoUrl()
    {
        return $this->container['photo_url'];
    }

    /**
     * Sets photo_url
     *
     * @param string|null $photo_url URL to employee's photo
     *
     * @return self
     */
    public function setPhotoUrl($photo_url)
    {
        if (is_null($photo_url)) {
            throw new \InvalidArgumentException('non-nullable photo_url cannot be null');
        }
        $this->container['photo_url'] = $photo_url;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Employee's job title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            array_push($this->openAPINullablesSetToNull, 'job_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Employee's department
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            array_push($this->openAPINullablesSetToNull, 'department');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string|null
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string|null $division Employee's division
     *
     * @return self
     */
    public function setDivision($division)
    {
        if (is_null($division)) {
            array_push($this->openAPINullablesSetToNull, 'division');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('division', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Employee's location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets employment_status
     *
     * @return string|null
     */
    public function getEmploymentStatus()
    {
        return $this->container['employment_status'];
    }

    /**
     * Sets employment_status
     *
     * @param string|null $employment_status Employee's employment status
     *
     * @return self
     */
    public function setEmploymentStatus($employment_status)
    {
        if (is_null($employment_status)) {
            array_push($this->openAPINullablesSetToNull, 'employment_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employment_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employment_status'] = $employment_status;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Employee's status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets pay_schedule_id
     *
     * @return int|null
     */
    public function getPayScheduleId()
    {
        return $this->container['pay_schedule_id'];
    }

    /**
     * Sets pay_schedule_id
     *
     * @param int|null $pay_schedule_id ID of the employee's pay schedule
     *
     * @return self
     */
    public function setPayScheduleId($pay_schedule_id)
    {
        if (is_null($pay_schedule_id)) {
            throw new \InvalidArgumentException('non-nullable pay_schedule_id cannot be null');
        }
        $this->container['pay_schedule_id'] = $pay_schedule_id;

        return $this;
    }

    /**
     * Gets final_pay_date
     *
     * @return string|null
     */
    public function getFinalPayDate()
    {
        return $this->container['final_pay_date'];
    }

    /**
     * Sets final_pay_date
     *
     * @param string|null $final_pay_date Employee's final pay date, if applicable
     *
     * @return self
     */
    public function setFinalPayDate($final_pay_date)
    {
        if (is_null($final_pay_date)) {
            array_push($this->openAPINullablesSetToNull, 'final_pay_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('final_pay_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['final_pay_date'] = $final_pay_date;

        return $this;
    }

    /**
     * Gets termination_date
     *
     * @return string|null
     */
    public function getTerminationDate()
    {
        return $this->container['termination_date'];
    }

    /**
     * Sets termination_date
     *
     * @param string|null $termination_date Employee's termination date, if applicable
     *
     * @return self
     */
    public function setTerminationDate($termination_date)
    {
        if (is_null($termination_date)) {
            array_push($this->openAPINullablesSetToNull, 'termination_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('termination_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['termination_date'] = $termination_date;

        return $this;
    }

    /**
     * Gets is_synced
     *
     * @return bool|null
     */
    public function getIsSynced()
    {
        return $this->container['is_synced'];
    }

    /**
     * Sets is_synced
     *
     * @param bool|null $is_synced Whether the employee is synced with the payroll system
     *
     * @return self
     */
    public function setIsSynced($is_synced)
    {
        if (is_null($is_synced)) {
            array_push($this->openAPINullablesSetToNull, 'is_synced');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_synced', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_synced'] = $is_synced;

        return $this;
    }

    /**
     * Gets is_included_in_payroll
     *
     * @return bool|null
     */
    public function getIsIncludedInPayroll()
    {
        return $this->container['is_included_in_payroll'];
    }

    /**
     * Sets is_included_in_payroll
     *
     * @param bool|null $is_included_in_payroll Whether the employee is included in payroll processing
     *
     * @return self
     */
    public function setIsIncludedInPayroll($is_included_in_payroll)
    {
        if (is_null($is_included_in_payroll)) {
            array_push($this->openAPINullablesSetToNull, 'is_included_in_payroll');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_included_in_payroll', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_included_in_payroll'] = $is_included_in_payroll;

        return $this;
    }

    /**
     * Gets pay_type
     *
     * @return string|null
     */
    public function getPayType()
    {
        return $this->container['pay_type'];
    }

    /**
     * Sets pay_type
     *
     * @param string|null $pay_type Employee's pay type (e.g., Hourly, Salary)
     *
     * @return self
     */
    public function setPayType($pay_type)
    {
        if (is_null($pay_type)) {
            array_push($this->openAPINullablesSetToNull, 'pay_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_type'] = $pay_type;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return string|null
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param string|null $tax_type Employee's tax type
     *
     * @return self
     */
    public function setTaxType($tax_type)
    {
        if (is_null($tax_type)) {
            array_push($this->openAPINullablesSetToNull, 'tax_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_type'] = $tax_type;

        return $this;
    }

    /**
     * Gets overtime_status
     *
     * @return string|null
     */
    public function getOvertimeStatus()
    {
        return $this->container['overtime_status'];
    }

    /**
     * Sets overtime_status
     *
     * @param string|null $overtime_status Employee's overtime status
     *
     * @return self
     */
    public function setOvertimeStatus($overtime_status)
    {
        if (is_null($overtime_status)) {
            array_push($this->openAPINullablesSetToNull, 'overtime_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('overtime_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['overtime_status'] = $overtime_status;

        return $this;
    }

    /**
     * Gets has_inactive_compensation
     *
     * @return bool|null
     */
    public function getHasInactiveCompensation()
    {
        return $this->container['has_inactive_compensation'];
    }

    /**
     * Sets has_inactive_compensation
     *
     * @param bool|null $has_inactive_compensation Whether the employee has inactive compensation records
     *
     * @return self
     */
    public function setHasInactiveCompensation($has_inactive_compensation)
    {
        if (is_null($has_inactive_compensation)) {
            array_push($this->openAPINullablesSetToNull, 'has_inactive_compensation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_inactive_compensation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_inactive_compensation'] = $has_inactive_compensation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


