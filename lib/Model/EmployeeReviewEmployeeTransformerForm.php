<?php
/**
 * EmployeeReviewEmployeeTransformerForm
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeReviewEmployeeTransformerForm Class Doc Comment
 *
 * @category Class
 * @description Form data for employee review
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeReviewEmployeeTransformerForm implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeReviewEmployeeTransformer_form';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'personal' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonal',
        'job' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormJob',
        'address' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormAddress',
        'contact' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormContact',
        'employment_status' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormEmploymentStatus',
        'job_information' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormJobInformation',
        'compensation' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormCompensation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'personal' => null,
        'job' => null,
        'address' => null,
        'contact' => null,
        'employment_status' => null,
        'job_information' => null,
        'compensation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'personal' => false,
        'job' => false,
        'address' => false,
        'contact' => false,
        'employment_status' => false,
        'job_information' => false,
        'compensation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'personal' => 'Personal',
        'job' => 'Job',
        'address' => 'Address',
        'contact' => 'Contact',
        'employment_status' => 'Employment Status',
        'job_information' => 'Job Information',
        'compensation' => 'Compensation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'personal' => 'setPersonal',
        'job' => 'setJob',
        'address' => 'setAddress',
        'contact' => 'setContact',
        'employment_status' => 'setEmploymentStatus',
        'job_information' => 'setJobInformation',
        'compensation' => 'setCompensation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'personal' => 'getPersonal',
        'job' => 'getJob',
        'address' => 'getAddress',
        'contact' => 'getContact',
        'employment_status' => 'getEmploymentStatus',
        'job_information' => 'getJobInformation',
        'compensation' => 'getCompensation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('personal', $data ?? [], null);
        $this->setIfExists('job', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('employment_status', $data ?? [], null);
        $this->setIfExists('job_information', $data ?? [], null);
        $this->setIfExists('compensation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Unique identifier for the employee
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets personal
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonal|null
     */
    public function getPersonal()
    {
        return $this->container['personal'];
    }

    /**
     * Sets personal
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonal|null $personal personal
     *
     * @return self
     */
    public function setPersonal($personal)
    {
        if (is_null($personal)) {
            throw new \InvalidArgumentException('non-nullable personal cannot be null');
        }
        $this->container['personal'] = $personal;

        return $this;
    }

    /**
     * Gets job
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormJob|null
     */
    public function getJob()
    {
        return $this->container['job'];
    }

    /**
     * Sets job
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormJob|null $job job
     *
     * @return self
     */
    public function setJob($job)
    {
        if (is_null($job)) {
            throw new \InvalidArgumentException('non-nullable job cannot be null');
        }
        $this->container['job'] = $job;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormContact|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormContact|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets employment_status
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormEmploymentStatus|null
     */
    public function getEmploymentStatus()
    {
        return $this->container['employment_status'];
    }

    /**
     * Sets employment_status
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormEmploymentStatus|null $employment_status employment_status
     *
     * @return self
     */
    public function setEmploymentStatus($employment_status)
    {
        if (is_null($employment_status)) {
            throw new \InvalidArgumentException('non-nullable employment_status cannot be null');
        }
        $this->container['employment_status'] = $employment_status;

        return $this;
    }

    /**
     * Gets job_information
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormJobInformation|null
     */
    public function getJobInformation()
    {
        return $this->container['job_information'];
    }

    /**
     * Sets job_information
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormJobInformation|null $job_information job_information
     *
     * @return self
     */
    public function setJobInformation($job_information)
    {
        if (is_null($job_information)) {
            throw new \InvalidArgumentException('non-nullable job_information cannot be null');
        }
        $this->container['job_information'] = $job_information;

        return $this;
    }

    /**
     * Gets compensation
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormCompensation|null
     */
    public function getCompensation()
    {
        return $this->container['compensation'];
    }

    /**
     * Sets compensation
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormCompensation|null $compensation compensation
     *
     * @return self
     */
    public function setCompensation($compensation)
    {
        if (is_null($compensation)) {
            throw new \InvalidArgumentException('non-nullable compensation cannot be null');
        }
        $this->container['compensation'] = $compensation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


