<?php
/**
 * CommonDataObjectsPayrollEmployeeTaxInformationDetail
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * CommonDataObjectsPayrollEmployeeTaxInformationDetail Class Doc Comment
 *
 * @category Class
 * @description Represents detailed employee tax information
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CommonDataObjectsPayrollEmployeeTaxInformationDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Common-DataObjects-Payroll-EmployeeTaxInformationDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'federal' => '\MySdk\Model\CommonDataObjectsPayrollFederalTaxDetail',
        'state' => '\MySdk\Model\CommonDataObjectsPayrollStateTaxDetail',
        'state_unemployment' => '\MySdk\Model\CommonDataObjectsPayrollStateUnemploymentInsuranceDetail',
        'w2_status' => 'string',
        'is2020_release' => 'bool',
        'has2020_w4' => 'bool',
        'federal2020' => '\MySdk\Model\CommonDataObjectsPayrollFederal2020'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'federal' => null,
        'state' => null,
        'state_unemployment' => null,
        'w2_status' => null,
        'is2020_release' => null,
        'has2020_w4' => null,
        'federal2020' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'federal' => false,
        'state' => false,
        'state_unemployment' => false,
        'w2_status' => false,
        'is2020_release' => false,
        'has2020_w4' => false,
        'federal2020' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'federal' => 'federal',
        'state' => 'state',
        'state_unemployment' => 'stateUnemployment',
        'w2_status' => 'w2Status',
        'is2020_release' => 'is2020Release',
        'has2020_w4' => 'has2020W4',
        'federal2020' => 'federal2020'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'federal' => 'setFederal',
        'state' => 'setState',
        'state_unemployment' => 'setStateUnemployment',
        'w2_status' => 'setW2Status',
        'is2020_release' => 'setIs2020Release',
        'has2020_w4' => 'setHas2020W4',
        'federal2020' => 'setFederal2020'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'federal' => 'getFederal',
        'state' => 'getState',
        'state_unemployment' => 'getStateUnemployment',
        'w2_status' => 'getW2Status',
        'is2020_release' => 'getIs2020Release',
        'has2020_w4' => 'getHas2020W4',
        'federal2020' => 'getFederal2020'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const W2_STATUS_PAPER = 'Paper';
    public const W2_STATUS_ELECTRONIC = 'Electronic';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getW2StatusAllowableValues()
    {
        return [
            self::W2_STATUS_PAPER,
            self::W2_STATUS_ELECTRONIC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('federal', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('state_unemployment', $data ?? [], null);
        $this->setIfExists('w2_status', $data ?? [], null);
        $this->setIfExists('is2020_release', $data ?? [], null);
        $this->setIfExists('has2020_w4', $data ?? [], null);
        $this->setIfExists('federal2020', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getW2StatusAllowableValues();
        if (!is_null($this->container['w2_status']) && !in_array($this->container['w2_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'w2_status', must be one of '%s'",
                $this->container['w2_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets federal
     *
     * @return \MySdk\Model\CommonDataObjectsPayrollFederalTaxDetail|null
     */
    public function getFederal()
    {
        return $this->container['federal'];
    }

    /**
     * Sets federal
     *
     * @param \MySdk\Model\CommonDataObjectsPayrollFederalTaxDetail|null $federal federal
     *
     * @return self
     */
    public function setFederal($federal)
    {
        if (is_null($federal)) {
            throw new \InvalidArgumentException('non-nullable federal cannot be null');
        }
        $this->container['federal'] = $federal;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \MySdk\Model\CommonDataObjectsPayrollStateTaxDetail|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \MySdk\Model\CommonDataObjectsPayrollStateTaxDetail|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets state_unemployment
     *
     * @return \MySdk\Model\CommonDataObjectsPayrollStateUnemploymentInsuranceDetail|null
     */
    public function getStateUnemployment()
    {
        return $this->container['state_unemployment'];
    }

    /**
     * Sets state_unemployment
     *
     * @param \MySdk\Model\CommonDataObjectsPayrollStateUnemploymentInsuranceDetail|null $state_unemployment state_unemployment
     *
     * @return self
     */
    public function setStateUnemployment($state_unemployment)
    {
        if (is_null($state_unemployment)) {
            throw new \InvalidArgumentException('non-nullable state_unemployment cannot be null');
        }
        $this->container['state_unemployment'] = $state_unemployment;

        return $this;
    }

    /**
     * Gets w2_status
     *
     * @return string|null
     */
    public function getW2Status()
    {
        return $this->container['w2_status'];
    }

    /**
     * Sets w2_status
     *
     * @param string|null $w2_status W-2 delivery status
     *
     * @return self
     */
    public function setW2Status($w2_status)
    {
        if (is_null($w2_status)) {
            throw new \InvalidArgumentException('non-nullable w2_status cannot be null');
        }
        $allowedValues = $this->getW2StatusAllowableValues();
        if (!in_array($w2_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'w2_status', must be one of '%s'",
                    $w2_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['w2_status'] = $w2_status;

        return $this;
    }

    /**
     * Gets is2020_release
     *
     * @return bool|null
     */
    public function getIs2020Release()
    {
        return $this->container['is2020_release'];
    }

    /**
     * Sets is2020_release
     *
     * @param bool|null $is2020_release Whether the current date is after January 1, 2020
     *
     * @return self
     */
    public function setIs2020Release($is2020_release)
    {
        if (is_null($is2020_release)) {
            throw new \InvalidArgumentException('non-nullable is2020_release cannot be null');
        }
        $this->container['is2020_release'] = $is2020_release;

        return $this;
    }

    /**
     * Gets has2020_w4
     *
     * @return bool|null
     */
    public function getHas2020W4()
    {
        return $this->container['has2020_w4'];
    }

    /**
     * Sets has2020_w4
     *
     * @param bool|null $has2020_w4 Whether the W-4 is a 2020 version
     *
     * @return self
     */
    public function setHas2020W4($has2020_w4)
    {
        if (is_null($has2020_w4)) {
            throw new \InvalidArgumentException('non-nullable has2020_w4 cannot be null');
        }
        $this->container['has2020_w4'] = $has2020_w4;

        return $this;
    }

    /**
     * Gets federal2020
     *
     * @return \MySdk\Model\CommonDataObjectsPayrollFederal2020|null
     */
    public function getFederal2020()
    {
        return $this->container['federal2020'];
    }

    /**
     * Sets federal2020
     *
     * @param \MySdk\Model\CommonDataObjectsPayrollFederal2020|null $federal2020 federal2020
     *
     * @return self
     */
    public function setFederal2020($federal2020)
    {
        if (is_null($federal2020)) {
            throw new \InvalidArgumentException('non-nullable federal2020 cannot be null');
        }
        $this->container['federal2020'] = $federal2020;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


