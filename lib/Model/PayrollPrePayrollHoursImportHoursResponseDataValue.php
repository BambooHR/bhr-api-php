<?php
/**
 * PayrollPrePayrollHoursImportHoursResponseDataValue
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollPrePayrollHoursImportHoursResponseDataValue Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollPrePayrollHoursImportHoursResponseDataValue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payroll_PrePayrollHours_ImportHoursResponse_data_value';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'manager_permission_denied' => 'bool',
        'manager_core_employee_id' => 'int',
        'core_employee_id' => 'int',
        'employee_number' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'photo_url' => 'string',
        'job_title' => 'string',
        'pay_cycle_exclusion_type' => 'string',
        'payroll_hours' => '\MySdk\Model\PayrollPrePayrollHoursPayrollHourItem[]',
        'payable_hours' => '\MySdk\Model\PayrollPrePayrollHoursPayableHourItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'manager_permission_denied' => null,
        'manager_core_employee_id' => null,
        'core_employee_id' => null,
        'employee_number' => null,
        'first_name' => null,
        'last_name' => null,
        'photo_url' => null,
        'job_title' => null,
        'pay_cycle_exclusion_type' => null,
        'payroll_hours' => null,
        'payable_hours' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'manager_permission_denied' => false,
        'manager_core_employee_id' => true,
        'core_employee_id' => false,
        'employee_number' => false,
        'first_name' => false,
        'last_name' => false,
        'photo_url' => true,
        'job_title' => true,
        'pay_cycle_exclusion_type' => true,
        'payroll_hours' => false,
        'payable_hours' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'manager_permission_denied' => 'managerPermissionDenied',
        'manager_core_employee_id' => 'managerCoreEmployeeId',
        'core_employee_id' => 'coreEmployeeId',
        'employee_number' => 'employeeNumber',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'photo_url' => 'photoUrl',
        'job_title' => 'jobTitle',
        'pay_cycle_exclusion_type' => 'payCycleExclusionType',
        'payroll_hours' => 'payrollHours',
        'payable_hours' => 'payableHours'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'manager_permission_denied' => 'setManagerPermissionDenied',
        'manager_core_employee_id' => 'setManagerCoreEmployeeId',
        'core_employee_id' => 'setCoreEmployeeId',
        'employee_number' => 'setEmployeeNumber',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'photo_url' => 'setPhotoUrl',
        'job_title' => 'setJobTitle',
        'pay_cycle_exclusion_type' => 'setPayCycleExclusionType',
        'payroll_hours' => 'setPayrollHours',
        'payable_hours' => 'setPayableHours'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'manager_permission_denied' => 'getManagerPermissionDenied',
        'manager_core_employee_id' => 'getManagerCoreEmployeeId',
        'core_employee_id' => 'getCoreEmployeeId',
        'employee_number' => 'getEmployeeNumber',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'photo_url' => 'getPhotoUrl',
        'job_title' => 'getJobTitle',
        'pay_cycle_exclusion_type' => 'getPayCycleExclusionType',
        'payroll_hours' => 'getPayrollHours',
        'payable_hours' => 'getPayableHours'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAY_CYCLE_EXCLUSION_TYPE_INACTIVE_EMPLOYEE_STATUS = 'inactiveEmployeeStatus';
    public const PAY_CYCLE_EXCLUSION_TYPE_REMOVED_FROM_PAY_CYCLE = 'removedFromPayCycle';
    public const PAY_CYCLE_EXCLUSION_TYPE_DISABLED_FROM_PAYROLL = 'disabledFromPayroll';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayCycleExclusionTypeAllowableValues()
    {
        return [
            self::PAY_CYCLE_EXCLUSION_TYPE_INACTIVE_EMPLOYEE_STATUS,
            self::PAY_CYCLE_EXCLUSION_TYPE_REMOVED_FROM_PAY_CYCLE,
            self::PAY_CYCLE_EXCLUSION_TYPE_DISABLED_FROM_PAYROLL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('manager_permission_denied', $data ?? [], null);
        $this->setIfExists('manager_core_employee_id', $data ?? [], null);
        $this->setIfExists('core_employee_id', $data ?? [], null);
        $this->setIfExists('employee_number', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('photo_url', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('pay_cycle_exclusion_type', $data ?? [], null);
        $this->setIfExists('payroll_hours', $data ?? [], null);
        $this->setIfExists('payable_hours', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPayCycleExclusionTypeAllowableValues();
        if (!is_null($this->container['pay_cycle_exclusion_type']) && !in_array($this->container['pay_cycle_exclusion_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pay_cycle_exclusion_type', must be one of '%s'",
                $this->container['pay_cycle_exclusion_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets manager_permission_denied
     *
     * @return bool|null
     */
    public function getManagerPermissionDenied()
    {
        return $this->container['manager_permission_denied'];
    }

    /**
     * Sets manager_permission_denied
     *
     * @param bool|null $manager_permission_denied Indicates whether the user has access to see who the employee's manager is
     *
     * @return self
     */
    public function setManagerPermissionDenied($manager_permission_denied)
    {
        if (is_null($manager_permission_denied)) {
            throw new \InvalidArgumentException('non-nullable manager_permission_denied cannot be null');
        }
        $this->container['manager_permission_denied'] = $manager_permission_denied;

        return $this;
    }

    /**
     * Gets manager_core_employee_id
     *
     * @return int|null
     */
    public function getManagerCoreEmployeeId()
    {
        return $this->container['manager_core_employee_id'];
    }

    /**
     * Sets manager_core_employee_id
     *
     * @param int|null $manager_core_employee_id Employee ID of the employee's manager (null if managerPermissionDenied is true)
     *
     * @return self
     */
    public function setManagerCoreEmployeeId($manager_core_employee_id)
    {
        if (is_null($manager_core_employee_id)) {
            array_push($this->openAPINullablesSetToNull, 'manager_core_employee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('manager_core_employee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['manager_core_employee_id'] = $manager_core_employee_id;

        return $this;
    }

    /**
     * Gets core_employee_id
     *
     * @return int|null
     */
    public function getCoreEmployeeId()
    {
        return $this->container['core_employee_id'];
    }

    /**
     * Sets core_employee_id
     *
     * @param int|null $core_employee_id Unique identifier for the employee
     *
     * @return self
     */
    public function setCoreEmployeeId($core_employee_id)
    {
        if (is_null($core_employee_id)) {
            throw new \InvalidArgumentException('non-nullable core_employee_id cannot be null');
        }
        $this->container['core_employee_id'] = $core_employee_id;

        return $this;
    }

    /**
     * Gets employee_number
     *
     * @return string|null
     */
    public function getEmployeeNumber()
    {
        return $this->container['employee_number'];
    }

    /**
     * Sets employee_number
     *
     * @param string|null $employee_number Employee's unique identification number in the system
     *
     * @return self
     */
    public function setEmployeeNumber($employee_number)
    {
        if (is_null($employee_number)) {
            throw new \InvalidArgumentException('non-nullable employee_number cannot be null');
        }
        $this->container['employee_number'] = $employee_number;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name Employee's first name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Employee's last name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets photo_url
     *
     * @return string|null
     */
    public function getPhotoUrl()
    {
        return $this->container['photo_url'];
    }

    /**
     * Sets photo_url
     *
     * @param string|null $photo_url URL to the employee's profile photo
     *
     * @return self
     */
    public function setPhotoUrl($photo_url)
    {
        if (is_null($photo_url)) {
            array_push($this->openAPINullablesSetToNull, 'photo_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('photo_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['photo_url'] = $photo_url;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Employee's job title
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            array_push($this->openAPINullablesSetToNull, 'job_title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets pay_cycle_exclusion_type
     *
     * @return string|null
     */
    public function getPayCycleExclusionType()
    {
        return $this->container['pay_cycle_exclusion_type'];
    }

    /**
     * Sets pay_cycle_exclusion_type
     *
     * @param string|null $pay_cycle_exclusion_type Reason why an employee might be excluded from the pay cycle processing
     *
     * @return self
     */
    public function setPayCycleExclusionType($pay_cycle_exclusion_type)
    {
        if (is_null($pay_cycle_exclusion_type)) {
            array_push($this->openAPINullablesSetToNull, 'pay_cycle_exclusion_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_cycle_exclusion_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getPayCycleExclusionTypeAllowableValues();
        if (!is_null($pay_cycle_exclusion_type) && !in_array($pay_cycle_exclusion_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pay_cycle_exclusion_type', must be one of '%s'",
                    $pay_cycle_exclusion_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_cycle_exclusion_type'] = $pay_cycle_exclusion_type;

        return $this;
    }

    /**
     * Gets payroll_hours
     *
     * @return \MySdk\Model\PayrollPrePayrollHoursPayrollHourItem[]|null
     */
    public function getPayrollHours()
    {
        return $this->container['payroll_hours'];
    }

    /**
     * Sets payroll_hours
     *
     * @param \MySdk\Model\PayrollPrePayrollHoursPayrollHourItem[]|null $payroll_hours Hours to be processed for payroll for this employee
     *
     * @return self
     */
    public function setPayrollHours($payroll_hours)
    {
        if (is_null($payroll_hours)) {
            throw new \InvalidArgumentException('non-nullable payroll_hours cannot be null');
        }
        $this->container['payroll_hours'] = $payroll_hours;

        return $this;
    }

    /**
     * Gets payable_hours
     *
     * @return \MySdk\Model\PayrollPrePayrollHoursPayableHourItem[]|null
     */
    public function getPayableHours()
    {
        return $this->container['payable_hours'];
    }

    /**
     * Sets payable_hours
     *
     * @param \MySdk\Model\PayrollPrePayrollHoursPayableHourItem[]|null $payable_hours Hours that are eligible for payment for this employee
     *
     * @return self
     */
    public function setPayableHours($payable_hours)
    {
        if (is_null($payable_hours)) {
            throw new \InvalidArgumentException('non-nullable payable_hours cannot be null');
        }
        $this->container['payable_hours'] = $payable_hours;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


