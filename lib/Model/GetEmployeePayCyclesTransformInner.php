<?php
/**
 * GetEmployeePayCyclesTransformInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * GetEmployeePayCyclesTransformInner Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetEmployeePayCyclesTransformInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetEmployeePayCyclesTransform_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'external_id' => 'string',
        'pay_group_id' => 'string',
        'pay_schedule_id' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'pay_date' => '\DateTime',
        'due_date' => '\DateTime',
        'is_off_cycle' => 'string',
        'monthly_pay_cycle' => 'string',
        'created_at' => '\DateTime',
        'approved_date' => '\DateTime',
        'approved_by' => 'string',
        'paid_date' => 'string',
        'paid_by' => '\DateTime',
        'is_voided' => 'string',
        'is_ach_locked' => 'string',
        'fee_status' => 'string',
        'has_late_fee' => 'string',
        'has_deadline_fee' => 'string',
        'fee_next_deadline' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'external_id' => null,
        'pay_group_id' => null,
        'pay_schedule_id' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'pay_date' => 'date-time',
        'due_date' => 'date-time',
        'is_off_cycle' => null,
        'monthly_pay_cycle' => null,
        'created_at' => 'date-time',
        'approved_date' => 'date-time',
        'approved_by' => null,
        'paid_date' => null,
        'paid_by' => 'date-time',
        'is_voided' => null,
        'is_ach_locked' => null,
        'fee_status' => null,
        'has_late_fee' => null,
        'has_deadline_fee' => null,
        'fee_next_deadline' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'external_id' => false,
        'pay_group_id' => false,
        'pay_schedule_id' => false,
        'start_date' => false,
        'end_date' => false,
        'pay_date' => false,
        'due_date' => false,
        'is_off_cycle' => false,
        'monthly_pay_cycle' => false,
        'created_at' => false,
        'approved_date' => false,
        'approved_by' => false,
        'paid_date' => false,
        'paid_by' => false,
        'is_voided' => false,
        'is_ach_locked' => false,
        'fee_status' => false,
        'has_late_fee' => false,
        'has_deadline_fee' => false,
        'fee_next_deadline' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'external_id' => 'externalId',
        'pay_group_id' => 'payGroupId',
        'pay_schedule_id' => 'payScheduleId',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'pay_date' => 'payDate',
        'due_date' => 'dueDate',
        'is_off_cycle' => 'isOffCycle',
        'monthly_pay_cycle' => 'monthlyPayCycle',
        'created_at' => 'createdAt',
        'approved_date' => 'approvedDate',
        'approved_by' => 'approvedBy',
        'paid_date' => 'paidDate',
        'paid_by' => 'paidBy',
        'is_voided' => 'isVoided',
        'is_ach_locked' => 'isAchLocked',
        'fee_status' => 'feeStatus',
        'has_late_fee' => 'hasLateFee',
        'has_deadline_fee' => 'hasDeadlineFee',
        'fee_next_deadline' => 'feeNextDeadline'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'external_id' => 'setExternalId',
        'pay_group_id' => 'setPayGroupId',
        'pay_schedule_id' => 'setPayScheduleId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'pay_date' => 'setPayDate',
        'due_date' => 'setDueDate',
        'is_off_cycle' => 'setIsOffCycle',
        'monthly_pay_cycle' => 'setMonthlyPayCycle',
        'created_at' => 'setCreatedAt',
        'approved_date' => 'setApprovedDate',
        'approved_by' => 'setApprovedBy',
        'paid_date' => 'setPaidDate',
        'paid_by' => 'setPaidBy',
        'is_voided' => 'setIsVoided',
        'is_ach_locked' => 'setIsAchLocked',
        'fee_status' => 'setFeeStatus',
        'has_late_fee' => 'setHasLateFee',
        'has_deadline_fee' => 'setHasDeadlineFee',
        'fee_next_deadline' => 'setFeeNextDeadline'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'external_id' => 'getExternalId',
        'pay_group_id' => 'getPayGroupId',
        'pay_schedule_id' => 'getPayScheduleId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'pay_date' => 'getPayDate',
        'due_date' => 'getDueDate',
        'is_off_cycle' => 'getIsOffCycle',
        'monthly_pay_cycle' => 'getMonthlyPayCycle',
        'created_at' => 'getCreatedAt',
        'approved_date' => 'getApprovedDate',
        'approved_by' => 'getApprovedBy',
        'paid_date' => 'getPaidDate',
        'paid_by' => 'getPaidBy',
        'is_voided' => 'getIsVoided',
        'is_ach_locked' => 'getIsAchLocked',
        'fee_status' => 'getFeeStatus',
        'has_late_fee' => 'getHasLateFee',
        'has_deadline_fee' => 'getHasDeadlineFee',
        'fee_next_deadline' => 'getFeeNextDeadline'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('pay_group_id', $data ?? [], null);
        $this->setIfExists('pay_schedule_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('pay_date', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('is_off_cycle', $data ?? [], null);
        $this->setIfExists('monthly_pay_cycle', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('approved_date', $data ?? [], null);
        $this->setIfExists('approved_by', $data ?? [], null);
        $this->setIfExists('paid_date', $data ?? [], null);
        $this->setIfExists('paid_by', $data ?? [], null);
        $this->setIfExists('is_voided', $data ?? [], null);
        $this->setIfExists('is_ach_locked', $data ?? [], null);
        $this->setIfExists('fee_status', $data ?? [], null);
        $this->setIfExists('has_late_fee', $data ?? [], null);
        $this->setIfExists('has_deadline_fee', $data ?? [], null);
        $this->setIfExists('fee_next_deadline', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets pay_group_id
     *
     * @return string|null
     */
    public function getPayGroupId()
    {
        return $this->container['pay_group_id'];
    }

    /**
     * Sets pay_group_id
     *
     * @param string|null $pay_group_id pay_group_id
     *
     * @return self
     */
    public function setPayGroupId($pay_group_id)
    {
        if (is_null($pay_group_id)) {
            throw new \InvalidArgumentException('non-nullable pay_group_id cannot be null');
        }
        $this->container['pay_group_id'] = $pay_group_id;

        return $this;
    }

    /**
     * Gets pay_schedule_id
     *
     * @return string|null
     */
    public function getPayScheduleId()
    {
        return $this->container['pay_schedule_id'];
    }

    /**
     * Sets pay_schedule_id
     *
     * @param string|null $pay_schedule_id pay_schedule_id
     *
     * @return self
     */
    public function setPayScheduleId($pay_schedule_id)
    {
        if (is_null($pay_schedule_id)) {
            throw new \InvalidArgumentException('non-nullable pay_schedule_id cannot be null');
        }
        $this->container['pay_schedule_id'] = $pay_schedule_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets pay_date
     *
     * @return \DateTime|null
     */
    public function getPayDate()
    {
        return $this->container['pay_date'];
    }

    /**
     * Sets pay_date
     *
     * @param \DateTime|null $pay_date pay_date
     *
     * @return self
     */
    public function setPayDate($pay_date)
    {
        if (is_null($pay_date)) {
            throw new \InvalidArgumentException('non-nullable pay_date cannot be null');
        }
        $this->container['pay_date'] = $pay_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets is_off_cycle
     *
     * @return string|null
     */
    public function getIsOffCycle()
    {
        return $this->container['is_off_cycle'];
    }

    /**
     * Sets is_off_cycle
     *
     * @param string|null $is_off_cycle is_off_cycle
     *
     * @return self
     */
    public function setIsOffCycle($is_off_cycle)
    {
        if (is_null($is_off_cycle)) {
            throw new \InvalidArgumentException('non-nullable is_off_cycle cannot be null');
        }
        $this->container['is_off_cycle'] = $is_off_cycle;

        return $this;
    }

    /**
     * Gets monthly_pay_cycle
     *
     * @return string|null
     */
    public function getMonthlyPayCycle()
    {
        return $this->container['monthly_pay_cycle'];
    }

    /**
     * Sets monthly_pay_cycle
     *
     * @param string|null $monthly_pay_cycle monthly_pay_cycle
     *
     * @return self
     */
    public function setMonthlyPayCycle($monthly_pay_cycle)
    {
        if (is_null($monthly_pay_cycle)) {
            throw new \InvalidArgumentException('non-nullable monthly_pay_cycle cannot be null');
        }
        $this->container['monthly_pay_cycle'] = $monthly_pay_cycle;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets approved_date
     *
     * @return \DateTime|null
     */
    public function getApprovedDate()
    {
        return $this->container['approved_date'];
    }

    /**
     * Sets approved_date
     *
     * @param \DateTime|null $approved_date approved_date
     *
     * @return self
     */
    public function setApprovedDate($approved_date)
    {
        if (is_null($approved_date)) {
            throw new \InvalidArgumentException('non-nullable approved_date cannot be null');
        }
        $this->container['approved_date'] = $approved_date;

        return $this;
    }

    /**
     * Gets approved_by
     *
     * @return string|null
     */
    public function getApprovedBy()
    {
        return $this->container['approved_by'];
    }

    /**
     * Sets approved_by
     *
     * @param string|null $approved_by approved_by
     *
     * @return self
     */
    public function setApprovedBy($approved_by)
    {
        if (is_null($approved_by)) {
            throw new \InvalidArgumentException('non-nullable approved_by cannot be null');
        }
        $this->container['approved_by'] = $approved_by;

        return $this;
    }

    /**
     * Gets paid_date
     *
     * @return string|null
     */
    public function getPaidDate()
    {
        return $this->container['paid_date'];
    }

    /**
     * Sets paid_date
     *
     * @param string|null $paid_date paid_date
     *
     * @return self
     */
    public function setPaidDate($paid_date)
    {
        if (is_null($paid_date)) {
            throw new \InvalidArgumentException('non-nullable paid_date cannot be null');
        }
        $this->container['paid_date'] = $paid_date;

        return $this;
    }

    /**
     * Gets paid_by
     *
     * @return \DateTime|null
     */
    public function getPaidBy()
    {
        return $this->container['paid_by'];
    }

    /**
     * Sets paid_by
     *
     * @param \DateTime|null $paid_by paid_by
     *
     * @return self
     */
    public function setPaidBy($paid_by)
    {
        if (is_null($paid_by)) {
            throw new \InvalidArgumentException('non-nullable paid_by cannot be null');
        }
        $this->container['paid_by'] = $paid_by;

        return $this;
    }

    /**
     * Gets is_voided
     *
     * @return string|null
     */
    public function getIsVoided()
    {
        return $this->container['is_voided'];
    }

    /**
     * Sets is_voided
     *
     * @param string|null $is_voided is_voided
     *
     * @return self
     */
    public function setIsVoided($is_voided)
    {
        if (is_null($is_voided)) {
            throw new \InvalidArgumentException('non-nullable is_voided cannot be null');
        }
        $this->container['is_voided'] = $is_voided;

        return $this;
    }

    /**
     * Gets is_ach_locked
     *
     * @return string|null
     */
    public function getIsAchLocked()
    {
        return $this->container['is_ach_locked'];
    }

    /**
     * Sets is_ach_locked
     *
     * @param string|null $is_ach_locked is_ach_locked
     *
     * @return self
     */
    public function setIsAchLocked($is_ach_locked)
    {
        if (is_null($is_ach_locked)) {
            throw new \InvalidArgumentException('non-nullable is_ach_locked cannot be null');
        }
        $this->container['is_ach_locked'] = $is_ach_locked;

        return $this;
    }

    /**
     * Gets fee_status
     *
     * @return string|null
     */
    public function getFeeStatus()
    {
        return $this->container['fee_status'];
    }

    /**
     * Sets fee_status
     *
     * @param string|null $fee_status fee_status
     *
     * @return self
     */
    public function setFeeStatus($fee_status)
    {
        if (is_null($fee_status)) {
            throw new \InvalidArgumentException('non-nullable fee_status cannot be null');
        }
        $this->container['fee_status'] = $fee_status;

        return $this;
    }

    /**
     * Gets has_late_fee
     *
     * @return string|null
     */
    public function getHasLateFee()
    {
        return $this->container['has_late_fee'];
    }

    /**
     * Sets has_late_fee
     *
     * @param string|null $has_late_fee has_late_fee
     *
     * @return self
     */
    public function setHasLateFee($has_late_fee)
    {
        if (is_null($has_late_fee)) {
            throw new \InvalidArgumentException('non-nullable has_late_fee cannot be null');
        }
        $this->container['has_late_fee'] = $has_late_fee;

        return $this;
    }

    /**
     * Gets has_deadline_fee
     *
     * @return string|null
     */
    public function getHasDeadlineFee()
    {
        return $this->container['has_deadline_fee'];
    }

    /**
     * Sets has_deadline_fee
     *
     * @param string|null $has_deadline_fee has_deadline_fee
     *
     * @return self
     */
    public function setHasDeadlineFee($has_deadline_fee)
    {
        if (is_null($has_deadline_fee)) {
            throw new \InvalidArgumentException('non-nullable has_deadline_fee cannot be null');
        }
        $this->container['has_deadline_fee'] = $has_deadline_fee;

        return $this;
    }

    /**
     * Gets fee_next_deadline
     *
     * @return string|null
     */
    public function getFeeNextDeadline()
    {
        return $this->container['fee_next_deadline'];
    }

    /**
     * Sets fee_next_deadline
     *
     * @param string|null $fee_next_deadline fee_next_deadline
     *
     * @return self
     */
    public function setFeeNextDeadline($fee_next_deadline)
    {
        if (is_null($fee_next_deadline)) {
            throw new \InvalidArgumentException('non-nullable fee_next_deadline cannot be null');
        }
        $this->container['fee_next_deadline'] = $fee_next_deadline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


