<?php
/**
 * NHPGetToKnowYouEmailDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * NHPGetToKnowYouEmailDataObject Class Doc Comment
 *
 * @category Class
 * @description Class GetToKnowYouEmailDataObject
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NHPGetToKnowYouEmailDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NHP-GetToKnowYouEmailDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'employee_id' => 'int',
        'employee_url' => 'string',
        'company_name' => 'string',
        'department' => 'string',
        'location' => 'string',
        'photo_url' => 'string',
        'has_photo' => 'bool',
        'name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'job_title' => 'string',
        'post_hire_packet' => 'bool',
        'hire_date' => '\DateTime',
        'message_body' => 'string',
        'subject' => 'string',
        'title' => 'string',
        'questions' => '\MySdk\Model\NHPGtkyQuestionsAndAnswersSchema[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'employee_id' => null,
        'employee_url' => null,
        'company_name' => null,
        'department' => null,
        'location' => null,
        'photo_url' => null,
        'has_photo' => null,
        'name' => null,
        'first_name' => null,
        'last_name' => null,
        'job_title' => null,
        'post_hire_packet' => null,
        'hire_date' => 'date',
        'message_body' => null,
        'subject' => null,
        'title' => null,
        'questions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'employee_id' => false,
        'employee_url' => true,
        'company_name' => false,
        'department' => false,
        'location' => false,
        'photo_url' => false,
        'has_photo' => false,
        'name' => false,
        'first_name' => false,
        'last_name' => false,
        'job_title' => false,
        'post_hire_packet' => false,
        'hire_date' => true,
        'message_body' => true,
        'subject' => true,
        'title' => false,
        'questions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_id' => 'employeeId',
        'employee_url' => 'employeeUrl',
        'company_name' => 'companyName',
        'department' => 'department',
        'location' => 'location',
        'photo_url' => 'photoUrl',
        'has_photo' => 'hasPhoto',
        'name' => 'name',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'job_title' => 'jobTitle',
        'post_hire_packet' => 'postHirePacket',
        'hire_date' => 'hireDate',
        'message_body' => 'messageBody',
        'subject' => 'subject',
        'title' => 'title',
        'questions' => 'questions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'employee_url' => 'setEmployeeUrl',
        'company_name' => 'setCompanyName',
        'department' => 'setDepartment',
        'location' => 'setLocation',
        'photo_url' => 'setPhotoUrl',
        'has_photo' => 'setHasPhoto',
        'name' => 'setName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'job_title' => 'setJobTitle',
        'post_hire_packet' => 'setPostHirePacket',
        'hire_date' => 'setHireDate',
        'message_body' => 'setMessageBody',
        'subject' => 'setSubject',
        'title' => 'setTitle',
        'questions' => 'setQuestions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'employee_url' => 'getEmployeeUrl',
        'company_name' => 'getCompanyName',
        'department' => 'getDepartment',
        'location' => 'getLocation',
        'photo_url' => 'getPhotoUrl',
        'has_photo' => 'getHasPhoto',
        'name' => 'getName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'job_title' => 'getJobTitle',
        'post_hire_packet' => 'getPostHirePacket',
        'hire_date' => 'getHireDate',
        'message_body' => 'getMessageBody',
        'subject' => 'getSubject',
        'title' => 'getTitle',
        'questions' => 'getQuestions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('employee_url', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('photo_url', $data ?? [], null);
        $this->setIfExists('has_photo', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('job_title', $data ?? [], null);
        $this->setIfExists('post_hire_packet', $data ?? [], null);
        $this->setIfExists('hire_date', $data ?? [], null);
        $this->setIfExists('message_body', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('questions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique identifier of the email
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Unique identifier of the employee
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets employee_url
     *
     * @return string|null
     */
    public function getEmployeeUrl()
    {
        return $this->container['employee_url'];
    }

    /**
     * Sets employee_url
     *
     * @param string|null $employee_url URL of the employee's profile
     *
     * @return self
     */
    public function setEmployeeUrl($employee_url)
    {
        if (is_null($employee_url)) {
            array_push($this->openAPINullablesSetToNull, 'employee_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_url'] = $employee_url;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name Name of the company
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            throw new \InvalidArgumentException('non-nullable company_name cannot be null');
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string|null $department Department of the employee
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            throw new \InvalidArgumentException('non-nullable department cannot be null');
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location Location of the employee
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets photo_url
     *
     * @return string|null
     */
    public function getPhotoUrl()
    {
        return $this->container['photo_url'];
    }

    /**
     * Sets photo_url
     *
     * @param string|null $photo_url URL of the employee's photo
     *
     * @return self
     */
    public function setPhotoUrl($photo_url)
    {
        if (is_null($photo_url)) {
            throw new \InvalidArgumentException('non-nullable photo_url cannot be null');
        }
        $this->container['photo_url'] = $photo_url;

        return $this;
    }

    /**
     * Gets has_photo
     *
     * @return bool|null
     */
    public function getHasPhoto()
    {
        return $this->container['has_photo'];
    }

    /**
     * Sets has_photo
     *
     * @param bool|null $has_photo Indicates if the employee has a photo
     *
     * @return self
     */
    public function setHasPhoto($has_photo)
    {
        if (is_null($has_photo)) {
            throw new \InvalidArgumentException('non-nullable has_photo cannot be null');
        }
        $this->container['has_photo'] = $has_photo;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Full name of the employee
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name First name of the employee
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            throw new \InvalidArgumentException('non-nullable first_name cannot be null');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name Last name of the employee
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            throw new \InvalidArgumentException('non-nullable last_name cannot be null');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets job_title
     *
     * @return string|null
     */
    public function getJobTitle()
    {
        return $this->container['job_title'];
    }

    /**
     * Sets job_title
     *
     * @param string|null $job_title Job title of the employee
     *
     * @return self
     */
    public function setJobTitle($job_title)
    {
        if (is_null($job_title)) {
            throw new \InvalidArgumentException('non-nullable job_title cannot be null');
        }
        $this->container['job_title'] = $job_title;

        return $this;
    }

    /**
     * Gets post_hire_packet
     *
     * @return bool|null
     */
    public function getPostHirePacket()
    {
        return $this->container['post_hire_packet'];
    }

    /**
     * Sets post_hire_packet
     *
     * @param bool|null $post_hire_packet Indicates if the employee is after their hire date
     *
     * @return self
     */
    public function setPostHirePacket($post_hire_packet)
    {
        if (is_null($post_hire_packet)) {
            throw new \InvalidArgumentException('non-nullable post_hire_packet cannot be null');
        }
        $this->container['post_hire_packet'] = $post_hire_packet;

        return $this;
    }

    /**
     * Gets hire_date
     *
     * @return \DateTime|null
     */
    public function getHireDate()
    {
        return $this->container['hire_date'];
    }

    /**
     * Sets hire_date
     *
     * @param \DateTime|null $hire_date Hire date of the employee
     *
     * @return self
     */
    public function setHireDate($hire_date)
    {
        if (is_null($hire_date)) {
            array_push($this->openAPINullablesSetToNull, 'hire_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hire_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hire_date'] = $hire_date;

        return $this;
    }

    /**
     * Gets message_body
     *
     * @return string|null
     */
    public function getMessageBody()
    {
        return $this->container['message_body'];
    }

    /**
     * Sets message_body
     *
     * @param string|null $message_body Message body of the email
     *
     * @return self
     */
    public function setMessageBody($message_body)
    {
        if (is_null($message_body)) {
            array_push($this->openAPINullablesSetToNull, 'message_body');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('message_body', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['message_body'] = $message_body;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Subject of the email
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            array_push($this->openAPINullablesSetToNull, 'subject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subject', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Title of the email
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets questions
     *
     * @return \MySdk\Model\NHPGtkyQuestionsAndAnswersSchema[]|null
     */
    public function getQuestions()
    {
        return $this->container['questions'];
    }

    /**
     * Sets questions
     *
     * @param \MySdk\Model\NHPGtkyQuestionsAndAnswersSchema[]|null $questions List of questions for the employee
     *
     * @return self
     */
    public function setQuestions($questions)
    {
        if (is_null($questions)) {
            throw new \InvalidArgumentException('non-nullable questions cannot be null');
        }
        $this->container['questions'] = $questions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


