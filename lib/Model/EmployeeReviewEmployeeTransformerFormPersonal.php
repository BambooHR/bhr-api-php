<?php
/**
 * EmployeeReviewEmployeeTransformerFormPersonal
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeReviewEmployeeTransformerFormPersonal Class Doc Comment
 *
 * @category Class
 * @description Personal information for the employee
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeReviewEmployeeTransformerFormPersonal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeReviewEmployeeTransformer_form_Personal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_number' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeNumber',
        'employee_first_name' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeFirstName',
        'employee_last_name' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeLastName',
        'employee_birth_date' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeBirthDate',
        'employee_ssn' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeSsn',
        'employee_gender' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeGender',
        'employee_marital_status' => '\MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeMaritalStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_number' => null,
        'employee_first_name' => null,
        'employee_last_name' => null,
        'employee_birth_date' => null,
        'employee_ssn' => null,
        'employee_gender' => null,
        'employee_marital_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_number' => false,
        'employee_first_name' => false,
        'employee_last_name' => false,
        'employee_birth_date' => false,
        'employee_ssn' => false,
        'employee_gender' => false,
        'employee_marital_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_number' => 'employeeNumber',
        'employee_first_name' => 'employeeFirstName',
        'employee_last_name' => 'employeeLastName',
        'employee_birth_date' => 'employeeBirthDate',
        'employee_ssn' => 'employeeSsn',
        'employee_gender' => 'employeeGender',
        'employee_marital_status' => 'employeeMaritalStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_number' => 'setEmployeeNumber',
        'employee_first_name' => 'setEmployeeFirstName',
        'employee_last_name' => 'setEmployeeLastName',
        'employee_birth_date' => 'setEmployeeBirthDate',
        'employee_ssn' => 'setEmployeeSsn',
        'employee_gender' => 'setEmployeeGender',
        'employee_marital_status' => 'setEmployeeMaritalStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_number' => 'getEmployeeNumber',
        'employee_first_name' => 'getEmployeeFirstName',
        'employee_last_name' => 'getEmployeeLastName',
        'employee_birth_date' => 'getEmployeeBirthDate',
        'employee_ssn' => 'getEmployeeSsn',
        'employee_gender' => 'getEmployeeGender',
        'employee_marital_status' => 'getEmployeeMaritalStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_number', $data ?? [], null);
        $this->setIfExists('employee_first_name', $data ?? [], null);
        $this->setIfExists('employee_last_name', $data ?? [], null);
        $this->setIfExists('employee_birth_date', $data ?? [], null);
        $this->setIfExists('employee_ssn', $data ?? [], null);
        $this->setIfExists('employee_gender', $data ?? [], null);
        $this->setIfExists('employee_marital_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_number
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeNumber|null
     */
    public function getEmployeeNumber()
    {
        return $this->container['employee_number'];
    }

    /**
     * Sets employee_number
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeNumber|null $employee_number employee_number
     *
     * @return self
     */
    public function setEmployeeNumber($employee_number)
    {
        if (is_null($employee_number)) {
            throw new \InvalidArgumentException('non-nullable employee_number cannot be null');
        }
        $this->container['employee_number'] = $employee_number;

        return $this;
    }

    /**
     * Gets employee_first_name
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeFirstName|null
     */
    public function getEmployeeFirstName()
    {
        return $this->container['employee_first_name'];
    }

    /**
     * Sets employee_first_name
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeFirstName|null $employee_first_name employee_first_name
     *
     * @return self
     */
    public function setEmployeeFirstName($employee_first_name)
    {
        if (is_null($employee_first_name)) {
            throw new \InvalidArgumentException('non-nullable employee_first_name cannot be null');
        }
        $this->container['employee_first_name'] = $employee_first_name;

        return $this;
    }

    /**
     * Gets employee_last_name
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeLastName|null
     */
    public function getEmployeeLastName()
    {
        return $this->container['employee_last_name'];
    }

    /**
     * Sets employee_last_name
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeLastName|null $employee_last_name employee_last_name
     *
     * @return self
     */
    public function setEmployeeLastName($employee_last_name)
    {
        if (is_null($employee_last_name)) {
            throw new \InvalidArgumentException('non-nullable employee_last_name cannot be null');
        }
        $this->container['employee_last_name'] = $employee_last_name;

        return $this;
    }

    /**
     * Gets employee_birth_date
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeBirthDate|null
     */
    public function getEmployeeBirthDate()
    {
        return $this->container['employee_birth_date'];
    }

    /**
     * Sets employee_birth_date
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeBirthDate|null $employee_birth_date employee_birth_date
     *
     * @return self
     */
    public function setEmployeeBirthDate($employee_birth_date)
    {
        if (is_null($employee_birth_date)) {
            throw new \InvalidArgumentException('non-nullable employee_birth_date cannot be null');
        }
        $this->container['employee_birth_date'] = $employee_birth_date;

        return $this;
    }

    /**
     * Gets employee_ssn
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeSsn|null
     */
    public function getEmployeeSsn()
    {
        return $this->container['employee_ssn'];
    }

    /**
     * Sets employee_ssn
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeSsn|null $employee_ssn employee_ssn
     *
     * @return self
     */
    public function setEmployeeSsn($employee_ssn)
    {
        if (is_null($employee_ssn)) {
            throw new \InvalidArgumentException('non-nullable employee_ssn cannot be null');
        }
        $this->container['employee_ssn'] = $employee_ssn;

        return $this;
    }

    /**
     * Gets employee_gender
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeGender|null
     */
    public function getEmployeeGender()
    {
        return $this->container['employee_gender'];
    }

    /**
     * Sets employee_gender
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeGender|null $employee_gender employee_gender
     *
     * @return self
     */
    public function setEmployeeGender($employee_gender)
    {
        if (is_null($employee_gender)) {
            throw new \InvalidArgumentException('non-nullable employee_gender cannot be null');
        }
        $this->container['employee_gender'] = $employee_gender;

        return $this;
    }

    /**
     * Gets employee_marital_status
     *
     * @return \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeMaritalStatus|null
     */
    public function getEmployeeMaritalStatus()
    {
        return $this->container['employee_marital_status'];
    }

    /**
     * Sets employee_marital_status
     *
     * @param \MySdk\Model\EmployeeReviewEmployeeTransformerFormPersonalEmployeeMaritalStatus|null $employee_marital_status employee_marital_status
     *
     * @return self
     */
    public function setEmployeeMaritalStatus($employee_marital_status)
    {
        if (is_null($employee_marital_status)) {
            throw new \InvalidArgumentException('non-nullable employee_marital_status cannot be null');
        }
        $this->container['employee_marital_status'] = $employee_marital_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


