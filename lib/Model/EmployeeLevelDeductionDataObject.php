<?php
/**
 * EmployeeLevelDeductionDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeLevelDeductionDataObject Class Doc Comment
 *
 * @category Class
 * @description Data object representing an employee level deduction
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeLevelDeductionDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeLevelDeductionDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'company_level_deduction_id' => 'int',
        'employee_id' => 'int',
        'deduction_name' => 'string',
        'start_date_ymd' => '\DateTime',
        'end_date_ymd' => '\DateTime',
        'amount' => 'float',
        'amount_type' => 'string',
        'percent_type' => 'string',
        'deduction_payee_id' => 'int',
        'case_number' => 'string',
        'case_description' => 'string',
        'cap_amount' => 'float',
        'annual_max' => 'float',
        'cap_amount_type' => 'string',
        'employer_based_on' => 'string',
        'employer_amount_type' => 'string',
        'employer_amount' => 'float',
        'employer_cap_amount_type' => 'string',
        'employer_cap_amount' => 'float',
        'employer_annual_max' => 'float',
        'starting_balance' => 'float',
        'remaining_balance' => 'float',
        'additional_one_time' => 'float',
        'use_ee_annual_max_only' => 'bool',
        'case_note' => 'string',
        'case_participant_id' => 'string',
        'pay_cycle_id' => 'int',
        'global_payee_id' => 'int',
        'deduction_type_id' => 'int',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'company_level_deduction_id' => 'int64',
        'employee_id' => 'int64',
        'deduction_name' => null,
        'start_date_ymd' => 'date',
        'end_date_ymd' => 'date',
        'amount' => 'number',
        'amount_type' => null,
        'percent_type' => null,
        'deduction_payee_id' => 'int64',
        'case_number' => null,
        'case_description' => null,
        'cap_amount' => 'float',
        'annual_max' => 'float',
        'cap_amount_type' => null,
        'employer_based_on' => null,
        'employer_amount_type' => null,
        'employer_amount' => 'float',
        'employer_cap_amount_type' => null,
        'employer_cap_amount' => 'float',
        'employer_annual_max' => 'float',
        'starting_balance' => 'float',
        'remaining_balance' => 'float',
        'additional_one_time' => 'float',
        'use_ee_annual_max_only' => null,
        'case_note' => null,
        'case_participant_id' => null,
        'pay_cycle_id' => 'int64',
        'global_payee_id' => 'int64',
        'deduction_type_id' => 'int64',
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'company_level_deduction_id' => false,
        'employee_id' => false,
        'deduction_name' => false,
        'start_date_ymd' => false,
        'end_date_ymd' => true,
        'amount' => false,
        'amount_type' => false,
        'percent_type' => true,
        'deduction_payee_id' => true,
        'case_number' => false,
        'case_description' => false,
        'cap_amount' => false,
        'annual_max' => false,
        'cap_amount_type' => false,
        'employer_based_on' => false,
        'employer_amount_type' => false,
        'employer_amount' => false,
        'employer_cap_amount_type' => false,
        'employer_cap_amount' => false,
        'employer_annual_max' => false,
        'starting_balance' => false,
        'remaining_balance' => false,
        'additional_one_time' => false,
        'use_ee_annual_max_only' => false,
        'case_note' => false,
        'case_participant_id' => false,
        'pay_cycle_id' => false,
        'global_payee_id' => true,
        'deduction_type_id' => true,
        'type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_level_deduction_id' => 'companyLevelDeductionId',
        'employee_id' => 'employeeId',
        'deduction_name' => 'deductionName',
        'start_date_ymd' => 'startDateYmd',
        'end_date_ymd' => 'endDateYmd',
        'amount' => 'amount',
        'amount_type' => 'amountType',
        'percent_type' => 'percentType',
        'deduction_payee_id' => 'deductionPayeeId',
        'case_number' => 'caseNumber',
        'case_description' => 'caseDescription',
        'cap_amount' => 'capAmount',
        'annual_max' => 'annualMax',
        'cap_amount_type' => 'capAmountType',
        'employer_based_on' => 'employerBasedOn',
        'employer_amount_type' => 'employerAmountType',
        'employer_amount' => 'employerAmount',
        'employer_cap_amount_type' => 'employerCapAmountType',
        'employer_cap_amount' => 'employerCapAmount',
        'employer_annual_max' => 'employerAnnualMax',
        'starting_balance' => 'startingBalance',
        'remaining_balance' => 'remainingBalance',
        'additional_one_time' => 'additionalOneTime',
        'use_ee_annual_max_only' => 'useEeAnnualMaxOnly',
        'case_note' => 'caseNote',
        'case_participant_id' => 'caseParticipantId',
        'pay_cycle_id' => 'payCycleId',
        'global_payee_id' => 'globalPayeeId',
        'deduction_type_id' => 'deductionTypeId',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_level_deduction_id' => 'setCompanyLevelDeductionId',
        'employee_id' => 'setEmployeeId',
        'deduction_name' => 'setDeductionName',
        'start_date_ymd' => 'setStartDateYmd',
        'end_date_ymd' => 'setEndDateYmd',
        'amount' => 'setAmount',
        'amount_type' => 'setAmountType',
        'percent_type' => 'setPercentType',
        'deduction_payee_id' => 'setDeductionPayeeId',
        'case_number' => 'setCaseNumber',
        'case_description' => 'setCaseDescription',
        'cap_amount' => 'setCapAmount',
        'annual_max' => 'setAnnualMax',
        'cap_amount_type' => 'setCapAmountType',
        'employer_based_on' => 'setEmployerBasedOn',
        'employer_amount_type' => 'setEmployerAmountType',
        'employer_amount' => 'setEmployerAmount',
        'employer_cap_amount_type' => 'setEmployerCapAmountType',
        'employer_cap_amount' => 'setEmployerCapAmount',
        'employer_annual_max' => 'setEmployerAnnualMax',
        'starting_balance' => 'setStartingBalance',
        'remaining_balance' => 'setRemainingBalance',
        'additional_one_time' => 'setAdditionalOneTime',
        'use_ee_annual_max_only' => 'setUseEeAnnualMaxOnly',
        'case_note' => 'setCaseNote',
        'case_participant_id' => 'setCaseParticipantId',
        'pay_cycle_id' => 'setPayCycleId',
        'global_payee_id' => 'setGlobalPayeeId',
        'deduction_type_id' => 'setDeductionTypeId',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_level_deduction_id' => 'getCompanyLevelDeductionId',
        'employee_id' => 'getEmployeeId',
        'deduction_name' => 'getDeductionName',
        'start_date_ymd' => 'getStartDateYmd',
        'end_date_ymd' => 'getEndDateYmd',
        'amount' => 'getAmount',
        'amount_type' => 'getAmountType',
        'percent_type' => 'getPercentType',
        'deduction_payee_id' => 'getDeductionPayeeId',
        'case_number' => 'getCaseNumber',
        'case_description' => 'getCaseDescription',
        'cap_amount' => 'getCapAmount',
        'annual_max' => 'getAnnualMax',
        'cap_amount_type' => 'getCapAmountType',
        'employer_based_on' => 'getEmployerBasedOn',
        'employer_amount_type' => 'getEmployerAmountType',
        'employer_amount' => 'getEmployerAmount',
        'employer_cap_amount_type' => 'getEmployerCapAmountType',
        'employer_cap_amount' => 'getEmployerCapAmount',
        'employer_annual_max' => 'getEmployerAnnualMax',
        'starting_balance' => 'getStartingBalance',
        'remaining_balance' => 'getRemainingBalance',
        'additional_one_time' => 'getAdditionalOneTime',
        'use_ee_annual_max_only' => 'getUseEeAnnualMaxOnly',
        'case_note' => 'getCaseNote',
        'case_participant_id' => 'getCaseParticipantId',
        'pay_cycle_id' => 'getPayCycleId',
        'global_payee_id' => 'getGlobalPayeeId',
        'deduction_type_id' => 'getDeductionTypeId',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('company_level_deduction_id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('deduction_name', $data ?? [], null);
        $this->setIfExists('start_date_ymd', $data ?? [], null);
        $this->setIfExists('end_date_ymd', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_type', $data ?? [], null);
        $this->setIfExists('percent_type', $data ?? [], null);
        $this->setIfExists('deduction_payee_id', $data ?? [], null);
        $this->setIfExists('case_number', $data ?? [], null);
        $this->setIfExists('case_description', $data ?? [], null);
        $this->setIfExists('cap_amount', $data ?? [], null);
        $this->setIfExists('annual_max', $data ?? [], null);
        $this->setIfExists('cap_amount_type', $data ?? [], null);
        $this->setIfExists('employer_based_on', $data ?? [], null);
        $this->setIfExists('employer_amount_type', $data ?? [], null);
        $this->setIfExists('employer_amount', $data ?? [], null);
        $this->setIfExists('employer_cap_amount_type', $data ?? [], null);
        $this->setIfExists('employer_cap_amount', $data ?? [], null);
        $this->setIfExists('employer_annual_max', $data ?? [], null);
        $this->setIfExists('starting_balance', $data ?? [], null);
        $this->setIfExists('remaining_balance', $data ?? [], null);
        $this->setIfExists('additional_one_time', $data ?? [], null);
        $this->setIfExists('use_ee_annual_max_only', $data ?? [], null);
        $this->setIfExists('case_note', $data ?? [], null);
        $this->setIfExists('case_participant_id', $data ?? [], null);
        $this->setIfExists('pay_cycle_id', $data ?? [], null);
        $this->setIfExists('global_payee_id', $data ?? [], null);
        $this->setIfExists('deduction_type_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The unique identifier of the deduction
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_level_deduction_id
     *
     * @return int|null
     */
    public function getCompanyLevelDeductionId()
    {
        return $this->container['company_level_deduction_id'];
    }

    /**
     * Sets company_level_deduction_id
     *
     * @param int|null $company_level_deduction_id The ID of the company level deduction
     *
     * @return self
     */
    public function setCompanyLevelDeductionId($company_level_deduction_id)
    {
        if (is_null($company_level_deduction_id)) {
            throw new \InvalidArgumentException('non-nullable company_level_deduction_id cannot be null');
        }
        $this->container['company_level_deduction_id'] = $company_level_deduction_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id The ID of the employee
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets deduction_name
     *
     * @return string|null
     */
    public function getDeductionName()
    {
        return $this->container['deduction_name'];
    }

    /**
     * Sets deduction_name
     *
     * @param string|null $deduction_name The name of the deduction
     *
     * @return self
     */
    public function setDeductionName($deduction_name)
    {
        if (is_null($deduction_name)) {
            throw new \InvalidArgumentException('non-nullable deduction_name cannot be null');
        }
        $this->container['deduction_name'] = $deduction_name;

        return $this;
    }

    /**
     * Gets start_date_ymd
     *
     * @return \DateTime|null
     */
    public function getStartDateYmd()
    {
        return $this->container['start_date_ymd'];
    }

    /**
     * Sets start_date_ymd
     *
     * @param \DateTime|null $start_date_ymd The start date of the deduction in YMD format
     *
     * @return self
     */
    public function setStartDateYmd($start_date_ymd)
    {
        if (is_null($start_date_ymd)) {
            throw new \InvalidArgumentException('non-nullable start_date_ymd cannot be null');
        }
        $this->container['start_date_ymd'] = $start_date_ymd;

        return $this;
    }

    /**
     * Gets end_date_ymd
     *
     * @return \DateTime|null
     */
    public function getEndDateYmd()
    {
        return $this->container['end_date_ymd'];
    }

    /**
     * Sets end_date_ymd
     *
     * @param \DateTime|null $end_date_ymd The end date of the deduction in YMD format
     *
     * @return self
     */
    public function setEndDateYmd($end_date_ymd)
    {
        if (is_null($end_date_ymd)) {
            array_push($this->openAPINullablesSetToNull, 'end_date_ymd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date_ymd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date_ymd'] = $end_date_ymd;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The amount of the deduction
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_type
     *
     * @return string|null
     */
    public function getAmountType()
    {
        return $this->container['amount_type'];
    }

    /**
     * Sets amount_type
     *
     * @param string|null $amount_type The type of the amount
     *
     * @return self
     */
    public function setAmountType($amount_type)
    {
        if (is_null($amount_type)) {
            throw new \InvalidArgumentException('non-nullable amount_type cannot be null');
        }
        $this->container['amount_type'] = $amount_type;

        return $this;
    }

    /**
     * Gets percent_type
     *
     * @return string|null
     */
    public function getPercentType()
    {
        return $this->container['percent_type'];
    }

    /**
     * Sets percent_type
     *
     * @param string|null $percent_type The type of the percentage
     *
     * @return self
     */
    public function setPercentType($percent_type)
    {
        if (is_null($percent_type)) {
            array_push($this->openAPINullablesSetToNull, 'percent_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('percent_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['percent_type'] = $percent_type;

        return $this;
    }

    /**
     * Gets deduction_payee_id
     *
     * @return int|null
     */
    public function getDeductionPayeeId()
    {
        return $this->container['deduction_payee_id'];
    }

    /**
     * Sets deduction_payee_id
     *
     * @param int|null $deduction_payee_id The ID of the deduction payee
     *
     * @return self
     */
    public function setDeductionPayeeId($deduction_payee_id)
    {
        if (is_null($deduction_payee_id)) {
            array_push($this->openAPINullablesSetToNull, 'deduction_payee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deduction_payee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deduction_payee_id'] = $deduction_payee_id;

        return $this;
    }

    /**
     * Gets case_number
     *
     * @return string|null
     */
    public function getCaseNumber()
    {
        return $this->container['case_number'];
    }

    /**
     * Sets case_number
     *
     * @param string|null $case_number The case number associated with the deduction
     *
     * @return self
     */
    public function setCaseNumber($case_number)
    {
        if (is_null($case_number)) {
            throw new \InvalidArgumentException('non-nullable case_number cannot be null');
        }
        $this->container['case_number'] = $case_number;

        return $this;
    }

    /**
     * Gets case_description
     *
     * @return string|null
     */
    public function getCaseDescription()
    {
        return $this->container['case_description'];
    }

    /**
     * Sets case_description
     *
     * @param string|null $case_description The description of the case associated with the deduction
     *
     * @return self
     */
    public function setCaseDescription($case_description)
    {
        if (is_null($case_description)) {
            throw new \InvalidArgumentException('non-nullable case_description cannot be null');
        }
        $this->container['case_description'] = $case_description;

        return $this;
    }

    /**
     * Gets cap_amount
     *
     * @return float|null
     */
    public function getCapAmount()
    {
        return $this->container['cap_amount'];
    }

    /**
     * Sets cap_amount
     *
     * @param float|null $cap_amount The cap amount of the deduction
     *
     * @return self
     */
    public function setCapAmount($cap_amount)
    {
        if (is_null($cap_amount)) {
            throw new \InvalidArgumentException('non-nullable cap_amount cannot be null');
        }
        $this->container['cap_amount'] = $cap_amount;

        return $this;
    }

    /**
     * Gets annual_max
     *
     * @return float|null
     */
    public function getAnnualMax()
    {
        return $this->container['annual_max'];
    }

    /**
     * Sets annual_max
     *
     * @param float|null $annual_max The annual maximum of the deduction
     *
     * @return self
     */
    public function setAnnualMax($annual_max)
    {
        if (is_null($annual_max)) {
            throw new \InvalidArgumentException('non-nullable annual_max cannot be null');
        }
        $this->container['annual_max'] = $annual_max;

        return $this;
    }

    /**
     * Gets cap_amount_type
     *
     * @return string|null
     */
    public function getCapAmountType()
    {
        return $this->container['cap_amount_type'];
    }

    /**
     * Sets cap_amount_type
     *
     * @param string|null $cap_amount_type The type of the cap amount
     *
     * @return self
     */
    public function setCapAmountType($cap_amount_type)
    {
        if (is_null($cap_amount_type)) {
            throw new \InvalidArgumentException('non-nullable cap_amount_type cannot be null');
        }
        $this->container['cap_amount_type'] = $cap_amount_type;

        return $this;
    }

    /**
     * Gets employer_based_on
     *
     * @return string|null
     */
    public function getEmployerBasedOn()
    {
        return $this->container['employer_based_on'];
    }

    /**
     * Sets employer_based_on
     *
     * @param string|null $employer_based_on The basis for the employer deduction
     *
     * @return self
     */
    public function setEmployerBasedOn($employer_based_on)
    {
        if (is_null($employer_based_on)) {
            throw new \InvalidArgumentException('non-nullable employer_based_on cannot be null');
        }
        $this->container['employer_based_on'] = $employer_based_on;

        return $this;
    }

    /**
     * Gets employer_amount_type
     *
     * @return string|null
     */
    public function getEmployerAmountType()
    {
        return $this->container['employer_amount_type'];
    }

    /**
     * Sets employer_amount_type
     *
     * @param string|null $employer_amount_type The type of the employer amount
     *
     * @return self
     */
    public function setEmployerAmountType($employer_amount_type)
    {
        if (is_null($employer_amount_type)) {
            throw new \InvalidArgumentException('non-nullable employer_amount_type cannot be null');
        }
        $this->container['employer_amount_type'] = $employer_amount_type;

        return $this;
    }

    /**
     * Gets employer_amount
     *
     * @return float|null
     */
    public function getEmployerAmount()
    {
        return $this->container['employer_amount'];
    }

    /**
     * Sets employer_amount
     *
     * @param float|null $employer_amount The amount for the employer deduction
     *
     * @return self
     */
    public function setEmployerAmount($employer_amount)
    {
        if (is_null($employer_amount)) {
            throw new \InvalidArgumentException('non-nullable employer_amount cannot be null');
        }
        $this->container['employer_amount'] = $employer_amount;

        return $this;
    }

    /**
     * Gets employer_cap_amount_type
     *
     * @return string|null
     */
    public function getEmployerCapAmountType()
    {
        return $this->container['employer_cap_amount_type'];
    }

    /**
     * Sets employer_cap_amount_type
     *
     * @param string|null $employer_cap_amount_type The type of the employer cap amount
     *
     * @return self
     */
    public function setEmployerCapAmountType($employer_cap_amount_type)
    {
        if (is_null($employer_cap_amount_type)) {
            throw new \InvalidArgumentException('non-nullable employer_cap_amount_type cannot be null');
        }
        $this->container['employer_cap_amount_type'] = $employer_cap_amount_type;

        return $this;
    }

    /**
     * Gets employer_cap_amount
     *
     * @return float|null
     */
    public function getEmployerCapAmount()
    {
        return $this->container['employer_cap_amount'];
    }

    /**
     * Sets employer_cap_amount
     *
     * @param float|null $employer_cap_amount The cap amount for the employer deduction
     *
     * @return self
     */
    public function setEmployerCapAmount($employer_cap_amount)
    {
        if (is_null($employer_cap_amount)) {
            throw new \InvalidArgumentException('non-nullable employer_cap_amount cannot be null');
        }
        $this->container['employer_cap_amount'] = $employer_cap_amount;

        return $this;
    }

    /**
     * Gets employer_annual_max
     *
     * @return float|null
     */
    public function getEmployerAnnualMax()
    {
        return $this->container['employer_annual_max'];
    }

    /**
     * Sets employer_annual_max
     *
     * @param float|null $employer_annual_max The annual maximum for the employer deduction
     *
     * @return self
     */
    public function setEmployerAnnualMax($employer_annual_max)
    {
        if (is_null($employer_annual_max)) {
            throw new \InvalidArgumentException('non-nullable employer_annual_max cannot be null');
        }
        $this->container['employer_annual_max'] = $employer_annual_max;

        return $this;
    }

    /**
     * Gets starting_balance
     *
     * @return float|null
     */
    public function getStartingBalance()
    {
        return $this->container['starting_balance'];
    }

    /**
     * Sets starting_balance
     *
     * @param float|null $starting_balance The starting balance of the deduction
     *
     * @return self
     */
    public function setStartingBalance($starting_balance)
    {
        if (is_null($starting_balance)) {
            throw new \InvalidArgumentException('non-nullable starting_balance cannot be null');
        }
        $this->container['starting_balance'] = $starting_balance;

        return $this;
    }

    /**
     * Gets remaining_balance
     *
     * @return float|null
     */
    public function getRemainingBalance()
    {
        return $this->container['remaining_balance'];
    }

    /**
     * Sets remaining_balance
     *
     * @param float|null $remaining_balance The remaining balance of the deduction
     *
     * @return self
     */
    public function setRemainingBalance($remaining_balance)
    {
        if (is_null($remaining_balance)) {
            throw new \InvalidArgumentException('non-nullable remaining_balance cannot be null');
        }
        $this->container['remaining_balance'] = $remaining_balance;

        return $this;
    }

    /**
     * Gets additional_one_time
     *
     * @return float|null
     */
    public function getAdditionalOneTime()
    {
        return $this->container['additional_one_time'];
    }

    /**
     * Sets additional_one_time
     *
     * @param float|null $additional_one_time The additional one-time amount for the deduction
     *
     * @return self
     */
    public function setAdditionalOneTime($additional_one_time)
    {
        if (is_null($additional_one_time)) {
            throw new \InvalidArgumentException('non-nullable additional_one_time cannot be null');
        }
        $this->container['additional_one_time'] = $additional_one_time;

        return $this;
    }

    /**
     * Gets use_ee_annual_max_only
     *
     * @return bool|null
     */
    public function getUseEeAnnualMaxOnly()
    {
        return $this->container['use_ee_annual_max_only'];
    }

    /**
     * Sets use_ee_annual_max_only
     *
     * @param bool|null $use_ee_annual_max_only Indicates if only the employee annual max is used
     *
     * @return self
     */
    public function setUseEeAnnualMaxOnly($use_ee_annual_max_only)
    {
        if (is_null($use_ee_annual_max_only)) {
            throw new \InvalidArgumentException('non-nullable use_ee_annual_max_only cannot be null');
        }
        $this->container['use_ee_annual_max_only'] = $use_ee_annual_max_only;

        return $this;
    }

    /**
     * Gets case_note
     *
     * @return string|null
     */
    public function getCaseNote()
    {
        return $this->container['case_note'];
    }

    /**
     * Sets case_note
     *
     * @param string|null $case_note Notes related to the case
     *
     * @return self
     */
    public function setCaseNote($case_note)
    {
        if (is_null($case_note)) {
            throw new \InvalidArgumentException('non-nullable case_note cannot be null');
        }
        $this->container['case_note'] = $case_note;

        return $this;
    }

    /**
     * Gets case_participant_id
     *
     * @return string|null
     */
    public function getCaseParticipantId()
    {
        return $this->container['case_participant_id'];
    }

    /**
     * Sets case_participant_id
     *
     * @param string|null $case_participant_id The participant ID of the case, seen as Remittance ID by the customer
     *
     * @return self
     */
    public function setCaseParticipantId($case_participant_id)
    {
        if (is_null($case_participant_id)) {
            throw new \InvalidArgumentException('non-nullable case_participant_id cannot be null');
        }
        $this->container['case_participant_id'] = $case_participant_id;

        return $this;
    }

    /**
     * Gets pay_cycle_id
     *
     * @return int|null
     */
    public function getPayCycleId()
    {
        return $this->container['pay_cycle_id'];
    }

    /**
     * Sets pay_cycle_id
     *
     * @param int|null $pay_cycle_id The ID of the pay cycle
     *
     * @return self
     */
    public function setPayCycleId($pay_cycle_id)
    {
        if (is_null($pay_cycle_id)) {
            throw new \InvalidArgumentException('non-nullable pay_cycle_id cannot be null');
        }
        $this->container['pay_cycle_id'] = $pay_cycle_id;

        return $this;
    }

    /**
     * Gets global_payee_id
     *
     * @return int|null
     */
    public function getGlobalPayeeId()
    {
        return $this->container['global_payee_id'];
    }

    /**
     * Sets global_payee_id
     *
     * @param int|null $global_payee_id The global payee ID, if applicable
     *
     * @return self
     */
    public function setGlobalPayeeId($global_payee_id)
    {
        if (is_null($global_payee_id)) {
            array_push($this->openAPINullablesSetToNull, 'global_payee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('global_payee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['global_payee_id'] = $global_payee_id;

        return $this;
    }

    /**
     * Gets deduction_type_id
     *
     * @return int|null
     */
    public function getDeductionTypeId()
    {
        return $this->container['deduction_type_id'];
    }

    /**
     * Sets deduction_type_id
     *
     * @param int|null $deduction_type_id The deduction type ID, if applicable
     *
     * @return self
     */
    public function setDeductionTypeId($deduction_type_id)
    {
        if (is_null($deduction_type_id)) {
            array_push($this->openAPINullablesSetToNull, 'deduction_type_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deduction_type_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deduction_type_id'] = $deduction_type_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of deduction, default is non-benefit
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


