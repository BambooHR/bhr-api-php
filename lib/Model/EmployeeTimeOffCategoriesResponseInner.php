<?php
/**
 * EmployeeTimeOffCategoriesResponseInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeTimeOffCategoriesResponseInner Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeTimeOffCategoriesResponseInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeTimeOffCategoriesResponse_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'unit' => 'string',
        'color' => 'string',
        'icon' => 'string',
        'policy_type' => 'string',
        'balance' => 'float',
        'scheduled' => 'float',
        'used_year_to_date' => 'float',
        'calculable' => 'bool',
        'can_change_requests_to_this_type' => 'bool',
        'can_record' => 'bool',
        'can_request' => 'bool',
        'can_view' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'unit' => null,
        'color' => null,
        'icon' => null,
        'policy_type' => null,
        'balance' => 'float',
        'scheduled' => 'float',
        'used_year_to_date' => 'float',
        'calculable' => null,
        'can_change_requests_to_this_type' => null,
        'can_record' => null,
        'can_request' => null,
        'can_view' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'unit' => false,
        'color' => false,
        'icon' => false,
        'policy_type' => false,
        'balance' => false,
        'scheduled' => false,
        'used_year_to_date' => false,
        'calculable' => false,
        'can_change_requests_to_this_type' => false,
        'can_record' => false,
        'can_request' => false,
        'can_view' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'unit' => 'unit',
        'color' => 'color',
        'icon' => 'icon',
        'policy_type' => 'policyType',
        'balance' => 'balance',
        'scheduled' => 'scheduled',
        'used_year_to_date' => 'usedYearToDate',
        'calculable' => 'calculable',
        'can_change_requests_to_this_type' => 'canChangeRequestsToThisType',
        'can_record' => 'canRecord',
        'can_request' => 'canRequest',
        'can_view' => 'canView'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'unit' => 'setUnit',
        'color' => 'setColor',
        'icon' => 'setIcon',
        'policy_type' => 'setPolicyType',
        'balance' => 'setBalance',
        'scheduled' => 'setScheduled',
        'used_year_to_date' => 'setUsedYearToDate',
        'calculable' => 'setCalculable',
        'can_change_requests_to_this_type' => 'setCanChangeRequestsToThisType',
        'can_record' => 'setCanRecord',
        'can_request' => 'setCanRequest',
        'can_view' => 'setCanView'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'unit' => 'getUnit',
        'color' => 'getColor',
        'icon' => 'getIcon',
        'policy_type' => 'getPolicyType',
        'balance' => 'getBalance',
        'scheduled' => 'getScheduled',
        'used_year_to_date' => 'getUsedYearToDate',
        'calculable' => 'getCalculable',
        'can_change_requests_to_this_type' => 'getCanChangeRequestsToThisType',
        'can_record' => 'getCanRecord',
        'can_request' => 'getCanRequest',
        'can_view' => 'getCanView'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('policy_type', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('scheduled', $data ?? [], null);
        $this->setIfExists('used_year_to_date', $data ?? [], null);
        $this->setIfExists('calculable', $data ?? [], null);
        $this->setIfExists('can_change_requests_to_this_type', $data ?? [], null);
        $this->setIfExists('can_record', $data ?? [], null);
        $this->setIfExists('can_request', $data ?? [], null);
        $this->setIfExists('can_view', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            throw new \InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon icon
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            throw new \InvalidArgumentException('non-nullable icon cannot be null');
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets policy_type
     *
     * @return string|null
     */
    public function getPolicyType()
    {
        return $this->container['policy_type'];
    }

    /**
     * Sets policy_type
     *
     * @param string|null $policy_type policy_type
     *
     * @return self
     */
    public function setPolicyType($policy_type)
    {
        if (is_null($policy_type)) {
            throw new \InvalidArgumentException('non-nullable policy_type cannot be null');
        }
        $this->container['policy_type'] = $policy_type;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets scheduled
     *
     * @return float|null
     */
    public function getScheduled()
    {
        return $this->container['scheduled'];
    }

    /**
     * Sets scheduled
     *
     * @param float|null $scheduled scheduled
     *
     * @return self
     */
    public function setScheduled($scheduled)
    {
        if (is_null($scheduled)) {
            throw new \InvalidArgumentException('non-nullable scheduled cannot be null');
        }
        $this->container['scheduled'] = $scheduled;

        return $this;
    }

    /**
     * Gets used_year_to_date
     *
     * @return float|null
     */
    public function getUsedYearToDate()
    {
        return $this->container['used_year_to_date'];
    }

    /**
     * Sets used_year_to_date
     *
     * @param float|null $used_year_to_date used_year_to_date
     *
     * @return self
     */
    public function setUsedYearToDate($used_year_to_date)
    {
        if (is_null($used_year_to_date)) {
            throw new \InvalidArgumentException('non-nullable used_year_to_date cannot be null');
        }
        $this->container['used_year_to_date'] = $used_year_to_date;

        return $this;
    }

    /**
     * Gets calculable
     *
     * @return bool|null
     */
    public function getCalculable()
    {
        return $this->container['calculable'];
    }

    /**
     * Sets calculable
     *
     * @param bool|null $calculable calculable
     *
     * @return self
     */
    public function setCalculable($calculable)
    {
        if (is_null($calculable)) {
            throw new \InvalidArgumentException('non-nullable calculable cannot be null');
        }
        $this->container['calculable'] = $calculable;

        return $this;
    }

    /**
     * Gets can_change_requests_to_this_type
     *
     * @return bool|null
     */
    public function getCanChangeRequestsToThisType()
    {
        return $this->container['can_change_requests_to_this_type'];
    }

    /**
     * Sets can_change_requests_to_this_type
     *
     * @param bool|null $can_change_requests_to_this_type can_change_requests_to_this_type
     *
     * @return self
     */
    public function setCanChangeRequestsToThisType($can_change_requests_to_this_type)
    {
        if (is_null($can_change_requests_to_this_type)) {
            throw new \InvalidArgumentException('non-nullable can_change_requests_to_this_type cannot be null');
        }
        $this->container['can_change_requests_to_this_type'] = $can_change_requests_to_this_type;

        return $this;
    }

    /**
     * Gets can_record
     *
     * @return bool|null
     */
    public function getCanRecord()
    {
        return $this->container['can_record'];
    }

    /**
     * Sets can_record
     *
     * @param bool|null $can_record can_record
     *
     * @return self
     */
    public function setCanRecord($can_record)
    {
        if (is_null($can_record)) {
            throw new \InvalidArgumentException('non-nullable can_record cannot be null');
        }
        $this->container['can_record'] = $can_record;

        return $this;
    }

    /**
     * Gets can_request
     *
     * @return bool|null
     */
    public function getCanRequest()
    {
        return $this->container['can_request'];
    }

    /**
     * Sets can_request
     *
     * @param bool|null $can_request can_request
     *
     * @return self
     */
    public function setCanRequest($can_request)
    {
        if (is_null($can_request)) {
            throw new \InvalidArgumentException('non-nullable can_request cannot be null');
        }
        $this->container['can_request'] = $can_request;

        return $this;
    }

    /**
     * Gets can_view
     *
     * @return bool|null
     */
    public function getCanView()
    {
        return $this->container['can_view'];
    }

    /**
     * Sets can_view
     *
     * @param bool|null $can_view can_view
     *
     * @return self
     */
    public function setCanView($can_view)
    {
        if (is_null($can_view)) {
            throw new \InvalidArgumentException('non-nullable can_view cannot be null');
        }
        $this->container['can_view'] = $can_view;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


