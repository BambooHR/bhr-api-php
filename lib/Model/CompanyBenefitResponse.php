<?php
/**
 * CompanyBenefitResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * CompanyBenefitResponse Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyBenefitResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyBenefitResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'benefit_vendor_id' => 'string',
        'benefit_type' => 'string',
        'deduction_type_id' => 'int',
        'start_date' => 'string',
        'end_date' => 'string',
        'description' => 'string',
        'plan_url' => 'string',
        'sso_login_url' => 'string',
        'sso_login_url_link_text' => 'string',
        'safe_harbor' => 'string',
        'meet_aca_min' => 'string',
        'reimbursement_amount' => 'float',
        'reimbursement_frequency' => 'string',
        'min_essential_coverage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'benefit_vendor_id' => null,
        'benefit_type' => null,
        'deduction_type_id' => null,
        'start_date' => null,
        'end_date' => null,
        'description' => null,
        'plan_url' => null,
        'sso_login_url' => null,
        'sso_login_url_link_text' => null,
        'safe_harbor' => null,
        'meet_aca_min' => null,
        'reimbursement_amount' => null,
        'reimbursement_frequency' => null,
        'min_essential_coverage' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'benefit_vendor_id' => false,
        'benefit_type' => false,
        'deduction_type_id' => false,
        'start_date' => false,
        'end_date' => false,
        'description' => false,
        'plan_url' => false,
        'sso_login_url' => false,
        'sso_login_url_link_text' => false,
        'safe_harbor' => false,
        'meet_aca_min' => false,
        'reimbursement_amount' => false,
        'reimbursement_frequency' => false,
        'min_essential_coverage' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'benefit_vendor_id' => 'benefitVendorId',
        'benefit_type' => 'benefitType',
        'deduction_type_id' => 'deductionTypeId',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'description' => 'description',
        'plan_url' => 'planUrl',
        'sso_login_url' => 'ssoLoginUrl',
        'sso_login_url_link_text' => 'ssoLoginUrlLinkText',
        'safe_harbor' => 'safeHarbor',
        'meet_aca_min' => 'meetAcaMin',
        'reimbursement_amount' => 'reimbursementAmount',
        'reimbursement_frequency' => 'reimbursementFrequency',
        'min_essential_coverage' => 'minEssentialCoverage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'benefit_vendor_id' => 'setBenefitVendorId',
        'benefit_type' => 'setBenefitType',
        'deduction_type_id' => 'setDeductionTypeId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'description' => 'setDescription',
        'plan_url' => 'setPlanUrl',
        'sso_login_url' => 'setSsoLoginUrl',
        'sso_login_url_link_text' => 'setSsoLoginUrlLinkText',
        'safe_harbor' => 'setSafeHarbor',
        'meet_aca_min' => 'setMeetAcaMin',
        'reimbursement_amount' => 'setReimbursementAmount',
        'reimbursement_frequency' => 'setReimbursementFrequency',
        'min_essential_coverage' => 'setMinEssentialCoverage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'benefit_vendor_id' => 'getBenefitVendorId',
        'benefit_type' => 'getBenefitType',
        'deduction_type_id' => 'getDeductionTypeId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'description' => 'getDescription',
        'plan_url' => 'getPlanUrl',
        'sso_login_url' => 'getSsoLoginUrl',
        'sso_login_url_link_text' => 'getSsoLoginUrlLinkText',
        'safe_harbor' => 'getSafeHarbor',
        'meet_aca_min' => 'getMeetAcaMin',
        'reimbursement_amount' => 'getReimbursementAmount',
        'reimbursement_frequency' => 'getReimbursementFrequency',
        'min_essential_coverage' => 'getMinEssentialCoverage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BENEFIT_TYPE_HEALTH = 'health';
    public const BENEFIT_TYPE_DENTAL = 'dental';
    public const BENEFIT_TYPE_VISION = 'vision';
    public const BENEFIT_TYPE_RETIREMENT = 'retirement';
    public const BENEFIT_TYPE_HSA = 'hsa';
    public const BENEFIT_TYPE_FLEX = 'flex';
    public const BENEFIT_TYPE_LIFE = 'life';
    public const BENEFIT_TYPE_DISABILITY = 'disability';
    public const BENEFIT_TYPE_REIMBURSEMENT = 'reimbursement';
    public const BENEFIT_TYPE_SUPPLEMENTAL = 'supplemental';
    public const BENEFIT_TYPE_OTHER = 'other';
    public const REIMBURSEMENT_FREQUENCY_PAY_PERIOD = 'pay period';
    public const REIMBURSEMENT_FREQUENCY_MONTH = 'month';
    public const REIMBURSEMENT_FREQUENCY_QUARTER = 'quarter';
    public const REIMBURSEMENT_FREQUENCY_YEAR = 'year';
    public const REIMBURSEMENT_FREQUENCY_ONE_TIME = 'one time';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBenefitTypeAllowableValues()
    {
        return [
            self::BENEFIT_TYPE_HEALTH,
            self::BENEFIT_TYPE_DENTAL,
            self::BENEFIT_TYPE_VISION,
            self::BENEFIT_TYPE_RETIREMENT,
            self::BENEFIT_TYPE_HSA,
            self::BENEFIT_TYPE_FLEX,
            self::BENEFIT_TYPE_LIFE,
            self::BENEFIT_TYPE_DISABILITY,
            self::BENEFIT_TYPE_REIMBURSEMENT,
            self::BENEFIT_TYPE_SUPPLEMENTAL,
            self::BENEFIT_TYPE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReimbursementFrequencyAllowableValues()
    {
        return [
            self::REIMBURSEMENT_FREQUENCY_PAY_PERIOD,
            self::REIMBURSEMENT_FREQUENCY_MONTH,
            self::REIMBURSEMENT_FREQUENCY_QUARTER,
            self::REIMBURSEMENT_FREQUENCY_YEAR,
            self::REIMBURSEMENT_FREQUENCY_ONE_TIME,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('benefit_vendor_id', $data ?? [], null);
        $this->setIfExists('benefit_type', $data ?? [], null);
        $this->setIfExists('deduction_type_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('plan_url', $data ?? [], null);
        $this->setIfExists('sso_login_url', $data ?? [], null);
        $this->setIfExists('sso_login_url_link_text', $data ?? [], null);
        $this->setIfExists('safe_harbor', $data ?? [], null);
        $this->setIfExists('meet_aca_min', $data ?? [], null);
        $this->setIfExists('reimbursement_amount', $data ?? [], null);
        $this->setIfExists('reimbursement_frequency', $data ?? [], null);
        $this->setIfExists('min_essential_coverage', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBenefitTypeAllowableValues();
        if (!is_null($this->container['benefit_type']) && !in_array($this->container['benefit_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'benefit_type', must be one of '%s'",
                $this->container['benefit_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getReimbursementFrequencyAllowableValues();
        if (!is_null($this->container['reimbursement_frequency']) && !in_array($this->container['reimbursement_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'reimbursement_frequency', must be one of '%s'",
                $this->container['reimbursement_frequency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets benefit_vendor_id
     *
     * @return string|null
     */
    public function getBenefitVendorId()
    {
        return $this->container['benefit_vendor_id'];
    }

    /**
     * Sets benefit_vendor_id
     *
     * @param string|null $benefit_vendor_id Benefit vendor ID
     *
     * @return self
     */
    public function setBenefitVendorId($benefit_vendor_id)
    {
        if (is_null($benefit_vendor_id)) {
            throw new \InvalidArgumentException('non-nullable benefit_vendor_id cannot be null');
        }
        $this->container['benefit_vendor_id'] = $benefit_vendor_id;

        return $this;
    }

    /**
     * Gets benefit_type
     *
     * @return string|null
     */
    public function getBenefitType()
    {
        return $this->container['benefit_type'];
    }

    /**
     * Sets benefit_type
     *
     * @param string|null $benefit_type Benefit type
     *
     * @return self
     */
    public function setBenefitType($benefit_type)
    {
        if (is_null($benefit_type)) {
            throw new \InvalidArgumentException('non-nullable benefit_type cannot be null');
        }
        $allowedValues = $this->getBenefitTypeAllowableValues();
        if (!in_array($benefit_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'benefit_type', must be one of '%s'",
                    $benefit_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['benefit_type'] = $benefit_type;

        return $this;
    }

    /**
     * Gets deduction_type_id
     *
     * @return int|null
     */
    public function getDeductionTypeId()
    {
        return $this->container['deduction_type_id'];
    }

    /**
     * Sets deduction_type_id
     *
     * @param int|null $deduction_type_id Deduction type ID
     *
     * @return self
     */
    public function setDeductionTypeId($deduction_type_id)
    {
        if (is_null($deduction_type_id)) {
            throw new \InvalidArgumentException('non-nullable deduction_type_id cannot be null');
        }
        $this->container['deduction_type_id'] = $deduction_type_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date Benefit start date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date Benefit end date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets plan_url
     *
     * @return string|null
     */
    public function getPlanUrl()
    {
        return $this->container['plan_url'];
    }

    /**
     * Sets plan_url
     *
     * @param string|null $plan_url Plan url
     *
     * @return self
     */
    public function setPlanUrl($plan_url)
    {
        if (is_null($plan_url)) {
            throw new \InvalidArgumentException('non-nullable plan_url cannot be null');
        }
        $this->container['plan_url'] = $plan_url;

        return $this;
    }

    /**
     * Gets sso_login_url
     *
     * @return string|null
     */
    public function getSsoLoginUrl()
    {
        return $this->container['sso_login_url'];
    }

    /**
     * Sets sso_login_url
     *
     * @param string|null $sso_login_url SSO login url
     *
     * @return self
     */
    public function setSsoLoginUrl($sso_login_url)
    {
        if (is_null($sso_login_url)) {
            throw new \InvalidArgumentException('non-nullable sso_login_url cannot be null');
        }
        $this->container['sso_login_url'] = $sso_login_url;

        return $this;
    }

    /**
     * Gets sso_login_url_link_text
     *
     * @return string|null
     */
    public function getSsoLoginUrlLinkText()
    {
        return $this->container['sso_login_url_link_text'];
    }

    /**
     * Sets sso_login_url_link_text
     *
     * @param string|null $sso_login_url_link_text SSO login link text
     *
     * @return self
     */
    public function setSsoLoginUrlLinkText($sso_login_url_link_text)
    {
        if (is_null($sso_login_url_link_text)) {
            throw new \InvalidArgumentException('non-nullable sso_login_url_link_text cannot be null');
        }
        $this->container['sso_login_url_link_text'] = $sso_login_url_link_text;

        return $this;
    }

    /**
     * Gets safe_harbor
     *
     * @return string|null
     */
    public function getSafeHarbor()
    {
        return $this->container['safe_harbor'];
    }

    /**
     * Sets safe_harbor
     *
     * @param string|null $safe_harbor Is a safe harbor
     *
     * @return self
     */
    public function setSafeHarbor($safe_harbor)
    {
        if (is_null($safe_harbor)) {
            throw new \InvalidArgumentException('non-nullable safe_harbor cannot be null');
        }
        $this->container['safe_harbor'] = $safe_harbor;

        return $this;
    }

    /**
     * Gets meet_aca_min
     *
     * @return string|null
     */
    public function getMeetAcaMin()
    {
        return $this->container['meet_aca_min'];
    }

    /**
     * Sets meet_aca_min
     *
     * @param string|null $meet_aca_min Meets ACA minimum requirements
     *
     * @return self
     */
    public function setMeetAcaMin($meet_aca_min)
    {
        if (is_null($meet_aca_min)) {
            throw new \InvalidArgumentException('non-nullable meet_aca_min cannot be null');
        }
        $this->container['meet_aca_min'] = $meet_aca_min;

        return $this;
    }

    /**
     * Gets reimbursement_amount
     *
     * @return float|null
     */
    public function getReimbursementAmount()
    {
        return $this->container['reimbursement_amount'];
    }

    /**
     * Sets reimbursement_amount
     *
     * @param float|null $reimbursement_amount Reimbursement amount
     *
     * @return self
     */
    public function setReimbursementAmount($reimbursement_amount)
    {
        if (is_null($reimbursement_amount)) {
            throw new \InvalidArgumentException('non-nullable reimbursement_amount cannot be null');
        }
        $this->container['reimbursement_amount'] = $reimbursement_amount;

        return $this;
    }

    /**
     * Gets reimbursement_frequency
     *
     * @return string|null
     */
    public function getReimbursementFrequency()
    {
        return $this->container['reimbursement_frequency'];
    }

    /**
     * Sets reimbursement_frequency
     *
     * @param string|null $reimbursement_frequency Reimbursement frequency
     *
     * @return self
     */
    public function setReimbursementFrequency($reimbursement_frequency)
    {
        if (is_null($reimbursement_frequency)) {
            throw new \InvalidArgumentException('non-nullable reimbursement_frequency cannot be null');
        }
        $allowedValues = $this->getReimbursementFrequencyAllowableValues();
        if (!in_array($reimbursement_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'reimbursement_frequency', must be one of '%s'",
                    $reimbursement_frequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reimbursement_frequency'] = $reimbursement_frequency;

        return $this;
    }

    /**
     * Gets min_essential_coverage
     *
     * @return string|null
     */
    public function getMinEssentialCoverage()
    {
        return $this->container['min_essential_coverage'];
    }

    /**
     * Sets min_essential_coverage
     *
     * @param string|null $min_essential_coverage Provides minimum essential coverage
     *
     * @return self
     */
    public function setMinEssentialCoverage($min_essential_coverage)
    {
        if (is_null($min_essential_coverage)) {
            throw new \InvalidArgumentException('non-nullable min_essential_coverage cannot be null');
        }
        $this->container['min_essential_coverage'] = $min_essential_coverage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


