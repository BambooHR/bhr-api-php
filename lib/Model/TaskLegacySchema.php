<?php
/**
 * TaskLegacySchema
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TaskLegacySchema Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TaskLegacySchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TaskLegacySchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'type' => 'string',
        'name' => 'string',
        'description' => 'string',
        'category_id' => 'int',
        'assigned_user_id' => 'int',
        'assigned_by_user_id' => 'int',
        'sort_order' => 'int',
        'due_date' => '\DateTime',
        'can_delete' => 'bool',
        'created' => '\DateTime',
        'template_id' => 'int',
        'allow_employee_uploads' => 'string',
        'can_complete' => 'bool',
        'complete' => 'bool',
        'completed_date_time' => '\DateTime',
        'completed_user_id' => 'int',
        'archived' => 'bool',
        'comments' => '\MySdk\Model\TaskCommentSchema[]',
        'attachments' => '\MySdk\Model\TaskAttachmentLegacySchema[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'name' => null,
        'description' => null,
        'category_id' => null,
        'assigned_user_id' => null,
        'assigned_by_user_id' => null,
        'sort_order' => null,
        'due_date' => 'date',
        'can_delete' => null,
        'created' => 'date-time',
        'template_id' => null,
        'allow_employee_uploads' => null,
        'can_complete' => null,
        'complete' => null,
        'completed_date_time' => 'date-time',
        'completed_user_id' => null,
        'archived' => null,
        'comments' => null,
        'attachments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => true,
        'name' => false,
        'description' => true,
        'category_id' => true,
        'assigned_user_id' => true,
        'assigned_by_user_id' => true,
        'sort_order' => false,
        'due_date' => true,
        'can_delete' => false,
        'created' => false,
        'template_id' => true,
        'allow_employee_uploads' => false,
        'can_complete' => false,
        'complete' => false,
        'completed_date_time' => true,
        'completed_user_id' => true,
        'archived' => false,
        'comments' => false,
        'attachments' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'name' => 'name',
        'description' => 'description',
        'category_id' => 'categoryId',
        'assigned_user_id' => 'assignedUserId',
        'assigned_by_user_id' => 'assignedByUserId',
        'sort_order' => 'sortOrder',
        'due_date' => 'dueDate',
        'can_delete' => 'canDelete',
        'created' => 'created',
        'template_id' => 'templateId',
        'allow_employee_uploads' => 'allowEmployeeUploads',
        'can_complete' => 'canComplete',
        'complete' => 'complete',
        'completed_date_time' => 'completedDateTime',
        'completed_user_id' => 'completedUserId',
        'archived' => 'archived',
        'comments' => 'comments',
        'attachments' => 'attachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'name' => 'setName',
        'description' => 'setDescription',
        'category_id' => 'setCategoryId',
        'assigned_user_id' => 'setAssignedUserId',
        'assigned_by_user_id' => 'setAssignedByUserId',
        'sort_order' => 'setSortOrder',
        'due_date' => 'setDueDate',
        'can_delete' => 'setCanDelete',
        'created' => 'setCreated',
        'template_id' => 'setTemplateId',
        'allow_employee_uploads' => 'setAllowEmployeeUploads',
        'can_complete' => 'setCanComplete',
        'complete' => 'setComplete',
        'completed_date_time' => 'setCompletedDateTime',
        'completed_user_id' => 'setCompletedUserId',
        'archived' => 'setArchived',
        'comments' => 'setComments',
        'attachments' => 'setAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'name' => 'getName',
        'description' => 'getDescription',
        'category_id' => 'getCategoryId',
        'assigned_user_id' => 'getAssignedUserId',
        'assigned_by_user_id' => 'getAssignedByUserId',
        'sort_order' => 'getSortOrder',
        'due_date' => 'getDueDate',
        'can_delete' => 'getCanDelete',
        'created' => 'getCreated',
        'template_id' => 'getTemplateId',
        'allow_employee_uploads' => 'getAllowEmployeeUploads',
        'can_complete' => 'getCanComplete',
        'complete' => 'getComplete',
        'completed_date_time' => 'getCompletedDateTime',
        'completed_user_id' => 'getCompletedUserId',
        'archived' => 'getArchived',
        'comments' => 'getComments',
        'attachments' => 'getAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_REGULAR = 'regular';
    public const TYPE_FILE_UPLOAD = 'file_upload';
    public const TYPE_ESIGNATURE = 'esignature';
    public const TYPE_QUICKBOOKS_PAYROLL = 'quickbooks_payroll';
    public const ALLOW_EMPLOYEE_UPLOADS_YES = 'yes';
    public const ALLOW_EMPLOYEE_UPLOADS_NO = 'no';
    public const ALLOW_EMPLOYEE_UPLOADS_REQUIRED = 'required';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_REGULAR,
            self::TYPE_FILE_UPLOAD,
            self::TYPE_ESIGNATURE,
            self::TYPE_QUICKBOOKS_PAYROLL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowEmployeeUploadsAllowableValues()
    {
        return [
            self::ALLOW_EMPLOYEE_UPLOADS_YES,
            self::ALLOW_EMPLOYEE_UPLOADS_NO,
            self::ALLOW_EMPLOYEE_UPLOADS_REQUIRED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('assigned_user_id', $data ?? [], null);
        $this->setIfExists('assigned_by_user_id', $data ?? [], null);
        $this->setIfExists('sort_order', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('can_delete', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('template_id', $data ?? [], null);
        $this->setIfExists('allow_employee_uploads', $data ?? [], null);
        $this->setIfExists('can_complete', $data ?? [], null);
        $this->setIfExists('complete', $data ?? [], null);
        $this->setIfExists('completed_date_time', $data ?? [], null);
        $this->setIfExists('completed_user_id', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('attachments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAllowEmployeeUploadsAllowableValues();
        if (!is_null($this->container['allow_employee_uploads']) && !in_array($this->container['allow_employee_uploads'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_employee_uploads', must be one of '%s'",
                $this->container['allow_employee_uploads'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Task ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Task Type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Task Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Task Description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id Task Category ID
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            array_push($this->openAPINullablesSetToNull, 'category_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets assigned_user_id
     *
     * @return int|null
     */
    public function getAssignedUserId()
    {
        return $this->container['assigned_user_id'];
    }

    /**
     * Sets assigned_user_id
     *
     * @param int|null $assigned_user_id Task Assigned User ID
     *
     * @return self
     */
    public function setAssignedUserId($assigned_user_id)
    {
        if (is_null($assigned_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'assigned_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assigned_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assigned_user_id'] = $assigned_user_id;

        return $this;
    }

    /**
     * Gets assigned_by_user_id
     *
     * @return int|null
     */
    public function getAssignedByUserId()
    {
        return $this->container['assigned_by_user_id'];
    }

    /**
     * Sets assigned_by_user_id
     *
     * @param int|null $assigned_by_user_id Task Assigned By User ID
     *
     * @return self
     */
    public function setAssignedByUserId($assigned_by_user_id)
    {
        if (is_null($assigned_by_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'assigned_by_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assigned_by_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assigned_by_user_id'] = $assigned_by_user_id;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int|null $sort_order Task Sort Order
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        if (is_null($sort_order)) {
            throw new \InvalidArgumentException('non-nullable sort_order cannot be null');
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date Task Due Date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            array_push($this->openAPINullablesSetToNull, 'due_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('due_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool|null
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool|null $can_delete Task Can Delete
     *
     * @return self
     */
    public function setCanDelete($can_delete)
    {
        if (is_null($can_delete)) {
            throw new \InvalidArgumentException('non-nullable can_delete cannot be null');
        }
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created Task Created Date
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return int|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param int|null $template_id Task Template ID
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        if (is_null($template_id)) {
            array_push($this->openAPINullablesSetToNull, 'template_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets allow_employee_uploads
     *
     * @return string|null
     */
    public function getAllowEmployeeUploads()
    {
        return $this->container['allow_employee_uploads'];
    }

    /**
     * Sets allow_employee_uploads
     *
     * @param string|null $allow_employee_uploads Task Allow Employee Uploads
     *
     * @return self
     */
    public function setAllowEmployeeUploads($allow_employee_uploads)
    {
        if (is_null($allow_employee_uploads)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_uploads cannot be null');
        }
        $allowedValues = $this->getAllowEmployeeUploadsAllowableValues();
        if (!in_array($allow_employee_uploads, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_employee_uploads', must be one of '%s'",
                    $allow_employee_uploads,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_employee_uploads'] = $allow_employee_uploads;

        return $this;
    }

    /**
     * Gets can_complete
     *
     * @return bool|null
     */
    public function getCanComplete()
    {
        return $this->container['can_complete'];
    }

    /**
     * Sets can_complete
     *
     * @param bool|null $can_complete Task Can Complete
     *
     * @return self
     */
    public function setCanComplete($can_complete)
    {
        if (is_null($can_complete)) {
            throw new \InvalidArgumentException('non-nullable can_complete cannot be null');
        }
        $this->container['can_complete'] = $can_complete;

        return $this;
    }

    /**
     * Gets complete
     *
     * @return bool|null
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     *
     * @param bool|null $complete Task Complete
     *
     * @return self
     */
    public function setComplete($complete)
    {
        if (is_null($complete)) {
            throw new \InvalidArgumentException('non-nullable complete cannot be null');
        }
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets completed_date_time
     *
     * @return \DateTime|null
     */
    public function getCompletedDateTime()
    {
        return $this->container['completed_date_time'];
    }

    /**
     * Sets completed_date_time
     *
     * @param \DateTime|null $completed_date_time Task Completed DateTime
     *
     * @return self
     */
    public function setCompletedDateTime($completed_date_time)
    {
        if (is_null($completed_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'completed_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completed_date_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completed_date_time'] = $completed_date_time;

        return $this;
    }

    /**
     * Gets completed_user_id
     *
     * @return int|null
     */
    public function getCompletedUserId()
    {
        return $this->container['completed_user_id'];
    }

    /**
     * Sets completed_user_id
     *
     * @param int|null $completed_user_id Task Completed User ID
     *
     * @return self
     */
    public function setCompletedUserId($completed_user_id)
    {
        if (is_null($completed_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'completed_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completed_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completed_user_id'] = $completed_user_id;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Task Archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \MySdk\Model\TaskCommentSchema[]|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \MySdk\Model\TaskCommentSchema[]|null $comments Task Comments
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \MySdk\Model\TaskAttachmentLegacySchema[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \MySdk\Model\TaskAttachmentLegacySchema[]|null $attachments Task Attachments
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        if (is_null($attachments)) {
            throw new \InvalidArgumentException('non-nullable attachments cannot be null');
        }
        $this->container['attachments'] = $attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


