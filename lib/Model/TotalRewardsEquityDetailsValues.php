<?php
/**
 * TotalRewardsEquityDetailsValues
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TotalRewardsEquityDetailsValues Class Doc Comment
 *
 * @category Class
 * @description Schema for total rewards equity details values
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TotalRewardsEquityDetailsValues implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TotalRewards-EquityDetailsValues';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cliff_months' => 'int',
        'estimated_exercise_cost' => 'string',
        'estimated_share_price' => 'string',
        'estimated_total_value' => 'string',
        'grant_date' => '\DateTime',
        'grant_type' => 'string',
        'grant_name' => 'string',
        'equity_growth_chart_data' => '\MySdk\Model\TotalRewardsEquityGrowthChartItem[]',
        'num_shares' => 'int',
        'num_vested_shares' => 'int',
        'percent_vested' => 'float',
        'strike_price' => 'string',
        'vesting_months' => 'int',
        'vesting_schedule' => 'string',
        'vesting_start_date' => '\DateTime',
        'vested_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cliff_months' => null,
        'estimated_exercise_cost' => null,
        'estimated_share_price' => null,
        'estimated_total_value' => null,
        'grant_date' => 'date',
        'grant_type' => null,
        'grant_name' => null,
        'equity_growth_chart_data' => null,
        'num_shares' => null,
        'num_vested_shares' => null,
        'percent_vested' => 'float',
        'strike_price' => null,
        'vesting_months' => null,
        'vesting_schedule' => null,
        'vesting_start_date' => 'date',
        'vested_value' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cliff_months' => true,
        'estimated_exercise_cost' => true,
        'estimated_share_price' => false,
        'estimated_total_value' => false,
        'grant_date' => false,
        'grant_type' => false,
        'grant_name' => true,
        'equity_growth_chart_data' => true,
        'num_shares' => false,
        'num_vested_shares' => false,
        'percent_vested' => false,
        'strike_price' => true,
        'vesting_months' => true,
        'vesting_schedule' => false,
        'vesting_start_date' => false,
        'vested_value' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cliff_months' => 'cliffMonths',
        'estimated_exercise_cost' => 'estimatedExerciseCost',
        'estimated_share_price' => 'estimatedSharePrice',
        'estimated_total_value' => 'estimatedTotalValue',
        'grant_date' => 'grantDate',
        'grant_type' => 'grantType',
        'grant_name' => 'grantName',
        'equity_growth_chart_data' => 'equityGrowthChartData',
        'num_shares' => 'numShares',
        'num_vested_shares' => 'numVestedShares',
        'percent_vested' => 'percentVested',
        'strike_price' => 'strikePrice',
        'vesting_months' => 'vestingMonths',
        'vesting_schedule' => 'vestingSchedule',
        'vesting_start_date' => 'vestingStartDate',
        'vested_value' => 'vestedValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cliff_months' => 'setCliffMonths',
        'estimated_exercise_cost' => 'setEstimatedExerciseCost',
        'estimated_share_price' => 'setEstimatedSharePrice',
        'estimated_total_value' => 'setEstimatedTotalValue',
        'grant_date' => 'setGrantDate',
        'grant_type' => 'setGrantType',
        'grant_name' => 'setGrantName',
        'equity_growth_chart_data' => 'setEquityGrowthChartData',
        'num_shares' => 'setNumShares',
        'num_vested_shares' => 'setNumVestedShares',
        'percent_vested' => 'setPercentVested',
        'strike_price' => 'setStrikePrice',
        'vesting_months' => 'setVestingMonths',
        'vesting_schedule' => 'setVestingSchedule',
        'vesting_start_date' => 'setVestingStartDate',
        'vested_value' => 'setVestedValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cliff_months' => 'getCliffMonths',
        'estimated_exercise_cost' => 'getEstimatedExerciseCost',
        'estimated_share_price' => 'getEstimatedSharePrice',
        'estimated_total_value' => 'getEstimatedTotalValue',
        'grant_date' => 'getGrantDate',
        'grant_type' => 'getGrantType',
        'grant_name' => 'getGrantName',
        'equity_growth_chart_data' => 'getEquityGrowthChartData',
        'num_shares' => 'getNumShares',
        'num_vested_shares' => 'getNumVestedShares',
        'percent_vested' => 'getPercentVested',
        'strike_price' => 'getStrikePrice',
        'vesting_months' => 'getVestingMonths',
        'vesting_schedule' => 'getVestingSchedule',
        'vesting_start_date' => 'getVestingStartDate',
        'vested_value' => 'getVestedValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cliff_months', $data ?? [], null);
        $this->setIfExists('estimated_exercise_cost', $data ?? [], null);
        $this->setIfExists('estimated_share_price', $data ?? [], null);
        $this->setIfExists('estimated_total_value', $data ?? [], null);
        $this->setIfExists('grant_date', $data ?? [], null);
        $this->setIfExists('grant_type', $data ?? [], null);
        $this->setIfExists('grant_name', $data ?? [], null);
        $this->setIfExists('equity_growth_chart_data', $data ?? [], null);
        $this->setIfExists('num_shares', $data ?? [], null);
        $this->setIfExists('num_vested_shares', $data ?? [], null);
        $this->setIfExists('percent_vested', $data ?? [], null);
        $this->setIfExists('strike_price', $data ?? [], null);
        $this->setIfExists('vesting_months', $data ?? [], null);
        $this->setIfExists('vesting_schedule', $data ?? [], null);
        $this->setIfExists('vesting_start_date', $data ?? [], null);
        $this->setIfExists('vested_value', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cliff_months
     *
     * @return int|null
     */
    public function getCliffMonths()
    {
        return $this->container['cliff_months'];
    }

    /**
     * Sets cliff_months
     *
     * @param int|null $cliff_months Cliff months
     *
     * @return self
     */
    public function setCliffMonths($cliff_months)
    {
        if (is_null($cliff_months)) {
            array_push($this->openAPINullablesSetToNull, 'cliff_months');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cliff_months', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cliff_months'] = $cliff_months;

        return $this;
    }

    /**
     * Gets estimated_exercise_cost
     *
     * @return string|null
     */
    public function getEstimatedExerciseCost()
    {
        return $this->container['estimated_exercise_cost'];
    }

    /**
     * Sets estimated_exercise_cost
     *
     * @param string|null $estimated_exercise_cost Estimated exercise cost
     *
     * @return self
     */
    public function setEstimatedExerciseCost($estimated_exercise_cost)
    {
        if (is_null($estimated_exercise_cost)) {
            array_push($this->openAPINullablesSetToNull, 'estimated_exercise_cost');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('estimated_exercise_cost', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['estimated_exercise_cost'] = $estimated_exercise_cost;

        return $this;
    }

    /**
     * Gets estimated_share_price
     *
     * @return string|null
     */
    public function getEstimatedSharePrice()
    {
        return $this->container['estimated_share_price'];
    }

    /**
     * Sets estimated_share_price
     *
     * @param string|null $estimated_share_price Estimated share price
     *
     * @return self
     */
    public function setEstimatedSharePrice($estimated_share_price)
    {
        if (is_null($estimated_share_price)) {
            throw new \InvalidArgumentException('non-nullable estimated_share_price cannot be null');
        }
        $this->container['estimated_share_price'] = $estimated_share_price;

        return $this;
    }

    /**
     * Gets estimated_total_value
     *
     * @return string|null
     */
    public function getEstimatedTotalValue()
    {
        return $this->container['estimated_total_value'];
    }

    /**
     * Sets estimated_total_value
     *
     * @param string|null $estimated_total_value Estimated total value
     *
     * @return self
     */
    public function setEstimatedTotalValue($estimated_total_value)
    {
        if (is_null($estimated_total_value)) {
            throw new \InvalidArgumentException('non-nullable estimated_total_value cannot be null');
        }
        $this->container['estimated_total_value'] = $estimated_total_value;

        return $this;
    }

    /**
     * Gets grant_date
     *
     * @return \DateTime|null
     */
    public function getGrantDate()
    {
        return $this->container['grant_date'];
    }

    /**
     * Sets grant_date
     *
     * @param \DateTime|null $grant_date Grant date
     *
     * @return self
     */
    public function setGrantDate($grant_date)
    {
        if (is_null($grant_date)) {
            throw new \InvalidArgumentException('non-nullable grant_date cannot be null');
        }
        $this->container['grant_date'] = $grant_date;

        return $this;
    }

    /**
     * Gets grant_type
     *
     * @return string|null
     */
    public function getGrantType()
    {
        return $this->container['grant_type'];
    }

    /**
     * Sets grant_type
     *
     * @param string|null $grant_type Grant type
     *
     * @return self
     */
    public function setGrantType($grant_type)
    {
        if (is_null($grant_type)) {
            throw new \InvalidArgumentException('non-nullable grant_type cannot be null');
        }
        $this->container['grant_type'] = $grant_type;

        return $this;
    }

    /**
     * Gets grant_name
     *
     * @return string|null
     */
    public function getGrantName()
    {
        return $this->container['grant_name'];
    }

    /**
     * Sets grant_name
     *
     * @param string|null $grant_name Grant name
     *
     * @return self
     */
    public function setGrantName($grant_name)
    {
        if (is_null($grant_name)) {
            array_push($this->openAPINullablesSetToNull, 'grant_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grant_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grant_name'] = $grant_name;

        return $this;
    }

    /**
     * Gets equity_growth_chart_data
     *
     * @return \MySdk\Model\TotalRewardsEquityGrowthChartItem[]|null
     */
    public function getEquityGrowthChartData()
    {
        return $this->container['equity_growth_chart_data'];
    }

    /**
     * Sets equity_growth_chart_data
     *
     * @param \MySdk\Model\TotalRewardsEquityGrowthChartItem[]|null $equity_growth_chart_data Equity growth chart data
     *
     * @return self
     */
    public function setEquityGrowthChartData($equity_growth_chart_data)
    {
        if (is_null($equity_growth_chart_data)) {
            array_push($this->openAPINullablesSetToNull, 'equity_growth_chart_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('equity_growth_chart_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['equity_growth_chart_data'] = $equity_growth_chart_data;

        return $this;
    }

    /**
     * Gets num_shares
     *
     * @return int|null
     */
    public function getNumShares()
    {
        return $this->container['num_shares'];
    }

    /**
     * Sets num_shares
     *
     * @param int|null $num_shares Number of shares
     *
     * @return self
     */
    public function setNumShares($num_shares)
    {
        if (is_null($num_shares)) {
            throw new \InvalidArgumentException('non-nullable num_shares cannot be null');
        }
        $this->container['num_shares'] = $num_shares;

        return $this;
    }

    /**
     * Gets num_vested_shares
     *
     * @return int|null
     */
    public function getNumVestedShares()
    {
        return $this->container['num_vested_shares'];
    }

    /**
     * Sets num_vested_shares
     *
     * @param int|null $num_vested_shares Number of vested shares
     *
     * @return self
     */
    public function setNumVestedShares($num_vested_shares)
    {
        if (is_null($num_vested_shares)) {
            throw new \InvalidArgumentException('non-nullable num_vested_shares cannot be null');
        }
        $this->container['num_vested_shares'] = $num_vested_shares;

        return $this;
    }

    /**
     * Gets percent_vested
     *
     * @return float|null
     */
    public function getPercentVested()
    {
        return $this->container['percent_vested'];
    }

    /**
     * Sets percent_vested
     *
     * @param float|null $percent_vested Percent vested
     *
     * @return self
     */
    public function setPercentVested($percent_vested)
    {
        if (is_null($percent_vested)) {
            throw new \InvalidArgumentException('non-nullable percent_vested cannot be null');
        }
        $this->container['percent_vested'] = $percent_vested;

        return $this;
    }

    /**
     * Gets strike_price
     *
     * @return string|null
     */
    public function getStrikePrice()
    {
        return $this->container['strike_price'];
    }

    /**
     * Sets strike_price
     *
     * @param string|null $strike_price Strike price
     *
     * @return self
     */
    public function setStrikePrice($strike_price)
    {
        if (is_null($strike_price)) {
            array_push($this->openAPINullablesSetToNull, 'strike_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('strike_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['strike_price'] = $strike_price;

        return $this;
    }

    /**
     * Gets vesting_months
     *
     * @return int|null
     */
    public function getVestingMonths()
    {
        return $this->container['vesting_months'];
    }

    /**
     * Sets vesting_months
     *
     * @param int|null $vesting_months Vesting months
     *
     * @return self
     */
    public function setVestingMonths($vesting_months)
    {
        if (is_null($vesting_months)) {
            array_push($this->openAPINullablesSetToNull, 'vesting_months');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vesting_months', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vesting_months'] = $vesting_months;

        return $this;
    }

    /**
     * Gets vesting_schedule
     *
     * @return string|null
     */
    public function getVestingSchedule()
    {
        return $this->container['vesting_schedule'];
    }

    /**
     * Sets vesting_schedule
     *
     * @param string|null $vesting_schedule Vesting schedule
     *
     * @return self
     */
    public function setVestingSchedule($vesting_schedule)
    {
        if (is_null($vesting_schedule)) {
            throw new \InvalidArgumentException('non-nullable vesting_schedule cannot be null');
        }
        $this->container['vesting_schedule'] = $vesting_schedule;

        return $this;
    }

    /**
     * Gets vesting_start_date
     *
     * @return \DateTime|null
     */
    public function getVestingStartDate()
    {
        return $this->container['vesting_start_date'];
    }

    /**
     * Sets vesting_start_date
     *
     * @param \DateTime|null $vesting_start_date Vesting start date
     *
     * @return self
     */
    public function setVestingStartDate($vesting_start_date)
    {
        if (is_null($vesting_start_date)) {
            throw new \InvalidArgumentException('non-nullable vesting_start_date cannot be null');
        }
        $this->container['vesting_start_date'] = $vesting_start_date;

        return $this;
    }

    /**
     * Gets vested_value
     *
     * @return string|null
     */
    public function getVestedValue()
    {
        return $this->container['vested_value'];
    }

    /**
     * Sets vested_value
     *
     * @param string|null $vested_value Vested value
     *
     * @return self
     */
    public function setVestedValue($vested_value)
    {
        if (is_null($vested_value)) {
            throw new \InvalidArgumentException('non-nullable vested_value cannot be null');
        }
        $this->container['vested_value'] = $vested_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


