<?php
/**
 * DailyDetailApiTransformer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * DailyDetailApiTransformer Class Doc Comment
 *
 * @category Class
 * @description Daily detail data.
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DailyDetailApiTransformer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DailyDetailApiTransformer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'date' => '\DateTime',
        'hours' => 'float',
        'total_hours' => 'float',
        'clock_entries' => '\MySdk\Model\ClockEntryApiTransformer[]',
        'hour_entries' => '\MySdk\Model\HourEntryApiTransformer[]',
        'time_off' => '\MySdk\Model\DailyDetailApiTransformerTimeOffInner[]',
        'holidays' => '\MySdk\Model\DailyDetailApiTransformerHolidaysInner[]',
        'has_work_week_starts_on_changed' => 'bool',
        'overtime_hours' => 'float',
        'overtime_summary' => '\MySdk\Model\DailyDetailApiTransformerOvertimeSummary',
        'hour_summary' => '\MySdk\Model\BasicTimesheetApiTransformerHourSummaryInner[]',
        'shift_differentials' => '\MySdk\Model\BasicTimesheetApiTransformerShiftDifferentialsInner[]',
        'time_off_hours' => 'float',
        'holiday_hours' => 'float',
        'note' => 'string',
        'project_info' => '\MySdk\Model\ProjectInfoApiTransformer',
        'history_event_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'date' => 'date',
        'hours' => 'float',
        'total_hours' => 'float',
        'clock_entries' => null,
        'hour_entries' => null,
        'time_off' => null,
        'holidays' => null,
        'has_work_week_starts_on_changed' => null,
        'overtime_hours' => 'float',
        'overtime_summary' => null,
        'hour_summary' => null,
        'shift_differentials' => null,
        'time_off_hours' => 'float',
        'holiday_hours' => 'float',
        'note' => null,
        'project_info' => null,
        'history_event_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'date' => false,
        'hours' => true,
        'total_hours' => true,
        'clock_entries' => false,
        'hour_entries' => false,
        'time_off' => false,
        'holidays' => false,
        'has_work_week_starts_on_changed' => false,
        'overtime_hours' => false,
        'overtime_summary' => false,
        'hour_summary' => false,
        'shift_differentials' => false,
        'time_off_hours' => true,
        'holiday_hours' => false,
        'note' => true,
        'project_info' => true,
        'history_event_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'date' => 'date',
        'hours' => 'hours',
        'total_hours' => 'totalHours',
        'clock_entries' => 'clockEntries',
        'hour_entries' => 'hourEntries',
        'time_off' => 'timeOff',
        'holidays' => 'holidays',
        'has_work_week_starts_on_changed' => 'hasWorkWeekStartsOnChanged',
        'overtime_hours' => 'overtimeHours',
        'overtime_summary' => 'overtimeSummary',
        'hour_summary' => 'hourSummary',
        'shift_differentials' => 'shiftDifferentials',
        'time_off_hours' => 'timeOffHours',
        'holiday_hours' => 'holidayHours',
        'note' => 'note',
        'project_info' => 'projectInfo',
        'history_event_count' => 'historyEventCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'date' => 'setDate',
        'hours' => 'setHours',
        'total_hours' => 'setTotalHours',
        'clock_entries' => 'setClockEntries',
        'hour_entries' => 'setHourEntries',
        'time_off' => 'setTimeOff',
        'holidays' => 'setHolidays',
        'has_work_week_starts_on_changed' => 'setHasWorkWeekStartsOnChanged',
        'overtime_hours' => 'setOvertimeHours',
        'overtime_summary' => 'setOvertimeSummary',
        'hour_summary' => 'setHourSummary',
        'shift_differentials' => 'setShiftDifferentials',
        'time_off_hours' => 'setTimeOffHours',
        'holiday_hours' => 'setHolidayHours',
        'note' => 'setNote',
        'project_info' => 'setProjectInfo',
        'history_event_count' => 'setHistoryEventCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'date' => 'getDate',
        'hours' => 'getHours',
        'total_hours' => 'getTotalHours',
        'clock_entries' => 'getClockEntries',
        'hour_entries' => 'getHourEntries',
        'time_off' => 'getTimeOff',
        'holidays' => 'getHolidays',
        'has_work_week_starts_on_changed' => 'getHasWorkWeekStartsOnChanged',
        'overtime_hours' => 'getOvertimeHours',
        'overtime_summary' => 'getOvertimeSummary',
        'hour_summary' => 'getHourSummary',
        'shift_differentials' => 'getShiftDifferentials',
        'time_off_hours' => 'getTimeOffHours',
        'holiday_hours' => 'getHolidayHours',
        'note' => 'getNote',
        'project_info' => 'getProjectInfo',
        'history_event_count' => 'getHistoryEventCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('hours', $data ?? [], null);
        $this->setIfExists('total_hours', $data ?? [], null);
        $this->setIfExists('clock_entries', $data ?? [], null);
        $this->setIfExists('hour_entries', $data ?? [], null);
        $this->setIfExists('time_off', $data ?? [], null);
        $this->setIfExists('holidays', $data ?? [], null);
        $this->setIfExists('has_work_week_starts_on_changed', $data ?? [], null);
        $this->setIfExists('overtime_hours', $data ?? [], null);
        $this->setIfExists('overtime_summary', $data ?? [], null);
        $this->setIfExists('hour_summary', $data ?? [], null);
        $this->setIfExists('shift_differentials', $data ?? [], null);
        $this->setIfExists('time_off_hours', $data ?? [], null);
        $this->setIfExists('holiday_hours', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('project_info', $data ?? [], null);
        $this->setIfExists('history_event_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Daily detail ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Date of the timesheet
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets hours
     *
     * @return float|null
     */
    public function getHours()
    {
        return $this->container['hours'];
    }

    /**
     * Sets hours
     *
     * @param float|null $hours Hours worked
     *
     * @return self
     */
    public function setHours($hours)
    {
        if (is_null($hours)) {
            array_push($this->openAPINullablesSetToNull, 'hours');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hours', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hours'] = $hours;

        return $this;
    }

    /**
     * Gets total_hours
     *
     * @return float|null
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param float|null $total_hours Total hours worked
     *
     * @return self
     */
    public function setTotalHours($total_hours)
    {
        if (is_null($total_hours)) {
            array_push($this->openAPINullablesSetToNull, 'total_hours');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_hours', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets clock_entries
     *
     * @return \MySdk\Model\ClockEntryApiTransformer[]|null
     */
    public function getClockEntries()
    {
        return $this->container['clock_entries'];
    }

    /**
     * Sets clock_entries
     *
     * @param \MySdk\Model\ClockEntryApiTransformer[]|null $clock_entries Clock entries
     *
     * @return self
     */
    public function setClockEntries($clock_entries)
    {
        if (is_null($clock_entries)) {
            throw new \InvalidArgumentException('non-nullable clock_entries cannot be null');
        }
        $this->container['clock_entries'] = $clock_entries;

        return $this;
    }

    /**
     * Gets hour_entries
     *
     * @return \MySdk\Model\HourEntryApiTransformer[]|null
     */
    public function getHourEntries()
    {
        return $this->container['hour_entries'];
    }

    /**
     * Sets hour_entries
     *
     * @param \MySdk\Model\HourEntryApiTransformer[]|null $hour_entries Hour entries
     *
     * @return self
     */
    public function setHourEntries($hour_entries)
    {
        if (is_null($hour_entries)) {
            throw new \InvalidArgumentException('non-nullable hour_entries cannot be null');
        }
        $this->container['hour_entries'] = $hour_entries;

        return $this;
    }

    /**
     * Gets time_off
     *
     * @return \MySdk\Model\DailyDetailApiTransformerTimeOffInner[]|null
     */
    public function getTimeOff()
    {
        return $this->container['time_off'];
    }

    /**
     * Sets time_off
     *
     * @param \MySdk\Model\DailyDetailApiTransformerTimeOffInner[]|null $time_off Time off data
     *
     * @return self
     */
    public function setTimeOff($time_off)
    {
        if (is_null($time_off)) {
            throw new \InvalidArgumentException('non-nullable time_off cannot be null');
        }
        $this->container['time_off'] = $time_off;

        return $this;
    }

    /**
     * Gets holidays
     *
     * @return \MySdk\Model\DailyDetailApiTransformerHolidaysInner[]|null
     */
    public function getHolidays()
    {
        return $this->container['holidays'];
    }

    /**
     * Sets holidays
     *
     * @param \MySdk\Model\DailyDetailApiTransformerHolidaysInner[]|null $holidays Holidays for the day
     *
     * @return self
     */
    public function setHolidays($holidays)
    {
        if (is_null($holidays)) {
            throw new \InvalidArgumentException('non-nullable holidays cannot be null');
        }
        $this->container['holidays'] = $holidays;

        return $this;
    }

    /**
     * Gets has_work_week_starts_on_changed
     *
     * @return bool|null
     */
    public function getHasWorkWeekStartsOnChanged()
    {
        return $this->container['has_work_week_starts_on_changed'];
    }

    /**
     * Sets has_work_week_starts_on_changed
     *
     * @param bool|null $has_work_week_starts_on_changed Whether the work week starts on has changed
     *
     * @return self
     */
    public function setHasWorkWeekStartsOnChanged($has_work_week_starts_on_changed)
    {
        if (is_null($has_work_week_starts_on_changed)) {
            throw new \InvalidArgumentException('non-nullable has_work_week_starts_on_changed cannot be null');
        }
        $this->container['has_work_week_starts_on_changed'] = $has_work_week_starts_on_changed;

        return $this;
    }

    /**
     * Gets overtime_hours
     *
     * @return float|null
     */
    public function getOvertimeHours()
    {
        return $this->container['overtime_hours'];
    }

    /**
     * Sets overtime_hours
     *
     * @param float|null $overtime_hours Overtime hours
     *
     * @return self
     */
    public function setOvertimeHours($overtime_hours)
    {
        if (is_null($overtime_hours)) {
            throw new \InvalidArgumentException('non-nullable overtime_hours cannot be null');
        }
        $this->container['overtime_hours'] = $overtime_hours;

        return $this;
    }

    /**
     * Gets overtime_summary
     *
     * @return \MySdk\Model\DailyDetailApiTransformerOvertimeSummary|null
     */
    public function getOvertimeSummary()
    {
        return $this->container['overtime_summary'];
    }

    /**
     * Sets overtime_summary
     *
     * @param \MySdk\Model\DailyDetailApiTransformerOvertimeSummary|null $overtime_summary overtime_summary
     *
     * @return self
     */
    public function setOvertimeSummary($overtime_summary)
    {
        if (is_null($overtime_summary)) {
            throw new \InvalidArgumentException('non-nullable overtime_summary cannot be null');
        }
        $this->container['overtime_summary'] = $overtime_summary;

        return $this;
    }

    /**
     * Gets hour_summary
     *
     * @return \MySdk\Model\BasicTimesheetApiTransformerHourSummaryInner[]|null
     */
    public function getHourSummary()
    {
        return $this->container['hour_summary'];
    }

    /**
     * Sets hour_summary
     *
     * @param \MySdk\Model\BasicTimesheetApiTransformerHourSummaryInner[]|null $hour_summary Hour summary
     *
     * @return self
     */
    public function setHourSummary($hour_summary)
    {
        if (is_null($hour_summary)) {
            throw new \InvalidArgumentException('non-nullable hour_summary cannot be null');
        }
        $this->container['hour_summary'] = $hour_summary;

        return $this;
    }

    /**
     * Gets shift_differentials
     *
     * @return \MySdk\Model\BasicTimesheetApiTransformerShiftDifferentialsInner[]|null
     */
    public function getShiftDifferentials()
    {
        return $this->container['shift_differentials'];
    }

    /**
     * Sets shift_differentials
     *
     * @param \MySdk\Model\BasicTimesheetApiTransformerShiftDifferentialsInner[]|null $shift_differentials Shift differentials
     *
     * @return self
     */
    public function setShiftDifferentials($shift_differentials)
    {
        if (is_null($shift_differentials)) {
            throw new \InvalidArgumentException('non-nullable shift_differentials cannot be null');
        }
        $this->container['shift_differentials'] = $shift_differentials;

        return $this;
    }

    /**
     * Gets time_off_hours
     *
     * @return float|null
     */
    public function getTimeOffHours()
    {
        return $this->container['time_off_hours'];
    }

    /**
     * Sets time_off_hours
     *
     * @param float|null $time_off_hours Time off hours
     *
     * @return self
     */
    public function setTimeOffHours($time_off_hours)
    {
        if (is_null($time_off_hours)) {
            array_push($this->openAPINullablesSetToNull, 'time_off_hours');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('time_off_hours', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['time_off_hours'] = $time_off_hours;

        return $this;
    }

    /**
     * Gets holiday_hours
     *
     * @return float|null
     */
    public function getHolidayHours()
    {
        return $this->container['holiday_hours'];
    }

    /**
     * Sets holiday_hours
     *
     * @param float|null $holiday_hours Holiday hours
     *
     * @return self
     */
    public function setHolidayHours($holiday_hours)
    {
        if (is_null($holiday_hours)) {
            throw new \InvalidArgumentException('non-nullable holiday_hours cannot be null');
        }
        $this->container['holiday_hours'] = $holiday_hours;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets project_info
     *
     * @return \MySdk\Model\ProjectInfoApiTransformer|null
     */
    public function getProjectInfo()
    {
        return $this->container['project_info'];
    }

    /**
     * Sets project_info
     *
     * @param \MySdk\Model\ProjectInfoApiTransformer|null $project_info project_info
     *
     * @return self
     */
    public function setProjectInfo($project_info)
    {
        if (is_null($project_info)) {
            array_push($this->openAPINullablesSetToNull, 'project_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_info'] = $project_info;

        return $this;
    }

    /**
     * Gets history_event_count
     *
     * @return int|null
     */
    public function getHistoryEventCount()
    {
        return $this->container['history_event_count'];
    }

    /**
     * Sets history_event_count
     *
     * @param int|null $history_event_count History event count
     *
     * @return self
     */
    public function setHistoryEventCount($history_event_count)
    {
        if (is_null($history_event_count)) {
            throw new \InvalidArgumentException('non-nullable history_event_count cannot be null');
        }
        $this->container['history_event_count'] = $history_event_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


