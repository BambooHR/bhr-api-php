<?php
/**
 * TrainingTypeDataSchema
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TrainingTypeDataSchema Class Doc Comment
 *
 * @category Class
 * @description Class TrainingTypeDataObject
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TrainingTypeDataSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TrainingTypeDataSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'field_id' => 'int',
        'field_name' => 'string',
        'renewable' => 'bool',
        'months_between_renewals' => 'int',
        'required_within_days' => 'int',
        'limit_requirement' => 'bool',
        'training_tab' => 'bool',
        'required' => 'bool',
        'category_id' => 'int',
        'category_name' => 'string',
        'description' => 'string',
        'link_url' => 'string',
        'filter_ids' => 'int[]',
        'file_ids' => 'int[]',
        'completion_permission' => 'string',
        'filter_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'field_id' => null,
        'field_name' => null,
        'renewable' => null,
        'months_between_renewals' => null,
        'required_within_days' => null,
        'limit_requirement' => null,
        'training_tab' => null,
        'required' => null,
        'category_id' => null,
        'category_name' => null,
        'description' => null,
        'link_url' => null,
        'filter_ids' => null,
        'file_ids' => null,
        'completion_permission' => null,
        'filter_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'field_id' => false,
        'field_name' => false,
        'renewable' => false,
        'months_between_renewals' => false,
        'required_within_days' => false,
        'limit_requirement' => false,
        'training_tab' => false,
        'required' => false,
        'category_id' => false,
        'category_name' => false,
        'description' => false,
        'link_url' => false,
        'filter_ids' => false,
        'file_ids' => false,
        'completion_permission' => false,
        'filter_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'field_id' => 'fieldId',
        'field_name' => 'fieldName',
        'renewable' => 'renewable',
        'months_between_renewals' => 'monthsBetweenRenewals',
        'required_within_days' => 'requiredWithinDays',
        'limit_requirement' => 'limitRequirement',
        'training_tab' => 'trainingTab',
        'required' => 'required',
        'category_id' => 'categoryId',
        'category_name' => 'categoryName',
        'description' => 'description',
        'link_url' => 'linkUrl',
        'filter_ids' => 'filterIds',
        'file_ids' => 'fileIds',
        'completion_permission' => 'completionPermission',
        'filter_type' => 'filterType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'field_id' => 'setFieldId',
        'field_name' => 'setFieldName',
        'renewable' => 'setRenewable',
        'months_between_renewals' => 'setMonthsBetweenRenewals',
        'required_within_days' => 'setRequiredWithinDays',
        'limit_requirement' => 'setLimitRequirement',
        'training_tab' => 'setTrainingTab',
        'required' => 'setRequired',
        'category_id' => 'setCategoryId',
        'category_name' => 'setCategoryName',
        'description' => 'setDescription',
        'link_url' => 'setLinkUrl',
        'filter_ids' => 'setFilterIds',
        'file_ids' => 'setFileIds',
        'completion_permission' => 'setCompletionPermission',
        'filter_type' => 'setFilterType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'field_id' => 'getFieldId',
        'field_name' => 'getFieldName',
        'renewable' => 'getRenewable',
        'months_between_renewals' => 'getMonthsBetweenRenewals',
        'required_within_days' => 'getRequiredWithinDays',
        'limit_requirement' => 'getLimitRequirement',
        'training_tab' => 'getTrainingTab',
        'required' => 'getRequired',
        'category_id' => 'getCategoryId',
        'category_name' => 'getCategoryName',
        'description' => 'getDescription',
        'link_url' => 'getLinkUrl',
        'filter_ids' => 'getFilterIds',
        'file_ids' => 'getFileIds',
        'completion_permission' => 'getCompletionPermission',
        'filter_type' => 'getFilterType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('field_id', $data ?? [], null);
        $this->setIfExists('field_name', $data ?? [], null);
        $this->setIfExists('renewable', $data ?? [], null);
        $this->setIfExists('months_between_renewals', $data ?? [], null);
        $this->setIfExists('required_within_days', $data ?? [], null);
        $this->setIfExists('limit_requirement', $data ?? [], null);
        $this->setIfExists('training_tab', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('category_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('link_url', $data ?? [], null);
        $this->setIfExists('filter_ids', $data ?? [], null);
        $this->setIfExists('file_ids', $data ?? [], null);
        $this->setIfExists('completion_permission', $data ?? [], null);
        $this->setIfExists('filter_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets field_id
     *
     * @return int|null
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param int|null $field_id field_id
     *
     * @return self
     */
    public function setFieldId($field_id)
    {
        if (is_null($field_id)) {
            throw new \InvalidArgumentException('non-nullable field_id cannot be null');
        }
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets field_name
     *
     * @return string|null
     */
    public function getFieldName()
    {
        return $this->container['field_name'];
    }

    /**
     * Sets field_name
     *
     * @param string|null $field_name field_name
     *
     * @return self
     */
    public function setFieldName($field_name)
    {
        if (is_null($field_name)) {
            throw new \InvalidArgumentException('non-nullable field_name cannot be null');
        }
        $this->container['field_name'] = $field_name;

        return $this;
    }

    /**
     * Gets renewable
     *
     * @return bool|null
     */
    public function getRenewable()
    {
        return $this->container['renewable'];
    }

    /**
     * Sets renewable
     *
     * @param bool|null $renewable renewable
     *
     * @return self
     */
    public function setRenewable($renewable)
    {
        if (is_null($renewable)) {
            throw new \InvalidArgumentException('non-nullable renewable cannot be null');
        }
        $this->container['renewable'] = $renewable;

        return $this;
    }

    /**
     * Gets months_between_renewals
     *
     * @return int|null
     */
    public function getMonthsBetweenRenewals()
    {
        return $this->container['months_between_renewals'];
    }

    /**
     * Sets months_between_renewals
     *
     * @param int|null $months_between_renewals months_between_renewals
     *
     * @return self
     */
    public function setMonthsBetweenRenewals($months_between_renewals)
    {
        if (is_null($months_between_renewals)) {
            throw new \InvalidArgumentException('non-nullable months_between_renewals cannot be null');
        }
        $this->container['months_between_renewals'] = $months_between_renewals;

        return $this;
    }

    /**
     * Gets required_within_days
     *
     * @return int|null
     */
    public function getRequiredWithinDays()
    {
        return $this->container['required_within_days'];
    }

    /**
     * Sets required_within_days
     *
     * @param int|null $required_within_days required_within_days
     *
     * @return self
     */
    public function setRequiredWithinDays($required_within_days)
    {
        if (is_null($required_within_days)) {
            throw new \InvalidArgumentException('non-nullable required_within_days cannot be null');
        }
        $this->container['required_within_days'] = $required_within_days;

        return $this;
    }

    /**
     * Gets limit_requirement
     *
     * @return bool|null
     */
    public function getLimitRequirement()
    {
        return $this->container['limit_requirement'];
    }

    /**
     * Sets limit_requirement
     *
     * @param bool|null $limit_requirement Returns true if all employees are included in the training filter and false otherwise
     *
     * @return self
     */
    public function setLimitRequirement($limit_requirement)
    {
        if (is_null($limit_requirement)) {
            throw new \InvalidArgumentException('non-nullable limit_requirement cannot be null');
        }
        $this->container['limit_requirement'] = $limit_requirement;

        return $this;
    }

    /**
     * Gets training_tab
     *
     * @return bool|null
     */
    public function getTrainingTab()
    {
        return $this->container['training_tab'];
    }

    /**
     * Sets training_tab
     *
     * @param bool|null $training_tab Defaults to true
     *
     * @return self
     */
    public function setTrainingTab($training_tab)
    {
        if (is_null($training_tab)) {
            throw new \InvalidArgumentException('non-nullable training_tab cannot be null');
        }
        $this->container['training_tab'] = $training_tab;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required required
     *
     * @return self
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id category_id
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            throw new \InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_name
     *
     * @return string|null
     */
    public function getCategoryName()
    {
        return $this->container['category_name'];
    }

    /**
     * Sets category_name
     *
     * @param string|null $category_name category_name
     *
     * @return self
     */
    public function setCategoryName($category_name)
    {
        if (is_null($category_name)) {
            throw new \InvalidArgumentException('non-nullable category_name cannot be null');
        }
        $this->container['category_name'] = $category_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets link_url
     *
     * @return string|null
     */
    public function getLinkUrl()
    {
        return $this->container['link_url'];
    }

    /**
     * Sets link_url
     *
     * @param string|null $link_url link_url
     *
     * @return self
     */
    public function setLinkUrl($link_url)
    {
        if (is_null($link_url)) {
            throw new \InvalidArgumentException('non-nullable link_url cannot be null');
        }
        $this->container['link_url'] = $link_url;

        return $this;
    }

    /**
     * Gets filter_ids
     *
     * @return int[]|null
     */
    public function getFilterIds()
    {
        return $this->container['filter_ids'];
    }

    /**
     * Sets filter_ids
     *
     * @param int[]|null $filter_ids filter_ids
     *
     * @return self
     */
    public function setFilterIds($filter_ids)
    {
        if (is_null($filter_ids)) {
            throw new \InvalidArgumentException('non-nullable filter_ids cannot be null');
        }
        $this->container['filter_ids'] = $filter_ids;

        return $this;
    }

    /**
     * Gets file_ids
     *
     * @return int[]|null
     */
    public function getFileIds()
    {
        return $this->container['file_ids'];
    }

    /**
     * Sets file_ids
     *
     * @param int[]|null $file_ids file_ids
     *
     * @return self
     */
    public function setFileIds($file_ids)
    {
        if (is_null($file_ids)) {
            throw new \InvalidArgumentException('non-nullable file_ids cannot be null');
        }
        $this->container['file_ids'] = $file_ids;

        return $this;
    }

    /**
     * Gets completion_permission
     *
     * @return string|null
     */
    public function getCompletionPermission()
    {
        return $this->container['completion_permission'];
    }

    /**
     * Sets completion_permission
     *
     * @param string|null $completion_permission completion_permission
     *
     * @return self
     */
    public function setCompletionPermission($completion_permission)
    {
        if (is_null($completion_permission)) {
            throw new \InvalidArgumentException('non-nullable completion_permission cannot be null');
        }
        $this->container['completion_permission'] = $completion_permission;

        return $this;
    }

    /**
     * Gets filter_type
     *
     * @return string|null
     */
    public function getFilterType()
    {
        return $this->container['filter_type'];
    }

    /**
     * Sets filter_type
     *
     * @param string|null $filter_type filter_type
     *
     * @return self
     */
    public function setFilterType($filter_type)
    {
        if (is_null($filter_type)) {
            throw new \InvalidArgumentException('non-nullable filter_type cannot be null');
        }
        $this->container['filter_type'] = $filter_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


