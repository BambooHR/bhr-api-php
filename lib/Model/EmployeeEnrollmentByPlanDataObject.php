<?php
/**
 * EmployeeEnrollmentByPlanDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeEnrollmentByPlanDataObject Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeEnrollmentByPlanDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeEnrollmentByPlanDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'effective_date' => 'string',
        'comment' => 'string',
        'coverage_id' => 'int',
        'company_pays' => 'float',
        'company_pays_symbol' => 'string',
        'employee_pays' => 'float',
        'employee_pays_symbol' => 'string',
        'currency_code' => 'string',
        'company_percent_deduction_type' => 'string',
        'cost_frequency' => 'string',
        'selected_dependent_ids' => 'int[]',
        'coverage_data' => '\MySdk\Model\EmployeeEnrollmentByPlanDataObjectCoverageDataInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'effective_date' => null,
        'comment' => null,
        'coverage_id' => null,
        'company_pays' => null,
        'company_pays_symbol' => null,
        'employee_pays' => null,
        'employee_pays_symbol' => null,
        'currency_code' => null,
        'company_percent_deduction_type' => null,
        'cost_frequency' => null,
        'selected_dependent_ids' => null,
        'coverage_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'effective_date' => false,
        'comment' => false,
        'coverage_id' => false,
        'company_pays' => false,
        'company_pays_symbol' => false,
        'employee_pays' => false,
        'employee_pays_symbol' => false,
        'currency_code' => false,
        'company_percent_deduction_type' => false,
        'cost_frequency' => false,
        'selected_dependent_ids' => false,
        'coverage_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'effective_date' => 'effectiveDate',
        'comment' => 'comment',
        'coverage_id' => 'coverageId',
        'company_pays' => 'companyPays',
        'company_pays_symbol' => 'companyPaysSymbol',
        'employee_pays' => 'employeePays',
        'employee_pays_symbol' => 'employeePaysSymbol',
        'currency_code' => 'currencyCode',
        'company_percent_deduction_type' => 'companyPercentDeductionType',
        'cost_frequency' => 'costFrequency',
        'selected_dependent_ids' => 'selectedDependentIds',
        'coverage_data' => 'coverageData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'effective_date' => 'setEffectiveDate',
        'comment' => 'setComment',
        'coverage_id' => 'setCoverageId',
        'company_pays' => 'setCompanyPays',
        'company_pays_symbol' => 'setCompanyPaysSymbol',
        'employee_pays' => 'setEmployeePays',
        'employee_pays_symbol' => 'setEmployeePaysSymbol',
        'currency_code' => 'setCurrencyCode',
        'company_percent_deduction_type' => 'setCompanyPercentDeductionType',
        'cost_frequency' => 'setCostFrequency',
        'selected_dependent_ids' => 'setSelectedDependentIds',
        'coverage_data' => 'setCoverageData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'effective_date' => 'getEffectiveDate',
        'comment' => 'getComment',
        'coverage_id' => 'getCoverageId',
        'company_pays' => 'getCompanyPays',
        'company_pays_symbol' => 'getCompanyPaysSymbol',
        'employee_pays' => 'getEmployeePays',
        'employee_pays_symbol' => 'getEmployeePaysSymbol',
        'currency_code' => 'getCurrencyCode',
        'company_percent_deduction_type' => 'getCompanyPercentDeductionType',
        'cost_frequency' => 'getCostFrequency',
        'selected_dependent_ids' => 'getSelectedDependentIds',
        'coverage_data' => 'getCoverageData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
        $this->setIfExists('comment', $data ?? [], null);
        $this->setIfExists('coverage_id', $data ?? [], null);
        $this->setIfExists('company_pays', $data ?? [], null);
        $this->setIfExists('company_pays_symbol', $data ?? [], null);
        $this->setIfExists('employee_pays', $data ?? [], null);
        $this->setIfExists('employee_pays_symbol', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('company_percent_deduction_type', $data ?? [], null);
        $this->setIfExists('cost_frequency', $data ?? [], null);
        $this->setIfExists('selected_dependent_ids', $data ?? [], null);
        $this->setIfExists('coverage_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return string|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param string|null $effective_date effective_date
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        if (is_null($effective_date)) {
            throw new \InvalidArgumentException('non-nullable effective_date cannot be null');
        }
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string|null
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string|null $comment comment
     *
     * @return self
     */
    public function setComment($comment)
    {
        if (is_null($comment)) {
            throw new \InvalidArgumentException('non-nullable comment cannot be null');
        }
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets coverage_id
     *
     * @return int|null
     */
    public function getCoverageId()
    {
        return $this->container['coverage_id'];
    }

    /**
     * Sets coverage_id
     *
     * @param int|null $coverage_id coverage_id
     *
     * @return self
     */
    public function setCoverageId($coverage_id)
    {
        if (is_null($coverage_id)) {
            throw new \InvalidArgumentException('non-nullable coverage_id cannot be null');
        }
        $this->container['coverage_id'] = $coverage_id;

        return $this;
    }

    /**
     * Gets company_pays
     *
     * @return float|null
     */
    public function getCompanyPays()
    {
        return $this->container['company_pays'];
    }

    /**
     * Sets company_pays
     *
     * @param float|null $company_pays company_pays
     *
     * @return self
     */
    public function setCompanyPays($company_pays)
    {
        if (is_null($company_pays)) {
            throw new \InvalidArgumentException('non-nullable company_pays cannot be null');
        }
        $this->container['company_pays'] = $company_pays;

        return $this;
    }

    /**
     * Gets company_pays_symbol
     *
     * @return string|null
     */
    public function getCompanyPaysSymbol()
    {
        return $this->container['company_pays_symbol'];
    }

    /**
     * Sets company_pays_symbol
     *
     * @param string|null $company_pays_symbol company_pays_symbol
     *
     * @return self
     */
    public function setCompanyPaysSymbol($company_pays_symbol)
    {
        if (is_null($company_pays_symbol)) {
            throw new \InvalidArgumentException('non-nullable company_pays_symbol cannot be null');
        }
        $this->container['company_pays_symbol'] = $company_pays_symbol;

        return $this;
    }

    /**
     * Gets employee_pays
     *
     * @return float|null
     */
    public function getEmployeePays()
    {
        return $this->container['employee_pays'];
    }

    /**
     * Sets employee_pays
     *
     * @param float|null $employee_pays employee_pays
     *
     * @return self
     */
    public function setEmployeePays($employee_pays)
    {
        if (is_null($employee_pays)) {
            throw new \InvalidArgumentException('non-nullable employee_pays cannot be null');
        }
        $this->container['employee_pays'] = $employee_pays;

        return $this;
    }

    /**
     * Gets employee_pays_symbol
     *
     * @return string|null
     */
    public function getEmployeePaysSymbol()
    {
        return $this->container['employee_pays_symbol'];
    }

    /**
     * Sets employee_pays_symbol
     *
     * @param string|null $employee_pays_symbol employee_pays_symbol
     *
     * @return self
     */
    public function setEmployeePaysSymbol($employee_pays_symbol)
    {
        if (is_null($employee_pays_symbol)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_symbol cannot be null');
        }
        $this->container['employee_pays_symbol'] = $employee_pays_symbol;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets company_percent_deduction_type
     *
     * @return string|null
     */
    public function getCompanyPercentDeductionType()
    {
        return $this->container['company_percent_deduction_type'];
    }

    /**
     * Sets company_percent_deduction_type
     *
     * @param string|null $company_percent_deduction_type company_percent_deduction_type
     *
     * @return self
     */
    public function setCompanyPercentDeductionType($company_percent_deduction_type)
    {
        if (is_null($company_percent_deduction_type)) {
            throw new \InvalidArgumentException('non-nullable company_percent_deduction_type cannot be null');
        }
        $this->container['company_percent_deduction_type'] = $company_percent_deduction_type;

        return $this;
    }

    /**
     * Gets cost_frequency
     *
     * @return string|null
     */
    public function getCostFrequency()
    {
        return $this->container['cost_frequency'];
    }

    /**
     * Sets cost_frequency
     *
     * @param string|null $cost_frequency cost_frequency
     *
     * @return self
     */
    public function setCostFrequency($cost_frequency)
    {
        if (is_null($cost_frequency)) {
            throw new \InvalidArgumentException('non-nullable cost_frequency cannot be null');
        }
        $this->container['cost_frequency'] = $cost_frequency;

        return $this;
    }

    /**
     * Gets selected_dependent_ids
     *
     * @return int[]|null
     */
    public function getSelectedDependentIds()
    {
        return $this->container['selected_dependent_ids'];
    }

    /**
     * Sets selected_dependent_ids
     *
     * @param int[]|null $selected_dependent_ids selected_dependent_ids
     *
     * @return self
     */
    public function setSelectedDependentIds($selected_dependent_ids)
    {
        if (is_null($selected_dependent_ids)) {
            throw new \InvalidArgumentException('non-nullable selected_dependent_ids cannot be null');
        }
        $this->container['selected_dependent_ids'] = $selected_dependent_ids;

        return $this;
    }

    /**
     * Gets coverage_data
     *
     * @return \MySdk\Model\EmployeeEnrollmentByPlanDataObjectCoverageDataInner[]|null
     */
    public function getCoverageData()
    {
        return $this->container['coverage_data'];
    }

    /**
     * Sets coverage_data
     *
     * @param \MySdk\Model\EmployeeEnrollmentByPlanDataObjectCoverageDataInner[]|null $coverage_data coverage_data
     *
     * @return self
     */
    public function setCoverageData($coverage_data)
    {
        if (is_null($coverage_data)) {
            throw new \InvalidArgumentException('non-nullable coverage_data cannot be null');
        }
        $this->container['coverage_data'] = $coverage_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


