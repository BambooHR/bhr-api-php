<?php
/**
 * TransformedApiGoalGoalMilestonesInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TransformedApiGoalGoalMilestonesInner Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransformedApiGoalGoalMilestonesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransformedApiGoal_goal_milestones_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'employee_goal_id' => 'int',
        'title' => 'string',
        'current_value' => 'float',
        'start_value' => 'float',
        'end_value' => 'float',
        'completed_date_time' => 'string',
        'last_update_date_date_time' => 'string',
        'last_update_user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'employee_goal_id' => null,
        'title' => null,
        'current_value' => null,
        'start_value' => null,
        'end_value' => null,
        'completed_date_time' => null,
        'last_update_date_date_time' => null,
        'last_update_user_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'employee_goal_id' => false,
        'title' => false,
        'current_value' => true,
        'start_value' => true,
        'end_value' => true,
        'completed_date_time' => false,
        'last_update_date_date_time' => false,
        'last_update_user_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_goal_id' => 'employeeGoalId',
        'title' => 'title',
        'current_value' => 'currentValue',
        'start_value' => 'startValue',
        'end_value' => 'endValue',
        'completed_date_time' => 'completedDateTime',
        'last_update_date_date_time' => 'lastUpdateDateDateTime',
        'last_update_user_id' => 'lastUpdateUserId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_goal_id' => 'setEmployeeGoalId',
        'title' => 'setTitle',
        'current_value' => 'setCurrentValue',
        'start_value' => 'setStartValue',
        'end_value' => 'setEndValue',
        'completed_date_time' => 'setCompletedDateTime',
        'last_update_date_date_time' => 'setLastUpdateDateDateTime',
        'last_update_user_id' => 'setLastUpdateUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_goal_id' => 'getEmployeeGoalId',
        'title' => 'getTitle',
        'current_value' => 'getCurrentValue',
        'start_value' => 'getStartValue',
        'end_value' => 'getEndValue',
        'completed_date_time' => 'getCompletedDateTime',
        'last_update_date_date_time' => 'getLastUpdateDateDateTime',
        'last_update_user_id' => 'getLastUpdateUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_goal_id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('current_value', $data ?? [], null);
        $this->setIfExists('start_value', $data ?? [], null);
        $this->setIfExists('end_value', $data ?? [], null);
        $this->setIfExists('completed_date_time', $data ?? [], null);
        $this->setIfExists('last_update_date_date_time', $data ?? [], null);
        $this->setIfExists('last_update_user_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The id of the milestone.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_goal_id
     *
     * @return int|null
     */
    public function getEmployeeGoalId()
    {
        return $this->container['employee_goal_id'];
    }

    /**
     * Sets employee_goal_id
     *
     * @param int|null $employee_goal_id The id of the goal which encompasses this milestone.
     *
     * @return self
     */
    public function setEmployeeGoalId($employee_goal_id)
    {
        if (is_null($employee_goal_id)) {
            throw new \InvalidArgumentException('non-nullable employee_goal_id cannot be null');
        }
        $this->container['employee_goal_id'] = $employee_goal_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title of the milestone.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets current_value
     *
     * @return float|null
     */
    public function getCurrentValue()
    {
        return $this->container['current_value'];
    }

    /**
     * Sets current_value
     *
     * @param float|null $current_value The current value for a numeric milestone. This number will be rounded to the nearest hundredth. On the creation of a numeric milestone this value will automatically be set to the start value of the milestone. If the milestone is a simple checkbox milestone, this value will always be null.
     *
     * @return self
     */
    public function setCurrentValue($current_value)
    {
        if (is_null($current_value)) {
            array_push($this->openAPINullablesSetToNull, 'current_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_value'] = $current_value;

        return $this;
    }

    /**
     * Gets start_value
     *
     * @return float|null
     */
    public function getStartValue()
    {
        return $this->container['start_value'];
    }

    /**
     * Sets start_value
     *
     * @param float|null $start_value The starting value for a numeric milestone. This number will be rounded to the nearest hundredth. If the milestone is a simple checkbox milestone, this value will always be null.
     *
     * @return self
     */
    public function setStartValue($start_value)
    {
        if (is_null($start_value)) {
            array_push($this->openAPINullablesSetToNull, 'start_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('start_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['start_value'] = $start_value;

        return $this;
    }

    /**
     * Gets end_value
     *
     * @return float|null
     */
    public function getEndValue()
    {
        return $this->container['end_value'];
    }

    /**
     * Sets end_value
     *
     * @param float|null $end_value The end goal for a numeric milestone. This number will be rounded to the nearest hundredth. If the milestone is a simple checkbox milestone, this value will always be null.
     *
     * @return self
     */
    public function setEndValue($end_value)
    {
        if (is_null($end_value)) {
            array_push($this->openAPINullablesSetToNull, 'end_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_value'] = $end_value;

        return $this;
    }

    /**
     * Gets completed_date_time
     *
     * @return string|null
     */
    public function getCompletedDateTime()
    {
        return $this->container['completed_date_time'];
    }

    /**
     * Sets completed_date_time
     *
     * @param string|null $completed_date_time The date and time in which the goal has been completed. If the goal is not completed the value will be null.
     *
     * @return self
     */
    public function setCompletedDateTime($completed_date_time)
    {
        if (is_null($completed_date_time)) {
            throw new \InvalidArgumentException('non-nullable completed_date_time cannot be null');
        }
        $this->container['completed_date_time'] = $completed_date_time;

        return $this;
    }

    /**
     * Gets last_update_date_date_time
     *
     * @return string|null
     */
    public function getLastUpdateDateDateTime()
    {
        return $this->container['last_update_date_date_time'];
    }

    /**
     * Sets last_update_date_date_time
     *
     * @param string|null $last_update_date_date_time The date and time in which the goal was last updated.
     *
     * @return self
     */
    public function setLastUpdateDateDateTime($last_update_date_date_time)
    {
        if (is_null($last_update_date_date_time)) {
            throw new \InvalidArgumentException('non-nullable last_update_date_date_time cannot be null');
        }
        $this->container['last_update_date_date_time'] = $last_update_date_date_time;

        return $this;
    }

    /**
     * Gets last_update_user_id
     *
     * @return int|null
     */
    public function getLastUpdateUserId()
    {
        return $this->container['last_update_user_id'];
    }

    /**
     * Sets last_update_user_id
     *
     * @param int|null $last_update_user_id The ID of the user who last updated this milestone.
     *
     * @return self
     */
    public function setLastUpdateUserId($last_update_user_id)
    {
        if (is_null($last_update_user_id)) {
            throw new \InvalidArgumentException('non-nullable last_update_user_id cannot be null');
        }
        $this->container['last_update_user_id'] = $last_update_user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


