<?php
/**
 * PayrollDirectDepositApiControllerCreatedOrUpdatedEmployeeDirectDepositAccountsAccountsInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * PayrollDirectDepositApiControllerCreatedOrUpdatedEmployeeDirectDepositAccountsAccountsInner Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayrollDirectDepositApiControllerCreatedOrUpdatedEmployeeDirectDepositAccountsAccountsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payroll_DirectDepositApiController_CreatedOrUpdatedEmployeeDirectDepositAccounts_accounts_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'account_nickname' => 'string',
        'bank_account_number' => 'string',
        'bank_account_number_masked' => 'string',
        'bank_account_type' => 'string',
        'bank_logo_url' => 'string',
        'bank_name' => 'string',
        'bank_routing_number' => 'string',
        'deposit_amount' => 'float',
        'deposit_order' => 'int',
        'deposit_type' => 'string',
        'version' => 'int',
        'reference_balance_account_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => null,
        'account_nickname' => null,
        'bank_account_number' => null,
        'bank_account_number_masked' => null,
        'bank_account_type' => null,
        'bank_logo_url' => null,
        'bank_name' => null,
        'bank_routing_number' => null,
        'deposit_amount' => null,
        'deposit_order' => null,
        'deposit_type' => null,
        'version' => null,
        'reference_balance_account_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => false,
        'account_nickname' => false,
        'bank_account_number' => false,
        'bank_account_number_masked' => false,
        'bank_account_type' => false,
        'bank_logo_url' => false,
        'bank_name' => false,
        'bank_routing_number' => false,
        'deposit_amount' => false,
        'deposit_order' => false,
        'deposit_type' => false,
        'version' => false,
        'reference_balance_account_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'account_nickname' => 'accountNickname',
        'bank_account_number' => 'bankAccountNumber',
        'bank_account_number_masked' => 'bankAccountNumberMasked',
        'bank_account_type' => 'bankAccountType',
        'bank_logo_url' => 'bankLogoUrl',
        'bank_name' => 'bankName',
        'bank_routing_number' => 'bankRoutingNumber',
        'deposit_amount' => 'depositAmount',
        'deposit_order' => 'depositOrder',
        'deposit_type' => 'depositType',
        'version' => 'version',
        'reference_balance_account_id' => 'referenceBalanceAccountId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_nickname' => 'setAccountNickname',
        'bank_account_number' => 'setBankAccountNumber',
        'bank_account_number_masked' => 'setBankAccountNumberMasked',
        'bank_account_type' => 'setBankAccountType',
        'bank_logo_url' => 'setBankLogoUrl',
        'bank_name' => 'setBankName',
        'bank_routing_number' => 'setBankRoutingNumber',
        'deposit_amount' => 'setDepositAmount',
        'deposit_order' => 'setDepositOrder',
        'deposit_type' => 'setDepositType',
        'version' => 'setVersion',
        'reference_balance_account_id' => 'setReferenceBalanceAccountId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_nickname' => 'getAccountNickname',
        'bank_account_number' => 'getBankAccountNumber',
        'bank_account_number_masked' => 'getBankAccountNumberMasked',
        'bank_account_type' => 'getBankAccountType',
        'bank_logo_url' => 'getBankLogoUrl',
        'bank_name' => 'getBankName',
        'bank_routing_number' => 'getBankRoutingNumber',
        'deposit_amount' => 'getDepositAmount',
        'deposit_order' => 'getDepositOrder',
        'deposit_type' => 'getDepositType',
        'version' => 'getVersion',
        'reference_balance_account_id' => 'getReferenceBalanceAccountId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('account_nickname', $data ?? [], null);
        $this->setIfExists('bank_account_number', $data ?? [], null);
        $this->setIfExists('bank_account_number_masked', $data ?? [], null);
        $this->setIfExists('bank_account_type', $data ?? [], null);
        $this->setIfExists('bank_logo_url', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('bank_routing_number', $data ?? [], null);
        $this->setIfExists('deposit_amount', $data ?? [], null);
        $this->setIfExists('deposit_order', $data ?? [], null);
        $this->setIfExists('deposit_type', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('reference_balance_account_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id Direct deposit account ID
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_nickname
     *
     * @return string|null
     */
    public function getAccountNickname()
    {
        return $this->container['account_nickname'];
    }

    /**
     * Sets account_nickname
     *
     * @param string|null $account_nickname Account nickname
     *
     * @return self
     */
    public function setAccountNickname($account_nickname)
    {
        if (is_null($account_nickname)) {
            throw new \InvalidArgumentException('non-nullable account_nickname cannot be null');
        }
        $this->container['account_nickname'] = $account_nickname;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string|null
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string|null $bank_account_number Bank account number (unmasked)
     *
     * @return self
     */
    public function setBankAccountNumber($bank_account_number)
    {
        if (is_null($bank_account_number)) {
            throw new \InvalidArgumentException('non-nullable bank_account_number cannot be null');
        }
        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets bank_account_number_masked
     *
     * @return string|null
     */
    public function getBankAccountNumberMasked()
    {
        return $this->container['bank_account_number_masked'];
    }

    /**
     * Sets bank_account_number_masked
     *
     * @param string|null $bank_account_number_masked Masked bank account number
     *
     * @return self
     */
    public function setBankAccountNumberMasked($bank_account_number_masked)
    {
        if (is_null($bank_account_number_masked)) {
            throw new \InvalidArgumentException('non-nullable bank_account_number_masked cannot be null');
        }
        $this->container['bank_account_number_masked'] = $bank_account_number_masked;

        return $this;
    }

    /**
     * Gets bank_account_type
     *
     * @return string|null
     */
    public function getBankAccountType()
    {
        return $this->container['bank_account_type'];
    }

    /**
     * Sets bank_account_type
     *
     * @param string|null $bank_account_type Bank account type (checking, savings)
     *
     * @return self
     */
    public function setBankAccountType($bank_account_type)
    {
        if (is_null($bank_account_type)) {
            throw new \InvalidArgumentException('non-nullable bank_account_type cannot be null');
        }
        $this->container['bank_account_type'] = $bank_account_type;

        return $this;
    }

    /**
     * Gets bank_logo_url
     *
     * @return string|null
     */
    public function getBankLogoUrl()
    {
        return $this->container['bank_logo_url'];
    }

    /**
     * Sets bank_logo_url
     *
     * @param string|null $bank_logo_url URL to bank logo
     *
     * @return self
     */
    public function setBankLogoUrl($bank_logo_url)
    {
        if (is_null($bank_logo_url)) {
            throw new \InvalidArgumentException('non-nullable bank_logo_url cannot be null');
        }
        $this->container['bank_logo_url'] = $bank_logo_url;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name Name of the bank
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            throw new \InvalidArgumentException('non-nullable bank_name cannot be null');
        }
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets bank_routing_number
     *
     * @return string|null
     */
    public function getBankRoutingNumber()
    {
        return $this->container['bank_routing_number'];
    }

    /**
     * Sets bank_routing_number
     *
     * @param string|null $bank_routing_number Bank routing number
     *
     * @return self
     */
    public function setBankRoutingNumber($bank_routing_number)
    {
        if (is_null($bank_routing_number)) {
            throw new \InvalidArgumentException('non-nullable bank_routing_number cannot be null');
        }
        $this->container['bank_routing_number'] = $bank_routing_number;

        return $this;
    }

    /**
     * Gets deposit_amount
     *
     * @return float|null
     */
    public function getDepositAmount()
    {
        return $this->container['deposit_amount'];
    }

    /**
     * Sets deposit_amount
     *
     * @param float|null $deposit_amount Deposit amount
     *
     * @return self
     */
    public function setDepositAmount($deposit_amount)
    {
        if (is_null($deposit_amount)) {
            throw new \InvalidArgumentException('non-nullable deposit_amount cannot be null');
        }
        $this->container['deposit_amount'] = $deposit_amount;

        return $this;
    }

    /**
     * Gets deposit_order
     *
     * @return int|null
     */
    public function getDepositOrder()
    {
        return $this->container['deposit_order'];
    }

    /**
     * Sets deposit_order
     *
     * @param int|null $deposit_order Order in which deposits are processed
     *
     * @return self
     */
    public function setDepositOrder($deposit_order)
    {
        if (is_null($deposit_order)) {
            throw new \InvalidArgumentException('non-nullable deposit_order cannot be null');
        }
        $this->container['deposit_order'] = $deposit_order;

        return $this;
    }

    /**
     * Gets deposit_type
     *
     * @return string|null
     */
    public function getDepositType()
    {
        return $this->container['deposit_type'];
    }

    /**
     * Sets deposit_type
     *
     * @param string|null $deposit_type Type of deposit (flat, percentage, remainder)
     *
     * @return self
     */
    public function setDepositType($deposit_type)
    {
        if (is_null($deposit_type)) {
            throw new \InvalidArgumentException('non-nullable deposit_type cannot be null');
        }
        $this->container['deposit_type'] = $deposit_type;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int|null $version Version of the account record
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets reference_balance_account_id
     *
     * @return int|null
     */
    public function getReferenceBalanceAccountId()
    {
        return $this->container['reference_balance_account_id'];
    }

    /**
     * Sets reference_balance_account_id
     *
     * @param int|null $reference_balance_account_id Reference balance account ID
     *
     * @return self
     */
    public function setReferenceBalanceAccountId($reference_balance_account_id)
    {
        if (is_null($reference_balance_account_id)) {
            throw new \InvalidArgumentException('non-nullable reference_balance_account_id cannot be null');
        }
        $this->container['reference_balance_account_id'] = $reference_balance_account_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


