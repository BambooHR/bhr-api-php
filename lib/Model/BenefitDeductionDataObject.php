<?php
/**
 * BenefitDeductionDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * BenefitDeductionDataObject Class Doc Comment
 *
 * @category Class
 * @description Benefit deduction information including enrollment details, costs, and dates
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BenefitDeductionDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BenefitDeductionDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'enrollment_record_id' => 'string',
        'employee_pays' => 'float',
        'company_pays' => 'float',
        'currency_code' => 'string',
        'employee_pays_type' => 'string',
        'company_pays_type' => 'string',
        'benefit_plan_id' => 'string',
        'benefit_plan_name' => 'string',
        'effective_date' => '\DateTime',
        'coverage_type' => 'string',
        'deduction_exception_period' => 'string',
        'payroll_provider_deduction_code_id' => 'string',
        'payroll_provider_memo_code_id' => 'string',
        'end_date' => '\DateTime',
        'deduction_start_date' => '\DateTime',
        'deduction_end_date' => '\DateTime',
        'employee_percent_deduction_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'enrollment_record_id' => null,
        'employee_pays' => 'float',
        'company_pays' => 'float',
        'currency_code' => null,
        'employee_pays_type' => null,
        'company_pays_type' => null,
        'benefit_plan_id' => null,
        'benefit_plan_name' => null,
        'effective_date' => 'date',
        'coverage_type' => null,
        'deduction_exception_period' => null,
        'payroll_provider_deduction_code_id' => null,
        'payroll_provider_memo_code_id' => null,
        'end_date' => 'date',
        'deduction_start_date' => 'date',
        'deduction_end_date' => 'date',
        'employee_percent_deduction_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'enrollment_record_id' => false,
        'employee_pays' => false,
        'company_pays' => false,
        'currency_code' => false,
        'employee_pays_type' => false,
        'company_pays_type' => false,
        'benefit_plan_id' => false,
        'benefit_plan_name' => false,
        'effective_date' => false,
        'coverage_type' => false,
        'deduction_exception_period' => false,
        'payroll_provider_deduction_code_id' => true,
        'payroll_provider_memo_code_id' => true,
        'end_date' => true,
        'deduction_start_date' => false,
        'deduction_end_date' => false,
        'employee_percent_deduction_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enrollment_record_id' => 'enrollmentRecordId',
        'employee_pays' => 'employeePays',
        'company_pays' => 'companyPays',
        'currency_code' => 'currencyCode',
        'employee_pays_type' => 'employeePaysType',
        'company_pays_type' => 'companyPaysType',
        'benefit_plan_id' => 'benefitPlanId',
        'benefit_plan_name' => 'benefitPlanName',
        'effective_date' => 'effectiveDate',
        'coverage_type' => 'coverageType',
        'deduction_exception_period' => 'deductionExceptionPeriod',
        'payroll_provider_deduction_code_id' => 'payrollProviderDeductionCodeId',
        'payroll_provider_memo_code_id' => 'payrollProviderMemoCodeId',
        'end_date' => 'endDate',
        'deduction_start_date' => 'deductionStartDate',
        'deduction_end_date' => 'deductionEndDate',
        'employee_percent_deduction_type' => 'employeePercentDeductionType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enrollment_record_id' => 'setEnrollmentRecordId',
        'employee_pays' => 'setEmployeePays',
        'company_pays' => 'setCompanyPays',
        'currency_code' => 'setCurrencyCode',
        'employee_pays_type' => 'setEmployeePaysType',
        'company_pays_type' => 'setCompanyPaysType',
        'benefit_plan_id' => 'setBenefitPlanId',
        'benefit_plan_name' => 'setBenefitPlanName',
        'effective_date' => 'setEffectiveDate',
        'coverage_type' => 'setCoverageType',
        'deduction_exception_period' => 'setDeductionExceptionPeriod',
        'payroll_provider_deduction_code_id' => 'setPayrollProviderDeductionCodeId',
        'payroll_provider_memo_code_id' => 'setPayrollProviderMemoCodeId',
        'end_date' => 'setEndDate',
        'deduction_start_date' => 'setDeductionStartDate',
        'deduction_end_date' => 'setDeductionEndDate',
        'employee_percent_deduction_type' => 'setEmployeePercentDeductionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enrollment_record_id' => 'getEnrollmentRecordId',
        'employee_pays' => 'getEmployeePays',
        'company_pays' => 'getCompanyPays',
        'currency_code' => 'getCurrencyCode',
        'employee_pays_type' => 'getEmployeePaysType',
        'company_pays_type' => 'getCompanyPaysType',
        'benefit_plan_id' => 'getBenefitPlanId',
        'benefit_plan_name' => 'getBenefitPlanName',
        'effective_date' => 'getEffectiveDate',
        'coverage_type' => 'getCoverageType',
        'deduction_exception_period' => 'getDeductionExceptionPeriod',
        'payroll_provider_deduction_code_id' => 'getPayrollProviderDeductionCodeId',
        'payroll_provider_memo_code_id' => 'getPayrollProviderMemoCodeId',
        'end_date' => 'getEndDate',
        'deduction_start_date' => 'getDeductionStartDate',
        'deduction_end_date' => 'getDeductionEndDate',
        'employee_percent_deduction_type' => 'getEmployeePercentDeductionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('enrollment_record_id', $data ?? [], null);
        $this->setIfExists('employee_pays', $data ?? [], null);
        $this->setIfExists('company_pays', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('employee_pays_type', $data ?? [], null);
        $this->setIfExists('company_pays_type', $data ?? [], null);
        $this->setIfExists('benefit_plan_id', $data ?? [], null);
        $this->setIfExists('benefit_plan_name', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
        $this->setIfExists('coverage_type', $data ?? [], null);
        $this->setIfExists('deduction_exception_period', $data ?? [], null);
        $this->setIfExists('payroll_provider_deduction_code_id', $data ?? [], null);
        $this->setIfExists('payroll_provider_memo_code_id', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('deduction_start_date', $data ?? [], null);
        $this->setIfExists('deduction_end_date', $data ?? [], null);
        $this->setIfExists('employee_percent_deduction_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enrollment_record_id
     *
     * @return string|null
     */
    public function getEnrollmentRecordId()
    {
        return $this->container['enrollment_record_id'];
    }

    /**
     * Sets enrollment_record_id
     *
     * @param string|null $enrollment_record_id Enrollment record identifier
     *
     * @return self
     */
    public function setEnrollmentRecordId($enrollment_record_id)
    {
        if (is_null($enrollment_record_id)) {
            throw new \InvalidArgumentException('non-nullable enrollment_record_id cannot be null');
        }
        $this->container['enrollment_record_id'] = $enrollment_record_id;

        return $this;
    }

    /**
     * Gets employee_pays
     *
     * @return float|null
     */
    public function getEmployeePays()
    {
        return $this->container['employee_pays'];
    }

    /**
     * Sets employee_pays
     *
     * @param float|null $employee_pays Amount the employee pays
     *
     * @return self
     */
    public function setEmployeePays($employee_pays)
    {
        if (is_null($employee_pays)) {
            throw new \InvalidArgumentException('non-nullable employee_pays cannot be null');
        }
        $this->container['employee_pays'] = $employee_pays;

        return $this;
    }

    /**
     * Gets company_pays
     *
     * @return float|null
     */
    public function getCompanyPays()
    {
        return $this->container['company_pays'];
    }

    /**
     * Sets company_pays
     *
     * @param float|null $company_pays Amount the company pays
     *
     * @return self
     */
    public function setCompanyPays($company_pays)
    {
        if (is_null($company_pays)) {
            throw new \InvalidArgumentException('non-nullable company_pays cannot be null');
        }
        $this->container['company_pays'] = $company_pays;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Currency code for monetary values
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets employee_pays_type
     *
     * @return string|null
     */
    public function getEmployeePaysType()
    {
        return $this->container['employee_pays_type'];
    }

    /**
     * Sets employee_pays_type
     *
     * @param string|null $employee_pays_type Type of employee payment (e.g., percentage, fixed)
     *
     * @return self
     */
    public function setEmployeePaysType($employee_pays_type)
    {
        if (is_null($employee_pays_type)) {
            throw new \InvalidArgumentException('non-nullable employee_pays_type cannot be null');
        }
        $this->container['employee_pays_type'] = $employee_pays_type;

        return $this;
    }

    /**
     * Gets company_pays_type
     *
     * @return string|null
     */
    public function getCompanyPaysType()
    {
        return $this->container['company_pays_type'];
    }

    /**
     * Sets company_pays_type
     *
     * @param string|null $company_pays_type Type of company payment (e.g., percentage, fixed)
     *
     * @return self
     */
    public function setCompanyPaysType($company_pays_type)
    {
        if (is_null($company_pays_type)) {
            throw new \InvalidArgumentException('non-nullable company_pays_type cannot be null');
        }
        $this->container['company_pays_type'] = $company_pays_type;

        return $this;
    }

    /**
     * Gets benefit_plan_id
     *
     * @return string|null
     */
    public function getBenefitPlanId()
    {
        return $this->container['benefit_plan_id'];
    }

    /**
     * Sets benefit_plan_id
     *
     * @param string|null $benefit_plan_id Benefit plan identifier
     *
     * @return self
     */
    public function setBenefitPlanId($benefit_plan_id)
    {
        if (is_null($benefit_plan_id)) {
            throw new \InvalidArgumentException('non-nullable benefit_plan_id cannot be null');
        }
        $this->container['benefit_plan_id'] = $benefit_plan_id;

        return $this;
    }

    /**
     * Gets benefit_plan_name
     *
     * @return string|null
     */
    public function getBenefitPlanName()
    {
        return $this->container['benefit_plan_name'];
    }

    /**
     * Sets benefit_plan_name
     *
     * @param string|null $benefit_plan_name Name of the benefit plan
     *
     * @return self
     */
    public function setBenefitPlanName($benefit_plan_name)
    {
        if (is_null($benefit_plan_name)) {
            throw new \InvalidArgumentException('non-nullable benefit_plan_name cannot be null');
        }
        $this->container['benefit_plan_name'] = $benefit_plan_name;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime|null $effective_date Effective date of the benefit
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        if (is_null($effective_date)) {
            throw new \InvalidArgumentException('non-nullable effective_date cannot be null');
        }
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets coverage_type
     *
     * @return string|null
     */
    public function getCoverageType()
    {
        return $this->container['coverage_type'];
    }

    /**
     * Sets coverage_type
     *
     * @param string|null $coverage_type Type of coverage for the benefit
     *
     * @return self
     */
    public function setCoverageType($coverage_type)
    {
        if (is_null($coverage_type)) {
            throw new \InvalidArgumentException('non-nullable coverage_type cannot be null');
        }
        $this->container['coverage_type'] = $coverage_type;

        return $this;
    }

    /**
     * Gets deduction_exception_period
     *
     * @return string|null
     */
    public function getDeductionExceptionPeriod()
    {
        return $this->container['deduction_exception_period'];
    }

    /**
     * Sets deduction_exception_period
     *
     * @param string|null $deduction_exception_period Exception period for the deduction
     *
     * @return self
     */
    public function setDeductionExceptionPeriod($deduction_exception_period)
    {
        if (is_null($deduction_exception_period)) {
            throw new \InvalidArgumentException('non-nullable deduction_exception_period cannot be null');
        }
        $this->container['deduction_exception_period'] = $deduction_exception_period;

        return $this;
    }

    /**
     * Gets payroll_provider_deduction_code_id
     *
     * @return string|null
     */
    public function getPayrollProviderDeductionCodeId()
    {
        return $this->container['payroll_provider_deduction_code_id'];
    }

    /**
     * Sets payroll_provider_deduction_code_id
     *
     * @param string|null $payroll_provider_deduction_code_id Payroll provider deduction code identifier
     *
     * @return self
     */
    public function setPayrollProviderDeductionCodeId($payroll_provider_deduction_code_id)
    {
        if (is_null($payroll_provider_deduction_code_id)) {
            array_push($this->openAPINullablesSetToNull, 'payroll_provider_deduction_code_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payroll_provider_deduction_code_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payroll_provider_deduction_code_id'] = $payroll_provider_deduction_code_id;

        return $this;
    }

    /**
     * Gets payroll_provider_memo_code_id
     *
     * @return string|null
     */
    public function getPayrollProviderMemoCodeId()
    {
        return $this->container['payroll_provider_memo_code_id'];
    }

    /**
     * Sets payroll_provider_memo_code_id
     *
     * @param string|null $payroll_provider_memo_code_id Payroll provider memo code identifier
     *
     * @return self
     */
    public function setPayrollProviderMemoCodeId($payroll_provider_memo_code_id)
    {
        if (is_null($payroll_provider_memo_code_id)) {
            array_push($this->openAPINullablesSetToNull, 'payroll_provider_memo_code_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payroll_provider_memo_code_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payroll_provider_memo_code_id'] = $payroll_provider_memo_code_id;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date End date of the benefit plan
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            array_push($this->openAPINullablesSetToNull, 'end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets deduction_start_date
     *
     * @return \DateTime|null
     */
    public function getDeductionStartDate()
    {
        return $this->container['deduction_start_date'];
    }

    /**
     * Sets deduction_start_date
     *
     * @param \DateTime|null $deduction_start_date Start date for the deduction
     *
     * @return self
     */
    public function setDeductionStartDate($deduction_start_date)
    {
        if (is_null($deduction_start_date)) {
            throw new \InvalidArgumentException('non-nullable deduction_start_date cannot be null');
        }
        $this->container['deduction_start_date'] = $deduction_start_date;

        return $this;
    }

    /**
     * Gets deduction_end_date
     *
     * @return \DateTime|null
     */
    public function getDeductionEndDate()
    {
        return $this->container['deduction_end_date'];
    }

    /**
     * Sets deduction_end_date
     *
     * @param \DateTime|null $deduction_end_date End date for the deduction
     *
     * @return self
     */
    public function setDeductionEndDate($deduction_end_date)
    {
        if (is_null($deduction_end_date)) {
            throw new \InvalidArgumentException('non-nullable deduction_end_date cannot be null');
        }
        $this->container['deduction_end_date'] = $deduction_end_date;

        return $this;
    }

    /**
     * Gets employee_percent_deduction_type
     *
     * @return string|null
     */
    public function getEmployeePercentDeductionType()
    {
        return $this->container['employee_percent_deduction_type'];
    }

    /**
     * Sets employee_percent_deduction_type
     *
     * @param string|null $employee_percent_deduction_type Type of employee percentage deduction
     *
     * @return self
     */
    public function setEmployeePercentDeductionType($employee_percent_deduction_type)
    {
        if (is_null($employee_percent_deduction_type)) {
            array_push($this->openAPINullablesSetToNull, 'employee_percent_deduction_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_percent_deduction_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_percent_deduction_type'] = $employee_percent_deduction_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


