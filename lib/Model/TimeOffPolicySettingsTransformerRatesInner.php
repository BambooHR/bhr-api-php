<?php
/**
 * TimeOffPolicySettingsTransformerRatesInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TimeOffPolicySettingsTransformerRatesInner Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeOffPolicySettingsTransformerRatesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeOffPolicySettingsTransformer_rates_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'time_off_policy_id' => 'string',
        'accrual_begins_interval' => 'string',
        'accrual_begins_type' => 'string',
        'maximum_hours' => 'string',
        'maximum_carry_over' => 'string',
        'accrual_hours' => 'string',
        'accrual_interval' => 'string',
        'limit_carry_over' => 'string',
        'preaccrue' => 'string',
        'modifier' => 'string',
        'per_hour_worked' => 'string',
        'minimum_carry_over' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'time_off_policy_id' => null,
        'accrual_begins_interval' => null,
        'accrual_begins_type' => null,
        'maximum_hours' => null,
        'maximum_carry_over' => null,
        'accrual_hours' => null,
        'accrual_interval' => null,
        'limit_carry_over' => null,
        'preaccrue' => null,
        'modifier' => null,
        'per_hour_worked' => null,
        'minimum_carry_over' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'time_off_policy_id' => false,
        'accrual_begins_interval' => false,
        'accrual_begins_type' => false,
        'maximum_hours' => false,
        'maximum_carry_over' => false,
        'accrual_hours' => false,
        'accrual_interval' => false,
        'limit_carry_over' => false,
        'preaccrue' => false,
        'modifier' => false,
        'per_hour_worked' => false,
        'minimum_carry_over' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'time_off_policy_id' => 'timeOffPolicyId',
        'accrual_begins_interval' => 'accrualBeginsInterval',
        'accrual_begins_type' => 'accrualBeginsType',
        'maximum_hours' => 'maximumHours',
        'maximum_carry_over' => 'maximumCarryOver',
        'accrual_hours' => 'accrualHours',
        'accrual_interval' => 'accrualInterval',
        'limit_carry_over' => 'limitCarryOver',
        'preaccrue' => 'preaccrue',
        'modifier' => 'modifier',
        'per_hour_worked' => 'perHourWorked',
        'minimum_carry_over' => 'minimumCarryOver'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'time_off_policy_id' => 'setTimeOffPolicyId',
        'accrual_begins_interval' => 'setAccrualBeginsInterval',
        'accrual_begins_type' => 'setAccrualBeginsType',
        'maximum_hours' => 'setMaximumHours',
        'maximum_carry_over' => 'setMaximumCarryOver',
        'accrual_hours' => 'setAccrualHours',
        'accrual_interval' => 'setAccrualInterval',
        'limit_carry_over' => 'setLimitCarryOver',
        'preaccrue' => 'setPreaccrue',
        'modifier' => 'setModifier',
        'per_hour_worked' => 'setPerHourWorked',
        'minimum_carry_over' => 'setMinimumCarryOver'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'time_off_policy_id' => 'getTimeOffPolicyId',
        'accrual_begins_interval' => 'getAccrualBeginsInterval',
        'accrual_begins_type' => 'getAccrualBeginsType',
        'maximum_hours' => 'getMaximumHours',
        'maximum_carry_over' => 'getMaximumCarryOver',
        'accrual_hours' => 'getAccrualHours',
        'accrual_interval' => 'getAccrualInterval',
        'limit_carry_over' => 'getLimitCarryOver',
        'preaccrue' => 'getPreaccrue',
        'modifier' => 'getModifier',
        'per_hour_worked' => 'getPerHourWorked',
        'minimum_carry_over' => 'getMinimumCarryOver'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('time_off_policy_id', $data ?? [], null);
        $this->setIfExists('accrual_begins_interval', $data ?? [], null);
        $this->setIfExists('accrual_begins_type', $data ?? [], null);
        $this->setIfExists('maximum_hours', $data ?? [], null);
        $this->setIfExists('maximum_carry_over', $data ?? [], null);
        $this->setIfExists('accrual_hours', $data ?? [], null);
        $this->setIfExists('accrual_interval', $data ?? [], null);
        $this->setIfExists('limit_carry_over', $data ?? [], null);
        $this->setIfExists('preaccrue', $data ?? [], null);
        $this->setIfExists('modifier', $data ?? [], null);
        $this->setIfExists('per_hour_worked', $data ?? [], null);
        $this->setIfExists('minimum_carry_over', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets time_off_policy_id
     *
     * @return string|null
     */
    public function getTimeOffPolicyId()
    {
        return $this->container['time_off_policy_id'];
    }

    /**
     * Sets time_off_policy_id
     *
     * @param string|null $time_off_policy_id time_off_policy_id
     *
     * @return self
     */
    public function setTimeOffPolicyId($time_off_policy_id)
    {
        if (is_null($time_off_policy_id)) {
            throw new \InvalidArgumentException('non-nullable time_off_policy_id cannot be null');
        }
        $this->container['time_off_policy_id'] = $time_off_policy_id;

        return $this;
    }

    /**
     * Gets accrual_begins_interval
     *
     * @return string|null
     */
    public function getAccrualBeginsInterval()
    {
        return $this->container['accrual_begins_interval'];
    }

    /**
     * Sets accrual_begins_interval
     *
     * @param string|null $accrual_begins_interval accrual_begins_interval
     *
     * @return self
     */
    public function setAccrualBeginsInterval($accrual_begins_interval)
    {
        if (is_null($accrual_begins_interval)) {
            throw new \InvalidArgumentException('non-nullable accrual_begins_interval cannot be null');
        }
        $this->container['accrual_begins_interval'] = $accrual_begins_interval;

        return $this;
    }

    /**
     * Gets accrual_begins_type
     *
     * @return string|null
     */
    public function getAccrualBeginsType()
    {
        return $this->container['accrual_begins_type'];
    }

    /**
     * Sets accrual_begins_type
     *
     * @param string|null $accrual_begins_type accrual_begins_type
     *
     * @return self
     */
    public function setAccrualBeginsType($accrual_begins_type)
    {
        if (is_null($accrual_begins_type)) {
            throw new \InvalidArgumentException('non-nullable accrual_begins_type cannot be null');
        }
        $this->container['accrual_begins_type'] = $accrual_begins_type;

        return $this;
    }

    /**
     * Gets maximum_hours
     *
     * @return string|null
     */
    public function getMaximumHours()
    {
        return $this->container['maximum_hours'];
    }

    /**
     * Sets maximum_hours
     *
     * @param string|null $maximum_hours maximum_hours
     *
     * @return self
     */
    public function setMaximumHours($maximum_hours)
    {
        if (is_null($maximum_hours)) {
            throw new \InvalidArgumentException('non-nullable maximum_hours cannot be null');
        }
        $this->container['maximum_hours'] = $maximum_hours;

        return $this;
    }

    /**
     * Gets maximum_carry_over
     *
     * @return string|null
     */
    public function getMaximumCarryOver()
    {
        return $this->container['maximum_carry_over'];
    }

    /**
     * Sets maximum_carry_over
     *
     * @param string|null $maximum_carry_over maximum_carry_over
     *
     * @return self
     */
    public function setMaximumCarryOver($maximum_carry_over)
    {
        if (is_null($maximum_carry_over)) {
            throw new \InvalidArgumentException('non-nullable maximum_carry_over cannot be null');
        }
        $this->container['maximum_carry_over'] = $maximum_carry_over;

        return $this;
    }

    /**
     * Gets accrual_hours
     *
     * @return string|null
     */
    public function getAccrualHours()
    {
        return $this->container['accrual_hours'];
    }

    /**
     * Sets accrual_hours
     *
     * @param string|null $accrual_hours accrual_hours
     *
     * @return self
     */
    public function setAccrualHours($accrual_hours)
    {
        if (is_null($accrual_hours)) {
            throw new \InvalidArgumentException('non-nullable accrual_hours cannot be null');
        }
        $this->container['accrual_hours'] = $accrual_hours;

        return $this;
    }

    /**
     * Gets accrual_interval
     *
     * @return string|null
     */
    public function getAccrualInterval()
    {
        return $this->container['accrual_interval'];
    }

    /**
     * Sets accrual_interval
     *
     * @param string|null $accrual_interval accrual_interval
     *
     * @return self
     */
    public function setAccrualInterval($accrual_interval)
    {
        if (is_null($accrual_interval)) {
            throw new \InvalidArgumentException('non-nullable accrual_interval cannot be null');
        }
        $this->container['accrual_interval'] = $accrual_interval;

        return $this;
    }

    /**
     * Gets limit_carry_over
     *
     * @return string|null
     */
    public function getLimitCarryOver()
    {
        return $this->container['limit_carry_over'];
    }

    /**
     * Sets limit_carry_over
     *
     * @param string|null $limit_carry_over limit_carry_over
     *
     * @return self
     */
    public function setLimitCarryOver($limit_carry_over)
    {
        if (is_null($limit_carry_over)) {
            throw new \InvalidArgumentException('non-nullable limit_carry_over cannot be null');
        }
        $this->container['limit_carry_over'] = $limit_carry_over;

        return $this;
    }

    /**
     * Gets preaccrue
     *
     * @return string|null
     */
    public function getPreaccrue()
    {
        return $this->container['preaccrue'];
    }

    /**
     * Sets preaccrue
     *
     * @param string|null $preaccrue preaccrue
     *
     * @return self
     */
    public function setPreaccrue($preaccrue)
    {
        if (is_null($preaccrue)) {
            throw new \InvalidArgumentException('non-nullable preaccrue cannot be null');
        }
        $this->container['preaccrue'] = $preaccrue;

        return $this;
    }

    /**
     * Gets modifier
     *
     * @return string|null
     */
    public function getModifier()
    {
        return $this->container['modifier'];
    }

    /**
     * Sets modifier
     *
     * @param string|null $modifier modifier
     *
     * @return self
     */
    public function setModifier($modifier)
    {
        if (is_null($modifier)) {
            throw new \InvalidArgumentException('non-nullable modifier cannot be null');
        }
        $this->container['modifier'] = $modifier;

        return $this;
    }

    /**
     * Gets per_hour_worked
     *
     * @return string|null
     */
    public function getPerHourWorked()
    {
        return $this->container['per_hour_worked'];
    }

    /**
     * Sets per_hour_worked
     *
     * @param string|null $per_hour_worked per_hour_worked
     *
     * @return self
     */
    public function setPerHourWorked($per_hour_worked)
    {
        if (is_null($per_hour_worked)) {
            throw new \InvalidArgumentException('non-nullable per_hour_worked cannot be null');
        }
        $this->container['per_hour_worked'] = $per_hour_worked;

        return $this;
    }

    /**
     * Gets minimum_carry_over
     *
     * @return string|null
     */
    public function getMinimumCarryOver()
    {
        return $this->container['minimum_carry_over'];
    }

    /**
     * Sets minimum_carry_over
     *
     * @param string|null $minimum_carry_over minimum_carry_over
     *
     * @return self
     */
    public function setMinimumCarryOver($minimum_carry_over)
    {
        if (is_null($minimum_carry_over)) {
            throw new \InvalidArgumentException('non-nullable minimum_carry_over cannot be null');
        }
        $this->container['minimum_carry_over'] = $minimum_carry_over;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


