<?php
/**
 * EnrolledBenefitWidgetDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EnrolledBenefitWidgetDataObject Class Doc Comment
 *
 * @category Class
 * @description Widget data object for enrolled employee benefits. Contains enrolled plans, enrollment windows, and display flags.
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EnrolledBenefitWidgetDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EnrolledBenefitWidgetDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'mixed',
        'has_benefits' => 'mixed',
        'pay_frequency' => 'mixed',
        'show_company_pays' => 'mixed',
        'benefits_page_id' => 'mixed',
        'enrolled_plans' => 'mixed',
        'enrollment_windows' => 'mixed',
        'on' => 'bool',
        'can_view_self_enrollment' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'has_benefits' => null,
        'pay_frequency' => null,
        'show_company_pays' => null,
        'benefits_page_id' => null,
        'enrolled_plans' => null,
        'enrollment_windows' => null,
        'on' => null,
        'can_view_self_enrollment' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => true,
        'has_benefits' => true,
        'pay_frequency' => true,
        'show_company_pays' => true,
        'benefits_page_id' => true,
        'enrolled_plans' => true,
        'enrollment_windows' => true,
        'on' => false,
        'can_view_self_enrollment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'has_benefits' => 'hasBenefits',
        'pay_frequency' => 'payFrequency',
        'show_company_pays' => 'showCompanyPays',
        'benefits_page_id' => 'benefitsPageId',
        'enrolled_plans' => 'enrolledPlans',
        'enrollment_windows' => 'enrollmentWindows',
        'on' => 'on',
        'can_view_self_enrollment' => 'canViewSelfEnrollment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'has_benefits' => 'setHasBenefits',
        'pay_frequency' => 'setPayFrequency',
        'show_company_pays' => 'setShowCompanyPays',
        'benefits_page_id' => 'setBenefitsPageId',
        'enrolled_plans' => 'setEnrolledPlans',
        'enrollment_windows' => 'setEnrollmentWindows',
        'on' => 'setOn',
        'can_view_self_enrollment' => 'setCanViewSelfEnrollment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'has_benefits' => 'getHasBenefits',
        'pay_frequency' => 'getPayFrequency',
        'show_company_pays' => 'getShowCompanyPays',
        'benefits_page_id' => 'getBenefitsPageId',
        'enrolled_plans' => 'getEnrolledPlans',
        'enrollment_windows' => 'getEnrollmentWindows',
        'on' => 'getOn',
        'can_view_self_enrollment' => 'getCanViewSelfEnrollment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('has_benefits', $data ?? [], null);
        $this->setIfExists('pay_frequency', $data ?? [], null);
        $this->setIfExists('show_company_pays', $data ?? [], null);
        $this->setIfExists('benefits_page_id', $data ?? [], null);
        $this->setIfExists('enrolled_plans', $data ?? [], null);
        $this->setIfExists('enrollment_windows', $data ?? [], null);
        $this->setIfExists('on', $data ?? [], null);
        $this->setIfExists('can_view_self_enrollment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return mixed|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param mixed|null $employee_id Employee ID for whom the widget applies
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            array_push($this->openAPINullablesSetToNull, 'employee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets has_benefits
     *
     * @return mixed|null
     */
    public function getHasBenefits()
    {
        return $this->container['has_benefits'];
    }

    /**
     * Sets has_benefits
     *
     * @param mixed|null $has_benefits Whether the employee has benefits
     *
     * @return self
     */
    public function setHasBenefits($has_benefits)
    {
        if (is_null($has_benefits)) {
            array_push($this->openAPINullablesSetToNull, 'has_benefits');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_benefits', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_benefits'] = $has_benefits;

        return $this;
    }

    /**
     * Gets pay_frequency
     *
     * @return mixed|null
     */
    public function getPayFrequency()
    {
        return $this->container['pay_frequency'];
    }

    /**
     * Sets pay_frequency
     *
     * @param mixed|null $pay_frequency Pay frequency for the employee
     *
     * @return self
     */
    public function setPayFrequency($pay_frequency)
    {
        if (is_null($pay_frequency)) {
            array_push($this->openAPINullablesSetToNull, 'pay_frequency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_frequency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_frequency'] = $pay_frequency;

        return $this;
    }

    /**
     * Gets show_company_pays
     *
     * @return mixed|null
     */
    public function getShowCompanyPays()
    {
        return $this->container['show_company_pays'];
    }

    /**
     * Sets show_company_pays
     *
     * @param mixed|null $show_company_pays Whether the employee can see company-paid contributions
     *
     * @return self
     */
    public function setShowCompanyPays($show_company_pays)
    {
        if (is_null($show_company_pays)) {
            array_push($this->openAPINullablesSetToNull, 'show_company_pays');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_company_pays', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_company_pays'] = $show_company_pays;

        return $this;
    }

    /**
     * Gets benefits_page_id
     *
     * @return mixed|null
     */
    public function getBenefitsPageId()
    {
        return $this->container['benefits_page_id'];
    }

    /**
     * Sets benefits_page_id
     *
     * @param mixed|null $benefits_page_id ID of the benefits page
     *
     * @return self
     */
    public function setBenefitsPageId($benefits_page_id)
    {
        if (is_null($benefits_page_id)) {
            array_push($this->openAPINullablesSetToNull, 'benefits_page_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('benefits_page_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['benefits_page_id'] = $benefits_page_id;

        return $this;
    }

    /**
     * Gets enrolled_plans
     *
     * @return mixed|null
     */
    public function getEnrolledPlans()
    {
        return $this->container['enrolled_plans'];
    }

    /**
     * Sets enrolled_plans
     *
     * @param mixed|null $enrolled_plans List of enrolled benefit plans
     *
     * @return self
     */
    public function setEnrolledPlans($enrolled_plans)
    {
        if (is_null($enrolled_plans)) {
            array_push($this->openAPINullablesSetToNull, 'enrolled_plans');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrolled_plans', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enrolled_plans'] = $enrolled_plans;

        return $this;
    }

    /**
     * Gets enrollment_windows
     *
     * @return mixed|null
     */
    public function getEnrollmentWindows()
    {
        return $this->container['enrollment_windows'];
    }

    /**
     * Sets enrollment_windows
     *
     * @param mixed|null $enrollment_windows List of enrollment windows available to the employee
     *
     * @return self
     */
    public function setEnrollmentWindows($enrollment_windows)
    {
        if (is_null($enrollment_windows)) {
            array_push($this->openAPINullablesSetToNull, 'enrollment_windows');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enrollment_windows', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enrollment_windows'] = $enrollment_windows;

        return $this;
    }

    /**
     * Gets on
     *
     * @return bool|null
     */
    public function getOn()
    {
        return $this->container['on'];
    }

    /**
     * Sets on
     *
     * @param bool|null $on Whether the widget should be displayed on the home page
     *
     * @return self
     */
    public function setOn($on)
    {
        if (is_null($on)) {
            throw new \InvalidArgumentException('non-nullable on cannot be null');
        }
        $this->container['on'] = $on;

        return $this;
    }

    /**
     * Gets can_view_self_enrollment
     *
     * @return bool|null
     */
    public function getCanViewSelfEnrollment()
    {
        return $this->container['can_view_self_enrollment'];
    }

    /**
     * Sets can_view_self_enrollment
     *
     * @param bool|null $can_view_self_enrollment Whether the employee can view self-enrollment
     *
     * @return self
     */
    public function setCanViewSelfEnrollment($can_view_self_enrollment)
    {
        if (is_null($can_view_self_enrollment)) {
            throw new \InvalidArgumentException('non-nullable can_view_self_enrollment cannot be null');
        }
        $this->container['can_view_self_enrollment'] = $can_view_self_enrollment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


