<?php
/**
 * NHPNewHirePacketInstanceDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * NHPNewHirePacketInstanceDataObject Class Doc Comment
 *
 * @category Class
 * @description Object containing the new hire packet instance data
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NHPNewHirePacketInstanceDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NHP-NewHirePacketInstanceDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'employee_id' => 'int',
        'contact_employee_id' => 'int',
        'requires_personal_information' => 'bool',
        'requires_photo' => 'bool',
        'requires_personal_questions' => 'bool',
        'arrive_by_time' => 'string',
        'other_instructions' => 'string',
        'location' => 'string',
        'sent_datetime' => 'string',
        'viewed_datetime' => 'string',
        'completed_datetime' => 'string',
        'created_by_user_id' => 'int',
        'created_datetime' => 'string',
        'send_get_to_know_you_email' => 'bool',
        'get_to_know_you_email_sent' => 'bool',
        'show_payroll_state' => 'bool',
        'show_payroll_federal' => 'bool',
        'show_payroll_direct_deposit' => 'bool',
        'nhp_configuration_id' => 'int',
        'nhp_template_id' => 'int',
        'count_nhp_gtky_sent' => 'int',
        'include_photo_option' => 'bool',
        'cancelled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'employee_id' => null,
        'contact_employee_id' => null,
        'requires_personal_information' => null,
        'requires_photo' => null,
        'requires_personal_questions' => null,
        'arrive_by_time' => null,
        'other_instructions' => null,
        'location' => null,
        'sent_datetime' => null,
        'viewed_datetime' => null,
        'completed_datetime' => null,
        'created_by_user_id' => null,
        'created_datetime' => null,
        'send_get_to_know_you_email' => null,
        'get_to_know_you_email_sent' => null,
        'show_payroll_state' => null,
        'show_payroll_federal' => null,
        'show_payroll_direct_deposit' => null,
        'nhp_configuration_id' => null,
        'nhp_template_id' => null,
        'count_nhp_gtky_sent' => null,
        'include_photo_option' => null,
        'cancelled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'employee_id' => false,
        'contact_employee_id' => true,
        'requires_personal_information' => false,
        'requires_photo' => false,
        'requires_personal_questions' => false,
        'arrive_by_time' => false,
        'other_instructions' => false,
        'location' => false,
        'sent_datetime' => false,
        'viewed_datetime' => false,
        'completed_datetime' => false,
        'created_by_user_id' => false,
        'created_datetime' => false,
        'send_get_to_know_you_email' => false,
        'get_to_know_you_email_sent' => false,
        'show_payroll_state' => false,
        'show_payroll_federal' => false,
        'show_payroll_direct_deposit' => false,
        'nhp_configuration_id' => true,
        'nhp_template_id' => false,
        'count_nhp_gtky_sent' => false,
        'include_photo_option' => false,
        'cancelled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_id' => 'employeeId',
        'contact_employee_id' => 'contactEmployeeId',
        'requires_personal_information' => 'requiresPersonalInformation',
        'requires_photo' => 'requiresPhoto',
        'requires_personal_questions' => 'requiresPersonalQuestions',
        'arrive_by_time' => 'arriveByTime',
        'other_instructions' => 'otherInstructions',
        'location' => 'location',
        'sent_datetime' => 'sentDatetime',
        'viewed_datetime' => 'viewedDatetime',
        'completed_datetime' => 'completedDatetime',
        'created_by_user_id' => 'createdByUserId',
        'created_datetime' => 'createdDatetime',
        'send_get_to_know_you_email' => 'sendGetToKnowYouEmail',
        'get_to_know_you_email_sent' => 'getToKnowYouEmailSent',
        'show_payroll_state' => 'showPayrollState',
        'show_payroll_federal' => 'showPayrollFederal',
        'show_payroll_direct_deposit' => 'showPayrollDirectDeposit',
        'nhp_configuration_id' => 'nhpConfigurationId',
        'nhp_template_id' => 'nhpTemplateId',
        'count_nhp_gtky_sent' => 'countNhpGtkySent',
        'include_photo_option' => 'includePhotoOption',
        'cancelled' => 'cancelled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'contact_employee_id' => 'setContactEmployeeId',
        'requires_personal_information' => 'setRequiresPersonalInformation',
        'requires_photo' => 'setRequiresPhoto',
        'requires_personal_questions' => 'setRequiresPersonalQuestions',
        'arrive_by_time' => 'setArriveByTime',
        'other_instructions' => 'setOtherInstructions',
        'location' => 'setLocation',
        'sent_datetime' => 'setSentDatetime',
        'viewed_datetime' => 'setViewedDatetime',
        'completed_datetime' => 'setCompletedDatetime',
        'created_by_user_id' => 'setCreatedByUserId',
        'created_datetime' => 'setCreatedDatetime',
        'send_get_to_know_you_email' => 'setSendGetToKnowYouEmail',
        'get_to_know_you_email_sent' => 'setGetToKnowYouEmailSent',
        'show_payroll_state' => 'setShowPayrollState',
        'show_payroll_federal' => 'setShowPayrollFederal',
        'show_payroll_direct_deposit' => 'setShowPayrollDirectDeposit',
        'nhp_configuration_id' => 'setNhpConfigurationId',
        'nhp_template_id' => 'setNhpTemplateId',
        'count_nhp_gtky_sent' => 'setCountNhpGtkySent',
        'include_photo_option' => 'setIncludePhotoOption',
        'cancelled' => 'setCancelled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'contact_employee_id' => 'getContactEmployeeId',
        'requires_personal_information' => 'getRequiresPersonalInformation',
        'requires_photo' => 'getRequiresPhoto',
        'requires_personal_questions' => 'getRequiresPersonalQuestions',
        'arrive_by_time' => 'getArriveByTime',
        'other_instructions' => 'getOtherInstructions',
        'location' => 'getLocation',
        'sent_datetime' => 'getSentDatetime',
        'viewed_datetime' => 'getViewedDatetime',
        'completed_datetime' => 'getCompletedDatetime',
        'created_by_user_id' => 'getCreatedByUserId',
        'created_datetime' => 'getCreatedDatetime',
        'send_get_to_know_you_email' => 'getSendGetToKnowYouEmail',
        'get_to_know_you_email_sent' => 'getGetToKnowYouEmailSent',
        'show_payroll_state' => 'getShowPayrollState',
        'show_payroll_federal' => 'getShowPayrollFederal',
        'show_payroll_direct_deposit' => 'getShowPayrollDirectDeposit',
        'nhp_configuration_id' => 'getNhpConfigurationId',
        'nhp_template_id' => 'getNhpTemplateId',
        'count_nhp_gtky_sent' => 'getCountNhpGtkySent',
        'include_photo_option' => 'getIncludePhotoOption',
        'cancelled' => 'getCancelled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('contact_employee_id', $data ?? [], null);
        $this->setIfExists('requires_personal_information', $data ?? [], true);
        $this->setIfExists('requires_photo', $data ?? [], false);
        $this->setIfExists('requires_personal_questions', $data ?? [], true);
        $this->setIfExists('arrive_by_time', $data ?? [], null);
        $this->setIfExists('other_instructions', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('sent_datetime', $data ?? [], null);
        $this->setIfExists('viewed_datetime', $data ?? [], null);
        $this->setIfExists('completed_datetime', $data ?? [], null);
        $this->setIfExists('created_by_user_id', $data ?? [], null);
        $this->setIfExists('created_datetime', $data ?? [], null);
        $this->setIfExists('send_get_to_know_you_email', $data ?? [], null);
        $this->setIfExists('get_to_know_you_email_sent', $data ?? [], null);
        $this->setIfExists('show_payroll_state', $data ?? [], null);
        $this->setIfExists('show_payroll_federal', $data ?? [], null);
        $this->setIfExists('show_payroll_direct_deposit', $data ?? [], null);
        $this->setIfExists('nhp_configuration_id', $data ?? [], null);
        $this->setIfExists('nhp_template_id', $data ?? [], null);
        $this->setIfExists('count_nhp_gtky_sent', $data ?? [], null);
        $this->setIfExists('include_photo_option', $data ?? [], true);
        $this->setIfExists('cancelled', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Unique identifier of the new hire packet instance
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Unique identifier of the employee
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets contact_employee_id
     *
     * @return int|null
     */
    public function getContactEmployeeId()
    {
        return $this->container['contact_employee_id'];
    }

    /**
     * Sets contact_employee_id
     *
     * @param int|null $contact_employee_id Unique identifier of the contact employee
     *
     * @return self
     */
    public function setContactEmployeeId($contact_employee_id)
    {
        if (is_null($contact_employee_id)) {
            array_push($this->openAPINullablesSetToNull, 'contact_employee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_employee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contact_employee_id'] = $contact_employee_id;

        return $this;
    }

    /**
     * Gets requires_personal_information
     *
     * @return bool|null
     */
    public function getRequiresPersonalInformation()
    {
        return $this->container['requires_personal_information'];
    }

    /**
     * Sets requires_personal_information
     *
     * @param bool|null $requires_personal_information Indicates if personal information is required
     *
     * @return self
     */
    public function setRequiresPersonalInformation($requires_personal_information)
    {
        if (is_null($requires_personal_information)) {
            throw new \InvalidArgumentException('non-nullable requires_personal_information cannot be null');
        }
        $this->container['requires_personal_information'] = $requires_personal_information;

        return $this;
    }

    /**
     * Gets requires_photo
     *
     * @return bool|null
     */
    public function getRequiresPhoto()
    {
        return $this->container['requires_photo'];
    }

    /**
     * Sets requires_photo
     *
     * @param bool|null $requires_photo Indicates if a photo is required
     *
     * @return self
     */
    public function setRequiresPhoto($requires_photo)
    {
        if (is_null($requires_photo)) {
            throw new \InvalidArgumentException('non-nullable requires_photo cannot be null');
        }
        $this->container['requires_photo'] = $requires_photo;

        return $this;
    }

    /**
     * Gets requires_personal_questions
     *
     * @return bool|null
     */
    public function getRequiresPersonalQuestions()
    {
        return $this->container['requires_personal_questions'];
    }

    /**
     * Sets requires_personal_questions
     *
     * @param bool|null $requires_personal_questions Indicates if personal questions are required
     *
     * @return self
     */
    public function setRequiresPersonalQuestions($requires_personal_questions)
    {
        if (is_null($requires_personal_questions)) {
            throw new \InvalidArgumentException('non-nullable requires_personal_questions cannot be null');
        }
        $this->container['requires_personal_questions'] = $requires_personal_questions;

        return $this;
    }

    /**
     * Gets arrive_by_time
     *
     * @return string|null
     */
    public function getArriveByTime()
    {
        return $this->container['arrive_by_time'];
    }

    /**
     * Sets arrive_by_time
     *
     * @param string|null $arrive_by_time The time by which the employee should arrive
     *
     * @return self
     */
    public function setArriveByTime($arrive_by_time)
    {
        if (is_null($arrive_by_time)) {
            throw new \InvalidArgumentException('non-nullable arrive_by_time cannot be null');
        }
        $this->container['arrive_by_time'] = $arrive_by_time;

        return $this;
    }

    /**
     * Gets other_instructions
     *
     * @return string|null
     */
    public function getOtherInstructions()
    {
        return $this->container['other_instructions'];
    }

    /**
     * Sets other_instructions
     *
     * @param string|null $other_instructions Any other instructions for the new hire packet
     *
     * @return self
     */
    public function setOtherInstructions($other_instructions)
    {
        if (is_null($other_instructions)) {
            throw new \InvalidArgumentException('non-nullable other_instructions cannot be null');
        }
        $this->container['other_instructions'] = $other_instructions;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location The location of the new hire packet
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets sent_datetime
     *
     * @return string|null
     */
    public function getSentDatetime()
    {
        return $this->container['sent_datetime'];
    }

    /**
     * Sets sent_datetime
     *
     * @param string|null $sent_datetime The date and time the new hire packet was sent
     *
     * @return self
     */
    public function setSentDatetime($sent_datetime)
    {
        if (is_null($sent_datetime)) {
            throw new \InvalidArgumentException('non-nullable sent_datetime cannot be null');
        }
        $this->container['sent_datetime'] = $sent_datetime;

        return $this;
    }

    /**
     * Gets viewed_datetime
     *
     * @return string|null
     */
    public function getViewedDatetime()
    {
        return $this->container['viewed_datetime'];
    }

    /**
     * Sets viewed_datetime
     *
     * @param string|null $viewed_datetime The date and time the new hire packet was viewed
     *
     * @return self
     */
    public function setViewedDatetime($viewed_datetime)
    {
        if (is_null($viewed_datetime)) {
            throw new \InvalidArgumentException('non-nullable viewed_datetime cannot be null');
        }
        $this->container['viewed_datetime'] = $viewed_datetime;

        return $this;
    }

    /**
     * Gets completed_datetime
     *
     * @return string|null
     */
    public function getCompletedDatetime()
    {
        return $this->container['completed_datetime'];
    }

    /**
     * Sets completed_datetime
     *
     * @param string|null $completed_datetime The date and time the new hire packet was completed
     *
     * @return self
     */
    public function setCompletedDatetime($completed_datetime)
    {
        if (is_null($completed_datetime)) {
            throw new \InvalidArgumentException('non-nullable completed_datetime cannot be null');
        }
        $this->container['completed_datetime'] = $completed_datetime;

        return $this;
    }

    /**
     * Gets created_by_user_id
     *
     * @return int|null
     */
    public function getCreatedByUserId()
    {
        return $this->container['created_by_user_id'];
    }

    /**
     * Sets created_by_user_id
     *
     * @param int|null $created_by_user_id Unique identifier of the user who created the new hire packet instance
     *
     * @return self
     */
    public function setCreatedByUserId($created_by_user_id)
    {
        if (is_null($created_by_user_id)) {
            throw new \InvalidArgumentException('non-nullable created_by_user_id cannot be null');
        }
        $this->container['created_by_user_id'] = $created_by_user_id;

        return $this;
    }

    /**
     * Gets created_datetime
     *
     * @return string|null
     */
    public function getCreatedDatetime()
    {
        return $this->container['created_datetime'];
    }

    /**
     * Sets created_datetime
     *
     * @param string|null $created_datetime The date and time the new hire packet instance was created
     *
     * @return self
     */
    public function setCreatedDatetime($created_datetime)
    {
        if (is_null($created_datetime)) {
            throw new \InvalidArgumentException('non-nullable created_datetime cannot be null');
        }
        $this->container['created_datetime'] = $created_datetime;

        return $this;
    }

    /**
     * Gets send_get_to_know_you_email
     *
     * @return bool|null
     */
    public function getSendGetToKnowYouEmail()
    {
        return $this->container['send_get_to_know_you_email'];
    }

    /**
     * Sets send_get_to_know_you_email
     *
     * @param bool|null $send_get_to_know_you_email Indicates if the Get To Know You email should be sent
     *
     * @return self
     */
    public function setSendGetToKnowYouEmail($send_get_to_know_you_email)
    {
        if (is_null($send_get_to_know_you_email)) {
            throw new \InvalidArgumentException('non-nullable send_get_to_know_you_email cannot be null');
        }
        $this->container['send_get_to_know_you_email'] = $send_get_to_know_you_email;

        return $this;
    }

    /**
     * Gets get_to_know_you_email_sent
     *
     * @return bool|null
     */
    public function getGetToKnowYouEmailSent()
    {
        return $this->container['get_to_know_you_email_sent'];
    }

    /**
     * Sets get_to_know_you_email_sent
     *
     * @param bool|null $get_to_know_you_email_sent Indicates if the Get To Know You email has been sent
     *
     * @return self
     */
    public function setGetToKnowYouEmailSent($get_to_know_you_email_sent)
    {
        if (is_null($get_to_know_you_email_sent)) {
            throw new \InvalidArgumentException('non-nullable get_to_know_you_email_sent cannot be null');
        }
        $this->container['get_to_know_you_email_sent'] = $get_to_know_you_email_sent;

        return $this;
    }

    /**
     * Gets show_payroll_state
     *
     * @return bool|null
     */
    public function getShowPayrollState()
    {
        return $this->container['show_payroll_state'];
    }

    /**
     * Sets show_payroll_state
     *
     * @param bool|null $show_payroll_state Indicates if the payroll state should be shown
     *
     * @return self
     */
    public function setShowPayrollState($show_payroll_state)
    {
        if (is_null($show_payroll_state)) {
            throw new \InvalidArgumentException('non-nullable show_payroll_state cannot be null');
        }
        $this->container['show_payroll_state'] = $show_payroll_state;

        return $this;
    }

    /**
     * Gets show_payroll_federal
     *
     * @return bool|null
     */
    public function getShowPayrollFederal()
    {
        return $this->container['show_payroll_federal'];
    }

    /**
     * Sets show_payroll_federal
     *
     * @param bool|null $show_payroll_federal Indicates if the payroll federal information should be shown
     *
     * @return self
     */
    public function setShowPayrollFederal($show_payroll_federal)
    {
        if (is_null($show_payroll_federal)) {
            throw new \InvalidArgumentException('non-nullable show_payroll_federal cannot be null');
        }
        $this->container['show_payroll_federal'] = $show_payroll_federal;

        return $this;
    }

    /**
     * Gets show_payroll_direct_deposit
     *
     * @return bool|null
     */
    public function getShowPayrollDirectDeposit()
    {
        return $this->container['show_payroll_direct_deposit'];
    }

    /**
     * Sets show_payroll_direct_deposit
     *
     * @param bool|null $show_payroll_direct_deposit Indicates if the payroll direct deposit information should be shown
     *
     * @return self
     */
    public function setShowPayrollDirectDeposit($show_payroll_direct_deposit)
    {
        if (is_null($show_payroll_direct_deposit)) {
            throw new \InvalidArgumentException('non-nullable show_payroll_direct_deposit cannot be null');
        }
        $this->container['show_payroll_direct_deposit'] = $show_payroll_direct_deposit;

        return $this;
    }

    /**
     * Gets nhp_configuration_id
     *
     * @return int|null
     */
    public function getNhpConfigurationId()
    {
        return $this->container['nhp_configuration_id'];
    }

    /**
     * Sets nhp_configuration_id
     *
     * @param int|null $nhp_configuration_id Unique identifier of the new hire packet configuration
     *
     * @return self
     */
    public function setNhpConfigurationId($nhp_configuration_id)
    {
        if (is_null($nhp_configuration_id)) {
            array_push($this->openAPINullablesSetToNull, 'nhp_configuration_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nhp_configuration_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nhp_configuration_id'] = $nhp_configuration_id;

        return $this;
    }

    /**
     * Gets nhp_template_id
     *
     * @return int|null
     */
    public function getNhpTemplateId()
    {
        return $this->container['nhp_template_id'];
    }

    /**
     * Sets nhp_template_id
     *
     * @param int|null $nhp_template_id Unique identifier of the new hire packet template
     *
     * @return self
     */
    public function setNhpTemplateId($nhp_template_id)
    {
        if (is_null($nhp_template_id)) {
            throw new \InvalidArgumentException('non-nullable nhp_template_id cannot be null');
        }
        $this->container['nhp_template_id'] = $nhp_template_id;

        return $this;
    }

    /**
     * Gets count_nhp_gtky_sent
     *
     * @return int|null
     */
    public function getCountNhpGtkySent()
    {
        return $this->container['count_nhp_gtky_sent'];
    }

    /**
     * Sets count_nhp_gtky_sent
     *
     * @param int|null $count_nhp_gtky_sent The number of Get To Know You emails sent
     *
     * @return self
     */
    public function setCountNhpGtkySent($count_nhp_gtky_sent)
    {
        if (is_null($count_nhp_gtky_sent)) {
            throw new \InvalidArgumentException('non-nullable count_nhp_gtky_sent cannot be null');
        }
        $this->container['count_nhp_gtky_sent'] = $count_nhp_gtky_sent;

        return $this;
    }

    /**
     * Gets include_photo_option
     *
     * @return bool|null
     */
    public function getIncludePhotoOption()
    {
        return $this->container['include_photo_option'];
    }

    /**
     * Sets include_photo_option
     *
     * @param bool|null $include_photo_option Indicates if the photo option should be included
     *
     * @return self
     */
    public function setIncludePhotoOption($include_photo_option)
    {
        if (is_null($include_photo_option)) {
            throw new \InvalidArgumentException('non-nullable include_photo_option cannot be null');
        }
        $this->container['include_photo_option'] = $include_photo_option;

        return $this;
    }

    /**
     * Gets cancelled
     *
     * @return bool|null
     */
    public function getCancelled()
    {
        return $this->container['cancelled'];
    }

    /**
     * Sets cancelled
     *
     * @param bool|null $cancelled Indicates if the new hire packet instance is cancelled
     *
     * @return self
     */
    public function setCancelled($cancelled)
    {
        if (is_null($cancelled)) {
            throw new \InvalidArgumentException('non-nullable cancelled cannot be null');
        }
        $this->container['cancelled'] = $cancelled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


