<?php
/**
 * BaseEmployeeCheckRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * BaseEmployeeCheckRequest Class Doc Comment
 *
 * @category Class
 * @description Request object for employee checks
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BaseEmployeeCheckRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BaseEmployeeCheckRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'client_id' => 'int',
        'pay_cycle_id' => 'int',
        'payroll_pay_cycle_id' => 'int',
        'core_employee_id' => 'int',
        'direct_deposit_disable' => 'bool',
        'deduction_disable' => 'bool',
        'note' => 'string',
        'pay_period_id' => 'int',
        'federal_is_exempt' => 'bool',
        'federal_withholding_additional' => 'float',
        'federal_withholding_additional_type' => 'string',
        'state_is_exempt' => 'bool',
        'state_withholding_additional' => 'float',
        'state_withholding_additional_type' => 'string',
        'use_federal_custom_override' => 'bool',
        'federal_override_amount' => 'float',
        'federal_override_amount_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'client_id' => null,
        'pay_cycle_id' => null,
        'payroll_pay_cycle_id' => null,
        'core_employee_id' => null,
        'direct_deposit_disable' => null,
        'deduction_disable' => null,
        'note' => null,
        'pay_period_id' => null,
        'federal_is_exempt' => null,
        'federal_withholding_additional' => 'float',
        'federal_withholding_additional_type' => null,
        'state_is_exempt' => null,
        'state_withholding_additional' => 'float',
        'state_withholding_additional_type' => null,
        'use_federal_custom_override' => null,
        'federal_override_amount' => 'float',
        'federal_override_amount_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'client_id' => false,
        'pay_cycle_id' => false,
        'payroll_pay_cycle_id' => false,
        'core_employee_id' => false,
        'direct_deposit_disable' => true,
        'deduction_disable' => true,
        'note' => true,
        'pay_period_id' => true,
        'federal_is_exempt' => true,
        'federal_withholding_additional' => true,
        'federal_withholding_additional_type' => true,
        'state_is_exempt' => true,
        'state_withholding_additional' => true,
        'state_withholding_additional_type' => true,
        'use_federal_custom_override' => true,
        'federal_override_amount' => true,
        'federal_override_amount_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'clientId',
        'pay_cycle_id' => 'payCycleId',
        'payroll_pay_cycle_id' => 'payrollPayCycleId',
        'core_employee_id' => 'coreEmployeeId',
        'direct_deposit_disable' => 'directDepositDisable',
        'deduction_disable' => 'deductionDisable',
        'note' => 'note',
        'pay_period_id' => 'payPeriodId',
        'federal_is_exempt' => 'federalIsExempt',
        'federal_withholding_additional' => 'federalWithholdingAdditional',
        'federal_withholding_additional_type' => 'federalWithholdingAdditionalType',
        'state_is_exempt' => 'stateIsExempt',
        'state_withholding_additional' => 'stateWithholdingAdditional',
        'state_withholding_additional_type' => 'stateWithholdingAdditionalType',
        'use_federal_custom_override' => 'useFederalCustomOverride',
        'federal_override_amount' => 'federalOverrideAmount',
        'federal_override_amount_type' => 'federalOverrideAmountType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'pay_cycle_id' => 'setPayCycleId',
        'payroll_pay_cycle_id' => 'setPayrollPayCycleId',
        'core_employee_id' => 'setCoreEmployeeId',
        'direct_deposit_disable' => 'setDirectDepositDisable',
        'deduction_disable' => 'setDeductionDisable',
        'note' => 'setNote',
        'pay_period_id' => 'setPayPeriodId',
        'federal_is_exempt' => 'setFederalIsExempt',
        'federal_withholding_additional' => 'setFederalWithholdingAdditional',
        'federal_withholding_additional_type' => 'setFederalWithholdingAdditionalType',
        'state_is_exempt' => 'setStateIsExempt',
        'state_withholding_additional' => 'setStateWithholdingAdditional',
        'state_withholding_additional_type' => 'setStateWithholdingAdditionalType',
        'use_federal_custom_override' => 'setUseFederalCustomOverride',
        'federal_override_amount' => 'setFederalOverrideAmount',
        'federal_override_amount_type' => 'setFederalOverrideAmountType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'pay_cycle_id' => 'getPayCycleId',
        'payroll_pay_cycle_id' => 'getPayrollPayCycleId',
        'core_employee_id' => 'getCoreEmployeeId',
        'direct_deposit_disable' => 'getDirectDepositDisable',
        'deduction_disable' => 'getDeductionDisable',
        'note' => 'getNote',
        'pay_period_id' => 'getPayPeriodId',
        'federal_is_exempt' => 'getFederalIsExempt',
        'federal_withholding_additional' => 'getFederalWithholdingAdditional',
        'federal_withholding_additional_type' => 'getFederalWithholdingAdditionalType',
        'state_is_exempt' => 'getStateIsExempt',
        'state_withholding_additional' => 'getStateWithholdingAdditional',
        'state_withholding_additional_type' => 'getStateWithholdingAdditionalType',
        'use_federal_custom_override' => 'getUseFederalCustomOverride',
        'federal_override_amount' => 'getFederalOverrideAmount',
        'federal_override_amount_type' => 'getFederalOverrideAmountType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('pay_cycle_id', $data ?? [], null);
        $this->setIfExists('payroll_pay_cycle_id', $data ?? [], null);
        $this->setIfExists('core_employee_id', $data ?? [], null);
        $this->setIfExists('direct_deposit_disable', $data ?? [], null);
        $this->setIfExists('deduction_disable', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('pay_period_id', $data ?? [], null);
        $this->setIfExists('federal_is_exempt', $data ?? [], null);
        $this->setIfExists('federal_withholding_additional', $data ?? [], null);
        $this->setIfExists('federal_withholding_additional_type', $data ?? [], null);
        $this->setIfExists('state_is_exempt', $data ?? [], null);
        $this->setIfExists('state_withholding_additional', $data ?? [], null);
        $this->setIfExists('state_withholding_additional_type', $data ?? [], null);
        $this->setIfExists('use_federal_custom_override', $data ?? [], null);
        $this->setIfExists('federal_override_amount', $data ?? [], null);
        $this->setIfExists('federal_override_amount_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return int|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int|null $client_id Client ID
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets pay_cycle_id
     *
     * @return int|null
     */
    public function getPayCycleId()
    {
        return $this->container['pay_cycle_id'];
    }

    /**
     * Sets pay_cycle_id
     *
     * @param int|null $pay_cycle_id Pay Cycle ID
     *
     * @return self
     */
    public function setPayCycleId($pay_cycle_id)
    {
        if (is_null($pay_cycle_id)) {
            throw new \InvalidArgumentException('non-nullable pay_cycle_id cannot be null');
        }
        $this->container['pay_cycle_id'] = $pay_cycle_id;

        return $this;
    }

    /**
     * Gets payroll_pay_cycle_id
     *
     * @return int|null
     */
    public function getPayrollPayCycleId()
    {
        return $this->container['payroll_pay_cycle_id'];
    }

    /**
     * Sets payroll_pay_cycle_id
     *
     * @param int|null $payroll_pay_cycle_id Payroll Pay Cycle ID
     *
     * @return self
     */
    public function setPayrollPayCycleId($payroll_pay_cycle_id)
    {
        if (is_null($payroll_pay_cycle_id)) {
            throw new \InvalidArgumentException('non-nullable payroll_pay_cycle_id cannot be null');
        }
        $this->container['payroll_pay_cycle_id'] = $payroll_pay_cycle_id;

        return $this;
    }

    /**
     * Gets core_employee_id
     *
     * @return int|null
     */
    public function getCoreEmployeeId()
    {
        return $this->container['core_employee_id'];
    }

    /**
     * Sets core_employee_id
     *
     * @param int|null $core_employee_id Core Employee ID
     *
     * @return self
     */
    public function setCoreEmployeeId($core_employee_id)
    {
        if (is_null($core_employee_id)) {
            throw new \InvalidArgumentException('non-nullable core_employee_id cannot be null');
        }
        $this->container['core_employee_id'] = $core_employee_id;

        return $this;
    }

    /**
     * Gets direct_deposit_disable
     *
     * @return bool|null
     */
    public function getDirectDepositDisable()
    {
        return $this->container['direct_deposit_disable'];
    }

    /**
     * Sets direct_deposit_disable
     *
     * @param bool|null $direct_deposit_disable Direct Deposit Disable
     *
     * @return self
     */
    public function setDirectDepositDisable($direct_deposit_disable)
    {
        if (is_null($direct_deposit_disable)) {
            array_push($this->openAPINullablesSetToNull, 'direct_deposit_disable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('direct_deposit_disable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['direct_deposit_disable'] = $direct_deposit_disable;

        return $this;
    }

    /**
     * Gets deduction_disable
     *
     * @return bool|null
     */
    public function getDeductionDisable()
    {
        return $this->container['deduction_disable'];
    }

    /**
     * Sets deduction_disable
     *
     * @param bool|null $deduction_disable Deduction Disable
     *
     * @return self
     */
    public function setDeductionDisable($deduction_disable)
    {
        if (is_null($deduction_disable)) {
            array_push($this->openAPINullablesSetToNull, 'deduction_disable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('deduction_disable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['deduction_disable'] = $deduction_disable;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets pay_period_id
     *
     * @return int|null
     */
    public function getPayPeriodId()
    {
        return $this->container['pay_period_id'];
    }

    /**
     * Sets pay_period_id
     *
     * @param int|null $pay_period_id Pay Period ID
     *
     * @return self
     */
    public function setPayPeriodId($pay_period_id)
    {
        if (is_null($pay_period_id)) {
            array_push($this->openAPINullablesSetToNull, 'pay_period_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_period_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_period_id'] = $pay_period_id;

        return $this;
    }

    /**
     * Gets federal_is_exempt
     *
     * @return bool|null
     */
    public function getFederalIsExempt()
    {
        return $this->container['federal_is_exempt'];
    }

    /**
     * Sets federal_is_exempt
     *
     * @param bool|null $federal_is_exempt Federal Is Exempt
     *
     * @return self
     */
    public function setFederalIsExempt($federal_is_exempt)
    {
        if (is_null($federal_is_exempt)) {
            array_push($this->openAPINullablesSetToNull, 'federal_is_exempt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('federal_is_exempt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['federal_is_exempt'] = $federal_is_exempt;

        return $this;
    }

    /**
     * Gets federal_withholding_additional
     *
     * @return float|null
     */
    public function getFederalWithholdingAdditional()
    {
        return $this->container['federal_withholding_additional'];
    }

    /**
     * Sets federal_withholding_additional
     *
     * @param float|null $federal_withholding_additional Federal Withholding Additional
     *
     * @return self
     */
    public function setFederalWithholdingAdditional($federal_withholding_additional)
    {
        if (is_null($federal_withholding_additional)) {
            array_push($this->openAPINullablesSetToNull, 'federal_withholding_additional');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('federal_withholding_additional', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['federal_withholding_additional'] = $federal_withholding_additional;

        return $this;
    }

    /**
     * Gets federal_withholding_additional_type
     *
     * @return string|null
     */
    public function getFederalWithholdingAdditionalType()
    {
        return $this->container['federal_withholding_additional_type'];
    }

    /**
     * Sets federal_withholding_additional_type
     *
     * @param string|null $federal_withholding_additional_type Federal Withholding Additional Type
     *
     * @return self
     */
    public function setFederalWithholdingAdditionalType($federal_withholding_additional_type)
    {
        if (is_null($federal_withholding_additional_type)) {
            array_push($this->openAPINullablesSetToNull, 'federal_withholding_additional_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('federal_withholding_additional_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['federal_withholding_additional_type'] = $federal_withholding_additional_type;

        return $this;
    }

    /**
     * Gets state_is_exempt
     *
     * @return bool|null
     */
    public function getStateIsExempt()
    {
        return $this->container['state_is_exempt'];
    }

    /**
     * Sets state_is_exempt
     *
     * @param bool|null $state_is_exempt State Is Exempt
     *
     * @return self
     */
    public function setStateIsExempt($state_is_exempt)
    {
        if (is_null($state_is_exempt)) {
            array_push($this->openAPINullablesSetToNull, 'state_is_exempt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_is_exempt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_is_exempt'] = $state_is_exempt;

        return $this;
    }

    /**
     * Gets state_withholding_additional
     *
     * @return float|null
     */
    public function getStateWithholdingAdditional()
    {
        return $this->container['state_withholding_additional'];
    }

    /**
     * Sets state_withholding_additional
     *
     * @param float|null $state_withholding_additional State Withholding Additional
     *
     * @return self
     */
    public function setStateWithholdingAdditional($state_withholding_additional)
    {
        if (is_null($state_withholding_additional)) {
            array_push($this->openAPINullablesSetToNull, 'state_withholding_additional');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_withholding_additional', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_withholding_additional'] = $state_withholding_additional;

        return $this;
    }

    /**
     * Gets state_withholding_additional_type
     *
     * @return string|null
     */
    public function getStateWithholdingAdditionalType()
    {
        return $this->container['state_withholding_additional_type'];
    }

    /**
     * Sets state_withholding_additional_type
     *
     * @param string|null $state_withholding_additional_type State Withholding Additional Type
     *
     * @return self
     */
    public function setStateWithholdingAdditionalType($state_withholding_additional_type)
    {
        if (is_null($state_withholding_additional_type)) {
            array_push($this->openAPINullablesSetToNull, 'state_withholding_additional_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state_withholding_additional_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['state_withholding_additional_type'] = $state_withholding_additional_type;

        return $this;
    }

    /**
     * Gets use_federal_custom_override
     *
     * @return bool|null
     */
    public function getUseFederalCustomOverride()
    {
        return $this->container['use_federal_custom_override'];
    }

    /**
     * Sets use_federal_custom_override
     *
     * @param bool|null $use_federal_custom_override Use Federal Custom Override
     *
     * @return self
     */
    public function setUseFederalCustomOverride($use_federal_custom_override)
    {
        if (is_null($use_federal_custom_override)) {
            array_push($this->openAPINullablesSetToNull, 'use_federal_custom_override');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('use_federal_custom_override', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['use_federal_custom_override'] = $use_federal_custom_override;

        return $this;
    }

    /**
     * Gets federal_override_amount
     *
     * @return float|null
     */
    public function getFederalOverrideAmount()
    {
        return $this->container['federal_override_amount'];
    }

    /**
     * Sets federal_override_amount
     *
     * @param float|null $federal_override_amount Federal Override Amount
     *
     * @return self
     */
    public function setFederalOverrideAmount($federal_override_amount)
    {
        if (is_null($federal_override_amount)) {
            array_push($this->openAPINullablesSetToNull, 'federal_override_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('federal_override_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['federal_override_amount'] = $federal_override_amount;

        return $this;
    }

    /**
     * Gets federal_override_amount_type
     *
     * @return string|null
     */
    public function getFederalOverrideAmountType()
    {
        return $this->container['federal_override_amount_type'];
    }

    /**
     * Sets federal_override_amount_type
     *
     * @param string|null $federal_override_amount_type Federal Override Amount Type
     *
     * @return self
     */
    public function setFederalOverrideAmountType($federal_override_amount_type)
    {
        if (is_null($federal_override_amount_type)) {
            array_push($this->openAPINullablesSetToNull, 'federal_override_amount_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('federal_override_amount_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['federal_override_amount_type'] = $federal_override_amount_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


