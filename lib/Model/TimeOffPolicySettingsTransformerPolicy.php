<?php
/**
 * TimeOffPolicySettingsTransformerPolicy
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * TimeOffPolicySettingsTransformerPolicy Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TimeOffPolicySettingsTransformerPolicy implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TimeOffPolicySettingsTransformer_policy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'time_off_type_id' => 'string',
        'type' => 'string',
        'created_by_user_id' => 'string',
        'created_ymd' => 'string',
        'updated_by_user_id' => 'string',
        'updated_ymd' => 'string',
        'field_id' => 'string',
        'modifier' => 'string',
        'rate_transitions' => 'string',
        'first_accrual' => 'string',
        'is_grandfathered_policy' => 'bool',
        'time_off_type_unit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'time_off_type_id' => null,
        'type' => null,
        'created_by_user_id' => null,
        'created_ymd' => null,
        'updated_by_user_id' => null,
        'updated_ymd' => null,
        'field_id' => null,
        'modifier' => null,
        'rate_transitions' => null,
        'first_accrual' => null,
        'is_grandfathered_policy' => null,
        'time_off_type_unit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'time_off_type_id' => false,
        'type' => false,
        'created_by_user_id' => false,
        'created_ymd' => false,
        'updated_by_user_id' => false,
        'updated_ymd' => false,
        'field_id' => false,
        'modifier' => false,
        'rate_transitions' => false,
        'first_accrual' => false,
        'is_grandfathered_policy' => false,
        'time_off_type_unit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'time_off_type_id' => 'timeOffTypeId',
        'type' => 'type',
        'created_by_user_id' => 'createdByUserId',
        'created_ymd' => 'createdYmd',
        'updated_by_user_id' => 'updatedByUserId',
        'updated_ymd' => 'updatedYmd',
        'field_id' => 'fieldId',
        'modifier' => 'modifier',
        'rate_transitions' => 'rateTransitions',
        'first_accrual' => 'firstAccrual',
        'is_grandfathered_policy' => 'isGrandfatheredPolicy',
        'time_off_type_unit' => 'timeOffTypeUnit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'time_off_type_id' => 'setTimeOffTypeId',
        'type' => 'setType',
        'created_by_user_id' => 'setCreatedByUserId',
        'created_ymd' => 'setCreatedYmd',
        'updated_by_user_id' => 'setUpdatedByUserId',
        'updated_ymd' => 'setUpdatedYmd',
        'field_id' => 'setFieldId',
        'modifier' => 'setModifier',
        'rate_transitions' => 'setRateTransitions',
        'first_accrual' => 'setFirstAccrual',
        'is_grandfathered_policy' => 'setIsGrandfatheredPolicy',
        'time_off_type_unit' => 'setTimeOffTypeUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'time_off_type_id' => 'getTimeOffTypeId',
        'type' => 'getType',
        'created_by_user_id' => 'getCreatedByUserId',
        'created_ymd' => 'getCreatedYmd',
        'updated_by_user_id' => 'getUpdatedByUserId',
        'updated_ymd' => 'getUpdatedYmd',
        'field_id' => 'getFieldId',
        'modifier' => 'getModifier',
        'rate_transitions' => 'getRateTransitions',
        'first_accrual' => 'getFirstAccrual',
        'is_grandfathered_policy' => 'getIsGrandfatheredPolicy',
        'time_off_type_unit' => 'getTimeOffTypeUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('time_off_type_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('created_by_user_id', $data ?? [], null);
        $this->setIfExists('created_ymd', $data ?? [], null);
        $this->setIfExists('updated_by_user_id', $data ?? [], null);
        $this->setIfExists('updated_ymd', $data ?? [], null);
        $this->setIfExists('field_id', $data ?? [], null);
        $this->setIfExists('modifier', $data ?? [], null);
        $this->setIfExists('rate_transitions', $data ?? [], null);
        $this->setIfExists('first_accrual', $data ?? [], null);
        $this->setIfExists('is_grandfathered_policy', $data ?? [], null);
        $this->setIfExists('time_off_type_unit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets time_off_type_id
     *
     * @return string|null
     */
    public function getTimeOffTypeId()
    {
        return $this->container['time_off_type_id'];
    }

    /**
     * Sets time_off_type_id
     *
     * @param string|null $time_off_type_id time_off_type_id
     *
     * @return self
     */
    public function setTimeOffTypeId($time_off_type_id)
    {
        if (is_null($time_off_type_id)) {
            throw new \InvalidArgumentException('non-nullable time_off_type_id cannot be null');
        }
        $this->container['time_off_type_id'] = $time_off_type_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets created_by_user_id
     *
     * @return string|null
     */
    public function getCreatedByUserId()
    {
        return $this->container['created_by_user_id'];
    }

    /**
     * Sets created_by_user_id
     *
     * @param string|null $created_by_user_id created_by_user_id
     *
     * @return self
     */
    public function setCreatedByUserId($created_by_user_id)
    {
        if (is_null($created_by_user_id)) {
            throw new \InvalidArgumentException('non-nullable created_by_user_id cannot be null');
        }
        $this->container['created_by_user_id'] = $created_by_user_id;

        return $this;
    }

    /**
     * Gets created_ymd
     *
     * @return string|null
     */
    public function getCreatedYmd()
    {
        return $this->container['created_ymd'];
    }

    /**
     * Sets created_ymd
     *
     * @param string|null $created_ymd created_ymd
     *
     * @return self
     */
    public function setCreatedYmd($created_ymd)
    {
        if (is_null($created_ymd)) {
            throw new \InvalidArgumentException('non-nullable created_ymd cannot be null');
        }
        $this->container['created_ymd'] = $created_ymd;

        return $this;
    }

    /**
     * Gets updated_by_user_id
     *
     * @return string|null
     */
    public function getUpdatedByUserId()
    {
        return $this->container['updated_by_user_id'];
    }

    /**
     * Sets updated_by_user_id
     *
     * @param string|null $updated_by_user_id updated_by_user_id
     *
     * @return self
     */
    public function setUpdatedByUserId($updated_by_user_id)
    {
        if (is_null($updated_by_user_id)) {
            throw new \InvalidArgumentException('non-nullable updated_by_user_id cannot be null');
        }
        $this->container['updated_by_user_id'] = $updated_by_user_id;

        return $this;
    }

    /**
     * Gets updated_ymd
     *
     * @return string|null
     */
    public function getUpdatedYmd()
    {
        return $this->container['updated_ymd'];
    }

    /**
     * Sets updated_ymd
     *
     * @param string|null $updated_ymd updated_ymd
     *
     * @return self
     */
    public function setUpdatedYmd($updated_ymd)
    {
        if (is_null($updated_ymd)) {
            throw new \InvalidArgumentException('non-nullable updated_ymd cannot be null');
        }
        $this->container['updated_ymd'] = $updated_ymd;

        return $this;
    }

    /**
     * Gets field_id
     *
     * @return string|null
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param string|null $field_id field_id
     *
     * @return self
     */
    public function setFieldId($field_id)
    {
        if (is_null($field_id)) {
            throw new \InvalidArgumentException('non-nullable field_id cannot be null');
        }
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets modifier
     *
     * @return string|null
     */
    public function getModifier()
    {
        return $this->container['modifier'];
    }

    /**
     * Sets modifier
     *
     * @param string|null $modifier modifier
     *
     * @return self
     */
    public function setModifier($modifier)
    {
        if (is_null($modifier)) {
            throw new \InvalidArgumentException('non-nullable modifier cannot be null');
        }
        $this->container['modifier'] = $modifier;

        return $this;
    }

    /**
     * Gets rate_transitions
     *
     * @return string|null
     */
    public function getRateTransitions()
    {
        return $this->container['rate_transitions'];
    }

    /**
     * Sets rate_transitions
     *
     * @param string|null $rate_transitions rate_transitions
     *
     * @return self
     */
    public function setRateTransitions($rate_transitions)
    {
        if (is_null($rate_transitions)) {
            throw new \InvalidArgumentException('non-nullable rate_transitions cannot be null');
        }
        $this->container['rate_transitions'] = $rate_transitions;

        return $this;
    }

    /**
     * Gets first_accrual
     *
     * @return string|null
     */
    public function getFirstAccrual()
    {
        return $this->container['first_accrual'];
    }

    /**
     * Sets first_accrual
     *
     * @param string|null $first_accrual first_accrual
     *
     * @return self
     */
    public function setFirstAccrual($first_accrual)
    {
        if (is_null($first_accrual)) {
            throw new \InvalidArgumentException('non-nullable first_accrual cannot be null');
        }
        $this->container['first_accrual'] = $first_accrual;

        return $this;
    }

    /**
     * Gets is_grandfathered_policy
     *
     * @return bool|null
     */
    public function getIsGrandfatheredPolicy()
    {
        return $this->container['is_grandfathered_policy'];
    }

    /**
     * Sets is_grandfathered_policy
     *
     * @param bool|null $is_grandfathered_policy is_grandfathered_policy
     *
     * @return self
     */
    public function setIsGrandfatheredPolicy($is_grandfathered_policy)
    {
        if (is_null($is_grandfathered_policy)) {
            throw new \InvalidArgumentException('non-nullable is_grandfathered_policy cannot be null');
        }
        $this->container['is_grandfathered_policy'] = $is_grandfathered_policy;

        return $this;
    }

    /**
     * Gets time_off_type_unit
     *
     * @return string|null
     */
    public function getTimeOffTypeUnit()
    {
        return $this->container['time_off_type_unit'];
    }

    /**
     * Sets time_off_type_unit
     *
     * @param string|null $time_off_type_unit time_off_type_unit
     *
     * @return self
     */
    public function setTimeOffTypeUnit($time_off_type_unit)
    {
        if (is_null($time_off_type_unit)) {
            throw new \InvalidArgumentException('non-nullable time_off_type_unit cannot be null');
        }
        $this->container['time_off_type_unit'] = $time_off_type_unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


