<?php
/**
 * BasicTimesheetApiTransformer
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * BasicTimesheetApiTransformer Class Doc Comment
 *
 * @category Class
 * @description Basic timesheet API transformer.
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BasicTimesheetApiTransformer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BasicTimesheetApiTransformer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'employee_id' => 'int',
        'approval' => '\MySdk\Model\BasicTimesheetApiTransformerApproval',
        'can_edit' => 'bool',
        'type' => 'string',
        'last_changed' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'total_holiday_hours' => 'float',
        'total_overtime_hours' => 'float',
        'overtime_summary' => '\MySdk\Model\BasicTimesheetApiTransformerOvertimeSummaryInner[]',
        'hour_summary' => '\MySdk\Model\BasicTimesheetApiTransformerHourSummaryInner[]',
        'shift_differentials' => '\MySdk\Model\BasicTimesheetApiTransformerShiftDifferentialsInner[]',
        'total_time_off_hours' => 'float',
        'total_hours' => 'float',
        'total_hours_worked' => 'float',
        'holiday_pay_type' => 'string',
        'last_clock_entry' => '\MySdk\Model\ClockEntryApiTransformer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'employee_id' => null,
        'approval' => null,
        'can_edit' => null,
        'type' => null,
        'last_changed' => null,
        'start_date' => 'date',
        'end_date' => 'date',
        'total_holiday_hours' => 'float',
        'total_overtime_hours' => 'float',
        'overtime_summary' => null,
        'hour_summary' => null,
        'shift_differentials' => null,
        'total_time_off_hours' => 'float',
        'total_hours' => 'float',
        'total_hours_worked' => 'float',
        'holiday_pay_type' => null,
        'last_clock_entry' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'employee_id' => false,
        'approval' => false,
        'can_edit' => false,
        'type' => false,
        'last_changed' => false,
        'start_date' => false,
        'end_date' => false,
        'total_holiday_hours' => false,
        'total_overtime_hours' => false,
        'overtime_summary' => false,
        'hour_summary' => false,
        'shift_differentials' => false,
        'total_time_off_hours' => false,
        'total_hours' => false,
        'total_hours_worked' => false,
        'holiday_pay_type' => false,
        'last_clock_entry' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'employee_id' => 'employeeId',
        'approval' => 'approval',
        'can_edit' => 'canEdit',
        'type' => 'type',
        'last_changed' => 'lastChanged',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'total_holiday_hours' => 'totalHolidayHours',
        'total_overtime_hours' => 'totalOvertimeHours',
        'overtime_summary' => 'overtimeSummary',
        'hour_summary' => 'hourSummary',
        'shift_differentials' => 'shiftDifferentials',
        'total_time_off_hours' => 'totalTimeOffHours',
        'total_hours' => 'totalHours',
        'total_hours_worked' => 'totalHoursWorked',
        'holiday_pay_type' => 'holidayPayType',
        'last_clock_entry' => 'lastClockEntry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'employee_id' => 'setEmployeeId',
        'approval' => 'setApproval',
        'can_edit' => 'setCanEdit',
        'type' => 'setType',
        'last_changed' => 'setLastChanged',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'total_holiday_hours' => 'setTotalHolidayHours',
        'total_overtime_hours' => 'setTotalOvertimeHours',
        'overtime_summary' => 'setOvertimeSummary',
        'hour_summary' => 'setHourSummary',
        'shift_differentials' => 'setShiftDifferentials',
        'total_time_off_hours' => 'setTotalTimeOffHours',
        'total_hours' => 'setTotalHours',
        'total_hours_worked' => 'setTotalHoursWorked',
        'holiday_pay_type' => 'setHolidayPayType',
        'last_clock_entry' => 'setLastClockEntry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'employee_id' => 'getEmployeeId',
        'approval' => 'getApproval',
        'can_edit' => 'getCanEdit',
        'type' => 'getType',
        'last_changed' => 'getLastChanged',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'total_holiday_hours' => 'getTotalHolidayHours',
        'total_overtime_hours' => 'getTotalOvertimeHours',
        'overtime_summary' => 'getOvertimeSummary',
        'hour_summary' => 'getHourSummary',
        'shift_differentials' => 'getShiftDifferentials',
        'total_time_off_hours' => 'getTotalTimeOffHours',
        'total_hours' => 'getTotalHours',
        'total_hours_worked' => 'getTotalHoursWorked',
        'holiday_pay_type' => 'getHolidayPayType',
        'last_clock_entry' => 'getLastClockEntry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('approval', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('last_changed', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('end_date', $data ?? [], null);
        $this->setIfExists('total_holiday_hours', $data ?? [], null);
        $this->setIfExists('total_overtime_hours', $data ?? [], null);
        $this->setIfExists('overtime_summary', $data ?? [], null);
        $this->setIfExists('hour_summary', $data ?? [], null);
        $this->setIfExists('shift_differentials', $data ?? [], null);
        $this->setIfExists('total_time_off_hours', $data ?? [], null);
        $this->setIfExists('total_hours', $data ?? [], null);
        $this->setIfExists('total_hours_worked', $data ?? [], null);
        $this->setIfExists('holiday_pay_type', $data ?? [], null);
        $this->setIfExists('last_clock_entry', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Timesheet ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Employee ID
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets approval
     *
     * @return \MySdk\Model\BasicTimesheetApiTransformerApproval|null
     */
    public function getApproval()
    {
        return $this->container['approval'];
    }

    /**
     * Sets approval
     *
     * @param \MySdk\Model\BasicTimesheetApiTransformerApproval|null $approval approval
     *
     * @return self
     */
    public function setApproval($approval)
    {
        if (is_null($approval)) {
            throw new \InvalidArgumentException('non-nullable approval cannot be null');
        }
        $this->container['approval'] = $approval;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit Whether the timesheet can be edited
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Timesheet type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets last_changed
     *
     * @return int|null
     */
    public function getLastChanged()
    {
        return $this->container['last_changed'];
    }

    /**
     * Sets last_changed
     *
     * @param int|null $last_changed Timestamp when hours were last changed
     *
     * @return self
     */
    public function setLastChanged($last_changed)
    {
        if (is_null($last_changed)) {
            throw new \InvalidArgumentException('non-nullable last_changed cannot be null');
        }
        $this->container['last_changed'] = $last_changed;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Period start date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date Period end date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        if (is_null($end_date)) {
            throw new \InvalidArgumentException('non-nullable end_date cannot be null');
        }
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets total_holiday_hours
     *
     * @return float|null
     */
    public function getTotalHolidayHours()
    {
        return $this->container['total_holiday_hours'];
    }

    /**
     * Sets total_holiday_hours
     *
     * @param float|null $total_holiday_hours Total holiday hours
     *
     * @return self
     */
    public function setTotalHolidayHours($total_holiday_hours)
    {
        if (is_null($total_holiday_hours)) {
            throw new \InvalidArgumentException('non-nullable total_holiday_hours cannot be null');
        }
        $this->container['total_holiday_hours'] = $total_holiday_hours;

        return $this;
    }

    /**
     * Gets total_overtime_hours
     *
     * @return float|null
     */
    public function getTotalOvertimeHours()
    {
        return $this->container['total_overtime_hours'];
    }

    /**
     * Sets total_overtime_hours
     *
     * @param float|null $total_overtime_hours Total overtime hours
     *
     * @return self
     */
    public function setTotalOvertimeHours($total_overtime_hours)
    {
        if (is_null($total_overtime_hours)) {
            throw new \InvalidArgumentException('non-nullable total_overtime_hours cannot be null');
        }
        $this->container['total_overtime_hours'] = $total_overtime_hours;

        return $this;
    }

    /**
     * Gets overtime_summary
     *
     * @return \MySdk\Model\BasicTimesheetApiTransformerOvertimeSummaryInner[]|null
     */
    public function getOvertimeSummary()
    {
        return $this->container['overtime_summary'];
    }

    /**
     * Sets overtime_summary
     *
     * @param \MySdk\Model\BasicTimesheetApiTransformerOvertimeSummaryInner[]|null $overtime_summary Overtime summary
     *
     * @return self
     */
    public function setOvertimeSummary($overtime_summary)
    {
        if (is_null($overtime_summary)) {
            throw new \InvalidArgumentException('non-nullable overtime_summary cannot be null');
        }
        $this->container['overtime_summary'] = $overtime_summary;

        return $this;
    }

    /**
     * Gets hour_summary
     *
     * @return \MySdk\Model\BasicTimesheetApiTransformerHourSummaryInner[]|null
     */
    public function getHourSummary()
    {
        return $this->container['hour_summary'];
    }

    /**
     * Sets hour_summary
     *
     * @param \MySdk\Model\BasicTimesheetApiTransformerHourSummaryInner[]|null $hour_summary Hour summary
     *
     * @return self
     */
    public function setHourSummary($hour_summary)
    {
        if (is_null($hour_summary)) {
            throw new \InvalidArgumentException('non-nullable hour_summary cannot be null');
        }
        $this->container['hour_summary'] = $hour_summary;

        return $this;
    }

    /**
     * Gets shift_differentials
     *
     * @return \MySdk\Model\BasicTimesheetApiTransformerShiftDifferentialsInner[]|null
     */
    public function getShiftDifferentials()
    {
        return $this->container['shift_differentials'];
    }

    /**
     * Sets shift_differentials
     *
     * @param \MySdk\Model\BasicTimesheetApiTransformerShiftDifferentialsInner[]|null $shift_differentials Shift differentials
     *
     * @return self
     */
    public function setShiftDifferentials($shift_differentials)
    {
        if (is_null($shift_differentials)) {
            throw new \InvalidArgumentException('non-nullable shift_differentials cannot be null');
        }
        $this->container['shift_differentials'] = $shift_differentials;

        return $this;
    }

    /**
     * Gets total_time_off_hours
     *
     * @return float|null
     */
    public function getTotalTimeOffHours()
    {
        return $this->container['total_time_off_hours'];
    }

    /**
     * Sets total_time_off_hours
     *
     * @param float|null $total_time_off_hours Total time off hours
     *
     * @return self
     */
    public function setTotalTimeOffHours($total_time_off_hours)
    {
        if (is_null($total_time_off_hours)) {
            throw new \InvalidArgumentException('non-nullable total_time_off_hours cannot be null');
        }
        $this->container['total_time_off_hours'] = $total_time_off_hours;

        return $this;
    }

    /**
     * Gets total_hours
     *
     * @return float|null
     */
    public function getTotalHours()
    {
        return $this->container['total_hours'];
    }

    /**
     * Sets total_hours
     *
     * @param float|null $total_hours Total hours
     *
     * @return self
     */
    public function setTotalHours($total_hours)
    {
        if (is_null($total_hours)) {
            throw new \InvalidArgumentException('non-nullable total_hours cannot be null');
        }
        $this->container['total_hours'] = $total_hours;

        return $this;
    }

    /**
     * Gets total_hours_worked
     *
     * @return float|null
     */
    public function getTotalHoursWorked()
    {
        return $this->container['total_hours_worked'];
    }

    /**
     * Sets total_hours_worked
     *
     * @param float|null $total_hours_worked Total hours worked
     *
     * @return self
     */
    public function setTotalHoursWorked($total_hours_worked)
    {
        if (is_null($total_hours_worked)) {
            throw new \InvalidArgumentException('non-nullable total_hours_worked cannot be null');
        }
        $this->container['total_hours_worked'] = $total_hours_worked;

        return $this;
    }

    /**
     * Gets holiday_pay_type
     *
     * @return string|null
     */
    public function getHolidayPayType()
    {
        return $this->container['holiday_pay_type'];
    }

    /**
     * Sets holiday_pay_type
     *
     * @param string|null $holiday_pay_type Holiday pay type
     *
     * @return self
     */
    public function setHolidayPayType($holiday_pay_type)
    {
        if (is_null($holiday_pay_type)) {
            throw new \InvalidArgumentException('non-nullable holiday_pay_type cannot be null');
        }
        $this->container['holiday_pay_type'] = $holiday_pay_type;

        return $this;
    }

    /**
     * Gets last_clock_entry
     *
     * @return \MySdk\Model\ClockEntryApiTransformer|null
     */
    public function getLastClockEntry()
    {
        return $this->container['last_clock_entry'];
    }

    /**
     * Sets last_clock_entry
     *
     * @param \MySdk\Model\ClockEntryApiTransformer|null $last_clock_entry last_clock_entry
     *
     * @return self
     */
    public function setLastClockEntry($last_clock_entry)
    {
        if (is_null($last_clock_entry)) {
            array_push($this->openAPINullablesSetToNull, 'last_clock_entry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_clock_entry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_clock_entry'] = $last_clock_entry;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


