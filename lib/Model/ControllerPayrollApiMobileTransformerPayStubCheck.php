<?php
/**
 * ControllerPayrollApiMobileTransformerPayStubCheck
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * ControllerPayrollApiMobileTransformerPayStubCheck Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ControllerPayrollApiMobileTransformerPayStubCheck implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Controller-Payroll-Api-Mobile-Transformer-PayStubCheck';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'gross_pay' => 'float',
        'net_pay' => 'float',
        'ytd_gross_pay' => 'float',
        'ytd_net_pay' => 'float',
        'currency_type' => 'string',
        'note' => 'string',
        'fun_fact' => '\MySdk\Model\ControllerPayrollApiMobileTransformerPayStubCheckFunFact',
        'payments' => 'object[]',
        'taxable_wages' => 'object[]',
        'non_taxable_wages' => 'object[]',
        'taxes' => 'object[]',
        'tax_settings' => 'object',
        'employee_deductions' => 'object[]',
        'employer_deductions' => 'object[]',
        'time_off' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'gross_pay' => 'float',
        'net_pay' => 'float',
        'ytd_gross_pay' => 'float',
        'ytd_net_pay' => 'float',
        'currency_type' => null,
        'note' => null,
        'fun_fact' => null,
        'payments' => null,
        'taxable_wages' => null,
        'non_taxable_wages' => null,
        'taxes' => null,
        'tax_settings' => null,
        'employee_deductions' => null,
        'employer_deductions' => null,
        'time_off' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'gross_pay' => false,
        'net_pay' => false,
        'ytd_gross_pay' => false,
        'ytd_net_pay' => false,
        'currency_type' => false,
        'note' => false,
        'fun_fact' => false,
        'payments' => false,
        'taxable_wages' => false,
        'non_taxable_wages' => false,
        'taxes' => false,
        'tax_settings' => false,
        'employee_deductions' => false,
        'employer_deductions' => false,
        'time_off' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'gross_pay' => 'grossPay',
        'net_pay' => 'netPay',
        'ytd_gross_pay' => 'ytdGrossPay',
        'ytd_net_pay' => 'ytdNetPay',
        'currency_type' => 'currencyType',
        'note' => 'note',
        'fun_fact' => 'funFact',
        'payments' => 'payments',
        'taxable_wages' => 'taxableWages',
        'non_taxable_wages' => 'nonTaxableWages',
        'taxes' => 'taxes',
        'tax_settings' => 'taxSettings',
        'employee_deductions' => 'employeeDeductions',
        'employer_deductions' => 'employerDeductions',
        'time_off' => 'timeOff'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'gross_pay' => 'setGrossPay',
        'net_pay' => 'setNetPay',
        'ytd_gross_pay' => 'setYtdGrossPay',
        'ytd_net_pay' => 'setYtdNetPay',
        'currency_type' => 'setCurrencyType',
        'note' => 'setNote',
        'fun_fact' => 'setFunFact',
        'payments' => 'setPayments',
        'taxable_wages' => 'setTaxableWages',
        'non_taxable_wages' => 'setNonTaxableWages',
        'taxes' => 'setTaxes',
        'tax_settings' => 'setTaxSettings',
        'employee_deductions' => 'setEmployeeDeductions',
        'employer_deductions' => 'setEmployerDeductions',
        'time_off' => 'setTimeOff'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'gross_pay' => 'getGrossPay',
        'net_pay' => 'getNetPay',
        'ytd_gross_pay' => 'getYtdGrossPay',
        'ytd_net_pay' => 'getYtdNetPay',
        'currency_type' => 'getCurrencyType',
        'note' => 'getNote',
        'fun_fact' => 'getFunFact',
        'payments' => 'getPayments',
        'taxable_wages' => 'getTaxableWages',
        'non_taxable_wages' => 'getNonTaxableWages',
        'taxes' => 'getTaxes',
        'tax_settings' => 'getTaxSettings',
        'employee_deductions' => 'getEmployeeDeductions',
        'employer_deductions' => 'getEmployerDeductions',
        'time_off' => 'getTimeOff'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('gross_pay', $data ?? [], null);
        $this->setIfExists('net_pay', $data ?? [], null);
        $this->setIfExists('ytd_gross_pay', $data ?? [], null);
        $this->setIfExists('ytd_net_pay', $data ?? [], null);
        $this->setIfExists('currency_type', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('fun_fact', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('taxable_wages', $data ?? [], null);
        $this->setIfExists('non_taxable_wages', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('tax_settings', $data ?? [], null);
        $this->setIfExists('employee_deductions', $data ?? [], null);
        $this->setIfExists('employer_deductions', $data ?? [], null);
        $this->setIfExists('time_off', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets gross_pay
     *
     * @return float|null
     */
    public function getGrossPay()
    {
        return $this->container['gross_pay'];
    }

    /**
     * Sets gross_pay
     *
     * @param float|null $gross_pay gross_pay
     *
     * @return self
     */
    public function setGrossPay($gross_pay)
    {
        if (is_null($gross_pay)) {
            throw new \InvalidArgumentException('non-nullable gross_pay cannot be null');
        }
        $this->container['gross_pay'] = $gross_pay;

        return $this;
    }

    /**
     * Gets net_pay
     *
     * @return float|null
     */
    public function getNetPay()
    {
        return $this->container['net_pay'];
    }

    /**
     * Sets net_pay
     *
     * @param float|null $net_pay net_pay
     *
     * @return self
     */
    public function setNetPay($net_pay)
    {
        if (is_null($net_pay)) {
            throw new \InvalidArgumentException('non-nullable net_pay cannot be null');
        }
        $this->container['net_pay'] = $net_pay;

        return $this;
    }

    /**
     * Gets ytd_gross_pay
     *
     * @return float|null
     */
    public function getYtdGrossPay()
    {
        return $this->container['ytd_gross_pay'];
    }

    /**
     * Sets ytd_gross_pay
     *
     * @param float|null $ytd_gross_pay ytd_gross_pay
     *
     * @return self
     */
    public function setYtdGrossPay($ytd_gross_pay)
    {
        if (is_null($ytd_gross_pay)) {
            throw new \InvalidArgumentException('non-nullable ytd_gross_pay cannot be null');
        }
        $this->container['ytd_gross_pay'] = $ytd_gross_pay;

        return $this;
    }

    /**
     * Gets ytd_net_pay
     *
     * @return float|null
     */
    public function getYtdNetPay()
    {
        return $this->container['ytd_net_pay'];
    }

    /**
     * Sets ytd_net_pay
     *
     * @param float|null $ytd_net_pay ytd_net_pay
     *
     * @return self
     */
    public function setYtdNetPay($ytd_net_pay)
    {
        if (is_null($ytd_net_pay)) {
            throw new \InvalidArgumentException('non-nullable ytd_net_pay cannot be null');
        }
        $this->container['ytd_net_pay'] = $ytd_net_pay;

        return $this;
    }

    /**
     * Gets currency_type
     *
     * @return string|null
     */
    public function getCurrencyType()
    {
        return $this->container['currency_type'];
    }

    /**
     * Sets currency_type
     *
     * @param string|null $currency_type currency_type
     *
     * @return self
     */
    public function setCurrencyType($currency_type)
    {
        if (is_null($currency_type)) {
            throw new \InvalidArgumentException('non-nullable currency_type cannot be null');
        }
        $this->container['currency_type'] = $currency_type;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets fun_fact
     *
     * @return \MySdk\Model\ControllerPayrollApiMobileTransformerPayStubCheckFunFact|null
     */
    public function getFunFact()
    {
        return $this->container['fun_fact'];
    }

    /**
     * Sets fun_fact
     *
     * @param \MySdk\Model\ControllerPayrollApiMobileTransformerPayStubCheckFunFact|null $fun_fact fun_fact
     *
     * @return self
     */
    public function setFunFact($fun_fact)
    {
        if (is_null($fun_fact)) {
            throw new \InvalidArgumentException('non-nullable fun_fact cannot be null');
        }
        $this->container['fun_fact'] = $fun_fact;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return object[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param object[]|null $payments payments
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets taxable_wages
     *
     * @return object[]|null
     */
    public function getTaxableWages()
    {
        return $this->container['taxable_wages'];
    }

    /**
     * Sets taxable_wages
     *
     * @param object[]|null $taxable_wages taxable_wages
     *
     * @return self
     */
    public function setTaxableWages($taxable_wages)
    {
        if (is_null($taxable_wages)) {
            throw new \InvalidArgumentException('non-nullable taxable_wages cannot be null');
        }
        $this->container['taxable_wages'] = $taxable_wages;

        return $this;
    }

    /**
     * Gets non_taxable_wages
     *
     * @return object[]|null
     */
    public function getNonTaxableWages()
    {
        return $this->container['non_taxable_wages'];
    }

    /**
     * Sets non_taxable_wages
     *
     * @param object[]|null $non_taxable_wages non_taxable_wages
     *
     * @return self
     */
    public function setNonTaxableWages($non_taxable_wages)
    {
        if (is_null($non_taxable_wages)) {
            throw new \InvalidArgumentException('non-nullable non_taxable_wages cannot be null');
        }
        $this->container['non_taxable_wages'] = $non_taxable_wages;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return object[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param object[]|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets tax_settings
     *
     * @return object|null
     */
    public function getTaxSettings()
    {
        return $this->container['tax_settings'];
    }

    /**
     * Sets tax_settings
     *
     * @param object|null $tax_settings tax_settings
     *
     * @return self
     */
    public function setTaxSettings($tax_settings)
    {
        if (is_null($tax_settings)) {
            throw new \InvalidArgumentException('non-nullable tax_settings cannot be null');
        }
        $this->container['tax_settings'] = $tax_settings;

        return $this;
    }

    /**
     * Gets employee_deductions
     *
     * @return object[]|null
     */
    public function getEmployeeDeductions()
    {
        return $this->container['employee_deductions'];
    }

    /**
     * Sets employee_deductions
     *
     * @param object[]|null $employee_deductions employee_deductions
     *
     * @return self
     */
    public function setEmployeeDeductions($employee_deductions)
    {
        if (is_null($employee_deductions)) {
            throw new \InvalidArgumentException('non-nullable employee_deductions cannot be null');
        }
        $this->container['employee_deductions'] = $employee_deductions;

        return $this;
    }

    /**
     * Gets employer_deductions
     *
     * @return object[]|null
     */
    public function getEmployerDeductions()
    {
        return $this->container['employer_deductions'];
    }

    /**
     * Sets employer_deductions
     *
     * @param object[]|null $employer_deductions employer_deductions
     *
     * @return self
     */
    public function setEmployerDeductions($employer_deductions)
    {
        if (is_null($employer_deductions)) {
            throw new \InvalidArgumentException('non-nullable employer_deductions cannot be null');
        }
        $this->container['employer_deductions'] = $employer_deductions;

        return $this;
    }

    /**
     * Gets time_off
     *
     * @return object[]|null
     */
    public function getTimeOff()
    {
        return $this->container['time_off'];
    }

    /**
     * Sets time_off
     *
     * @param object[]|null $time_off time_off
     *
     * @return self
     */
    public function setTimeOff($time_off)
    {
        if (is_null($time_off)) {
            throw new \InvalidArgumentException('non-nullable time_off cannot be null');
        }
        $this->container['time_off'] = $time_off;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


