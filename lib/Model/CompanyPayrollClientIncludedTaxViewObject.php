<?php
/**
 * CompanyPayrollClientIncludedTaxViewObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * CompanyPayrollClientIncludedTaxViewObject Class Doc Comment
 *
 * @category Class
 * @description Class CompanyPayrollClientIncludedTaxViewObject
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyPayrollClientIncludedTaxViewObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyPayrollClientIncludedTaxViewObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'client_tax_type_include_id' => 'int',
        'tax_type_name' => 'string',
        'employer_tax_id' => 'string',
        'frequency_of_payment' => 'string',
        'pay_frequency_id' => 'int',
        'payer' => 'string',
        'tax_rate' => 'float',
        'tax_start_date' => 'string',
        'tax_end_date' => 'string',
        'last_modified_by' => 'string',
        'last_modified_date' => 'string',
        'is_editable' => 'bool',
        'is_workers_comp' => 'bool',
        'payments_previously_made' => 'bool',
        'is_calculated' => 'bool',
        'client_tax_status' => 'string',
        'state' => 'string',
        'employer_percent' => 'int',
        'is_pfml' => 'bool',
        'employee_percent' => 'int',
        'tax_type_engine' => 'string',
        'tax_type_engine_info' => '\MySdk\Model\CompanyPayrollClientIncludedTaxViewObjectTaxTypeEngineInfo',
        'current_tax_setup_status' => '\MySdk\Model\CompanyPayrollClientIncludedTaxViewObjectCurrentTaxSetupStatus',
        'tax_type_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'client_tax_type_include_id' => null,
        'tax_type_name' => null,
        'employer_tax_id' => null,
        'frequency_of_payment' => null,
        'pay_frequency_id' => null,
        'payer' => null,
        'tax_rate' => 'float',
        'tax_start_date' => null,
        'tax_end_date' => null,
        'last_modified_by' => null,
        'last_modified_date' => null,
        'is_editable' => null,
        'is_workers_comp' => null,
        'payments_previously_made' => null,
        'is_calculated' => null,
        'client_tax_status' => null,
        'state' => null,
        'employer_percent' => null,
        'is_pfml' => null,
        'employee_percent' => null,
        'tax_type_engine' => null,
        'tax_type_engine_info' => null,
        'current_tax_setup_status' => null,
        'tax_type_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'client_tax_type_include_id' => false,
        'tax_type_name' => false,
        'employer_tax_id' => false,
        'frequency_of_payment' => false,
        'pay_frequency_id' => true,
        'payer' => false,
        'tax_rate' => true,
        'tax_start_date' => false,
        'tax_end_date' => true,
        'last_modified_by' => false,
        'last_modified_date' => false,
        'is_editable' => false,
        'is_workers_comp' => false,
        'payments_previously_made' => false,
        'is_calculated' => false,
        'client_tax_status' => false,
        'state' => false,
        'employer_percent' => false,
        'is_pfml' => false,
        'employee_percent' => false,
        'tax_type_engine' => false,
        'tax_type_engine_info' => true,
        'current_tax_setup_status' => false,
        'tax_type_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_tax_type_include_id' => 'clientTaxTypeIncludeId',
        'tax_type_name' => 'taxTypeName',
        'employer_tax_id' => 'employerTaxId',
        'frequency_of_payment' => 'frequencyOfPayment',
        'pay_frequency_id' => 'payFrequencyId',
        'payer' => 'payer',
        'tax_rate' => 'taxRate',
        'tax_start_date' => 'taxStartDate',
        'tax_end_date' => 'taxEndDate',
        'last_modified_by' => 'lastModifiedBy',
        'last_modified_date' => 'lastModifiedDate',
        'is_editable' => 'isEditable',
        'is_workers_comp' => 'isWorkersComp',
        'payments_previously_made' => 'paymentsPreviouslyMade',
        'is_calculated' => 'isCalculated',
        'client_tax_status' => 'clientTaxStatus',
        'state' => 'state',
        'employer_percent' => 'employerPercent',
        'is_pfml' => 'isPfml',
        'employee_percent' => 'employeePercent',
        'tax_type_engine' => 'taxTypeEngine',
        'tax_type_engine_info' => 'taxTypeEngineInfo',
        'current_tax_setup_status' => 'currentTaxSetupStatus',
        'tax_type_id' => 'taxTypeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_tax_type_include_id' => 'setClientTaxTypeIncludeId',
        'tax_type_name' => 'setTaxTypeName',
        'employer_tax_id' => 'setEmployerTaxId',
        'frequency_of_payment' => 'setFrequencyOfPayment',
        'pay_frequency_id' => 'setPayFrequencyId',
        'payer' => 'setPayer',
        'tax_rate' => 'setTaxRate',
        'tax_start_date' => 'setTaxStartDate',
        'tax_end_date' => 'setTaxEndDate',
        'last_modified_by' => 'setLastModifiedBy',
        'last_modified_date' => 'setLastModifiedDate',
        'is_editable' => 'setIsEditable',
        'is_workers_comp' => 'setIsWorkersComp',
        'payments_previously_made' => 'setPaymentsPreviouslyMade',
        'is_calculated' => 'setIsCalculated',
        'client_tax_status' => 'setClientTaxStatus',
        'state' => 'setState',
        'employer_percent' => 'setEmployerPercent',
        'is_pfml' => 'setIsPfml',
        'employee_percent' => 'setEmployeePercent',
        'tax_type_engine' => 'setTaxTypeEngine',
        'tax_type_engine_info' => 'setTaxTypeEngineInfo',
        'current_tax_setup_status' => 'setCurrentTaxSetupStatus',
        'tax_type_id' => 'setTaxTypeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_tax_type_include_id' => 'getClientTaxTypeIncludeId',
        'tax_type_name' => 'getTaxTypeName',
        'employer_tax_id' => 'getEmployerTaxId',
        'frequency_of_payment' => 'getFrequencyOfPayment',
        'pay_frequency_id' => 'getPayFrequencyId',
        'payer' => 'getPayer',
        'tax_rate' => 'getTaxRate',
        'tax_start_date' => 'getTaxStartDate',
        'tax_end_date' => 'getTaxEndDate',
        'last_modified_by' => 'getLastModifiedBy',
        'last_modified_date' => 'getLastModifiedDate',
        'is_editable' => 'getIsEditable',
        'is_workers_comp' => 'getIsWorkersComp',
        'payments_previously_made' => 'getPaymentsPreviouslyMade',
        'is_calculated' => 'getIsCalculated',
        'client_tax_status' => 'getClientTaxStatus',
        'state' => 'getState',
        'employer_percent' => 'getEmployerPercent',
        'is_pfml' => 'getIsPfml',
        'employee_percent' => 'getEmployeePercent',
        'tax_type_engine' => 'getTaxTypeEngine',
        'tax_type_engine_info' => 'getTaxTypeEngineInfo',
        'current_tax_setup_status' => 'getCurrentTaxSetupStatus',
        'tax_type_id' => 'getTaxTypeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('client_tax_type_include_id', $data ?? [], null);
        $this->setIfExists('tax_type_name', $data ?? [], null);
        $this->setIfExists('employer_tax_id', $data ?? [], null);
        $this->setIfExists('frequency_of_payment', $data ?? [], null);
        $this->setIfExists('pay_frequency_id', $data ?? [], null);
        $this->setIfExists('payer', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('tax_start_date', $data ?? [], null);
        $this->setIfExists('tax_end_date', $data ?? [], null);
        $this->setIfExists('last_modified_by', $data ?? [], null);
        $this->setIfExists('last_modified_date', $data ?? [], null);
        $this->setIfExists('is_editable', $data ?? [], null);
        $this->setIfExists('is_workers_comp', $data ?? [], null);
        $this->setIfExists('payments_previously_made', $data ?? [], null);
        $this->setIfExists('is_calculated', $data ?? [], null);
        $this->setIfExists('client_tax_status', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('employer_percent', $data ?? [], null);
        $this->setIfExists('is_pfml', $data ?? [], null);
        $this->setIfExists('employee_percent', $data ?? [], null);
        $this->setIfExists('tax_type_engine', $data ?? [], null);
        $this->setIfExists('tax_type_engine_info', $data ?? [], null);
        $this->setIfExists('current_tax_setup_status', $data ?? [], null);
        $this->setIfExists('tax_type_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_tax_type_include_id
     *
     * @return int|null
     */
    public function getClientTaxTypeIncludeId()
    {
        return $this->container['client_tax_type_include_id'];
    }

    /**
     * Sets client_tax_type_include_id
     *
     * @param int|null $client_tax_type_include_id Client Tax Type Include ID
     *
     * @return self
     */
    public function setClientTaxTypeIncludeId($client_tax_type_include_id)
    {
        if (is_null($client_tax_type_include_id)) {
            throw new \InvalidArgumentException('non-nullable client_tax_type_include_id cannot be null');
        }
        $this->container['client_tax_type_include_id'] = $client_tax_type_include_id;

        return $this;
    }

    /**
     * Gets tax_type_name
     *
     * @return string|null
     */
    public function getTaxTypeName()
    {
        return $this->container['tax_type_name'];
    }

    /**
     * Sets tax_type_name
     *
     * @param string|null $tax_type_name Tax Type Name
     *
     * @return self
     */
    public function setTaxTypeName($tax_type_name)
    {
        if (is_null($tax_type_name)) {
            throw new \InvalidArgumentException('non-nullable tax_type_name cannot be null');
        }
        $this->container['tax_type_name'] = $tax_type_name;

        return $this;
    }

    /**
     * Gets employer_tax_id
     *
     * @return string|null
     */
    public function getEmployerTaxId()
    {
        return $this->container['employer_tax_id'];
    }

    /**
     * Sets employer_tax_id
     *
     * @param string|null $employer_tax_id Employer Tax ID
     *
     * @return self
     */
    public function setEmployerTaxId($employer_tax_id)
    {
        if (is_null($employer_tax_id)) {
            throw new \InvalidArgumentException('non-nullable employer_tax_id cannot be null');
        }
        $this->container['employer_tax_id'] = $employer_tax_id;

        return $this;
    }

    /**
     * Gets frequency_of_payment
     *
     * @return string|null
     */
    public function getFrequencyOfPayment()
    {
        return $this->container['frequency_of_payment'];
    }

    /**
     * Sets frequency_of_payment
     *
     * @param string|null $frequency_of_payment Frequency Of Payment
     *
     * @return self
     */
    public function setFrequencyOfPayment($frequency_of_payment)
    {
        if (is_null($frequency_of_payment)) {
            throw new \InvalidArgumentException('non-nullable frequency_of_payment cannot be null');
        }
        $this->container['frequency_of_payment'] = $frequency_of_payment;

        return $this;
    }

    /**
     * Gets pay_frequency_id
     *
     * @return int|null
     */
    public function getPayFrequencyId()
    {
        return $this->container['pay_frequency_id'];
    }

    /**
     * Sets pay_frequency_id
     *
     * @param int|null $pay_frequency_id Pay Frequency ID
     *
     * @return self
     */
    public function setPayFrequencyId($pay_frequency_id)
    {
        if (is_null($pay_frequency_id)) {
            array_push($this->openAPINullablesSetToNull, 'pay_frequency_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_frequency_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_frequency_id'] = $pay_frequency_id;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return string|null
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param string|null $payer Payer
     *
     * @return self
     */
    public function setPayer($payer)
    {
        if (is_null($payer)) {
            throw new \InvalidArgumentException('non-nullable payer cannot be null');
        }
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return float|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param float|null $tax_rate Tax Rate
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            array_push($this->openAPINullablesSetToNull, 'tax_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_start_date
     *
     * @return string|null
     */
    public function getTaxStartDate()
    {
        return $this->container['tax_start_date'];
    }

    /**
     * Sets tax_start_date
     *
     * @param string|null $tax_start_date Tax Start Date
     *
     * @return self
     */
    public function setTaxStartDate($tax_start_date)
    {
        if (is_null($tax_start_date)) {
            throw new \InvalidArgumentException('non-nullable tax_start_date cannot be null');
        }
        $this->container['tax_start_date'] = $tax_start_date;

        return $this;
    }

    /**
     * Gets tax_end_date
     *
     * @return string|null
     */
    public function getTaxEndDate()
    {
        return $this->container['tax_end_date'];
    }

    /**
     * Sets tax_end_date
     *
     * @param string|null $tax_end_date Tax End Date
     *
     * @return self
     */
    public function setTaxEndDate($tax_end_date)
    {
        if (is_null($tax_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'tax_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_end_date'] = $tax_end_date;

        return $this;
    }

    /**
     * Gets last_modified_by
     *
     * @return string|null
     */
    public function getLastModifiedBy()
    {
        return $this->container['last_modified_by'];
    }

    /**
     * Sets last_modified_by
     *
     * @param string|null $last_modified_by Last Modified By
     *
     * @return self
     */
    public function setLastModifiedBy($last_modified_by)
    {
        if (is_null($last_modified_by)) {
            throw new \InvalidArgumentException('non-nullable last_modified_by cannot be null');
        }
        $this->container['last_modified_by'] = $last_modified_by;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return string|null
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param string|null $last_modified_date Last Modified Date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        if (is_null($last_modified_date)) {
            throw new \InvalidArgumentException('non-nullable last_modified_date cannot be null');
        }
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets is_editable
     *
     * @return bool|null
     */
    public function getIsEditable()
    {
        return $this->container['is_editable'];
    }

    /**
     * Sets is_editable
     *
     * @param bool|null $is_editable Is Editable
     *
     * @return self
     */
    public function setIsEditable($is_editable)
    {
        if (is_null($is_editable)) {
            throw new \InvalidArgumentException('non-nullable is_editable cannot be null');
        }
        $this->container['is_editable'] = $is_editable;

        return $this;
    }

    /**
     * Gets is_workers_comp
     *
     * @return bool|null
     */
    public function getIsWorkersComp()
    {
        return $this->container['is_workers_comp'];
    }

    /**
     * Sets is_workers_comp
     *
     * @param bool|null $is_workers_comp Is Workers Comp
     *
     * @return self
     */
    public function setIsWorkersComp($is_workers_comp)
    {
        if (is_null($is_workers_comp)) {
            throw new \InvalidArgumentException('non-nullable is_workers_comp cannot be null');
        }
        $this->container['is_workers_comp'] = $is_workers_comp;

        return $this;
    }

    /**
     * Gets payments_previously_made
     *
     * @return bool|null
     */
    public function getPaymentsPreviouslyMade()
    {
        return $this->container['payments_previously_made'];
    }

    /**
     * Sets payments_previously_made
     *
     * @param bool|null $payments_previously_made Payments Previously Made
     *
     * @return self
     */
    public function setPaymentsPreviouslyMade($payments_previously_made)
    {
        if (is_null($payments_previously_made)) {
            throw new \InvalidArgumentException('non-nullable payments_previously_made cannot be null');
        }
        $this->container['payments_previously_made'] = $payments_previously_made;

        return $this;
    }

    /**
     * Gets is_calculated
     *
     * @return bool|null
     */
    public function getIsCalculated()
    {
        return $this->container['is_calculated'];
    }

    /**
     * Sets is_calculated
     *
     * @param bool|null $is_calculated Is Calculated
     *
     * @return self
     */
    public function setIsCalculated($is_calculated)
    {
        if (is_null($is_calculated)) {
            throw new \InvalidArgumentException('non-nullable is_calculated cannot be null');
        }
        $this->container['is_calculated'] = $is_calculated;

        return $this;
    }

    /**
     * Gets client_tax_status
     *
     * @return string|null
     */
    public function getClientTaxStatus()
    {
        return $this->container['client_tax_status'];
    }

    /**
     * Sets client_tax_status
     *
     * @param string|null $client_tax_status Client Tax Status
     *
     * @return self
     */
    public function setClientTaxStatus($client_tax_status)
    {
        if (is_null($client_tax_status)) {
            throw new \InvalidArgumentException('non-nullable client_tax_status cannot be null');
        }
        $this->container['client_tax_status'] = $client_tax_status;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State two letter abbreviation
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets employer_percent
     *
     * @return int|null
     */
    public function getEmployerPercent()
    {
        return $this->container['employer_percent'];
    }

    /**
     * Sets employer_percent
     *
     * @param int|null $employer_percent Employer Percent
     *
     * @return self
     */
    public function setEmployerPercent($employer_percent)
    {
        if (is_null($employer_percent)) {
            throw new \InvalidArgumentException('non-nullable employer_percent cannot be null');
        }
        $this->container['employer_percent'] = $employer_percent;

        return $this;
    }

    /**
     * Gets is_pfml
     *
     * @return bool|null
     */
    public function getIsPfml()
    {
        return $this->container['is_pfml'];
    }

    /**
     * Sets is_pfml
     *
     * @param bool|null $is_pfml Is Pfml
     *
     * @return self
     */
    public function setIsPfml($is_pfml)
    {
        if (is_null($is_pfml)) {
            throw new \InvalidArgumentException('non-nullable is_pfml cannot be null');
        }
        $this->container['is_pfml'] = $is_pfml;

        return $this;
    }

    /**
     * Gets employee_percent
     *
     * @return int|null
     */
    public function getEmployeePercent()
    {
        return $this->container['employee_percent'];
    }

    /**
     * Sets employee_percent
     *
     * @param int|null $employee_percent Employee Percent
     *
     * @return self
     */
    public function setEmployeePercent($employee_percent)
    {
        if (is_null($employee_percent)) {
            throw new \InvalidArgumentException('non-nullable employee_percent cannot be null');
        }
        $this->container['employee_percent'] = $employee_percent;

        return $this;
    }

    /**
     * Gets tax_type_engine
     *
     * @return string|null
     */
    public function getTaxTypeEngine()
    {
        return $this->container['tax_type_engine'];
    }

    /**
     * Sets tax_type_engine
     *
     * @param string|null $tax_type_engine Tax Type Engine
     *
     * @return self
     */
    public function setTaxTypeEngine($tax_type_engine)
    {
        if (is_null($tax_type_engine)) {
            throw new \InvalidArgumentException('non-nullable tax_type_engine cannot be null');
        }
        $this->container['tax_type_engine'] = $tax_type_engine;

        return $this;
    }

    /**
     * Gets tax_type_engine_info
     *
     * @return \MySdk\Model\CompanyPayrollClientIncludedTaxViewObjectTaxTypeEngineInfo|null
     */
    public function getTaxTypeEngineInfo()
    {
        return $this->container['tax_type_engine_info'];
    }

    /**
     * Sets tax_type_engine_info
     *
     * @param \MySdk\Model\CompanyPayrollClientIncludedTaxViewObjectTaxTypeEngineInfo|null $tax_type_engine_info tax_type_engine_info
     *
     * @return self
     */
    public function setTaxTypeEngineInfo($tax_type_engine_info)
    {
        if (is_null($tax_type_engine_info)) {
            array_push($this->openAPINullablesSetToNull, 'tax_type_engine_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_type_engine_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_type_engine_info'] = $tax_type_engine_info;

        return $this;
    }

    /**
     * Gets current_tax_setup_status
     *
     * @return \MySdk\Model\CompanyPayrollClientIncludedTaxViewObjectCurrentTaxSetupStatus|null
     */
    public function getCurrentTaxSetupStatus()
    {
        return $this->container['current_tax_setup_status'];
    }

    /**
     * Sets current_tax_setup_status
     *
     * @param \MySdk\Model\CompanyPayrollClientIncludedTaxViewObjectCurrentTaxSetupStatus|null $current_tax_setup_status current_tax_setup_status
     *
     * @return self
     */
    public function setCurrentTaxSetupStatus($current_tax_setup_status)
    {
        if (is_null($current_tax_setup_status)) {
            throw new \InvalidArgumentException('non-nullable current_tax_setup_status cannot be null');
        }
        $this->container['current_tax_setup_status'] = $current_tax_setup_status;

        return $this;
    }

    /**
     * Gets tax_type_id
     *
     * @return int|null
     */
    public function getTaxTypeId()
    {
        return $this->container['tax_type_id'];
    }

    /**
     * Sets tax_type_id
     *
     * @param int|null $tax_type_id Tax Type ID
     *
     * @return self
     */
    public function setTaxTypeId($tax_type_id)
    {
        if (is_null($tax_type_id)) {
            throw new \InvalidArgumentException('non-nullable tax_type_id cannot be null');
        }
        $this->container['tax_type_id'] = $tax_type_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


