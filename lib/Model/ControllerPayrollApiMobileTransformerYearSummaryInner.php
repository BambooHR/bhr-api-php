<?php
/**
 * ControllerPayrollApiMobileTransformerYearSummaryInner
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * ControllerPayrollApiMobileTransformerYearSummaryInner Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ControllerPayrollApiMobileTransformerYearSummaryInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Controller_Payroll_Api_Mobile_Transformer_YearSummary_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'pay_stub_id' => 'int',
        'currency_type' => 'string',
        'pay_date' => '\DateTime',
        'gross_pay' => 'float',
        'net_pay' => 'float',
        'taxes' => 'float',
        'deductions' => 'float',
        'ytd_gross_pay' => 'float',
        'ytd_net' => 'float',
        'ytd_tax' => 'float',
        'ytd_deductions' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'pay_stub_id' => null,
        'currency_type' => null,
        'pay_date' => 'date',
        'gross_pay' => 'float',
        'net_pay' => 'float',
        'taxes' => 'float',
        'deductions' => 'float',
        'ytd_gross_pay' => 'float',
        'ytd_net' => 'float',
        'ytd_tax' => 'float',
        'ytd_deductions' => 'float'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'pay_stub_id' => false,
        'currency_type' => false,
        'pay_date' => false,
        'gross_pay' => false,
        'net_pay' => false,
        'taxes' => false,
        'deductions' => false,
        'ytd_gross_pay' => false,
        'ytd_net' => false,
        'ytd_tax' => false,
        'ytd_deductions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'pay_stub_id' => 'payStubId',
        'currency_type' => 'currencyType',
        'pay_date' => 'payDate',
        'gross_pay' => 'grossPay',
        'net_pay' => 'netPay',
        'taxes' => 'taxes',
        'deductions' => 'deductions',
        'ytd_gross_pay' => 'ytdGrossPay',
        'ytd_net' => 'ytdNet',
        'ytd_tax' => 'ytdTax',
        'ytd_deductions' => 'ytdDeductions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'pay_stub_id' => 'setPayStubId',
        'currency_type' => 'setCurrencyType',
        'pay_date' => 'setPayDate',
        'gross_pay' => 'setGrossPay',
        'net_pay' => 'setNetPay',
        'taxes' => 'setTaxes',
        'deductions' => 'setDeductions',
        'ytd_gross_pay' => 'setYtdGrossPay',
        'ytd_net' => 'setYtdNet',
        'ytd_tax' => 'setYtdTax',
        'ytd_deductions' => 'setYtdDeductions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'pay_stub_id' => 'getPayStubId',
        'currency_type' => 'getCurrencyType',
        'pay_date' => 'getPayDate',
        'gross_pay' => 'getGrossPay',
        'net_pay' => 'getNetPay',
        'taxes' => 'getTaxes',
        'deductions' => 'getDeductions',
        'ytd_gross_pay' => 'getYtdGrossPay',
        'ytd_net' => 'getYtdNet',
        'ytd_tax' => 'getYtdTax',
        'ytd_deductions' => 'getYtdDeductions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('pay_stub_id', $data ?? [], null);
        $this->setIfExists('currency_type', $data ?? [], null);
        $this->setIfExists('pay_date', $data ?? [], null);
        $this->setIfExists('gross_pay', $data ?? [], null);
        $this->setIfExists('net_pay', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('deductions', $data ?? [], null);
        $this->setIfExists('ytd_gross_pay', $data ?? [], null);
        $this->setIfExists('ytd_net', $data ?? [], null);
        $this->setIfExists('ytd_tax', $data ?? [], null);
        $this->setIfExists('ytd_deductions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets pay_stub_id
     *
     * @return int|null
     */
    public function getPayStubId()
    {
        return $this->container['pay_stub_id'];
    }

    /**
     * Sets pay_stub_id
     *
     * @param int|null $pay_stub_id pay_stub_id
     *
     * @return self
     */
    public function setPayStubId($pay_stub_id)
    {
        if (is_null($pay_stub_id)) {
            throw new \InvalidArgumentException('non-nullable pay_stub_id cannot be null');
        }
        $this->container['pay_stub_id'] = $pay_stub_id;

        return $this;
    }

    /**
     * Gets currency_type
     *
     * @return string|null
     */
    public function getCurrencyType()
    {
        return $this->container['currency_type'];
    }

    /**
     * Sets currency_type
     *
     * @param string|null $currency_type currency_type
     *
     * @return self
     */
    public function setCurrencyType($currency_type)
    {
        if (is_null($currency_type)) {
            throw new \InvalidArgumentException('non-nullable currency_type cannot be null');
        }
        $this->container['currency_type'] = $currency_type;

        return $this;
    }

    /**
     * Gets pay_date
     *
     * @return \DateTime|null
     */
    public function getPayDate()
    {
        return $this->container['pay_date'];
    }

    /**
     * Sets pay_date
     *
     * @param \DateTime|null $pay_date pay_date
     *
     * @return self
     */
    public function setPayDate($pay_date)
    {
        if (is_null($pay_date)) {
            throw new \InvalidArgumentException('non-nullable pay_date cannot be null');
        }
        $this->container['pay_date'] = $pay_date;

        return $this;
    }

    /**
     * Gets gross_pay
     *
     * @return float|null
     */
    public function getGrossPay()
    {
        return $this->container['gross_pay'];
    }

    /**
     * Sets gross_pay
     *
     * @param float|null $gross_pay gross_pay
     *
     * @return self
     */
    public function setGrossPay($gross_pay)
    {
        if (is_null($gross_pay)) {
            throw new \InvalidArgumentException('non-nullable gross_pay cannot be null');
        }
        $this->container['gross_pay'] = $gross_pay;

        return $this;
    }

    /**
     * Gets net_pay
     *
     * @return float|null
     */
    public function getNetPay()
    {
        return $this->container['net_pay'];
    }

    /**
     * Sets net_pay
     *
     * @param float|null $net_pay net_pay
     *
     * @return self
     */
    public function setNetPay($net_pay)
    {
        if (is_null($net_pay)) {
            throw new \InvalidArgumentException('non-nullable net_pay cannot be null');
        }
        $this->container['net_pay'] = $net_pay;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return float|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param float|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets deductions
     *
     * @return float|null
     */
    public function getDeductions()
    {
        return $this->container['deductions'];
    }

    /**
     * Sets deductions
     *
     * @param float|null $deductions deductions
     *
     * @return self
     */
    public function setDeductions($deductions)
    {
        if (is_null($deductions)) {
            throw new \InvalidArgumentException('non-nullable deductions cannot be null');
        }
        $this->container['deductions'] = $deductions;

        return $this;
    }

    /**
     * Gets ytd_gross_pay
     *
     * @return float|null
     */
    public function getYtdGrossPay()
    {
        return $this->container['ytd_gross_pay'];
    }

    /**
     * Sets ytd_gross_pay
     *
     * @param float|null $ytd_gross_pay ytd_gross_pay
     *
     * @return self
     */
    public function setYtdGrossPay($ytd_gross_pay)
    {
        if (is_null($ytd_gross_pay)) {
            throw new \InvalidArgumentException('non-nullable ytd_gross_pay cannot be null');
        }
        $this->container['ytd_gross_pay'] = $ytd_gross_pay;

        return $this;
    }

    /**
     * Gets ytd_net
     *
     * @return float|null
     */
    public function getYtdNet()
    {
        return $this->container['ytd_net'];
    }

    /**
     * Sets ytd_net
     *
     * @param float|null $ytd_net ytd_net
     *
     * @return self
     */
    public function setYtdNet($ytd_net)
    {
        if (is_null($ytd_net)) {
            throw new \InvalidArgumentException('non-nullable ytd_net cannot be null');
        }
        $this->container['ytd_net'] = $ytd_net;

        return $this;
    }

    /**
     * Gets ytd_tax
     *
     * @return float|null
     */
    public function getYtdTax()
    {
        return $this->container['ytd_tax'];
    }

    /**
     * Sets ytd_tax
     *
     * @param float|null $ytd_tax ytd_tax
     *
     * @return self
     */
    public function setYtdTax($ytd_tax)
    {
        if (is_null($ytd_tax)) {
            throw new \InvalidArgumentException('non-nullable ytd_tax cannot be null');
        }
        $this->container['ytd_tax'] = $ytd_tax;

        return $this;
    }

    /**
     * Gets ytd_deductions
     *
     * @return float|null
     */
    public function getYtdDeductions()
    {
        return $this->container['ytd_deductions'];
    }

    /**
     * Sets ytd_deductions
     *
     * @param float|null $ytd_deductions ytd_deductions
     *
     * @return self
     */
    public function setYtdDeductions($ytd_deductions)
    {
        if (is_null($ytd_deductions)) {
            throw new \InvalidArgumentException('non-nullable ytd_deductions cannot be null');
        }
        $this->container['ytd_deductions'] = $ytd_deductions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


