<?php
/**
 * FormResponseModelValue
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * FormResponseModelValue Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FormResponseModelValue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FormResponse_model_value';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'label' => 'string',
        'required' => 'bool',
        'status' => 'string',
        'value' => '\MySdk\Model\SelectFieldFormNodeAllOfValue',
        'width' => 'int',
        'bi_id' => 'string',
        'max_length' => 'int',
        'disabled' => 'bool',
        'meta_data' => 'object',
        'aria_label' => 'string',
        'is_custom_field' => 'bool',
        'checked' => 'bool',
        '' => '\MySdk\Model\CurrencyFieldFormNodeAllOf',
        'max_date' => '\DateTime',
        'min_date' => '\DateTime',
        'note' => 'string',
        'placeholder' => 'string',
        'name' => 'string',
        'icon' => 'string',
        'field_id' => 'string',
        'can_add_rows' => 'bool',
        'can_edit' => 'bool',
        'can_delete_rows' => 'bool',
        'columns' => '\MySdk\Model\HistoryTableControlFormNodeAllOfColumns[]',
        'table_type' => 'string',
        'is_history_table' => 'bool',
        'sort_by_field_ids' => 'string[]',
        'sort_direction' => 'string',
        'rows' => '\MySdk\Model\HistoryTableControlFormNodeAllOfRows[]',
        'groups' => '\MySdk\Model\HistoryTableControlFormNodeAllOfGroups[]',
        'sensitive_table_type' => 'string',
        'sensitive_field_id' => 'string',
        'gap' => 'int',
        'orientation' => 'string',
        'can_add' => 'bool',
        'can_delete' => 'bool',
        'template' => 'string',
        'items' => '\MySdk\Model\SelectFieldFormNodeAllOfItems[]',
        'multiselect' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'label' => null,
        'required' => null,
        'status' => null,
        'value' => null,
        'width' => null,
        'bi_id' => null,
        'max_length' => null,
        'disabled' => null,
        'meta_data' => null,
        'aria_label' => null,
        'is_custom_field' => null,
        'checked' => null,
        '' => null,
        'max_date' => 'date',
        'min_date' => 'date',
        'note' => null,
        'placeholder' => null,
        'name' => null,
        'icon' => null,
        'field_id' => null,
        'can_add_rows' => null,
        'can_edit' => null,
        'can_delete_rows' => null,
        'columns' => null,
        'table_type' => null,
        'is_history_table' => null,
        'sort_by_field_ids' => null,
        'sort_direction' => null,
        'rows' => null,
        'groups' => null,
        'sensitive_table_type' => null,
        'sensitive_field_id' => null,
        'gap' => null,
        'orientation' => null,
        'can_add' => null,
        'can_delete' => null,
        'template' => null,
        'items' => null,
        'multiselect' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => false,
        'label' => false,
        'required' => false,
        'status' => false,
        'value' => false,
        'width' => false,
        'bi_id' => false,
        'max_length' => false,
        'disabled' => false,
        'meta_data' => false,
        'aria_label' => false,
        'is_custom_field' => false,
        'checked' => false,
        '' => false,
        'max_date' => false,
        'min_date' => false,
        'note' => false,
        'placeholder' => false,
        'name' => false,
        'icon' => false,
        'field_id' => false,
        'can_add_rows' => false,
        'can_edit' => false,
        'can_delete_rows' => false,
        'columns' => false,
        'table_type' => false,
        'is_history_table' => false,
        'sort_by_field_ids' => false,
        'sort_direction' => false,
        'rows' => false,
        'groups' => false,
        'sensitive_table_type' => false,
        'sensitive_field_id' => false,
        'gap' => false,
        'orientation' => false,
        'can_add' => false,
        'can_delete' => false,
        'template' => false,
        'items' => false,
        'multiselect' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'label' => 'label',
        'required' => 'required',
        'status' => 'status',
        'value' => 'value',
        'width' => 'width',
        'bi_id' => 'biId',
        'max_length' => 'maxLength',
        'disabled' => 'disabled',
        'meta_data' => 'metaData',
        'aria_label' => 'ariaLabel',
        'is_custom_field' => 'isCustomField',
        'checked' => 'checked',
        '' => '',
        'max_date' => 'maxDate',
        'min_date' => 'minDate',
        'note' => 'note',
        'placeholder' => 'placeholder',
        'name' => 'name',
        'icon' => 'icon',
        'field_id' => 'fieldId',
        'can_add_rows' => 'canAddRows',
        'can_edit' => 'canEdit',
        'can_delete_rows' => 'canDeleteRows',
        'columns' => 'columns',
        'table_type' => 'tableType',
        'is_history_table' => 'isHistoryTable',
        'sort_by_field_ids' => 'sortByFieldIds',
        'sort_direction' => 'sortDirection',
        'rows' => 'rows',
        'groups' => 'groups',
        'sensitive_table_type' => 'sensitiveTableType',
        'sensitive_field_id' => 'sensitiveFieldId',
        'gap' => 'gap',
        'orientation' => 'orientation',
        'can_add' => 'canAdd',
        'can_delete' => 'canDelete',
        'template' => 'template',
        'items' => 'items',
        'multiselect' => 'multiselect'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'label' => 'setLabel',
        'required' => 'setRequired',
        'status' => 'setStatus',
        'value' => 'setValue',
        'width' => 'setWidth',
        'bi_id' => 'setBiId',
        'max_length' => 'setMaxLength',
        'disabled' => 'setDisabled',
        'meta_data' => 'setMetaData',
        'aria_label' => 'setAriaLabel',
        'is_custom_field' => 'setIsCustomField',
        'checked' => 'setChecked',
        '' => 'set',
        'max_date' => 'setMaxDate',
        'min_date' => 'setMinDate',
        'note' => 'setNote',
        'placeholder' => 'setPlaceholder',
        'name' => 'setName',
        'icon' => 'setIcon',
        'field_id' => 'setFieldId',
        'can_add_rows' => 'setCanAddRows',
        'can_edit' => 'setCanEdit',
        'can_delete_rows' => 'setCanDeleteRows',
        'columns' => 'setColumns',
        'table_type' => 'setTableType',
        'is_history_table' => 'setIsHistoryTable',
        'sort_by_field_ids' => 'setSortByFieldIds',
        'sort_direction' => 'setSortDirection',
        'rows' => 'setRows',
        'groups' => 'setGroups',
        'sensitive_table_type' => 'setSensitiveTableType',
        'sensitive_field_id' => 'setSensitiveFieldId',
        'gap' => 'setGap',
        'orientation' => 'setOrientation',
        'can_add' => 'setCanAdd',
        'can_delete' => 'setCanDelete',
        'template' => 'setTemplate',
        'items' => 'setItems',
        'multiselect' => 'setMultiselect'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'label' => 'getLabel',
        'required' => 'getRequired',
        'status' => 'getStatus',
        'value' => 'getValue',
        'width' => 'getWidth',
        'bi_id' => 'getBiId',
        'max_length' => 'getMaxLength',
        'disabled' => 'getDisabled',
        'meta_data' => 'getMetaData',
        'aria_label' => 'getAriaLabel',
        'is_custom_field' => 'getIsCustomField',
        'checked' => 'getChecked',
        '' => 'get',
        'max_date' => 'getMaxDate',
        'min_date' => 'getMinDate',
        'note' => 'getNote',
        'placeholder' => 'getPlaceholder',
        'name' => 'getName',
        'icon' => 'getIcon',
        'field_id' => 'getFieldId',
        'can_add_rows' => 'getCanAddRows',
        'can_edit' => 'getCanEdit',
        'can_delete_rows' => 'getCanDeleteRows',
        'columns' => 'getColumns',
        'table_type' => 'getTableType',
        'is_history_table' => 'getIsHistoryTable',
        'sort_by_field_ids' => 'getSortByFieldIds',
        'sort_direction' => 'getSortDirection',
        'rows' => 'getRows',
        'groups' => 'getGroups',
        'sensitive_table_type' => 'getSensitiveTableType',
        'sensitive_field_id' => 'getSensitiveFieldId',
        'gap' => 'getGap',
        'orientation' => 'getOrientation',
        'can_add' => 'getCanAdd',
        'can_delete' => 'getCanDelete',
        'template' => 'getTemplate',
        'items' => 'getItems',
        'multiselect' => 'getMultiselect'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ORIENTATION_VERTICAL = 'vertical';
    public const ORIENTATION_HORIZONTAL = 'horizontal';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrientationAllowableValues()
    {
        return [
            self::ORIENTATION_VERTICAL,
            self::ORIENTATION_HORIZONTAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('bi_id', $data ?? [], null);
        $this->setIfExists('max_length', $data ?? [], null);
        $this->setIfExists('disabled', $data ?? [], null);
        $this->setIfExists('meta_data', $data ?? [], null);
        $this->setIfExists('aria_label', $data ?? [], null);
        $this->setIfExists('is_custom_field', $data ?? [], null);
        $this->setIfExists('checked', $data ?? [], null);
        $this->setIfExists('', $data ?? [], null);
        $this->setIfExists('max_date', $data ?? [], null);
        $this->setIfExists('min_date', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('placeholder', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('field_id', $data ?? [], null);
        $this->setIfExists('can_add_rows', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('can_delete_rows', $data ?? [], null);
        $this->setIfExists('columns', $data ?? [], null);
        $this->setIfExists('table_type', $data ?? [], null);
        $this->setIfExists('is_history_table', $data ?? [], null);
        $this->setIfExists('sort_by_field_ids', $data ?? [], null);
        $this->setIfExists('sort_direction', $data ?? [], null);
        $this->setIfExists('rows', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('sensitive_table_type', $data ?? [], null);
        $this->setIfExists('sensitive_field_id', $data ?? [], null);
        $this->setIfExists('gap', $data ?? [], null);
        $this->setIfExists('orientation', $data ?? [], null);
        $this->setIfExists('can_add', $data ?? [], null);
        $this->setIfExists('can_delete', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('multiselect', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrientationAllowableValues();
        if (!is_null($this->container['orientation']) && !in_array($this->container['orientation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'orientation', must be one of '%s'",
                $this->container['orientation'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier for the node
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of the form node
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label Field label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required Whether the field is required
     *
     * @return self
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Field status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \MySdk\Model\SelectFieldFormNodeAllOfValue|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \MySdk\Model\SelectFieldFormNodeAllOfValue|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Field width
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets bi_id
     *
     * @return string|null
     */
    public function getBiId()
    {
        return $this->container['bi_id'];
    }

    /**
     * Sets bi_id
     *
     * @param string|null $bi_id Business intelligence ID
     *
     * @return self
     */
    public function setBiId($bi_id)
    {
        if (is_null($bi_id)) {
            throw new \InvalidArgumentException('non-nullable bi_id cannot be null');
        }
        $this->container['bi_id'] = $bi_id;

        return $this;
    }

    /**
     * Gets max_length
     *
     * @return int|null
     */
    public function getMaxLength()
    {
        return $this->container['max_length'];
    }

    /**
     * Sets max_length
     *
     * @param int|null $max_length Maximum length of input
     *
     * @return self
     */
    public function setMaxLength($max_length)
    {
        if (is_null($max_length)) {
            throw new \InvalidArgumentException('non-nullable max_length cannot be null');
        }
        $this->container['max_length'] = $max_length;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool|null
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool|null $disabled Whether the field is disabled
     *
     * @return self
     */
    public function setDisabled($disabled)
    {
        if (is_null($disabled)) {
            throw new \InvalidArgumentException('non-nullable disabled cannot be null');
        }
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return object|null
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param object|null $meta_data Additional metadata
     *
     * @return self
     */
    public function setMetaData($meta_data)
    {
        if (is_null($meta_data)) {
            throw new \InvalidArgumentException('non-nullable meta_data cannot be null');
        }
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets aria_label
     *
     * @return string|null
     */
    public function getAriaLabel()
    {
        return $this->container['aria_label'];
    }

    /**
     * Sets aria_label
     *
     * @param string|null $aria_label Accessibility label
     *
     * @return self
     */
    public function setAriaLabel($aria_label)
    {
        if (is_null($aria_label)) {
            throw new \InvalidArgumentException('non-nullable aria_label cannot be null');
        }
        $this->container['aria_label'] = $aria_label;

        return $this;
    }

    /**
     * Gets is_custom_field
     *
     * @return bool|null
     */
    public function getIsCustomField()
    {
        return $this->container['is_custom_field'];
    }

    /**
     * Sets is_custom_field
     *
     * @param bool|null $is_custom_field Whether the field is a custom field
     *
     * @return self
     */
    public function setIsCustomField($is_custom_field)
    {
        if (is_null($is_custom_field)) {
            throw new \InvalidArgumentException('non-nullable is_custom_field cannot be null');
        }
        $this->container['is_custom_field'] = $is_custom_field;

        return $this;
    }

    /**
     * Gets checked
     *
     * @return bool|null
     */
    public function getChecked()
    {
        return $this->container['checked'];
    }

    /**
     * Sets checked
     *
     * @param bool|null $checked Whether the checkbox is checked
     *
     * @return self
     */
    public function setChecked($checked)
    {
        if (is_null($checked)) {
            throw new \InvalidArgumentException('non-nullable checked cannot be null');
        }
        $this->container['checked'] = $checked;

        return $this;
    }

    /**
     * Gets 
     *
     * @return \MySdk\Model\CurrencyFieldFormNodeAllOf|null
     */
    public function get()
    {
        return $this->container[''];
    }

    /**
     * Sets 
     *
     * @param \MySdk\Model\CurrencyFieldFormNodeAllOf|null $ 
     *
     * @return self
     */
    public function set($)
    {
        if (is_null($)) {
            throw new \InvalidArgumentException('non-nullable  cannot be null');
        }
        $this->container[''] = $;

        return $this;
    }

    /**
     * Gets max_date
     *
     * @return \DateTime|null
     */
    public function getMaxDate()
    {
        return $this->container['max_date'];
    }

    /**
     * Sets max_date
     *
     * @param \DateTime|null $max_date Maximum allowed date
     *
     * @return self
     */
    public function setMaxDate($max_date)
    {
        if (is_null($max_date)) {
            throw new \InvalidArgumentException('non-nullable max_date cannot be null');
        }
        $this->container['max_date'] = $max_date;

        return $this;
    }

    /**
     * Gets min_date
     *
     * @return \DateTime|null
     */
    public function getMinDate()
    {
        return $this->container['min_date'];
    }

    /**
     * Sets min_date
     *
     * @param \DateTime|null $min_date Minimum allowed date
     *
     * @return self
     */
    public function setMinDate($min_date)
    {
        if (is_null($min_date)) {
            throw new \InvalidArgumentException('non-nullable min_date cannot be null');
        }
        $this->container['min_date'] = $min_date;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Additional note for the field
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets placeholder
     *
     * @return string|null
     */
    public function getPlaceholder()
    {
        return $this->container['placeholder'];
    }

    /**
     * Sets placeholder
     *
     * @param string|null $placeholder Placeholder text
     *
     * @return self
     */
    public function setPlaceholder($placeholder)
    {
        if (is_null($placeholder)) {
            throw new \InvalidArgumentException('non-nullable placeholder cannot be null');
        }
        $this->container['placeholder'] = $placeholder;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Field name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon Icon identifier
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            throw new \InvalidArgumentException('non-nullable icon cannot be null');
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets field_id
     *
     * @return string|null
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param string|null $field_id Field identifier
     *
     * @return self
     */
    public function setFieldId($field_id)
    {
        if (is_null($field_id)) {
            throw new \InvalidArgumentException('non-nullable field_id cannot be null');
        }
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets can_add_rows
     *
     * @return bool|null
     */
    public function getCanAddRows()
    {
        return $this->container['can_add_rows'];
    }

    /**
     * Sets can_add_rows
     *
     * @param bool|null $can_add_rows Whether rows can be added
     *
     * @return self
     */
    public function setCanAddRows($can_add_rows)
    {
        if (is_null($can_add_rows)) {
            throw new \InvalidArgumentException('non-nullable can_add_rows cannot be null');
        }
        $this->container['can_add_rows'] = $can_add_rows;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit Whether the table is editable
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_delete_rows
     *
     * @return bool|null
     */
    public function getCanDeleteRows()
    {
        return $this->container['can_delete_rows'];
    }

    /**
     * Sets can_delete_rows
     *
     * @param bool|null $can_delete_rows Whether rows can be deleted
     *
     * @return self
     */
    public function setCanDeleteRows($can_delete_rows)
    {
        if (is_null($can_delete_rows)) {
            throw new \InvalidArgumentException('non-nullable can_delete_rows cannot be null');
        }
        $this->container['can_delete_rows'] = $can_delete_rows;

        return $this;
    }

    /**
     * Gets columns
     *
     * @return \MySdk\Model\HistoryTableControlFormNodeAllOfColumns[]|null
     */
    public function getColumns()
    {
        return $this->container['columns'];
    }

    /**
     * Sets columns
     *
     * @param \MySdk\Model\HistoryTableControlFormNodeAllOfColumns[]|null $columns Column definitions
     *
     * @return self
     */
    public function setColumns($columns)
    {
        if (is_null($columns)) {
            throw new \InvalidArgumentException('non-nullable columns cannot be null');
        }
        $this->container['columns'] = $columns;

        return $this;
    }

    /**
     * Gets table_type
     *
     * @return string|null
     */
    public function getTableType()
    {
        return $this->container['table_type'];
    }

    /**
     * Sets table_type
     *
     * @param string|null $table_type Type of table
     *
     * @return self
     */
    public function setTableType($table_type)
    {
        if (is_null($table_type)) {
            throw new \InvalidArgumentException('non-nullable table_type cannot be null');
        }
        $this->container['table_type'] = $table_type;

        return $this;
    }

    /**
     * Gets is_history_table
     *
     * @return bool|null
     */
    public function getIsHistoryTable()
    {
        return $this->container['is_history_table'];
    }

    /**
     * Sets is_history_table
     *
     * @param bool|null $is_history_table Whether this is a history table
     *
     * @return self
     */
    public function setIsHistoryTable($is_history_table)
    {
        if (is_null($is_history_table)) {
            throw new \InvalidArgumentException('non-nullable is_history_table cannot be null');
        }
        $this->container['is_history_table'] = $is_history_table;

        return $this;
    }

    /**
     * Gets sort_by_field_ids
     *
     * @return string[]|null
     */
    public function getSortByFieldIds()
    {
        return $this->container['sort_by_field_ids'];
    }

    /**
     * Sets sort_by_field_ids
     *
     * @param string[]|null $sort_by_field_ids Field IDs to sort by
     *
     * @return self
     */
    public function setSortByFieldIds($sort_by_field_ids)
    {
        if (is_null($sort_by_field_ids)) {
            throw new \InvalidArgumentException('non-nullable sort_by_field_ids cannot be null');
        }
        $this->container['sort_by_field_ids'] = $sort_by_field_ids;

        return $this;
    }

    /**
     * Gets sort_direction
     *
     * @return string|null
     */
    public function getSortDirection()
    {
        return $this->container['sort_direction'];
    }

    /**
     * Sets sort_direction
     *
     * @param string|null $sort_direction Sort direction
     *
     * @return self
     */
    public function setSortDirection($sort_direction)
    {
        if (is_null($sort_direction)) {
            throw new \InvalidArgumentException('non-nullable sort_direction cannot be null');
        }
        $this->container['sort_direction'] = $sort_direction;

        return $this;
    }

    /**
     * Gets rows
     *
     * @return \MySdk\Model\HistoryTableControlFormNodeAllOfRows[]|null
     */
    public function getRows()
    {
        return $this->container['rows'];
    }

    /**
     * Sets rows
     *
     * @param \MySdk\Model\HistoryTableControlFormNodeAllOfRows[]|null $rows Table rows
     *
     * @return self
     */
    public function setRows($rows)
    {
        if (is_null($rows)) {
            throw new \InvalidArgumentException('non-nullable rows cannot be null');
        }
        $this->container['rows'] = $rows;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \MySdk\Model\HistoryTableControlFormNodeAllOfGroups[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \MySdk\Model\HistoryTableControlFormNodeAllOfGroups[]|null $groups Table groups
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets sensitive_table_type
     *
     * @return string|null
     */
    public function getSensitiveTableType()
    {
        return $this->container['sensitive_table_type'];
    }

    /**
     * Sets sensitive_table_type
     *
     * @param string|null $sensitive_table_type Sensitive table type
     *
     * @return self
     */
    public function setSensitiveTableType($sensitive_table_type)
    {
        if (is_null($sensitive_table_type)) {
            throw new \InvalidArgumentException('non-nullable sensitive_table_type cannot be null');
        }
        $this->container['sensitive_table_type'] = $sensitive_table_type;

        return $this;
    }

    /**
     * Gets sensitive_field_id
     *
     * @return string|null
     */
    public function getSensitiveFieldId()
    {
        return $this->container['sensitive_field_id'];
    }

    /**
     * Sets sensitive_field_id
     *
     * @param string|null $sensitive_field_id Sensitive field identifier
     *
     * @return self
     */
    public function setSensitiveFieldId($sensitive_field_id)
    {
        if (is_null($sensitive_field_id)) {
            throw new \InvalidArgumentException('non-nullable sensitive_field_id cannot be null');
        }
        $this->container['sensitive_field_id'] = $sensitive_field_id;

        return $this;
    }

    /**
     * Gets gap
     *
     * @return int|null
     */
    public function getGap()
    {
        return $this->container['gap'];
    }

    /**
     * Sets gap
     *
     * @param int|null $gap Gap size between elements
     *
     * @return self
     */
    public function setGap($gap)
    {
        if (is_null($gap)) {
            throw new \InvalidArgumentException('non-nullable gap cannot be null');
        }
        $this->container['gap'] = $gap;

        return $this;
    }

    /**
     * Gets orientation
     *
     * @return string|null
     */
    public function getOrientation()
    {
        return $this->container['orientation'];
    }

    /**
     * Sets orientation
     *
     * @param string|null $orientation Layout orientation
     *
     * @return self
     */
    public function setOrientation($orientation)
    {
        if (is_null($orientation)) {
            throw new \InvalidArgumentException('non-nullable orientation cannot be null');
        }
        $allowedValues = $this->getOrientationAllowableValues();
        if (!in_array($orientation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'orientation', must be one of '%s'",
                    $orientation,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orientation'] = $orientation;

        return $this;
    }

    /**
     * Gets can_add
     *
     * @return bool|null
     */
    public function getCanAdd()
    {
        return $this->container['can_add'];
    }

    /**
     * Sets can_add
     *
     * @param bool|null $can_add Whether new items can be added
     *
     * @return self
     */
    public function setCanAdd($can_add)
    {
        if (is_null($can_add)) {
            throw new \InvalidArgumentException('non-nullable can_add cannot be null');
        }
        $this->container['can_add'] = $can_add;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool|null
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool|null $can_delete Whether items can be deleted
     *
     * @return self
     */
    public function setCanDelete($can_delete)
    {
        if (is_null($can_delete)) {
            throw new \InvalidArgumentException('non-nullable can_delete cannot be null');
        }
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string|null $template Static template content
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \MySdk\Model\SelectFieldFormNodeAllOfItems[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \MySdk\Model\SelectFieldFormNodeAllOfItems[]|null $items Available options for selection
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets multiselect
     *
     * @return bool|null
     */
    public function getMultiselect()
    {
        return $this->container['multiselect'];
    }

    /**
     * Sets multiselect
     *
     * @param bool|null $multiselect Whether multiple options can be selected
     *
     * @return self
     */
    public function setMultiselect($multiselect)
    {
        if (is_null($multiselect)) {
            throw new \InvalidArgumentException('non-nullable multiselect cannot be null');
        }
        $this->container['multiselect'] = $multiselect;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


