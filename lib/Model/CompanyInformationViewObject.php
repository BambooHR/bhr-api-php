<?php
/**
 * CompanyInformationViewObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * CompanyInformationViewObject Class Doc Comment
 *
 * @category Class
 * @description Company information for a payroll client
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CompanyInformationViewObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompanyInformationViewObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'company_legal_name' => 'string',
        'dba_name' => 'string',
        'ein' => 'string',
        'client_id' => 'int',
        'status' => 'string',
        'has_bank' => 'bool',
        'form8821' => '\MySdk\Model\BambooHrPayrollDocumentStatusViewObject',
        'form8655' => '\MySdk\Model\BambooHrPayrollDocumentStatusViewObject',
        'beneficial_owner_addendum' => '\MySdk\Model\BambooHrPayrollDocumentStatusViewObject',
        'street1' => 'string',
        'street2' => 'string',
        'city' => 'string',
        'state' => 'string',
        'zip' => 'string',
        'selected_contact_id' => 'int',
        'is_legacy' => 'bool',
        'company_legal_name_locked' => 'bool',
        'phone_number' => 'string',
        'business_type' => 'string',
        'website' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'company_legal_name' => null,
        'dba_name' => null,
        'ein' => null,
        'client_id' => null,
        'status' => null,
        'has_bank' => null,
        'form8821' => null,
        'form8655' => null,
        'beneficial_owner_addendum' => null,
        'street1' => null,
        'street2' => null,
        'city' => null,
        'state' => null,
        'zip' => null,
        'selected_contact_id' => null,
        'is_legacy' => null,
        'company_legal_name_locked' => null,
        'phone_number' => null,
        'business_type' => null,
        'website' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'company_legal_name' => false,
        'dba_name' => true,
        'ein' => false,
        'client_id' => false,
        'status' => false,
        'has_bank' => false,
        'form8821' => false,
        'form8655' => false,
        'beneficial_owner_addendum' => false,
        'street1' => false,
        'street2' => true,
        'city' => false,
        'state' => false,
        'zip' => false,
        'selected_contact_id' => true,
        'is_legacy' => false,
        'company_legal_name_locked' => false,
        'phone_number' => true,
        'business_type' => true,
        'website' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_legal_name' => 'companyLegalName',
        'dba_name' => 'dbaName',
        'ein' => 'ein',
        'client_id' => 'clientId',
        'status' => 'status',
        'has_bank' => 'hasBank',
        'form8821' => 'form8821',
        'form8655' => 'form8655',
        'beneficial_owner_addendum' => 'beneficialOwnerAddendum',
        'street1' => 'street1',
        'street2' => 'street2',
        'city' => 'city',
        'state' => 'state',
        'zip' => 'zip',
        'selected_contact_id' => 'selectedContactId',
        'is_legacy' => 'isLegacy',
        'company_legal_name_locked' => 'companyLegalNameLocked',
        'phone_number' => 'phoneNumber',
        'business_type' => 'businessType',
        'website' => 'website'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_legal_name' => 'setCompanyLegalName',
        'dba_name' => 'setDbaName',
        'ein' => 'setEin',
        'client_id' => 'setClientId',
        'status' => 'setStatus',
        'has_bank' => 'setHasBank',
        'form8821' => 'setForm8821',
        'form8655' => 'setForm8655',
        'beneficial_owner_addendum' => 'setBeneficialOwnerAddendum',
        'street1' => 'setStreet1',
        'street2' => 'setStreet2',
        'city' => 'setCity',
        'state' => 'setState',
        'zip' => 'setZip',
        'selected_contact_id' => 'setSelectedContactId',
        'is_legacy' => 'setIsLegacy',
        'company_legal_name_locked' => 'setCompanyLegalNameLocked',
        'phone_number' => 'setPhoneNumber',
        'business_type' => 'setBusinessType',
        'website' => 'setWebsite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_legal_name' => 'getCompanyLegalName',
        'dba_name' => 'getDbaName',
        'ein' => 'getEin',
        'client_id' => 'getClientId',
        'status' => 'getStatus',
        'has_bank' => 'getHasBank',
        'form8821' => 'getForm8821',
        'form8655' => 'getForm8655',
        'beneficial_owner_addendum' => 'getBeneficialOwnerAddendum',
        'street1' => 'getStreet1',
        'street2' => 'getStreet2',
        'city' => 'getCity',
        'state' => 'getState',
        'zip' => 'getZip',
        'selected_contact_id' => 'getSelectedContactId',
        'is_legacy' => 'getIsLegacy',
        'company_legal_name_locked' => 'getCompanyLegalNameLocked',
        'phone_number' => 'getPhoneNumber',
        'business_type' => 'getBusinessType',
        'website' => 'getWebsite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('company_legal_name', $data ?? [], null);
        $this->setIfExists('dba_name', $data ?? [], null);
        $this->setIfExists('ein', $data ?? [], null);
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('has_bank', $data ?? [], null);
        $this->setIfExists('form8821', $data ?? [], null);
        $this->setIfExists('form8655', $data ?? [], null);
        $this->setIfExists('beneficial_owner_addendum', $data ?? [], null);
        $this->setIfExists('street1', $data ?? [], null);
        $this->setIfExists('street2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('zip', $data ?? [], null);
        $this->setIfExists('selected_contact_id', $data ?? [], null);
        $this->setIfExists('is_legacy', $data ?? [], null);
        $this->setIfExists('company_legal_name_locked', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('business_type', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_legal_name
     *
     * @return string|null
     */
    public function getCompanyLegalName()
    {
        return $this->container['company_legal_name'];
    }

    /**
     * Sets company_legal_name
     *
     * @param string|null $company_legal_name Legal name of the company
     *
     * @return self
     */
    public function setCompanyLegalName($company_legal_name)
    {
        if (is_null($company_legal_name)) {
            throw new \InvalidArgumentException('non-nullable company_legal_name cannot be null');
        }
        $this->container['company_legal_name'] = $company_legal_name;

        return $this;
    }

    /**
     * Gets dba_name
     *
     * @return string|null
     */
    public function getDbaName()
    {
        return $this->container['dba_name'];
    }

    /**
     * Sets dba_name
     *
     * @param string|null $dba_name Doing Business As name
     *
     * @return self
     */
    public function setDbaName($dba_name)
    {
        if (is_null($dba_name)) {
            array_push($this->openAPINullablesSetToNull, 'dba_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dba_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dba_name'] = $dba_name;

        return $this;
    }

    /**
     * Gets ein
     *
     * @return string|null
     */
    public function getEin()
    {
        return $this->container['ein'];
    }

    /**
     * Sets ein
     *
     * @param string|null $ein Employer Identification Number
     *
     * @return self
     */
    public function setEin($ein)
    {
        if (is_null($ein)) {
            throw new \InvalidArgumentException('non-nullable ein cannot be null');
        }
        $this->container['ein'] = $ein;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int|null $client_id Client ID
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Client status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets has_bank
     *
     * @return bool|null
     */
    public function getHasBank()
    {
        return $this->container['has_bank'];
    }

    /**
     * Sets has_bank
     *
     * @param bool|null $has_bank Whether the client has a bank account
     *
     * @return self
     */
    public function setHasBank($has_bank)
    {
        if (is_null($has_bank)) {
            throw new \InvalidArgumentException('non-nullable has_bank cannot be null');
        }
        $this->container['has_bank'] = $has_bank;

        return $this;
    }

    /**
     * Gets form8821
     *
     * @return \MySdk\Model\BambooHrPayrollDocumentStatusViewObject|null
     */
    public function getForm8821()
    {
        return $this->container['form8821'];
    }

    /**
     * Sets form8821
     *
     * @param \MySdk\Model\BambooHrPayrollDocumentStatusViewObject|null $form8821 form8821
     *
     * @return self
     */
    public function setForm8821($form8821)
    {
        if (is_null($form8821)) {
            throw new \InvalidArgumentException('non-nullable form8821 cannot be null');
        }
        $this->container['form8821'] = $form8821;

        return $this;
    }

    /**
     * Gets form8655
     *
     * @return \MySdk\Model\BambooHrPayrollDocumentStatusViewObject|null
     */
    public function getForm8655()
    {
        return $this->container['form8655'];
    }

    /**
     * Sets form8655
     *
     * @param \MySdk\Model\BambooHrPayrollDocumentStatusViewObject|null $form8655 form8655
     *
     * @return self
     */
    public function setForm8655($form8655)
    {
        if (is_null($form8655)) {
            throw new \InvalidArgumentException('non-nullable form8655 cannot be null');
        }
        $this->container['form8655'] = $form8655;

        return $this;
    }

    /**
     * Gets beneficial_owner_addendum
     *
     * @return \MySdk\Model\BambooHrPayrollDocumentStatusViewObject|null
     */
    public function getBeneficialOwnerAddendum()
    {
        return $this->container['beneficial_owner_addendum'];
    }

    /**
     * Sets beneficial_owner_addendum
     *
     * @param \MySdk\Model\BambooHrPayrollDocumentStatusViewObject|null $beneficial_owner_addendum beneficial_owner_addendum
     *
     * @return self
     */
    public function setBeneficialOwnerAddendum($beneficial_owner_addendum)
    {
        if (is_null($beneficial_owner_addendum)) {
            throw new \InvalidArgumentException('non-nullable beneficial_owner_addendum cannot be null');
        }
        $this->container['beneficial_owner_addendum'] = $beneficial_owner_addendum;

        return $this;
    }

    /**
     * Gets street1
     *
     * @return string|null
     */
    public function getStreet1()
    {
        return $this->container['street1'];
    }

    /**
     * Sets street1
     *
     * @param string|null $street1 Street address line 1
     *
     * @return self
     */
    public function setStreet1($street1)
    {
        if (is_null($street1)) {
            throw new \InvalidArgumentException('non-nullable street1 cannot be null');
        }
        $this->container['street1'] = $street1;

        return $this;
    }

    /**
     * Gets street2
     *
     * @return string|null
     */
    public function getStreet2()
    {
        return $this->container['street2'];
    }

    /**
     * Sets street2
     *
     * @param string|null $street2 Street address line 2
     *
     * @return self
     */
    public function setStreet2($street2)
    {
        if (is_null($street2)) {
            array_push($this->openAPINullablesSetToNull, 'street2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street2'] = $street2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city City
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State abbreviation
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string|null
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string|null $zip ZIP code
     *
     * @return self
     */
    public function setZip($zip)
    {
        if (is_null($zip)) {
            throw new \InvalidArgumentException('non-nullable zip cannot be null');
        }
        $this->container['zip'] = $zip;

        return $this;
    }

    /**
     * Gets selected_contact_id
     *
     * @return int|null
     */
    public function getSelectedContactId()
    {
        return $this->container['selected_contact_id'];
    }

    /**
     * Sets selected_contact_id
     *
     * @param int|null $selected_contact_id Selected contact ID
     *
     * @return self
     */
    public function setSelectedContactId($selected_contact_id)
    {
        if (is_null($selected_contact_id)) {
            array_push($this->openAPINullablesSetToNull, 'selected_contact_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('selected_contact_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['selected_contact_id'] = $selected_contact_id;

        return $this;
    }

    /**
     * Gets is_legacy
     *
     * @return bool|null
     */
    public function getIsLegacy()
    {
        return $this->container['is_legacy'];
    }

    /**
     * Sets is_legacy
     *
     * @param bool|null $is_legacy Whether this is a legacy client
     *
     * @return self
     */
    public function setIsLegacy($is_legacy)
    {
        if (is_null($is_legacy)) {
            throw new \InvalidArgumentException('non-nullable is_legacy cannot be null');
        }
        $this->container['is_legacy'] = $is_legacy;

        return $this;
    }

    /**
     * Gets company_legal_name_locked
     *
     * @return bool|null
     */
    public function getCompanyLegalNameLocked()
    {
        return $this->container['company_legal_name_locked'];
    }

    /**
     * Sets company_legal_name_locked
     *
     * @param bool|null $company_legal_name_locked Whether the company legal name is locked
     *
     * @return self
     */
    public function setCompanyLegalNameLocked($company_legal_name_locked)
    {
        if (is_null($company_legal_name_locked)) {
            throw new \InvalidArgumentException('non-nullable company_legal_name_locked cannot be null');
        }
        $this->container['company_legal_name_locked'] = $company_legal_name_locked;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Business phone number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets business_type
     *
     * @return string|null
     */
    public function getBusinessType()
    {
        return $this->container['business_type'];
    }

    /**
     * Sets business_type
     *
     * @param string|null $business_type Type of business
     *
     * @return self
     */
    public function setBusinessType($business_type)
    {
        if (is_null($business_type)) {
            array_push($this->openAPINullablesSetToNull, 'business_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('business_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['business_type'] = $business_type;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website Company website URL
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            array_push($this->openAPINullablesSetToNull, 'website');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['website'] = $website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


