<?php
/**
 * HighestPriorityCurrentTaxSetupStatusViewObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * HighestPriorityCurrentTaxSetupStatusViewObject Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class HighestPriorityCurrentTaxSetupStatusViewObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HighestPriorityCurrentTaxSetupStatusViewObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'days_until_event' => 'int',
        'future_tax_account_event' => 'string',
        'tax_setup_status' => 'string',
        'count' => 'int',
        'tax_type' => '\MySdk\Model\HighestPriorityCurrentTaxSetupStatusViewObjectTaxType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'days_until_event' => null,
        'future_tax_account_event' => null,
        'tax_setup_status' => null,
        'count' => null,
        'tax_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'days_until_event' => true,
        'future_tax_account_event' => true,
        'tax_setup_status' => false,
        'count' => false,
        'tax_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'days_until_event' => 'daysUntilEvent',
        'future_tax_account_event' => 'futureTaxAccountEvent',
        'tax_setup_status' => 'taxSetupStatus',
        'count' => 'count',
        'tax_type' => 'taxType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'days_until_event' => 'setDaysUntilEvent',
        'future_tax_account_event' => 'setFutureTaxAccountEvent',
        'tax_setup_status' => 'setTaxSetupStatus',
        'count' => 'setCount',
        'tax_type' => 'setTaxType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'days_until_event' => 'getDaysUntilEvent',
        'future_tax_account_event' => 'getFutureTaxAccountEvent',
        'tax_setup_status' => 'getTaxSetupStatus',
        'count' => 'getCount',
        'tax_type' => 'getTaxType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FUTURE_TAX_ACCOUNT_EVENT_FEES_WILL_APPLY = 'FeesWillApply';
    public const FUTURE_TAX_ACCOUNT_EVENT_PAYROLL_WILL_PAUSE = 'PayrollWillPause';
    public const TAX_SETUP_STATUS_COMPLETE = 'Complete';
    public const TAX_SETUP_STATUS_NEW_TAX = 'NewTax';
    public const TAX_SETUP_STATUS_ADD_TAX_ID = 'AddTaxId';
    public const TAX_SETUP_STATUS_THIRD_PARTY_ACCESS_NOT_GRANTED = 'ThirdPartyAccessNotGranted';
    public const TAX_SETUP_STATUS_FUTURE_THIRD_PARTY_ACCESS_NEEDED = 'FutureThirdPartyAccessNeeded';
    public const TAX_SETUP_STATUS_FEES_APPLY = 'FeesApply';
    public const TAX_SETUP_STATUS_PAYROLL_PAUSED = 'PayrollPaused';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFutureTaxAccountEventAllowableValues()
    {
        return [
            self::FUTURE_TAX_ACCOUNT_EVENT_FEES_WILL_APPLY,
            self::FUTURE_TAX_ACCOUNT_EVENT_PAYROLL_WILL_PAUSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxSetupStatusAllowableValues()
    {
        return [
            self::TAX_SETUP_STATUS_COMPLETE,
            self::TAX_SETUP_STATUS_NEW_TAX,
            self::TAX_SETUP_STATUS_ADD_TAX_ID,
            self::TAX_SETUP_STATUS_THIRD_PARTY_ACCESS_NOT_GRANTED,
            self::TAX_SETUP_STATUS_FUTURE_THIRD_PARTY_ACCESS_NEEDED,
            self::TAX_SETUP_STATUS_FEES_APPLY,
            self::TAX_SETUP_STATUS_PAYROLL_PAUSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('days_until_event', $data ?? [], null);
        $this->setIfExists('future_tax_account_event', $data ?? [], null);
        $this->setIfExists('tax_setup_status', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('tax_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFutureTaxAccountEventAllowableValues();
        if (!is_null($this->container['future_tax_account_event']) && !in_array($this->container['future_tax_account_event'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'future_tax_account_event', must be one of '%s'",
                $this->container['future_tax_account_event'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxSetupStatusAllowableValues();
        if (!is_null($this->container['tax_setup_status']) && !in_array($this->container['tax_setup_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_setup_status', must be one of '%s'",
                $this->container['tax_setup_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets days_until_event
     *
     * @return int|null
     */
    public function getDaysUntilEvent()
    {
        return $this->container['days_until_event'];
    }

    /**
     * Sets days_until_event
     *
     * @param int|null $days_until_event The number of days remaining until the futureTaxAccountEvent goes into effect
     *
     * @return self
     */
    public function setDaysUntilEvent($days_until_event)
    {
        if (is_null($days_until_event)) {
            array_push($this->openAPINullablesSetToNull, 'days_until_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('days_until_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['days_until_event'] = $days_until_event;

        return $this;
    }

    /**
     * Gets future_tax_account_event
     *
     * @return string|null
     */
    public function getFutureTaxAccountEvent()
    {
        return $this->container['future_tax_account_event'];
    }

    /**
     * Sets future_tax_account_event
     *
     * @param string|null $future_tax_account_event The next event which will occur to the tax account if no action is taken
     *
     * @return self
     */
    public function setFutureTaxAccountEvent($future_tax_account_event)
    {
        if (is_null($future_tax_account_event)) {
            array_push($this->openAPINullablesSetToNull, 'future_tax_account_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('future_tax_account_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getFutureTaxAccountEventAllowableValues();
        if (!is_null($future_tax_account_event) && !in_array($future_tax_account_event, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'future_tax_account_event', must be one of '%s'",
                    $future_tax_account_event,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['future_tax_account_event'] = $future_tax_account_event;

        return $this;
    }

    /**
     * Gets tax_setup_status
     *
     * @return string|null
     */
    public function getTaxSetupStatus()
    {
        return $this->container['tax_setup_status'];
    }

    /**
     * Sets tax_setup_status
     *
     * @param string|null $tax_setup_status The next event which will occur, if any
     *
     * @return self
     */
    public function setTaxSetupStatus($tax_setup_status)
    {
        if (is_null($tax_setup_status)) {
            throw new \InvalidArgumentException('non-nullable tax_setup_status cannot be null');
        }
        $allowedValues = $this->getTaxSetupStatusAllowableValues();
        if (!in_array($tax_setup_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_setup_status', must be one of '%s'",
                    $tax_setup_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_setup_status'] = $tax_setup_status;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int|null
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int|null $count The total number of tax accounts that share this status
     *
     * @return self
     */
    public function setCount($count)
    {
        if (is_null($count)) {
            throw new \InvalidArgumentException('non-nullable count cannot be null');
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets tax_type
     *
     * @return \MySdk\Model\HighestPriorityCurrentTaxSetupStatusViewObjectTaxType|null
     */
    public function getTaxType()
    {
        return $this->container['tax_type'];
    }

    /**
     * Sets tax_type
     *
     * @param \MySdk\Model\HighestPriorityCurrentTaxSetupStatusViewObjectTaxType|null $tax_type tax_type
     *
     * @return self
     */
    public function setTaxType($tax_type)
    {
        if (is_null($tax_type)) {
            array_push($this->openAPINullablesSetToNull, 'tax_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_type'] = $tax_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


