<?php
/**
 * SimpleEmployeeTaskFileMetaSchema
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * SimpleEmployeeTaskFileMetaSchema Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SimpleEmployeeTaskFileMetaSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SimpleEmployeeTaskFileMetaSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'file_id' => 'int',
        'file_data_id' => 'int',
        'file_name' => 'string',
        'is_esignature' => 'bool',
        'esignature_required' => 'bool',
        'extension' => 'string',
        'size' => 'string',
        'scan_info' => 'string',
        'esignature_workflow_id' => 'int',
        'esignature_workflow_instance_id' => 'int',
        'esignature_instance_id' => 'int',
        'current_signer_user_id' => 'int',
        'esignature_template_id' => 'int',
        'can_delete' => 'bool',
        'mime_type' => 'string',
        'esignature_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'file_id' => null,
        'file_data_id' => null,
        'file_name' => null,
        'is_esignature' => null,
        'esignature_required' => null,
        'extension' => null,
        'size' => null,
        'scan_info' => null,
        'esignature_workflow_id' => null,
        'esignature_workflow_instance_id' => null,
        'esignature_instance_id' => null,
        'current_signer_user_id' => null,
        'esignature_template_id' => null,
        'can_delete' => null,
        'mime_type' => null,
        'esignature_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'file_id' => false,
        'file_data_id' => true,
        'file_name' => false,
        'is_esignature' => true,
        'esignature_required' => false,
        'extension' => false,
        'size' => false,
        'scan_info' => true,
        'esignature_workflow_id' => true,
        'esignature_workflow_instance_id' => true,
        'esignature_instance_id' => true,
        'current_signer_user_id' => true,
        'esignature_template_id' => true,
        'can_delete' => false,
        'mime_type' => true,
        'esignature_status' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'file_id' => 'fileId',
        'file_data_id' => 'fileDataId',
        'file_name' => 'fileName',
        'is_esignature' => 'isEsignature',
        'esignature_required' => 'esignatureRequired',
        'extension' => 'extension',
        'size' => 'size',
        'scan_info' => 'scanInfo',
        'esignature_workflow_id' => 'esignatureWorkflowId',
        'esignature_workflow_instance_id' => 'esignatureWorkflowInstanceId',
        'esignature_instance_id' => 'esignatureInstanceId',
        'current_signer_user_id' => 'currentSignerUserId',
        'esignature_template_id' => 'esignatureTemplateId',
        'can_delete' => 'canDelete',
        'mime_type' => 'mimeType',
        'esignature_status' => 'esignatureStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'file_id' => 'setFileId',
        'file_data_id' => 'setFileDataId',
        'file_name' => 'setFileName',
        'is_esignature' => 'setIsEsignature',
        'esignature_required' => 'setEsignatureRequired',
        'extension' => 'setExtension',
        'size' => 'setSize',
        'scan_info' => 'setScanInfo',
        'esignature_workflow_id' => 'setEsignatureWorkflowId',
        'esignature_workflow_instance_id' => 'setEsignatureWorkflowInstanceId',
        'esignature_instance_id' => 'setEsignatureInstanceId',
        'current_signer_user_id' => 'setCurrentSignerUserId',
        'esignature_template_id' => 'setEsignatureTemplateId',
        'can_delete' => 'setCanDelete',
        'mime_type' => 'setMimeType',
        'esignature_status' => 'setEsignatureStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'file_id' => 'getFileId',
        'file_data_id' => 'getFileDataId',
        'file_name' => 'getFileName',
        'is_esignature' => 'getIsEsignature',
        'esignature_required' => 'getEsignatureRequired',
        'extension' => 'getExtension',
        'size' => 'getSize',
        'scan_info' => 'getScanInfo',
        'esignature_workflow_id' => 'getEsignatureWorkflowId',
        'esignature_workflow_instance_id' => 'getEsignatureWorkflowInstanceId',
        'esignature_instance_id' => 'getEsignatureInstanceId',
        'current_signer_user_id' => 'getCurrentSignerUserId',
        'esignature_template_id' => 'getEsignatureTemplateId',
        'can_delete' => 'getCanDelete',
        'mime_type' => 'getMimeType',
        'esignature_status' => 'getEsignatureStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('file_id', $data ?? [], null);
        $this->setIfExists('file_data_id', $data ?? [], null);
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('is_esignature', $data ?? [], null);
        $this->setIfExists('esignature_required', $data ?? [], null);
        $this->setIfExists('extension', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('scan_info', $data ?? [], null);
        $this->setIfExists('esignature_workflow_id', $data ?? [], null);
        $this->setIfExists('esignature_workflow_instance_id', $data ?? [], null);
        $this->setIfExists('esignature_instance_id', $data ?? [], null);
        $this->setIfExists('current_signer_user_id', $data ?? [], null);
        $this->setIfExists('esignature_template_id', $data ?? [], null);
        $this->setIfExists('can_delete', $data ?? [], null);
        $this->setIfExists('mime_type', $data ?? [], null);
        $this->setIfExists('esignature_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The ID of the file
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets file_id
     *
     * @return int|null
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param int|null $file_id The ID of the file
     *
     * @return self
     */
    public function setFileId($file_id)
    {
        if (is_null($file_id)) {
            throw new \InvalidArgumentException('non-nullable file_id cannot be null');
        }
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets file_data_id
     *
     * @return int|null
     */
    public function getFileDataId()
    {
        return $this->container['file_data_id'];
    }

    /**
     * Sets file_data_id
     *
     * @param int|null $file_data_id The ID of the file data
     *
     * @return self
     */
    public function setFileDataId($file_data_id)
    {
        if (is_null($file_data_id)) {
            array_push($this->openAPINullablesSetToNull, 'file_data_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_data_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_data_id'] = $file_data_id;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name The name of the file
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (is_null($file_name)) {
            throw new \InvalidArgumentException('non-nullable file_name cannot be null');
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets is_esignature
     *
     * @return bool|null
     */
    public function getIsEsignature()
    {
        return $this->container['is_esignature'];
    }

    /**
     * Sets is_esignature
     *
     * @param bool|null $is_esignature Whether the file is an e-signature
     *
     * @return self
     */
    public function setIsEsignature($is_esignature)
    {
        if (is_null($is_esignature)) {
            array_push($this->openAPINullablesSetToNull, 'is_esignature');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_esignature', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_esignature'] = $is_esignature;

        return $this;
    }

    /**
     * Gets esignature_required
     *
     * @return bool|null
     */
    public function getEsignatureRequired()
    {
        return $this->container['esignature_required'];
    }

    /**
     * Sets esignature_required
     *
     * @param bool|null $esignature_required Whether the e-signature is required
     *
     * @return self
     */
    public function setEsignatureRequired($esignature_required)
    {
        if (is_null($esignature_required)) {
            throw new \InvalidArgumentException('non-nullable esignature_required cannot be null');
        }
        $this->container['esignature_required'] = $esignature_required;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return string|null
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param string|null $extension The file extension
     *
     * @return self
     */
    public function setExtension($extension)
    {
        if (is_null($extension)) {
            throw new \InvalidArgumentException('non-nullable extension cannot be null');
        }
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size The file size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets scan_info
     *
     * @return string|null
     */
    public function getScanInfo()
    {
        return $this->container['scan_info'];
    }

    /**
     * Sets scan_info
     *
     * @param string|null $scan_info The scan info
     *
     * @return self
     */
    public function setScanInfo($scan_info)
    {
        if (is_null($scan_info)) {
            array_push($this->openAPINullablesSetToNull, 'scan_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('scan_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['scan_info'] = $scan_info;

        return $this;
    }

    /**
     * Gets esignature_workflow_id
     *
     * @return int|null
     */
    public function getEsignatureWorkflowId()
    {
        return $this->container['esignature_workflow_id'];
    }

    /**
     * Sets esignature_workflow_id
     *
     * @param int|null $esignature_workflow_id The e-signature workflow ID
     *
     * @return self
     */
    public function setEsignatureWorkflowId($esignature_workflow_id)
    {
        if (is_null($esignature_workflow_id)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_workflow_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_workflow_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_workflow_id'] = $esignature_workflow_id;

        return $this;
    }

    /**
     * Gets esignature_workflow_instance_id
     *
     * @return int|null
     */
    public function getEsignatureWorkflowInstanceId()
    {
        return $this->container['esignature_workflow_instance_id'];
    }

    /**
     * Sets esignature_workflow_instance_id
     *
     * @param int|null $esignature_workflow_instance_id The e-signature workflow instance ID
     *
     * @return self
     */
    public function setEsignatureWorkflowInstanceId($esignature_workflow_instance_id)
    {
        if (is_null($esignature_workflow_instance_id)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_workflow_instance_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_workflow_instance_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_workflow_instance_id'] = $esignature_workflow_instance_id;

        return $this;
    }

    /**
     * Gets esignature_instance_id
     *
     * @return int|null
     */
    public function getEsignatureInstanceId()
    {
        return $this->container['esignature_instance_id'];
    }

    /**
     * Sets esignature_instance_id
     *
     * @param int|null $esignature_instance_id The e-signature instance ID
     *
     * @return self
     */
    public function setEsignatureInstanceId($esignature_instance_id)
    {
        if (is_null($esignature_instance_id)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_instance_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_instance_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_instance_id'] = $esignature_instance_id;

        return $this;
    }

    /**
     * Gets current_signer_user_id
     *
     * @return int|null
     */
    public function getCurrentSignerUserId()
    {
        return $this->container['current_signer_user_id'];
    }

    /**
     * Sets current_signer_user_id
     *
     * @param int|null $current_signer_user_id The current signer user ID
     *
     * @return self
     */
    public function setCurrentSignerUserId($current_signer_user_id)
    {
        if (is_null($current_signer_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'current_signer_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_signer_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['current_signer_user_id'] = $current_signer_user_id;

        return $this;
    }

    /**
     * Gets esignature_template_id
     *
     * @return int|null
     */
    public function getEsignatureTemplateId()
    {
        return $this->container['esignature_template_id'];
    }

    /**
     * Sets esignature_template_id
     *
     * @param int|null $esignature_template_id The e-signature template ID
     *
     * @return self
     */
    public function setEsignatureTemplateId($esignature_template_id)
    {
        if (is_null($esignature_template_id)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_template_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_template_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_template_id'] = $esignature_template_id;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool|null
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool|null $can_delete Whether the file can be deleted
     *
     * @return self
     */
    public function setCanDelete($can_delete)
    {
        if (is_null($can_delete)) {
            throw new \InvalidArgumentException('non-nullable can_delete cannot be null');
        }
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets mime_type
     *
     * @return string|null
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string|null $mime_type The MIME type of the file
     *
     * @return self
     */
    public function setMimeType($mime_type)
    {
        if (is_null($mime_type)) {
            array_push($this->openAPINullablesSetToNull, 'mime_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mime_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets esignature_status
     *
     * @return string|null
     */
    public function getEsignatureStatus()
    {
        return $this->container['esignature_status'];
    }

    /**
     * Sets esignature_status
     *
     * @param string|null $esignature_status The e-signature status
     *
     * @return self
     */
    public function setEsignatureStatus($esignature_status)
    {
        if (is_null($esignature_status)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_status'] = $esignature_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


