<?php
/**
 * EmployeeTaskDataObject
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeTaskDataObject Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeTaskDataObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeTaskDataObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'task_list_id' => 'int',
        'employee_task_list_id' => 'int',
        'employee_new_hire_packet_id' => 'int',
        'employee_id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'category' => '\MySdk\Model\TaskCategoryDataObject',
        'assigned_user_id' => 'int',
        'assigned_by_user_id' => 'int',
        'sort_order' => 'int',
        'nhp_sort_order' => 'int',
        'can_complete' => 'bool',
        'completed' => 'bool',
        'completed_date_time' => '\DateTime',
        'completed_user_id' => 'int',
        'due_date' => '\DateTime',
        'applicable' => 'bool',
        'can_delete' => 'bool',
        'created' => '\DateTime',
        'original_item_id' => 'int',
        'archived' => 'bool',
        'allow_employee_uploads' => 'string',
        'notification_delay_relation' => 'string',
        'notification_delay_days' => 'int',
        'notification_scheduled_datetime' => '\DateTime',
        'notification_sent_datetime' => '\DateTime',
        'file_ids' => 'int[]',
        'files' => '\MySdk\Model\EmployeeTaskFileDataObject[]',
        'employee_upload_file_ids' => 'int[]',
        'workflow_instance_id' => 'int',
        'esignature_instance_id' => 'int',
        'type' => 'string',
        'comments' => '\MySdk\Model\TaskCommentSchema[]',
        'is_quick_books_integration' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'task_list_id' => null,
        'employee_task_list_id' => null,
        'employee_new_hire_packet_id' => null,
        'employee_id' => null,
        'name' => null,
        'description' => null,
        'category' => null,
        'assigned_user_id' => null,
        'assigned_by_user_id' => null,
        'sort_order' => null,
        'nhp_sort_order' => null,
        'can_complete' => null,
        'completed' => null,
        'completed_date_time' => 'date-time',
        'completed_user_id' => null,
        'due_date' => 'date',
        'applicable' => null,
        'can_delete' => null,
        'created' => 'date-time',
        'original_item_id' => null,
        'archived' => null,
        'allow_employee_uploads' => null,
        'notification_delay_relation' => null,
        'notification_delay_days' => null,
        'notification_scheduled_datetime' => 'date-time',
        'notification_sent_datetime' => 'date-time',
        'file_ids' => null,
        'files' => null,
        'employee_upload_file_ids' => null,
        'workflow_instance_id' => null,
        'esignature_instance_id' => null,
        'type' => null,
        'comments' => null,
        'is_quick_books_integration' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'task_list_id' => false,
        'employee_task_list_id' => false,
        'employee_new_hire_packet_id' => false,
        'employee_id' => true,
        'name' => false,
        'description' => true,
        'category' => true,
        'assigned_user_id' => true,
        'assigned_by_user_id' => true,
        'sort_order' => false,
        'nhp_sort_order' => true,
        'can_complete' => false,
        'completed' => false,
        'completed_date_time' => true,
        'completed_user_id' => true,
        'due_date' => true,
        'applicable' => false,
        'can_delete' => false,
        'created' => false,
        'original_item_id' => true,
        'archived' => false,
        'allow_employee_uploads' => false,
        'notification_delay_relation' => true,
        'notification_delay_days' => true,
        'notification_scheduled_datetime' => true,
        'notification_sent_datetime' => true,
        'file_ids' => false,
        'files' => false,
        'employee_upload_file_ids' => false,
        'workflow_instance_id' => true,
        'esignature_instance_id' => true,
        'type' => true,
        'comments' => false,
        'is_quick_books_integration' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_list_id' => 'taskListId',
        'employee_task_list_id' => 'employeeTaskListId',
        'employee_new_hire_packet_id' => 'employeeNewHirePacketId',
        'employee_id' => 'employeeId',
        'name' => 'name',
        'description' => 'description',
        'category' => 'category',
        'assigned_user_id' => 'assignedUserId',
        'assigned_by_user_id' => 'assignedByUserId',
        'sort_order' => 'sortOrder',
        'nhp_sort_order' => 'nhpSortOrder',
        'can_complete' => 'canComplete',
        'completed' => 'completed',
        'completed_date_time' => 'completedDateTime',
        'completed_user_id' => 'completedUserId',
        'due_date' => 'dueDate',
        'applicable' => 'applicable',
        'can_delete' => 'canDelete',
        'created' => 'created',
        'original_item_id' => 'originalItemId',
        'archived' => 'archived',
        'allow_employee_uploads' => 'allowEmployeeUploads',
        'notification_delay_relation' => 'notificationDelayRelation',
        'notification_delay_days' => 'notificationDelayDays',
        'notification_scheduled_datetime' => 'notificationScheduledDatetime',
        'notification_sent_datetime' => 'notificationSentDatetime',
        'file_ids' => 'fileIds',
        'files' => 'files',
        'employee_upload_file_ids' => 'employeeUploadFileIds',
        'workflow_instance_id' => 'workflowInstanceId',
        'esignature_instance_id' => 'esignatureInstanceId',
        'type' => 'type',
        'comments' => 'comments',
        'is_quick_books_integration' => 'isQuickBooksIntegration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_list_id' => 'setTaskListId',
        'employee_task_list_id' => 'setEmployeeTaskListId',
        'employee_new_hire_packet_id' => 'setEmployeeNewHirePacketId',
        'employee_id' => 'setEmployeeId',
        'name' => 'setName',
        'description' => 'setDescription',
        'category' => 'setCategory',
        'assigned_user_id' => 'setAssignedUserId',
        'assigned_by_user_id' => 'setAssignedByUserId',
        'sort_order' => 'setSortOrder',
        'nhp_sort_order' => 'setNhpSortOrder',
        'can_complete' => 'setCanComplete',
        'completed' => 'setCompleted',
        'completed_date_time' => 'setCompletedDateTime',
        'completed_user_id' => 'setCompletedUserId',
        'due_date' => 'setDueDate',
        'applicable' => 'setApplicable',
        'can_delete' => 'setCanDelete',
        'created' => 'setCreated',
        'original_item_id' => 'setOriginalItemId',
        'archived' => 'setArchived',
        'allow_employee_uploads' => 'setAllowEmployeeUploads',
        'notification_delay_relation' => 'setNotificationDelayRelation',
        'notification_delay_days' => 'setNotificationDelayDays',
        'notification_scheduled_datetime' => 'setNotificationScheduledDatetime',
        'notification_sent_datetime' => 'setNotificationSentDatetime',
        'file_ids' => 'setFileIds',
        'files' => 'setFiles',
        'employee_upload_file_ids' => 'setEmployeeUploadFileIds',
        'workflow_instance_id' => 'setWorkflowInstanceId',
        'esignature_instance_id' => 'setEsignatureInstanceId',
        'type' => 'setType',
        'comments' => 'setComments',
        'is_quick_books_integration' => 'setIsQuickBooksIntegration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_list_id' => 'getTaskListId',
        'employee_task_list_id' => 'getEmployeeTaskListId',
        'employee_new_hire_packet_id' => 'getEmployeeNewHirePacketId',
        'employee_id' => 'getEmployeeId',
        'name' => 'getName',
        'description' => 'getDescription',
        'category' => 'getCategory',
        'assigned_user_id' => 'getAssignedUserId',
        'assigned_by_user_id' => 'getAssignedByUserId',
        'sort_order' => 'getSortOrder',
        'nhp_sort_order' => 'getNhpSortOrder',
        'can_complete' => 'getCanComplete',
        'completed' => 'getCompleted',
        'completed_date_time' => 'getCompletedDateTime',
        'completed_user_id' => 'getCompletedUserId',
        'due_date' => 'getDueDate',
        'applicable' => 'getApplicable',
        'can_delete' => 'getCanDelete',
        'created' => 'getCreated',
        'original_item_id' => 'getOriginalItemId',
        'archived' => 'getArchived',
        'allow_employee_uploads' => 'getAllowEmployeeUploads',
        'notification_delay_relation' => 'getNotificationDelayRelation',
        'notification_delay_days' => 'getNotificationDelayDays',
        'notification_scheduled_datetime' => 'getNotificationScheduledDatetime',
        'notification_sent_datetime' => 'getNotificationSentDatetime',
        'file_ids' => 'getFileIds',
        'files' => 'getFiles',
        'employee_upload_file_ids' => 'getEmployeeUploadFileIds',
        'workflow_instance_id' => 'getWorkflowInstanceId',
        'esignature_instance_id' => 'getEsignatureInstanceId',
        'type' => 'getType',
        'comments' => 'getComments',
        'is_quick_books_integration' => 'getIsQuickBooksIntegration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ALLOW_EMPLOYEE_UPLOADS_YES = 'yes';
    public const ALLOW_EMPLOYEE_UPLOADS_NO = 'no';
    public const TYPE_REGULAR = 'regular';
    public const TYPE_FILE_UPLOAD = 'file_upload';
    public const TYPE_ESIGNATURE = 'esignature';
    public const TYPE_QUICKBOOKS_PAYROLL = 'quickbooks_payroll';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAllowEmployeeUploadsAllowableValues()
    {
        return [
            self::ALLOW_EMPLOYEE_UPLOADS_YES,
            self::ALLOW_EMPLOYEE_UPLOADS_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_REGULAR,
            self::TYPE_FILE_UPLOAD,
            self::TYPE_ESIGNATURE,
            self::TYPE_QUICKBOOKS_PAYROLL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('task_list_id', $data ?? [], null);
        $this->setIfExists('employee_task_list_id', $data ?? [], null);
        $this->setIfExists('employee_new_hire_packet_id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('assigned_user_id', $data ?? [], null);
        $this->setIfExists('assigned_by_user_id', $data ?? [], null);
        $this->setIfExists('sort_order', $data ?? [], null);
        $this->setIfExists('nhp_sort_order', $data ?? [], null);
        $this->setIfExists('can_complete', $data ?? [], false);
        $this->setIfExists('completed', $data ?? [], false);
        $this->setIfExists('completed_date_time', $data ?? [], null);
        $this->setIfExists('completed_user_id', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('applicable', $data ?? [], true);
        $this->setIfExists('can_delete', $data ?? [], false);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('original_item_id', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], false);
        $this->setIfExists('allow_employee_uploads', $data ?? [], null);
        $this->setIfExists('notification_delay_relation', $data ?? [], null);
        $this->setIfExists('notification_delay_days', $data ?? [], null);
        $this->setIfExists('notification_scheduled_datetime', $data ?? [], null);
        $this->setIfExists('notification_sent_datetime', $data ?? [], null);
        $this->setIfExists('file_ids', $data ?? [], null);
        $this->setIfExists('files', $data ?? [], null);
        $this->setIfExists('employee_upload_file_ids', $data ?? [], null);
        $this->setIfExists('workflow_instance_id', $data ?? [], null);
        $this->setIfExists('esignature_instance_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('is_quick_books_integration', $data ?? [], 0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAllowEmployeeUploadsAllowableValues();
        if (!is_null($this->container['allow_employee_uploads']) && !in_array($this->container['allow_employee_uploads'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'allow_employee_uploads', must be one of '%s'",
                $this->container['allow_employee_uploads'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets task_list_id
     *
     * @return int|null
     */
    public function getTaskListId()
    {
        return $this->container['task_list_id'];
    }

    /**
     * Sets task_list_id
     *
     * @param int|null $task_list_id The ID of the task list
     *
     * @return self
     */
    public function setTaskListId($task_list_id)
    {
        if (is_null($task_list_id)) {
            throw new \InvalidArgumentException('non-nullable task_list_id cannot be null');
        }
        $this->container['task_list_id'] = $task_list_id;

        return $this;
    }

    /**
     * Gets employee_task_list_id
     *
     * @return int|null
     */
    public function getEmployeeTaskListId()
    {
        return $this->container['employee_task_list_id'];
    }

    /**
     * Sets employee_task_list_id
     *
     * @param int|null $employee_task_list_id The ID of the employee task list item
     *
     * @return self
     */
    public function setEmployeeTaskListId($employee_task_list_id)
    {
        if (is_null($employee_task_list_id)) {
            throw new \InvalidArgumentException('non-nullable employee_task_list_id cannot be null');
        }
        $this->container['employee_task_list_id'] = $employee_task_list_id;

        return $this;
    }

    /**
     * Gets employee_new_hire_packet_id
     *
     * @return int|null
     */
    public function getEmployeeNewHirePacketId()
    {
        return $this->container['employee_new_hire_packet_id'];
    }

    /**
     * Sets employee_new_hire_packet_id
     *
     * @param int|null $employee_new_hire_packet_id The ID of the employee new hire packet
     *
     * @return self
     */
    public function setEmployeeNewHirePacketId($employee_new_hire_packet_id)
    {
        if (is_null($employee_new_hire_packet_id)) {
            throw new \InvalidArgumentException('non-nullable employee_new_hire_packet_id cannot be null');
        }
        $this->container['employee_new_hire_packet_id'] = $employee_new_hire_packet_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id The ID of the employee
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            array_push($this->openAPINullablesSetToNull, 'employee_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('employee_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the task
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of the task
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \MySdk\Model\TaskCategoryDataObject|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \MySdk\Model\TaskCategoryDataObject|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            array_push($this->openAPINullablesSetToNull, 'category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets assigned_user_id
     *
     * @return int|null
     */
    public function getAssignedUserId()
    {
        return $this->container['assigned_user_id'];
    }

    /**
     * Sets assigned_user_id
     *
     * @param int|null $assigned_user_id The ID of the assigned user
     *
     * @return self
     */
    public function setAssignedUserId($assigned_user_id)
    {
        if (is_null($assigned_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'assigned_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assigned_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assigned_user_id'] = $assigned_user_id;

        return $this;
    }

    /**
     * Gets assigned_by_user_id
     *
     * @return int|null
     */
    public function getAssignedByUserId()
    {
        return $this->container['assigned_by_user_id'];
    }

    /**
     * Sets assigned_by_user_id
     *
     * @param int|null $assigned_by_user_id The ID of the assigned by user
     *
     * @return self
     */
    public function setAssignedByUserId($assigned_by_user_id)
    {
        if (is_null($assigned_by_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'assigned_by_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('assigned_by_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['assigned_by_user_id'] = $assigned_by_user_id;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int|null $sort_order The sort order of the task
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        if (is_null($sort_order)) {
            throw new \InvalidArgumentException('non-nullable sort_order cannot be null');
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets nhp_sort_order
     *
     * @return int|null
     */
    public function getNhpSortOrder()
    {
        return $this->container['nhp_sort_order'];
    }

    /**
     * Sets nhp_sort_order
     *
     * @param int|null $nhp_sort_order The NHP sort order of the task
     *
     * @return self
     */
    public function setNhpSortOrder($nhp_sort_order)
    {
        if (is_null($nhp_sort_order)) {
            array_push($this->openAPINullablesSetToNull, 'nhp_sort_order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nhp_sort_order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['nhp_sort_order'] = $nhp_sort_order;

        return $this;
    }

    /**
     * Gets can_complete
     *
     * @return bool|null
     */
    public function getCanComplete()
    {
        return $this->container['can_complete'];
    }

    /**
     * Sets can_complete
     *
     * @param bool|null $can_complete Whether the task can be completed
     *
     * @return self
     */
    public function setCanComplete($can_complete)
    {
        if (is_null($can_complete)) {
            throw new \InvalidArgumentException('non-nullable can_complete cannot be null');
        }
        $this->container['can_complete'] = $can_complete;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool|null
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool|null $completed Whether the task is completed
     *
     * @return self
     */
    public function setCompleted($completed)
    {
        if (is_null($completed)) {
            throw new \InvalidArgumentException('non-nullable completed cannot be null');
        }
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets completed_date_time
     *
     * @return \DateTime|null
     */
    public function getCompletedDateTime()
    {
        return $this->container['completed_date_time'];
    }

    /**
     * Sets completed_date_time
     *
     * @param \DateTime|null $completed_date_time The completed date of the task
     *
     * @return self
     */
    public function setCompletedDateTime($completed_date_time)
    {
        if (is_null($completed_date_time)) {
            array_push($this->openAPINullablesSetToNull, 'completed_date_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completed_date_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completed_date_time'] = $completed_date_time;

        return $this;
    }

    /**
     * Gets completed_user_id
     *
     * @return int|null
     */
    public function getCompletedUserId()
    {
        return $this->container['completed_user_id'];
    }

    /**
     * Sets completed_user_id
     *
     * @param int|null $completed_user_id The ID of the completed user
     *
     * @return self
     */
    public function setCompletedUserId($completed_user_id)
    {
        if (is_null($completed_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'completed_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('completed_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['completed_user_id'] = $completed_user_id;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date The due date of the task
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            array_push($this->openAPINullablesSetToNull, 'due_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('due_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets applicable
     *
     * @return bool|null
     */
    public function getApplicable()
    {
        return $this->container['applicable'];
    }

    /**
     * Sets applicable
     *
     * @param bool|null $applicable Whether the task is applicable
     *
     * @return self
     */
    public function setApplicable($applicable)
    {
        if (is_null($applicable)) {
            throw new \InvalidArgumentException('non-nullable applicable cannot be null');
        }
        $this->container['applicable'] = $applicable;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool|null
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool|null $can_delete Whether the task can be deleted
     *
     * @return self
     */
    public function setCanDelete($can_delete)
    {
        if (is_null($can_delete)) {
            throw new \InvalidArgumentException('non-nullable can_delete cannot be null');
        }
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created The creation date of the task
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets original_item_id
     *
     * @return int|null
     */
    public function getOriginalItemId()
    {
        return $this->container['original_item_id'];
    }

    /**
     * Sets original_item_id
     *
     * @param int|null $original_item_id The original item ID of the task
     *
     * @return self
     */
    public function setOriginalItemId($original_item_id)
    {
        if (is_null($original_item_id)) {
            array_push($this->openAPINullablesSetToNull, 'original_item_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('original_item_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['original_item_id'] = $original_item_id;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived Whether the task is archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets allow_employee_uploads
     *
     * @return string|null
     */
    public function getAllowEmployeeUploads()
    {
        return $this->container['allow_employee_uploads'];
    }

    /**
     * Sets allow_employee_uploads
     *
     * @param string|null $allow_employee_uploads Whether employee uploads are allowed
     *
     * @return self
     */
    public function setAllowEmployeeUploads($allow_employee_uploads)
    {
        if (is_null($allow_employee_uploads)) {
            throw new \InvalidArgumentException('non-nullable allow_employee_uploads cannot be null');
        }
        $allowedValues = $this->getAllowEmployeeUploadsAllowableValues();
        if (!in_array($allow_employee_uploads, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'allow_employee_uploads', must be one of '%s'",
                    $allow_employee_uploads,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['allow_employee_uploads'] = $allow_employee_uploads;

        return $this;
    }

    /**
     * Gets notification_delay_relation
     *
     * @return string|null
     */
    public function getNotificationDelayRelation()
    {
        return $this->container['notification_delay_relation'];
    }

    /**
     * Sets notification_delay_relation
     *
     * @param string|null $notification_delay_relation The notification delay relation
     *
     * @return self
     */
    public function setNotificationDelayRelation($notification_delay_relation)
    {
        if (is_null($notification_delay_relation)) {
            array_push($this->openAPINullablesSetToNull, 'notification_delay_relation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notification_delay_relation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notification_delay_relation'] = $notification_delay_relation;

        return $this;
    }

    /**
     * Gets notification_delay_days
     *
     * @return int|null
     */
    public function getNotificationDelayDays()
    {
        return $this->container['notification_delay_days'];
    }

    /**
     * Sets notification_delay_days
     *
     * @param int|null $notification_delay_days The notification delay days
     *
     * @return self
     */
    public function setNotificationDelayDays($notification_delay_days)
    {
        if (is_null($notification_delay_days)) {
            array_push($this->openAPINullablesSetToNull, 'notification_delay_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notification_delay_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notification_delay_days'] = $notification_delay_days;

        return $this;
    }

    /**
     * Gets notification_scheduled_datetime
     *
     * @return \DateTime|null
     */
    public function getNotificationScheduledDatetime()
    {
        return $this->container['notification_scheduled_datetime'];
    }

    /**
     * Sets notification_scheduled_datetime
     *
     * @param \DateTime|null $notification_scheduled_datetime The notification scheduled datetime
     *
     * @return self
     */
    public function setNotificationScheduledDatetime($notification_scheduled_datetime)
    {
        if (is_null($notification_scheduled_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'notification_scheduled_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notification_scheduled_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notification_scheduled_datetime'] = $notification_scheduled_datetime;

        return $this;
    }

    /**
     * Gets notification_sent_datetime
     *
     * @return \DateTime|null
     */
    public function getNotificationSentDatetime()
    {
        return $this->container['notification_sent_datetime'];
    }

    /**
     * Sets notification_sent_datetime
     *
     * @param \DateTime|null $notification_sent_datetime The notification sent datetime
     *
     * @return self
     */
    public function setNotificationSentDatetime($notification_sent_datetime)
    {
        if (is_null($notification_sent_datetime)) {
            array_push($this->openAPINullablesSetToNull, 'notification_sent_datetime');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notification_sent_datetime', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notification_sent_datetime'] = $notification_sent_datetime;

        return $this;
    }

    /**
     * Gets file_ids
     *
     * @return int[]|null
     */
    public function getFileIds()
    {
        return $this->container['file_ids'];
    }

    /**
     * Sets file_ids
     *
     * @param int[]|null $file_ids The file IDs of the task
     *
     * @return self
     */
    public function setFileIds($file_ids)
    {
        if (is_null($file_ids)) {
            throw new \InvalidArgumentException('non-nullable file_ids cannot be null');
        }
        $this->container['file_ids'] = $file_ids;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \MySdk\Model\EmployeeTaskFileDataObject[]|null
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \MySdk\Model\EmployeeTaskFileDataObject[]|null $files The files of the task
     *
     * @return self
     */
    public function setFiles($files)
    {
        if (is_null($files)) {
            throw new \InvalidArgumentException('non-nullable files cannot be null');
        }
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets employee_upload_file_ids
     *
     * @return int[]|null
     */
    public function getEmployeeUploadFileIds()
    {
        return $this->container['employee_upload_file_ids'];
    }

    /**
     * Sets employee_upload_file_ids
     *
     * @param int[]|null $employee_upload_file_ids The employee upload file IDs of the task
     *
     * @return self
     */
    public function setEmployeeUploadFileIds($employee_upload_file_ids)
    {
        if (is_null($employee_upload_file_ids)) {
            throw new \InvalidArgumentException('non-nullable employee_upload_file_ids cannot be null');
        }
        $this->container['employee_upload_file_ids'] = $employee_upload_file_ids;

        return $this;
    }

    /**
     * Gets workflow_instance_id
     *
     * @return int|null
     */
    public function getWorkflowInstanceId()
    {
        return $this->container['workflow_instance_id'];
    }

    /**
     * Sets workflow_instance_id
     *
     * @param int|null $workflow_instance_id The workflow instance ID of the task
     *
     * @return self
     */
    public function setWorkflowInstanceId($workflow_instance_id)
    {
        if (is_null($workflow_instance_id)) {
            array_push($this->openAPINullablesSetToNull, 'workflow_instance_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('workflow_instance_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['workflow_instance_id'] = $workflow_instance_id;

        return $this;
    }

    /**
     * Gets esignature_instance_id
     *
     * @return int|null
     */
    public function getEsignatureInstanceId()
    {
        return $this->container['esignature_instance_id'];
    }

    /**
     * Sets esignature_instance_id
     *
     * @param int|null $esignature_instance_id The e-signature instance ID of the task
     *
     * @return self
     */
    public function setEsignatureInstanceId($esignature_instance_id)
    {
        if (is_null($esignature_instance_id)) {
            array_push($this->openAPINullablesSetToNull, 'esignature_instance_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('esignature_instance_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['esignature_instance_id'] = $esignature_instance_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of the task
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \MySdk\Model\TaskCommentSchema[]|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \MySdk\Model\TaskCommentSchema[]|null $comments The comments of the task
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets is_quick_books_integration
     *
     * @return int|null
     */
    public function getIsQuickBooksIntegration()
    {
        return $this->container['is_quick_books_integration'];
    }

    /**
     * Sets is_quick_books_integration
     *
     * @param int|null $is_quick_books_integration Whether the task is a QuickBooks integration
     *
     * @return self
     */
    public function setIsQuickBooksIntegration($is_quick_books_integration)
    {
        if (is_null($is_quick_books_integration)) {
            throw new \InvalidArgumentException('non-nullable is_quick_books_integration cannot be null');
        }
        $this->container['is_quick_books_integration'] = $is_quick_books_integration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


