<?php
/**
 * 5e1c5b4ef12e61d1bc975e8b4e00c38d200Response
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * 5e1c5b4ef12e61d1bc975e8b4e00c38d200Response Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class 5e1c5b4ef12e61d1bc975e8b4e00c38d200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_5e1c5b4ef12e61d1bc975e8b4e00c38d_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'time_tracking_id' => 'string',
        'employee_id' => 'string',
        'division_id' => 'string',
        'department_id' => 'string',
        'job_title_id' => 'string',
        'pay_code' => 'string',
        'date_hours_worked' => '\DateTime',
        'type' => 'string',
        'pay_rate' => 'float',
        'rate_type' => 'string',
        'hours_worked' => 'float',
        'adjusted_hours' => 'float',
        'date_adjusted' => '\DateTime',
        'job_code' => 'string',
        'job_data' => 'string',
        'project_id' => 'string',
        'task_id' => 'string',
        'shift_differential_id' => 'string',
        'holiday_id' => 'string',
        'project' => 'string',
        'shift_differential' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'time_tracking_id' => null,
        'employee_id' => null,
        'division_id' => null,
        'department_id' => null,
        'job_title_id' => null,
        'pay_code' => null,
        'date_hours_worked' => 'date',
        'type' => null,
        'pay_rate' => 'decimal',
        'rate_type' => null,
        'hours_worked' => 'decimal',
        'adjusted_hours' => 'decimal',
        'date_adjusted' => 'date-time',
        'job_code' => null,
        'job_data' => null,
        'project_id' => null,
        'task_id' => null,
        'shift_differential_id' => null,
        'holiday_id' => null,
        'project' => null,
        'shift_differential' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'time_tracking_id' => false,
        'employee_id' => false,
        'division_id' => true,
        'department_id' => true,
        'job_title_id' => true,
        'pay_code' => true,
        'date_hours_worked' => false,
        'type' => false,
        'pay_rate' => false,
        'rate_type' => false,
        'hours_worked' => false,
        'adjusted_hours' => false,
        'date_adjusted' => false,
        'job_code' => true,
        'job_data' => true,
        'project_id' => true,
        'task_id' => true,
        'shift_differential_id' => true,
        'holiday_id' => true,
        'project' => true,
        'shift_differential' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time_tracking_id' => 'timeTrackingId',
        'employee_id' => 'employeeId',
        'division_id' => 'divisionId',
        'department_id' => 'departmentId',
        'job_title_id' => 'jobTitleId',
        'pay_code' => 'payCode',
        'date_hours_worked' => 'dateHoursWorked',
        'type' => 'type',
        'pay_rate' => 'payRate',
        'rate_type' => 'rateType',
        'hours_worked' => 'hoursWorked',
        'adjusted_hours' => 'adjustedHours',
        'date_adjusted' => 'dateAdjusted',
        'job_code' => 'jobCode',
        'job_data' => 'jobData',
        'project_id' => 'projectId',
        'task_id' => 'taskId',
        'shift_differential_id' => 'shiftDifferentialId',
        'holiday_id' => 'holidayId',
        'project' => 'project',
        'shift_differential' => 'shiftDifferential'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time_tracking_id' => 'setTimeTrackingId',
        'employee_id' => 'setEmployeeId',
        'division_id' => 'setDivisionId',
        'department_id' => 'setDepartmentId',
        'job_title_id' => 'setJobTitleId',
        'pay_code' => 'setPayCode',
        'date_hours_worked' => 'setDateHoursWorked',
        'type' => 'setType',
        'pay_rate' => 'setPayRate',
        'rate_type' => 'setRateType',
        'hours_worked' => 'setHoursWorked',
        'adjusted_hours' => 'setAdjustedHours',
        'date_adjusted' => 'setDateAdjusted',
        'job_code' => 'setJobCode',
        'job_data' => 'setJobData',
        'project_id' => 'setProjectId',
        'task_id' => 'setTaskId',
        'shift_differential_id' => 'setShiftDifferentialId',
        'holiday_id' => 'setHolidayId',
        'project' => 'setProject',
        'shift_differential' => 'setShiftDifferential'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time_tracking_id' => 'getTimeTrackingId',
        'employee_id' => 'getEmployeeId',
        'division_id' => 'getDivisionId',
        'department_id' => 'getDepartmentId',
        'job_title_id' => 'getJobTitleId',
        'pay_code' => 'getPayCode',
        'date_hours_worked' => 'getDateHoursWorked',
        'type' => 'getType',
        'pay_rate' => 'getPayRate',
        'rate_type' => 'getRateType',
        'hours_worked' => 'getHoursWorked',
        'adjusted_hours' => 'getAdjustedHours',
        'date_adjusted' => 'getDateAdjusted',
        'job_code' => 'getJobCode',
        'job_data' => 'getJobData',
        'project_id' => 'getProjectId',
        'task_id' => 'getTaskId',
        'shift_differential_id' => 'getShiftDifferentialId',
        'holiday_id' => 'getHolidayId',
        'project' => 'getProject',
        'shift_differential' => 'getShiftDifferential'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('time_tracking_id', $data ?? [], null);
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('division_id', $data ?? [], null);
        $this->setIfExists('department_id', $data ?? [], null);
        $this->setIfExists('job_title_id', $data ?? [], null);
        $this->setIfExists('pay_code', $data ?? [], null);
        $this->setIfExists('date_hours_worked', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('pay_rate', $data ?? [], null);
        $this->setIfExists('rate_type', $data ?? [], null);
        $this->setIfExists('hours_worked', $data ?? [], null);
        $this->setIfExists('adjusted_hours', $data ?? [], null);
        $this->setIfExists('date_adjusted', $data ?? [], null);
        $this->setIfExists('job_code', $data ?? [], null);
        $this->setIfExists('job_data', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('task_id', $data ?? [], null);
        $this->setIfExists('shift_differential_id', $data ?? [], null);
        $this->setIfExists('holiday_id', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('shift_differential', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time_tracking_id
     *
     * @return string|null
     */
    public function getTimeTrackingId()
    {
        return $this->container['time_tracking_id'];
    }

    /**
     * Sets time_tracking_id
     *
     * @param string|null $time_tracking_id time_tracking_id
     *
     * @return self
     */
    public function setTimeTrackingId($time_tracking_id)
    {
        if (is_null($time_tracking_id)) {
            throw new \InvalidArgumentException('non-nullable time_tracking_id cannot be null');
        }
        $this->container['time_tracking_id'] = $time_tracking_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string|null $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets division_id
     *
     * @return string|null
     */
    public function getDivisionId()
    {
        return $this->container['division_id'];
    }

    /**
     * Sets division_id
     *
     * @param string|null $division_id division_id
     *
     * @return self
     */
    public function setDivisionId($division_id)
    {
        if (is_null($division_id)) {
            array_push($this->openAPINullablesSetToNull, 'division_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('division_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['division_id'] = $division_id;

        return $this;
    }

    /**
     * Gets department_id
     *
     * @return string|null
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     *
     * @param string|null $department_id department_id
     *
     * @return self
     */
    public function setDepartmentId($department_id)
    {
        if (is_null($department_id)) {
            array_push($this->openAPINullablesSetToNull, 'department_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('department_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets job_title_id
     *
     * @return string|null
     */
    public function getJobTitleId()
    {
        return $this->container['job_title_id'];
    }

    /**
     * Sets job_title_id
     *
     * @param string|null $job_title_id job_title_id
     *
     * @return self
     */
    public function setJobTitleId($job_title_id)
    {
        if (is_null($job_title_id)) {
            array_push($this->openAPINullablesSetToNull, 'job_title_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_title_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_title_id'] = $job_title_id;

        return $this;
    }

    /**
     * Gets pay_code
     *
     * @return string|null
     */
    public function getPayCode()
    {
        return $this->container['pay_code'];
    }

    /**
     * Sets pay_code
     *
     * @param string|null $pay_code pay_code
     *
     * @return self
     */
    public function setPayCode($pay_code)
    {
        if (is_null($pay_code)) {
            array_push($this->openAPINullablesSetToNull, 'pay_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_code'] = $pay_code;

        return $this;
    }

    /**
     * Gets date_hours_worked
     *
     * @return \DateTime|null
     */
    public function getDateHoursWorked()
    {
        return $this->container['date_hours_worked'];
    }

    /**
     * Sets date_hours_worked
     *
     * @param \DateTime|null $date_hours_worked date_hours_worked
     *
     * @return self
     */
    public function setDateHoursWorked($date_hours_worked)
    {
        if (is_null($date_hours_worked)) {
            throw new \InvalidArgumentException('non-nullable date_hours_worked cannot be null');
        }
        $this->container['date_hours_worked'] = $date_hours_worked;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets pay_rate
     *
     * @return float|null
     */
    public function getPayRate()
    {
        return $this->container['pay_rate'];
    }

    /**
     * Sets pay_rate
     *
     * @param float|null $pay_rate pay_rate
     *
     * @return self
     */
    public function setPayRate($pay_rate)
    {
        if (is_null($pay_rate)) {
            throw new \InvalidArgumentException('non-nullable pay_rate cannot be null');
        }
        $this->container['pay_rate'] = $pay_rate;

        return $this;
    }

    /**
     * Gets rate_type
     *
     * @return string|null
     */
    public function getRateType()
    {
        return $this->container['rate_type'];
    }

    /**
     * Sets rate_type
     *
     * @param string|null $rate_type rate_type
     *
     * @return self
     */
    public function setRateType($rate_type)
    {
        if (is_null($rate_type)) {
            throw new \InvalidArgumentException('non-nullable rate_type cannot be null');
        }
        $this->container['rate_type'] = $rate_type;

        return $this;
    }

    /**
     * Gets hours_worked
     *
     * @return float|null
     */
    public function getHoursWorked()
    {
        return $this->container['hours_worked'];
    }

    /**
     * Sets hours_worked
     *
     * @param float|null $hours_worked hours_worked
     *
     * @return self
     */
    public function setHoursWorked($hours_worked)
    {
        if (is_null($hours_worked)) {
            throw new \InvalidArgumentException('non-nullable hours_worked cannot be null');
        }
        $this->container['hours_worked'] = $hours_worked;

        return $this;
    }

    /**
     * Gets adjusted_hours
     *
     * @return float|null
     */
    public function getAdjustedHours()
    {
        return $this->container['adjusted_hours'];
    }

    /**
     * Sets adjusted_hours
     *
     * @param float|null $adjusted_hours adjusted_hours
     *
     * @return self
     */
    public function setAdjustedHours($adjusted_hours)
    {
        if (is_null($adjusted_hours)) {
            throw new \InvalidArgumentException('non-nullable adjusted_hours cannot be null');
        }
        $this->container['adjusted_hours'] = $adjusted_hours;

        return $this;
    }

    /**
     * Gets date_adjusted
     *
     * @return \DateTime|null
     */
    public function getDateAdjusted()
    {
        return $this->container['date_adjusted'];
    }

    /**
     * Sets date_adjusted
     *
     * @param \DateTime|null $date_adjusted date_adjusted
     *
     * @return self
     */
    public function setDateAdjusted($date_adjusted)
    {
        if (is_null($date_adjusted)) {
            throw new \InvalidArgumentException('non-nullable date_adjusted cannot be null');
        }
        $this->container['date_adjusted'] = $date_adjusted;

        return $this;
    }

    /**
     * Gets job_code
     *
     * @return string|null
     */
    public function getJobCode()
    {
        return $this->container['job_code'];
    }

    /**
     * Sets job_code
     *
     * @param string|null $job_code job_code
     *
     * @return self
     */
    public function setJobCode($job_code)
    {
        if (is_null($job_code)) {
            array_push($this->openAPINullablesSetToNull, 'job_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_code'] = $job_code;

        return $this;
    }

    /**
     * Gets job_data
     *
     * @return string|null
     */
    public function getJobData()
    {
        return $this->container['job_data'];
    }

    /**
     * Sets job_data
     *
     * @param string|null $job_data job_data
     *
     * @return self
     */
    public function setJobData($job_data)
    {
        if (is_null($job_data)) {
            array_push($this->openAPINullablesSetToNull, 'job_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('job_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['job_data'] = $job_data;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            array_push($this->openAPINullablesSetToNull, 'project_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string|null
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string|null $task_id task_id
     *
     * @return self
     */
    public function setTaskId($task_id)
    {
        if (is_null($task_id)) {
            array_push($this->openAPINullablesSetToNull, 'task_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('task_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets shift_differential_id
     *
     * @return string|null
     */
    public function getShiftDifferentialId()
    {
        return $this->container['shift_differential_id'];
    }

    /**
     * Sets shift_differential_id
     *
     * @param string|null $shift_differential_id shift_differential_id
     *
     * @return self
     */
    public function setShiftDifferentialId($shift_differential_id)
    {
        if (is_null($shift_differential_id)) {
            array_push($this->openAPINullablesSetToNull, 'shift_differential_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shift_differential_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shift_differential_id'] = $shift_differential_id;

        return $this;
    }

    /**
     * Gets holiday_id
     *
     * @return string|null
     */
    public function getHolidayId()
    {
        return $this->container['holiday_id'];
    }

    /**
     * Sets holiday_id
     *
     * @param string|null $holiday_id holiday_id
     *
     * @return self
     */
    public function setHolidayId($holiday_id)
    {
        if (is_null($holiday_id)) {
            array_push($this->openAPINullablesSetToNull, 'holiday_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holiday_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['holiday_id'] = $holiday_id;

        return $this;
    }

    /**
     * Gets project
     *
     * @return string|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param string|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            array_push($this->openAPINullablesSetToNull, 'project');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets shift_differential
     *
     * @return string|null
     */
    public function getShiftDifferential()
    {
        return $this->container['shift_differential'];
    }

    /**
     * Sets shift_differential
     *
     * @param string|null $shift_differential shift_differential
     *
     * @return self
     */
    public function setShiftDifferential($shift_differential)
    {
        if (is_null($shift_differential)) {
            array_push($this->openAPINullablesSetToNull, 'shift_differential');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shift_differential', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shift_differential'] = $shift_differential;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


