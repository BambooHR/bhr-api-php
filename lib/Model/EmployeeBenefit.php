<?php
/**
 * EmployeeBenefit
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * BambooHR API
 *
 * BambooHR API documentation. https://www.bamboohr.com/api/documentation/
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MySdk\Model;

use \ArrayAccess;
use \MySdk\ObjectSerializer;

/**
 * EmployeeBenefit Class Doc Comment
 *
 * @category Class
 * @package  MySdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmployeeBenefit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmployeeBenefit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'employee_id' => 'int',
        'company_benefit_id' => 'int',
        'company_benefit_name' => 'string',
        'coverage_level' => 'string',
        'deduction_end_date' => 'string',
        'deduction_start_date' => 'string',
        'enrollment_status' => 'string',
        'effective_date' => 'string',
        'currency_code' => 'string',
        'employee_amount' => 'float',
        'employee_amount_type' => 'string',
        'employee_percent_based_on' => 'string',
        'employee_cap_amount' => 'float',
        'employee_cap_amount_type' => 'string',
        'employee_annual_max' => 'float',
        'company_amount' => 'float',
        'company_amount_type' => 'string',
        'company_percent_based_on' => 'string',
        'company_cap_amount' => 'float',
        'company_cap_amount_type' => 'string',
        'company_annual_max' => 'float',
        'benefit_plan_coverage_id' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'employee_id' => null,
        'company_benefit_id' => null,
        'company_benefit_name' => null,
        'coverage_level' => null,
        'deduction_end_date' => null,
        'deduction_start_date' => null,
        'enrollment_status' => null,
        'effective_date' => null,
        'currency_code' => null,
        'employee_amount' => null,
        'employee_amount_type' => null,
        'employee_percent_based_on' => null,
        'employee_cap_amount' => null,
        'employee_cap_amount_type' => null,
        'employee_annual_max' => null,
        'company_amount' => null,
        'company_amount_type' => null,
        'company_percent_based_on' => null,
        'company_cap_amount' => null,
        'company_cap_amount_type' => null,
        'company_annual_max' => null,
        'benefit_plan_coverage_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'employee_id' => false,
        'company_benefit_id' => false,
        'company_benefit_name' => false,
        'coverage_level' => false,
        'deduction_end_date' => false,
        'deduction_start_date' => false,
        'enrollment_status' => false,
        'effective_date' => false,
        'currency_code' => false,
        'employee_amount' => false,
        'employee_amount_type' => false,
        'employee_percent_based_on' => false,
        'employee_cap_amount' => false,
        'employee_cap_amount_type' => false,
        'employee_annual_max' => false,
        'company_amount' => false,
        'company_amount_type' => false,
        'company_percent_based_on' => false,
        'company_cap_amount' => false,
        'company_cap_amount_type' => false,
        'company_annual_max' => false,
        'benefit_plan_coverage_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_id' => 'employeeId',
        'company_benefit_id' => 'companyBenefitId',
        'company_benefit_name' => 'companyBenefitName',
        'coverage_level' => 'coverageLevel',
        'deduction_end_date' => 'deductionEndDate',
        'deduction_start_date' => 'deductionStartDate',
        'enrollment_status' => 'enrollmentStatus',
        'effective_date' => 'effectiveDate',
        'currency_code' => 'currencyCode',
        'employee_amount' => 'employeeAmount',
        'employee_amount_type' => 'employeeAmountType',
        'employee_percent_based_on' => 'employeePercentBasedOn',
        'employee_cap_amount' => 'employeeCapAmount',
        'employee_cap_amount_type' => 'employeeCapAmountType',
        'employee_annual_max' => 'employeeAnnualMax',
        'company_amount' => 'companyAmount',
        'company_amount_type' => 'companyAmountType',
        'company_percent_based_on' => 'companyPercentBasedOn',
        'company_cap_amount' => 'companyCapAmount',
        'company_cap_amount_type' => 'companyCapAmountType',
        'company_annual_max' => 'companyAnnualMax',
        'benefit_plan_coverage_id' => 'benefitPlanCoverageId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_id' => 'setEmployeeId',
        'company_benefit_id' => 'setCompanyBenefitId',
        'company_benefit_name' => 'setCompanyBenefitName',
        'coverage_level' => 'setCoverageLevel',
        'deduction_end_date' => 'setDeductionEndDate',
        'deduction_start_date' => 'setDeductionStartDate',
        'enrollment_status' => 'setEnrollmentStatus',
        'effective_date' => 'setEffectiveDate',
        'currency_code' => 'setCurrencyCode',
        'employee_amount' => 'setEmployeeAmount',
        'employee_amount_type' => 'setEmployeeAmountType',
        'employee_percent_based_on' => 'setEmployeePercentBasedOn',
        'employee_cap_amount' => 'setEmployeeCapAmount',
        'employee_cap_amount_type' => 'setEmployeeCapAmountType',
        'employee_annual_max' => 'setEmployeeAnnualMax',
        'company_amount' => 'setCompanyAmount',
        'company_amount_type' => 'setCompanyAmountType',
        'company_percent_based_on' => 'setCompanyPercentBasedOn',
        'company_cap_amount' => 'setCompanyCapAmount',
        'company_cap_amount_type' => 'setCompanyCapAmountType',
        'company_annual_max' => 'setCompanyAnnualMax',
        'benefit_plan_coverage_id' => 'setBenefitPlanCoverageId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_id' => 'getEmployeeId',
        'company_benefit_id' => 'getCompanyBenefitId',
        'company_benefit_name' => 'getCompanyBenefitName',
        'coverage_level' => 'getCoverageLevel',
        'deduction_end_date' => 'getDeductionEndDate',
        'deduction_start_date' => 'getDeductionStartDate',
        'enrollment_status' => 'getEnrollmentStatus',
        'effective_date' => 'getEffectiveDate',
        'currency_code' => 'getCurrencyCode',
        'employee_amount' => 'getEmployeeAmount',
        'employee_amount_type' => 'getEmployeeAmountType',
        'employee_percent_based_on' => 'getEmployeePercentBasedOn',
        'employee_cap_amount' => 'getEmployeeCapAmount',
        'employee_cap_amount_type' => 'getEmployeeCapAmountType',
        'employee_annual_max' => 'getEmployeeAnnualMax',
        'company_amount' => 'getCompanyAmount',
        'company_amount_type' => 'getCompanyAmountType',
        'company_percent_based_on' => 'getCompanyPercentBasedOn',
        'company_cap_amount' => 'getCompanyCapAmount',
        'company_cap_amount_type' => 'getCompanyCapAmountType',
        'company_annual_max' => 'getCompanyAnnualMax',
        'benefit_plan_coverage_id' => 'getBenefitPlanCoverageId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ENROLLMENT_STATUS_ELIGIBLE = 'Eligible';
    public const ENROLLMENT_STATUS_ENROLLED = 'Enrolled';
    public const ENROLLMENT_STATUS_WAIVED = 'Waived';
    public const ENROLLMENT_STATUS_WITHDRAWN = 'Withdrawn';
    public const ENROLLMENT_STATUS_TERMINATED = 'Terminated';
    public const ENROLLMENT_STATUS_INELIGIBLE = 'Ineligible';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEnrollmentStatusAllowableValues()
    {
        return [
            self::ENROLLMENT_STATUS_ELIGIBLE,
            self::ENROLLMENT_STATUS_ENROLLED,
            self::ENROLLMENT_STATUS_WAIVED,
            self::ENROLLMENT_STATUS_WITHDRAWN,
            self::ENROLLMENT_STATUS_TERMINATED,
            self::ENROLLMENT_STATUS_INELIGIBLE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('employee_id', $data ?? [], null);
        $this->setIfExists('company_benefit_id', $data ?? [], null);
        $this->setIfExists('company_benefit_name', $data ?? [], null);
        $this->setIfExists('coverage_level', $data ?? [], null);
        $this->setIfExists('deduction_end_date', $data ?? [], null);
        $this->setIfExists('deduction_start_date', $data ?? [], null);
        $this->setIfExists('enrollment_status', $data ?? [], null);
        $this->setIfExists('effective_date', $data ?? [], null);
        $this->setIfExists('currency_code', $data ?? [], null);
        $this->setIfExists('employee_amount', $data ?? [], null);
        $this->setIfExists('employee_amount_type', $data ?? [], null);
        $this->setIfExists('employee_percent_based_on', $data ?? [], null);
        $this->setIfExists('employee_cap_amount', $data ?? [], null);
        $this->setIfExists('employee_cap_amount_type', $data ?? [], null);
        $this->setIfExists('employee_annual_max', $data ?? [], null);
        $this->setIfExists('company_amount', $data ?? [], null);
        $this->setIfExists('company_amount_type', $data ?? [], null);
        $this->setIfExists('company_percent_based_on', $data ?? [], null);
        $this->setIfExists('company_cap_amount', $data ?? [], null);
        $this->setIfExists('company_cap_amount_type', $data ?? [], null);
        $this->setIfExists('company_annual_max', $data ?? [], null);
        $this->setIfExists('benefit_plan_coverage_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getEnrollmentStatusAllowableValues();
        if (!is_null($this->container['enrollment_status']) && !in_array($this->container['enrollment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'enrollment_status', must be one of '%s'",
                $this->container['enrollment_status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_id
     *
     * @return int|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param int|null $employee_id Employee ID
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        if (is_null($employee_id)) {
            throw new \InvalidArgumentException('non-nullable employee_id cannot be null');
        }
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets company_benefit_id
     *
     * @return int|null
     */
    public function getCompanyBenefitId()
    {
        return $this->container['company_benefit_id'];
    }

    /**
     * Sets company_benefit_id
     *
     * @param int|null $company_benefit_id Company benefit ID
     *
     * @return self
     */
    public function setCompanyBenefitId($company_benefit_id)
    {
        if (is_null($company_benefit_id)) {
            throw new \InvalidArgumentException('non-nullable company_benefit_id cannot be null');
        }
        $this->container['company_benefit_id'] = $company_benefit_id;

        return $this;
    }

    /**
     * Gets company_benefit_name
     *
     * @return string|null
     */
    public function getCompanyBenefitName()
    {
        return $this->container['company_benefit_name'];
    }

    /**
     * Sets company_benefit_name
     *
     * @param string|null $company_benefit_name Company benefit name
     *
     * @return self
     */
    public function setCompanyBenefitName($company_benefit_name)
    {
        if (is_null($company_benefit_name)) {
            throw new \InvalidArgumentException('non-nullable company_benefit_name cannot be null');
        }
        $this->container['company_benefit_name'] = $company_benefit_name;

        return $this;
    }

    /**
     * Gets coverage_level
     *
     * @return string|null
     */
    public function getCoverageLevel()
    {
        return $this->container['coverage_level'];
    }

    /**
     * Sets coverage_level
     *
     * @param string|null $coverage_level Coverage level
     *
     * @return self
     */
    public function setCoverageLevel($coverage_level)
    {
        if (is_null($coverage_level)) {
            throw new \InvalidArgumentException('non-nullable coverage_level cannot be null');
        }
        $this->container['coverage_level'] = $coverage_level;

        return $this;
    }

    /**
     * Gets deduction_end_date
     *
     * @return string|null
     */
    public function getDeductionEndDate()
    {
        return $this->container['deduction_end_date'];
    }

    /**
     * Sets deduction_end_date
     *
     * @param string|null $deduction_end_date Deduction end date
     *
     * @return self
     */
    public function setDeductionEndDate($deduction_end_date)
    {
        if (is_null($deduction_end_date)) {
            throw new \InvalidArgumentException('non-nullable deduction_end_date cannot be null');
        }
        $this->container['deduction_end_date'] = $deduction_end_date;

        return $this;
    }

    /**
     * Gets deduction_start_date
     *
     * @return string|null
     */
    public function getDeductionStartDate()
    {
        return $this->container['deduction_start_date'];
    }

    /**
     * Sets deduction_start_date
     *
     * @param string|null $deduction_start_date Deduction start date
     *
     * @return self
     */
    public function setDeductionStartDate($deduction_start_date)
    {
        if (is_null($deduction_start_date)) {
            throw new \InvalidArgumentException('non-nullable deduction_start_date cannot be null');
        }
        $this->container['deduction_start_date'] = $deduction_start_date;

        return $this;
    }

    /**
     * Gets enrollment_status
     *
     * @return string|null
     */
    public function getEnrollmentStatus()
    {
        return $this->container['enrollment_status'];
    }

    /**
     * Sets enrollment_status
     *
     * @param string|null $enrollment_status Enrollment status
     *
     * @return self
     */
    public function setEnrollmentStatus($enrollment_status)
    {
        if (is_null($enrollment_status)) {
            throw new \InvalidArgumentException('non-nullable enrollment_status cannot be null');
        }
        $allowedValues = $this->getEnrollmentStatusAllowableValues();
        if (!in_array($enrollment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'enrollment_status', must be one of '%s'",
                    $enrollment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['enrollment_status'] = $enrollment_status;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return string|null
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param string|null $effective_date Enrollment status effective date
     *
     * @return self
     */
    public function setEffectiveDate($effective_date)
    {
        if (is_null($effective_date)) {
            throw new \InvalidArgumentException('non-nullable effective_date cannot be null');
        }
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code Currency code
     *
     * @return self
     */
    public function setCurrencyCode($currency_code)
    {
        if (is_null($currency_code)) {
            throw new \InvalidArgumentException('non-nullable currency_code cannot be null');
        }
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets employee_amount
     *
     * @return float|null
     */
    public function getEmployeeAmount()
    {
        return $this->container['employee_amount'];
    }

    /**
     * Sets employee_amount
     *
     * @param float|null $employee_amount Employee amount
     *
     * @return self
     */
    public function setEmployeeAmount($employee_amount)
    {
        if (is_null($employee_amount)) {
            throw new \InvalidArgumentException('non-nullable employee_amount cannot be null');
        }
        $this->container['employee_amount'] = $employee_amount;

        return $this;
    }

    /**
     * Gets employee_amount_type
     *
     * @return string|null
     */
    public function getEmployeeAmountType()
    {
        return $this->container['employee_amount_type'];
    }

    /**
     * Sets employee_amount_type
     *
     * @param string|null $employee_amount_type Employee amount type
     *
     * @return self
     */
    public function setEmployeeAmountType($employee_amount_type)
    {
        if (is_null($employee_amount_type)) {
            throw new \InvalidArgumentException('non-nullable employee_amount_type cannot be null');
        }
        $this->container['employee_amount_type'] = $employee_amount_type;

        return $this;
    }

    /**
     * Gets employee_percent_based_on
     *
     * @return string|null
     */
    public function getEmployeePercentBasedOn()
    {
        return $this->container['employee_percent_based_on'];
    }

    /**
     * Sets employee_percent_based_on
     *
     * @param string|null $employee_percent_based_on Employee percent based on
     *
     * @return self
     */
    public function setEmployeePercentBasedOn($employee_percent_based_on)
    {
        if (is_null($employee_percent_based_on)) {
            throw new \InvalidArgumentException('non-nullable employee_percent_based_on cannot be null');
        }
        $this->container['employee_percent_based_on'] = $employee_percent_based_on;

        return $this;
    }

    /**
     * Gets employee_cap_amount
     *
     * @return float|null
     */
    public function getEmployeeCapAmount()
    {
        return $this->container['employee_cap_amount'];
    }

    /**
     * Sets employee_cap_amount
     *
     * @param float|null $employee_cap_amount Employee cap amount
     *
     * @return self
     */
    public function setEmployeeCapAmount($employee_cap_amount)
    {
        if (is_null($employee_cap_amount)) {
            throw new \InvalidArgumentException('non-nullable employee_cap_amount cannot be null');
        }
        $this->container['employee_cap_amount'] = $employee_cap_amount;

        return $this;
    }

    /**
     * Gets employee_cap_amount_type
     *
     * @return string|null
     */
    public function getEmployeeCapAmountType()
    {
        return $this->container['employee_cap_amount_type'];
    }

    /**
     * Sets employee_cap_amount_type
     *
     * @param string|null $employee_cap_amount_type Employee cap amount type
     *
     * @return self
     */
    public function setEmployeeCapAmountType($employee_cap_amount_type)
    {
        if (is_null($employee_cap_amount_type)) {
            throw new \InvalidArgumentException('non-nullable employee_cap_amount_type cannot be null');
        }
        $this->container['employee_cap_amount_type'] = $employee_cap_amount_type;

        return $this;
    }

    /**
     * Gets employee_annual_max
     *
     * @return float|null
     */
    public function getEmployeeAnnualMax()
    {
        return $this->container['employee_annual_max'];
    }

    /**
     * Sets employee_annual_max
     *
     * @param float|null $employee_annual_max Employee annual max
     *
     * @return self
     */
    public function setEmployeeAnnualMax($employee_annual_max)
    {
        if (is_null($employee_annual_max)) {
            throw new \InvalidArgumentException('non-nullable employee_annual_max cannot be null');
        }
        $this->container['employee_annual_max'] = $employee_annual_max;

        return $this;
    }

    /**
     * Gets company_amount
     *
     * @return float|null
     */
    public function getCompanyAmount()
    {
        return $this->container['company_amount'];
    }

    /**
     * Sets company_amount
     *
     * @param float|null $company_amount Company amount
     *
     * @return self
     */
    public function setCompanyAmount($company_amount)
    {
        if (is_null($company_amount)) {
            throw new \InvalidArgumentException('non-nullable company_amount cannot be null');
        }
        $this->container['company_amount'] = $company_amount;

        return $this;
    }

    /**
     * Gets company_amount_type
     *
     * @return string|null
     */
    public function getCompanyAmountType()
    {
        return $this->container['company_amount_type'];
    }

    /**
     * Sets company_amount_type
     *
     * @param string|null $company_amount_type Company amount type
     *
     * @return self
     */
    public function setCompanyAmountType($company_amount_type)
    {
        if (is_null($company_amount_type)) {
            throw new \InvalidArgumentException('non-nullable company_amount_type cannot be null');
        }
        $this->container['company_amount_type'] = $company_amount_type;

        return $this;
    }

    /**
     * Gets company_percent_based_on
     *
     * @return string|null
     */
    public function getCompanyPercentBasedOn()
    {
        return $this->container['company_percent_based_on'];
    }

    /**
     * Sets company_percent_based_on
     *
     * @param string|null $company_percent_based_on Company percent based on
     *
     * @return self
     */
    public function setCompanyPercentBasedOn($company_percent_based_on)
    {
        if (is_null($company_percent_based_on)) {
            throw new \InvalidArgumentException('non-nullable company_percent_based_on cannot be null');
        }
        $this->container['company_percent_based_on'] = $company_percent_based_on;

        return $this;
    }

    /**
     * Gets company_cap_amount
     *
     * @return float|null
     */
    public function getCompanyCapAmount()
    {
        return $this->container['company_cap_amount'];
    }

    /**
     * Sets company_cap_amount
     *
     * @param float|null $company_cap_amount Company cap amount
     *
     * @return self
     */
    public function setCompanyCapAmount($company_cap_amount)
    {
        if (is_null($company_cap_amount)) {
            throw new \InvalidArgumentException('non-nullable company_cap_amount cannot be null');
        }
        $this->container['company_cap_amount'] = $company_cap_amount;

        return $this;
    }

    /**
     * Gets company_cap_amount_type
     *
     * @return string|null
     */
    public function getCompanyCapAmountType()
    {
        return $this->container['company_cap_amount_type'];
    }

    /**
     * Sets company_cap_amount_type
     *
     * @param string|null $company_cap_amount_type Company cap amount type
     *
     * @return self
     */
    public function setCompanyCapAmountType($company_cap_amount_type)
    {
        if (is_null($company_cap_amount_type)) {
            throw new \InvalidArgumentException('non-nullable company_cap_amount_type cannot be null');
        }
        $this->container['company_cap_amount_type'] = $company_cap_amount_type;

        return $this;
    }

    /**
     * Gets company_annual_max
     *
     * @return float|null
     */
    public function getCompanyAnnualMax()
    {
        return $this->container['company_annual_max'];
    }

    /**
     * Sets company_annual_max
     *
     * @param float|null $company_annual_max Company annual max
     *
     * @return self
     */
    public function setCompanyAnnualMax($company_annual_max)
    {
        if (is_null($company_annual_max)) {
            throw new \InvalidArgumentException('non-nullable company_annual_max cannot be null');
        }
        $this->container['company_annual_max'] = $company_annual_max;

        return $this;
    }

    /**
     * Gets benefit_plan_coverage_id
     *
     * @return float|null
     */
    public function getBenefitPlanCoverageId()
    {
        return $this->container['benefit_plan_coverage_id'];
    }

    /**
     * Sets benefit_plan_coverage_id
     *
     * @param float|null $benefit_plan_coverage_id Benefit Plan Coverage ID
     *
     * @return self
     */
    public function setBenefitPlanCoverageId($benefit_plan_coverage_id)
    {
        if (is_null($benefit_plan_coverage_id)) {
            throw new \InvalidArgumentException('non-nullable benefit_plan_coverage_id cannot be null');
        }
        $this->container['benefit_plan_coverage_id'] = $benefit_plan_coverage_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


